{"result":[{"scriptId":"6","url":"node:internal/per_context/primordials","functions":[{"functionName":"SafeIterator","ranges":[{"startOffset":7909,"endOffset":7980,"count":32}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":7985,"endOffset":8034,"count":506}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8039,"endOffset":8084,"count":20}],"isBlockCoverage":true},{"functionName":"desc.value","ranges":[{"startOffset":9623,"endOffset":9690,"count":12}],"isBlockCoverage":true},{"functionName":"SafeMap","ranges":[{"startOffset":10324,"endOffset":10352,"count":16}],"isBlockCoverage":true},{"functionName":"SafeWeakMap","ranges":[{"startOffset":10495,"endOffset":10523,"count":6}],"isBlockCoverage":true},{"functionName":"SafeSet","ranges":[{"startOffset":10651,"endOffset":10679,"count":14}],"isBlockCoverage":true},{"functionName":"SafeFinalizationRegistry","ranges":[{"startOffset":11101,"endOffset":11157,"count":1}],"isBlockCoverage":true},{"functionName":"SafeWeakRef","ranges":[{"startOffset":11309,"endOffset":11347,"count":33}],"isBlockCoverage":true},{"functionName":"primordials.PromisePrototypeCatch","ranges":[{"startOffset":11581,"endOffset":11668,"count":3}],"isBlockCoverage":true}]},{"scriptId":"9","url":"node:internal/bootstrap/loaders","functions":[{"functionName":"binding","ranges":[{"startOffset":3859,"endOffset":4638,"count":1},{"startOffset":4151,"endOffset":4356,"count":0},{"startOffset":4487,"endOffset":4637,"count":0}],"isBlockCoverage":true},{"functionName":"internalBinding","ranges":[{"startOffset":5091,"endOffset":5353,"count":852},{"startOffset":5193,"endOffset":5333,"count":14}],"isBlockCoverage":true},{"functionName":"getOwn","ranges":[{"startOffset":5498,"endOffset":5652,"count":7839},{"startOffset":5634,"endOffset":5649,"count":0}],"isBlockCoverage":true},{"functionName":"canBeRequiredByUsers","ranges":[{"startOffset":7334,"endOffset":7450,"count":2776},{"startOffset":7418,"endOffset":7445,"count":211}],"isBlockCoverage":true},{"functionName":"compileForPublicLoader","ranges":[{"startOffset":7522,"endOffset":8216,"count":211},{"startOffset":7585,"endOffset":7777,"count":0},{"startOffset":7841,"endOffset":8138,"count":19},{"startOffset":8100,"endOffset":8104,"count":0}],"isBlockCoverage":true},{"functionName":"getESMFacade","ranges":[{"startOffset":8220,"endOffset":8861,"count":211},{"startOffset":8258,"endOffset":8277,"count":192},{"startOffset":8277,"endOffset":8860,"count":19}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8588,"endOffset":8701,"count":19}],"isBlockCoverage":true},{"functionName":"syncExports","ranges":[{"startOffset":9157,"endOffset":9501,"count":230},{"startOffset":9276,"endOffset":9491,"count":7839},{"startOffset":9353,"endOffset":9362,"count":0}],"isBlockCoverage":true},{"functionName":"compileForInternalLoader","ranges":[{"startOffset":9505,"endOffset":10090,"count":2012},{"startOffset":9554,"endOffset":9569,"count":91},{"startOffset":9571,"endOffset":9605,"count":1929},{"startOffset":9605,"endOffset":9744,"count":83},{"startOffset":9744,"endOffset":9779,"count":1},{"startOffset":9780,"endOffset":9801,"count":82},{"startOffset":9955,"endOffset":10089,"count":83}],"isBlockCoverage":true},{"functionName":"nativeModuleRequire","ranges":[{"startOffset":10288,"endOffset":10659,"count":1806},{"startOffset":10346,"endOffset":10377,"count":5},{"startOffset":10377,"endOffset":10561,"count":1801},{"startOffset":10561,"endOffset":10616,"count":0},{"startOffset":10616,"endOffset":10658,"count":1801}],"isBlockCoverage":true}]},{"scriptId":"10","url":"node:internal/bootstrap/node","functions":[{"functionName":"get","ranges":[{"startOffset":3516,"endOffset":3783,"count":2},{"startOffset":3644,"endOffset":3782,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4130,"endOffset":4161,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":9448,"endOffset":9610,"count":1}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":9712,"endOffset":9884,"count":1}],"isBlockCoverage":true}]},{"scriptId":"11","url":"node:internal/errors","functions":[{"functionName":"prepareStackTrace","ranges":[{"startOffset":2179,"endOffset":3667,"count":33},{"startOffset":2356,"endOffset":2472,"count":0},{"startOffset":2603,"endOffset":3099,"count":0},{"startOffset":3226,"endOffset":3248,"count":0},{"startOffset":3398,"endOffset":3472,"count":0},{"startOffset":3559,"endOffset":3588,"count":0}],"isBlockCoverage":true},{"functionName":"maybeOverridePrepareStackTrace","ranges":[{"startOffset":3709,"endOffset":4416,"count":33},{"startOffset":3978,"endOffset":4044,"count":0},{"startOffset":4325,"endOffset":4391,"count":0}],"isBlockCoverage":true},{"functionName":"isErrorStackTraceLimitWritable","ranges":[{"startOffset":5495,"endOffset":5791,"count":174},{"startOffset":5638,"endOffset":5681,"count":0},{"startOffset":5760,"endOffset":5788,"count":0}],"isBlockCoverage":true},{"functionName":"NodeError","ranges":[{"startOffset":9543,"endOffset":10470,"count":15}],"isBlockCoverage":true},{"functionName":"value","ranges":[{"startOffset":10215,"endOffset":10293,"count":0}],"isBlockCoverage":false},{"functionName":"hideStackFrames","ranges":[{"startOffset":10618,"endOffset":10866,"count":10}],"isBlockCoverage":true},{"functionName":"getMessage","ranges":[{"startOffset":11488,"endOffset":12343,"count":15},{"startOffset":11589,"endOffset":11625,"count":1},{"startOffset":11924,"endOffset":12002,"count":0},{"startOffset":12224,"endOffset":12342,"count":0}],"isBlockCoverage":true},{"functionName":"lazyUv","ranges":[{"startOffset":12361,"endOffset":12465,"count":47},{"startOffset":12399,"endOffset":12443,"count":1}],"isBlockCoverage":true},{"functionName":"uvErrmapGet","ranges":[{"startOffset":12522,"endOffset":12705,"count":47},{"startOffset":12600,"endOffset":12653,"count":1}],"isBlockCoverage":true},{"functionName":"captureLargerStackTrace","ranges":[{"startOffset":12758,"endOffset":13160,"count":58}],"isBlockCoverage":true},{"functionName":"uvException","ranges":[{"startOffset":13490,"endOffset":14731,"count":43},{"startOffset":13573,"endOffset":13591,"count":0},{"startOffset":13785,"endOffset":13854,"count":0},{"startOffset":14469,"endOffset":14591,"count":129},{"startOffset":14517,"endOffset":14535,"count":86},{"startOffset":14537,"endOffset":14560,"count":43},{"startOffset":14560,"endOffset":14591,"count":86},{"startOffset":14663,"endOffset":14689,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":46985,"endOffset":47138,"count":15}],"isBlockCoverage":true}]},{"scriptId":"12","url":"node:internal/timers","functions":[{"functionName":"","ranges":[{"startOffset":4431,"endOffset":4456,"count":1}],"isBlockCoverage":true},{"functionName":"initAsyncResource","ranges":[{"startOffset":5399,"endOffset":5677,"count":25},{"startOffset":5625,"endOffset":5675,"count":0}],"isBlockCoverage":true},{"functionName":"Timeout","ranges":[{"startOffset":5762,"endOffset":6759,"count":2},{"startOffset":5911,"endOffset":6247,"count":0},{"startOffset":6584,"endOffset":6591,"count":0}],"isBlockCoverage":true},{"functionName":"TimersList","ranges":[{"startOffset":7554,"endOffset":7854,"count":2}],"isBlockCoverage":true},{"functionName":"ImmediateList.append","ranges":[{"startOffset":8446,"endOffset":8613,"count":23},{"startOffset":8489,"endOffset":8558,"count":0}],"isBlockCoverage":true},{"functionName":"incRefCount","ranges":[{"startOffset":9131,"endOffset":9207,"count":2}],"isBlockCoverage":true},{"functionName":"decRefCount","ranges":[{"startOffset":9209,"endOffset":9286,"count":2}],"isBlockCoverage":true},{"functionName":"insert","ranges":[{"startOffset":10369,"endOffset":11020,"count":2},{"startOffset":10927,"endOffset":10989,"count":1}],"isBlockCoverage":true},{"functionName":"setPosition","ranges":[{"startOffset":12072,"endOffset":12143,"count":2}],"isBlockCoverage":true},{"functionName":"processImmediate","ranges":[{"startOffset":12457,"endOffset":14390,"count":23},{"startOffset":12536,"endOffset":12560,"count":0},{"startOffset":12997,"endOffset":13012,"count":0},{"startOffset":13329,"endOffset":13425,"count":0},{"startOffset":13987,"endOffset":14043,"count":0},{"startOffset":14145,"endOffset":14166,"count":0},{"startOffset":14317,"endOffset":14346,"count":0}],"isBlockCoverage":true},{"functionName":"Immediate","ranges":[{"startOffset":17434,"endOffset":17756,"count":23}],"isBlockCoverage":true},{"functionName":"ref","ranges":[{"startOffset":17760,"endOffset":17933,"count":23}],"isBlockCoverage":true}]},{"scriptId":"13","url":"node:internal/async_hooks","functions":[{"functionName":"newAsyncId","ranges":[{"startOffset":14494,"endOffset":14564,"count":65}],"isBlockCoverage":true},{"functionName":"getDefaultTriggerAsyncId","ranges":[{"startOffset":14939,"endOffset":15229,"count":65},{"startOffset":15195,"endOffset":15228,"count":0}],"isBlockCoverage":true},{"functionName":"defaultTriggerAsyncIdScope","ranges":[{"startOffset":15549,"endOffset":16042,"count":4},{"startOffset":15659,"endOffset":15690,"count":0}],"isBlockCoverage":true},{"functionName":"hasHooks","ranges":[{"startOffset":16044,"endOffset":16107,"count":316}],"isBlockCoverage":true},{"functionName":"enabledHooksExist","ranges":[{"startOffset":16109,"endOffset":16168,"count":62}],"isBlockCoverage":true},{"functionName":"initHooksExist","ranges":[{"startOffset":16170,"endOffset":16225,"count":65}],"isBlockCoverage":true},{"functionName":"destroyHooksExist","ranges":[{"startOffset":16286,"endOffset":16347,"count":64}],"isBlockCoverage":true},{"functionName":"emitBeforeScript","ranges":[{"startOffset":16838,"endOffset":17014,"count":63},{"startOffset":16986,"endOffset":17012,"count":0}],"isBlockCoverage":true},{"functionName":"emitAfterScript","ranges":[{"startOffset":17017,"endOffset":17137,"count":62},{"startOffset":17081,"endOffset":17106,"count":0}],"isBlockCoverage":true},{"functionName":"pushAsyncContext","ranges":[{"startOffset":17482,"endOffset":18052,"count":63},{"startOffset":17702,"endOffset":17752,"count":0}],"isBlockCoverage":true},{"functionName":"popAsyncContext","ranges":[{"startOffset":18117,"endOffset":18728,"count":62},{"startOffset":18233,"endOffset":18246,"count":0},{"startOffset":18325,"endOffset":18431,"count":0}],"isBlockCoverage":true}]},{"scriptId":"15","url":"node:internal/validators","functions":[{"functionName":"isInt32","ranges":[{"startOffset":718,"endOffset":777,"count":2379}],"isBlockCoverage":true},{"functionName":"isUint32","ranges":[{"startOffset":779,"endOffset":841,"count":2300}],"isBlockCoverage":true},{"functionName":"parseFileMode","ranges":[{"startOffset":1465,"endOffset":1783,"count":793},{"startOffset":1558,"endOffset":1718,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1828,"endOffset":2209,"count":1584},{"startOffset":1948,"endOffset":2002,"count":0},{"startOffset":2042,"endOffset":2096,"count":0},{"startOffset":2139,"endOffset":2205,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2255,"endOffset":2836,"count":2379},{"startOffset":2417,"endOffset":2715,"count":0},{"startOffset":2752,"endOffset":2832,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2880,"endOffset":3390,"count":1507},{"startOffset":2933,"endOffset":3282,"count":0},{"startOffset":3298,"endOffset":3312,"count":0},{"startOffset":3314,"endOffset":3388,"count":0}],"isBlockCoverage":true},{"functionName":"validateString","ranges":[{"startOffset":3394,"endOffset":3526,"count":33259},{"startOffset":3470,"endOffset":3524,"count":0}],"isBlockCoverage":true},{"functionName":"validateNumber","ranges":[{"startOffset":3528,"endOffset":3660,"count":794},{"startOffset":3604,"endOffset":3658,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3700,"endOffset":4033,"count":6},{"startOffset":3771,"endOffset":4031,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3844,"endOffset":3905,"count":0}],"isBlockCoverage":false},{"functionName":"validateBoolean","ranges":[{"startOffset":4037,"endOffset":4172,"count":753},{"startOffset":4115,"endOffset":4170,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4384,"endOffset":4943,"count":1182},{"startOffset":4500,"endOffset":4507,"count":1181},{"startOffset":4508,"endOffset":4528,"count":1},{"startOffset":4574,"endOffset":4581,"count":1181},{"startOffset":4582,"endOffset":4605,"count":1},{"startOffset":4646,"endOffset":4653,"count":1181},{"startOffset":4654,"endOffset":4672,"count":1},{"startOffset":4693,"endOffset":4710,"count":1181},{"startOffset":4736,"endOffset":4758,"count":1181},{"startOffset":4798,"endOffset":4868,"count":0},{"startOffset":4871,"endOffset":4939,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4985,"endOffset":5263,"count":1506},{"startOffset":5047,"endOffset":5110,"count":0},{"startOffset":5143,"endOffset":5261,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5681,"endOffset":5911,"count":792},{"startOffset":5746,"endOffset":5909,"count":0}],"isBlockCoverage":true},{"functionName":"validatePort","ranges":[{"startOffset":6393,"endOffset":6772,"count":5},{"startOffset":6488,"endOffset":6515,"count":2},{"startOffset":6552,"endOffset":6593,"count":2},{"startOffset":6672,"endOffset":6685,"count":3},{"startOffset":6688,"endOffset":6751,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6815,"endOffset":6916,"count":67},{"startOffset":6873,"endOffset":6914,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7226,"endOffset":7342,"count":967},{"startOffset":7284,"endOffset":7340,"count":0}],"isBlockCoverage":true}]},{"scriptId":"16","url":"node:internal/util","functions":[{"functionName":"toUSVString","ranges":[{"startOffset":1331,"endOffset":1643,"count":3},{"startOffset":1600,"endOffset":1642,"count":0}],"isBlockCoverage":true},{"functionName":"deprecate","ranges":[{"startOffset":2390,"endOffset":3584,"count":18},{"startOffset":2464,"endOffset":2484,"count":0},{"startOffset":2573,"endOffset":2627,"count":0},{"startOffset":2659,"endOffset":2688,"count":16},{"startOffset":3338,"endOffset":3560,"count":15}],"isBlockCoverage":true},{"functionName":"deprecated","ranges":[{"startOffset":2714,"endOffset":3196,"count":0}],"isBlockCoverage":false},{"functionName":"assertCrypto","ranges":[{"startOffset":3927,"endOffset":4001,"count":4},{"startOffset":3973,"endOffset":3999,"count":0}],"isBlockCoverage":true},{"functionName":"normalizeEncoding","ranges":[{"startOffset":4180,"endOffset":4311,"count":795},{"startOffset":4250,"endOffset":4268,"count":3},{"startOffset":4270,"endOffset":4284,"count":793},{"startOffset":4284,"endOffset":4310,"count":2}],"isBlockCoverage":true},{"functionName":"slowCases","ranges":[{"startOffset":4313,"endOffset":6064,"count":2},{"startOffset":4367,"endOffset":4611,"count":0},{"startOffset":4616,"endOffset":4746,"count":0},{"startOffset":4751,"endOffset":5155,"count":0},{"startOffset":5196,"endOffset":5212,"count":0},{"startOffset":5240,"endOffset":5259,"count":0},{"startOffset":5277,"endOffset":5369,"count":0},{"startOffset":5371,"endOffset":5515,"count":0},{"startOffset":5517,"endOffset":5546,"count":0},{"startOffset":5551,"endOffset":5697,"count":0},{"startOffset":5702,"endOffset":5849,"count":0},{"startOffset":5854,"endOffset":6008,"count":0},{"startOffset":6013,"endOffset":6058,"count":0}],"isBlockCoverage":true},{"functionName":"cachedResult","ranges":[{"startOffset":6697,"endOffset":6853,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6748,"endOffset":6850,"count":0}],"isBlockCoverage":false},{"functionName":"promisify","ranges":[{"startOffset":8827,"endOffset":10349,"count":20},{"startOffset":8947,"endOffset":9003,"count":1},{"startOffset":9090,"endOffset":9343,"count":0}],"isBlockCoverage":true},{"functionName":"fn","ranges":[{"startOffset":9543,"endOffset":10062,"count":0}],"isBlockCoverage":false},{"functionName":"spliceOne","ranges":[{"startOffset":10907,"endOffset":11034,"count":4},{"startOffset":10988,"endOffset":11018,"count":0}],"isBlockCoverage":true},{"functionName":"once","ranges":[{"startOffset":12339,"endOffset":12505,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":12396,"endOffset":12502,"count":4},{"startOffset":12432,"endOffset":12501,"count":2}],"isBlockCoverage":true}]},{"scriptId":"17","url":"node:internal/util/types","functions":[{"functionName":"isUint8Array","ranges":[{"startOffset":236,"endOffset":342,"count":2075}],"isBlockCoverage":true},{"functionName":"isBigUint64Array","ranges":[{"startOffset":1346,"endOffset":1460,"count":20}],"isBlockCoverage":true}]},{"scriptId":"18","url":"node:internal/linkedlist","functions":[{"functionName":"remove","ranges":[{"startOffset":260,"endOffset":487,"count":4}],"isBlockCoverage":true},{"functionName":"append","ranges":[{"startOffset":543,"endOffset":995,"count":2},{"startOffset":594,"endOffset":611,"count":0}],"isBlockCoverage":true},{"functionName":"isEmpty","ranges":[{"startOffset":997,"endOffset":1057,"count":2}],"isBlockCoverage":true}]},{"scriptId":"19","url":"node:internal/priority_queue","functions":[{"functionName":"insert","ranges":[{"startOffset":859,"endOffset":1044,"count":2},{"startOffset":995,"endOffset":1012,"count":0}],"isBlockCoverage":true},{"functionName":"percolateUp","ranges":[{"startOffset":1763,"endOffset":2254,"count":2},{"startOffset":1941,"endOffset":2163,"count":0}],"isBlockCoverage":true},{"functionName":"removeAt","ranges":[{"startOffset":2258,"endOffset":2591,"count":2},{"startOffset":2418,"endOffset":2432,"count":0},{"startOffset":2434,"endOffset":2587,"count":0}],"isBlockCoverage":true}]},{"scriptId":"20","url":"node:internal/util/inspect","functions":[{"functionName":"stylizeNoColor","ranges":[{"startOffset":16589,"endOffset":16635,"count":3}],"isBlockCoverage":true},{"functionName":"formatNumber","ranges":[{"startOffset":48949,"endOffset":49692,"count":3},{"startOffset":49140,"endOffset":49180,"count":0},{"startOffset":49222,"endOffset":49691,"count":0}],"isBlockCoverage":true},{"functionName":"format","ranges":[{"startOffset":67849,"endOffset":67930,"count":171}],"isBlockCoverage":true},{"functionName":"formatWithOptions","ranges":[{"startOffset":67932,"endOffset":68207,"count":13},{"startOffset":68055,"endOffset":68147,"count":0}],"isBlockCoverage":true},{"functionName":"formatNumberNoColor","ranges":[{"startOffset":68209,"endOffset":68390,"count":3}],"isBlockCoverage":true},{"functionName":"formatWithOptionsInternal","ranges":[{"startOffset":68575,"endOffset":72597,"count":184},{"startOffset":68739,"endOffset":72400,"count":179},{"startOffset":68768,"endOffset":68795,"count":171},{"startOffset":68795,"endOffset":68882,"count":8},{"startOffset":68882,"endOffset":72239,"count":211},{"startOffset":68938,"endOffset":72233,"count":15},{"startOffset":69090,"endOffset":69865,"count":12},{"startOffset":69197,"endOffset":69286,"count":0},{"startOffset":69325,"endOffset":69414,"count":0},{"startOffset":69452,"endOffset":69496,"count":0},{"startOffset":69497,"endOffset":69553,"count":0},{"startOffset":69615,"endOffset":69830,"count":0},{"startOffset":69878,"endOffset":69964,"count":0},{"startOffset":69977,"endOffset":70400,"count":3},{"startOffset":70084,"endOffset":70173,"count":0},{"startOffset":70212,"endOffset":70262,"count":0},{"startOffset":70413,"endOffset":70509,"count":0},{"startOffset":70522,"endOffset":70749,"count":0},{"startOffset":70762,"endOffset":71232,"count":0},{"startOffset":71245,"endOffset":71575,"count":0},{"startOffset":71588,"endOffset":71674,"count":0},{"startOffset":71687,"endOffset":71819,"count":0},{"startOffset":71832,"endOffset":71916,"count":0},{"startOffset":71962,"endOffset":72039,"count":11},{"startOffset":72102,"endOffset":72225,"count":0},{"startOffset":72239,"endOffset":72396,"count":8},{"startOffset":72400,"endOffset":72428,"count":13},{"startOffset":72428,"endOffset":72581,"count":0},{"startOffset":72581,"endOffset":72596,"count":13}],"isBlockCoverage":true}]},{"scriptId":"21","url":"node:internal/assert","functions":[{"functionName":"assert","ranges":[{"startOffset":157,"endOffset":307,"count":802},{"startOffset":205,"endOffset":305,"count":0}],"isBlockCoverage":true}]},{"scriptId":"22","url":"node:internal/util/debuglog","functions":[{"functionName":"initializeDebugEnv","ranges":[{"startOffset":519,"endOffset":991,"count":1},{"startOffset":610,"endOffset":947,"count":0}],"isBlockCoverage":true},{"functionName":"testEnabled","ranges":[{"startOffset":885,"endOffset":942,"count":0}],"isBlockCoverage":false},{"functionName":"testEnabled","ranges":[{"startOffset":973,"endOffset":984,"count":13}],"isBlockCoverage":true},{"functionName":"noop","ranges":[{"startOffset":1419,"endOffset":1427,"count":4872}],"isBlockCoverage":true},{"functionName":"debuglogImpl","ranges":[{"startOffset":1430,"endOffset":1995,"count":13},{"startOffset":1505,"endOffset":1967,"count":7},{"startOffset":1524,"endOffset":1920,"count":0}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":1613,"endOffset":1913,"count":0}],"isBlockCoverage":false},{"functionName":"debuglog","ranges":[{"startOffset":2215,"endOffset":3219,"count":16}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":2246,"endOffset":2342,"count":13}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":2357,"endOffset":2751,"count":13},{"startOffset":2604,"endOffset":2634,"count":8},{"startOffset":2641,"endOffset":2680,"count":3},{"startOffset":2687,"endOffset":2741,"count":2}],"isBlockCoverage":true},{"functionName":"test","ranges":[{"startOffset":2781,"endOffset":2850,"count":0}],"isBlockCoverage":false},{"functionName":"logger","ranges":[{"startOffset":2869,"endOffset":3064,"count":13},{"startOffset":2917,"endOffset":2947,"count":8},{"startOffset":2954,"endOffset":2993,"count":3},{"startOffset":3000,"endOffset":3054,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3114,"endOffset":3148,"count":0}],"isBlockCoverage":false}]},{"scriptId":"23","url":"node:events","functions":[{"functionName":"lazyEventEmitterAsyncResource","ranges":[{"startOffset":2802,"endOffset":6112,"count":9},{"startOffset":2892,"endOffset":6074,"count":1}],"isBlockCoverage":true},{"functionName":"EventEmitterReferencingAsyncResource","ranges":[{"startOffset":3346,"endOffset":3450,"count":0}],"isBlockCoverage":false},{"functionName":"get eventEmitter","ranges":[{"startOffset":3508,"endOffset":3697,"count":0}],"isBlockCoverage":false},{"functionName":"EventEmitterAsyncResource","ranges":[{"startOffset":3986,"endOffset":4510,"count":0}],"isBlockCoverage":false},{"functionName":"emit","ranges":[{"startOffset":4647,"endOffset":5017,"count":0}],"isBlockCoverage":false},{"functionName":"emitDestroy","ranges":[{"startOffset":5078,"endOffset":5266,"count":0}],"isBlockCoverage":false},{"functionName":"get asyncId","ranges":[{"startOffset":5326,"endOffset":5517,"count":0}],"isBlockCoverage":false},{"functionName":"get triggerAsyncId","ranges":[{"startOffset":5577,"endOffset":5782,"count":0}],"isBlockCoverage":false},{"functionName":"get asyncResource","ranges":[{"startOffset":5872,"endOffset":6061,"count":0}],"isBlockCoverage":false},{"functionName":"EventEmitter","ranges":[{"startOffset":6246,"endOffset":6315,"count":21}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":6679,"endOffset":6735,"count":9}],"isBlockCoverage":true},{"functionName":"checkListener","ranges":[{"startOffset":7605,"endOffset":7683,"count":195}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":7772,"endOffset":7820,"count":44}],"isBlockCoverage":true},{"functionName":"EventEmitter.init","ranges":[{"startOffset":9672,"endOffset":10269,"count":21},{"startOffset":9723,"endOffset":9783,"count":4},{"startOffset":9785,"endOffset":9856,"count":17},{"startOffset":9926,"endOffset":9945,"count":10},{"startOffset":9947,"endOffset":10080,"count":0}],"isBlockCoverage":true},{"functionName":"addCatch","ranges":[{"startOffset":10272,"endOffset":10831,"count":6},{"startOffset":10359,"endOffset":10778,"count":0},{"startOffset":10783,"endOffset":10829,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10560,"endOffset":10770,"count":0}],"isBlockCoverage":false},{"functionName":"_getMaxListeners","ranges":[{"startOffset":11844,"endOffset":11993,"count":35},{"startOffset":11962,"endOffset":11992,"count":0}],"isBlockCoverage":true},{"functionName":"emit","ranges":[{"startOffset":13868,"endOffset":16143,"count":86},{"startOffset":13995,"endOffset":14152,"count":82},{"startOffset":14013,"endOffset":14051,"count":0},{"startOffset":14059,"endOffset":14093,"count":0},{"startOffset":14117,"endOffset":14146,"count":0},{"startOffset":14152,"endOffset":14189,"count":4},{"startOffset":14189,"endOffset":14261,"count":82},{"startOffset":14261,"endOffset":15201,"count":0},{"startOffset":15201,"endOffset":15269,"count":82},{"startOffset":15269,"endOffset":15282,"count":35},{"startOffset":15282,"endOffset":15321,"count":47},{"startOffset":15321,"endOffset":15602,"count":19},{"startOffset":15529,"endOffset":15547,"count":4},{"startOffset":15549,"endOffset":15598,"count":4},{"startOffset":15602,"endOffset":16125,"count":28},{"startOffset":15719,"endOffset":16121,"count":62},{"startOffset":16042,"endOffset":16060,"count":2},{"startOffset":16062,"endOffset":16115,"count":2},{"startOffset":16125,"endOffset":16142,"count":47}],"isBlockCoverage":true},{"functionName":"_addListener","ranges":[{"startOffset":16146,"endOffset":18039,"count":117},{"startOffset":16326,"endOffset":16410,"count":4},{"startOffset":16410,"endOffset":16889,"count":113},{"startOffset":16595,"endOffset":16856,"count":6},{"startOffset":16921,"endOffset":17059,"count":82},{"startOffset":17059,"endOffset":18019,"count":35},{"startOffset":17107,"endOffset":17323,"count":26},{"startOffset":17218,"endOffset":17240,"count":0},{"startOffset":17323,"endOffset":17427,"count":9},{"startOffset":17342,"endOffset":17383,"count":0},{"startOffset":17531,"endOffset":17550,"count":0},{"startOffset":17552,"endOffset":18015,"count":0}],"isBlockCoverage":true},{"functionName":"addListener","ranges":[{"startOffset":18217,"endOffset":18309,"count":117}],"isBlockCoverage":true},{"functionName":"onceWrapper","ranges":[{"startOffset":18702,"endOffset":18966,"count":17},{"startOffset":18865,"endOffset":18904,"count":13},{"startOffset":18904,"endOffset":18964,"count":4}],"isBlockCoverage":true},{"functionName":"_onceWrap","ranges":[{"startOffset":18968,"endOffset":19209,"count":37}],"isBlockCoverage":true},{"functionName":"once","ranges":[{"startOffset":19400,"endOffset":19526,"count":37}],"isBlockCoverage":true},{"functionName":"removeListener","ranges":[{"startOffset":20136,"endOffset":21430,"count":41},{"startOffset":20285,"endOffset":20297,"count":0},{"startOffset":20370,"endOffset":20382,"count":2},{"startOffset":20382,"endOffset":20412,"count":39},{"startOffset":20412,"endOffset":20441,"count":27},{"startOffset":20443,"endOffset":20703,"count":25},{"startOffset":20494,"endOffset":20528,"count":0},{"startOffset":20624,"endOffset":20685,"count":0},{"startOffset":20703,"endOffset":21404,"count":14},{"startOffset":20741,"endOffset":21404,"count":13},{"startOffset":20822,"endOffset":20961,"count":25},{"startOffset":20859,"endOffset":20891,"count":12},{"startOffset":20893,"endOffset":20951,"count":13},{"startOffset":20999,"endOffset":21011,"count":0},{"startOffset":21051,"endOffset":21064,"count":9},{"startOffset":21064,"endOffset":21225,"count":4},{"startOffset":21131,"endOffset":21178,"count":1},{"startOffset":21268,"endOffset":21291,"count":10},{"startOffset":21352,"endOffset":21396,"count":0},{"startOffset":21404,"endOffset":21429,"count":39}],"isBlockCoverage":true},{"functionName":"listenerCount","ranges":[{"startOffset":24640,"endOffset":24930,"count":43},{"startOffset":24731,"endOffset":24915,"count":40},{"startOffset":24813,"endOffset":24836,"count":14},{"startOffset":24836,"endOffset":24911,"count":26},{"startOffset":24872,"endOffset":24911,"count":2},{"startOffset":24915,"endOffset":24929,"count":27}],"isBlockCoverage":true},{"functionName":"arrayClone","ranges":[{"startOffset":25182,"endOffset":25655,"count":28},{"startOffset":25354,"endOffset":25386,"count":22},{"startOffset":25391,"endOffset":25431,"count":6},{"startOffset":25436,"endOffset":25484,"count":0},{"startOffset":25489,"endOffset":25545,"count":0},{"startOffset":25550,"endOffset":25614,"count":0},{"startOffset":25618,"endOffset":25654,"count":0}],"isBlockCoverage":true}]},{"scriptId":"24","url":"node:buffer","functions":[{"functionName":"createPool","ranges":[{"startOffset":3839,"endOffset":3998,"count":101}],"isBlockCoverage":true},{"functionName":"alignPool","ranges":[{"startOffset":4014,"endOffset":4136,"count":558},{"startOffset":4088,"endOffset":4134,"count":490}],"isBlockCoverage":true},{"functionName":"from","ranges":[{"startOffset":8427,"endOffset":9391,"count":32},{"startOffset":8513,"endOffset":8556,"count":26},{"startOffset":8556,"endOffset":8607,"count":6},{"startOffset":8609,"endOffset":9246,"count":6},{"startOffset":8706,"endOffset":8760,"count":0},{"startOffset":8786,"endOffset":8814,"count":0},{"startOffset":8815,"endOffset":8886,"count":0},{"startOffset":8888,"endOffset":9242,"count":0},{"startOffset":9246,"endOffset":9390,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10203,"endOffset":10358,"count":794},{"startOffset":10289,"endOffset":10356,"count":0}],"isBlockCoverage":true},{"functionName":"alloc","ranges":[{"startOffset":10461,"endOffset":10706,"count":2},{"startOffset":10545,"endOffset":10558,"count":0},{"startOffset":10559,"endOffset":10570,"count":0},{"startOffset":10572,"endOffset":10673,"count":0}],"isBlockCoverage":true},{"functionName":"allocUnsafe","ranges":[{"startOffset":10885,"endOffset":10960,"count":792}],"isBlockCoverage":true},{"functionName":"allocate","ranges":[{"startOffset":11590,"endOffset":11922,"count":792},{"startOffset":11633,"endOffset":11667,"count":0},{"startOffset":11706,"endOffset":11885,"count":541},{"startOffset":11754,"endOffset":11767,"count":98},{"startOffset":11885,"endOffset":11921,"count":251}],"isBlockCoverage":true},{"functionName":"fromStringFast","ranges":[{"startOffset":11924,"endOffset":12470,"count":26},{"startOffset":12050,"endOffset":12099,"count":9},{"startOffset":12099,"endOffset":12145,"count":17},{"startOffset":12145,"endOffset":12158,"count":3},{"startOffset":12158,"endOffset":12291,"count":17},{"startOffset":12291,"endOffset":12417,"count":0},{"startOffset":12417,"endOffset":12469,"count":17}],"isBlockCoverage":true},{"functionName":"fromString","ranges":[{"startOffset":12472,"endOffset":12925,"count":26},{"startOffset":12558,"endOffset":12582,"count":24},{"startOffset":12584,"endOffset":12703,"count":2},{"startOffset":12621,"endOffset":12645,"count":0},{"startOffset":12703,"endOffset":12885,"count":24},{"startOffset":12780,"endOffset":12821,"count":0},{"startOffset":12857,"endOffset":12881,"count":0}],"isBlockCoverage":true},{"functionName":"fromArrayBuffer","ranges":[{"startOffset":12927,"endOffset":13624,"count":6},{"startOffset":13071,"endOffset":13167,"count":0},{"startOffset":13244,"endOffset":13289,"count":0},{"startOffset":13348,"endOffset":13571,"count":0}],"isBlockCoverage":true},{"functionName":"isBuffer","ranges":[{"startOffset":14367,"endOffset":14421,"count":13}],"isBlockCoverage":true},{"functionName":"isEncoding","ranges":[{"startOffset":14789,"endOffset":14940,"count":793}],"isBlockCoverage":true},{"functionName":"concat","ranges":[{"startOffset":15006,"endOffset":16153,"count":2},{"startOffset":15123,"endOffset":16152,"count":0}],"isBlockCoverage":true},{"functionName":"base64ByteLength","ranges":[{"startOffset":16156,"endOffset":16424,"count":21},{"startOffset":16278,"endOffset":16286,"count":14},{"startOffset":16362,"endOffset":16370,"count":5}],"isBlockCoverage":true},{"functionName":"write","ranges":[{"startOffset":16559,"endOffset":16623,"count":2}],"isBlockCoverage":true},{"functionName":"slice","ranges":[{"startOffset":16636,"endOffset":16682,"count":808}],"isBlockCoverage":true},{"functionName":"byteLength","ranges":[{"startOffset":18010,"endOffset":18035,"count":3}],"isBlockCoverage":true},{"functionName":"write","ranges":[{"startOffset":18048,"endOffset":18113,"count":3}],"isBlockCoverage":true},{"functionName":"byteLength","ranges":[{"startOffset":18496,"endOffset":18547,"count":21}],"isBlockCoverage":true},{"functionName":"write","ranges":[{"startOffset":18560,"endOffset":18626,"count":12}],"isBlockCoverage":true},{"functionName":"getEncodingOps","ranges":[{"startOffset":19942,"endOffset":21766,"count":832},{"startOffset":20029,"endOffset":20328,"count":807},{"startOffset":20092,"endOffset":20328,"count":0},{"startOffset":20333,"endOffset":20752,"count":4},{"startOffset":20373,"endOffset":20397,"count":1},{"startOffset":20397,"endOffset":20455,"count":3},{"startOffset":20455,"endOffset":20752,"count":0},{"startOffset":20757,"endOffset":20911,"count":0},{"startOffset":20916,"endOffset":21072,"count":0},{"startOffset":21077,"endOffset":21458,"count":21},{"startOffset":21151,"endOffset":21177,"count":0},{"startOffset":21237,"endOffset":21349,"count":0},{"startOffset":21359,"endOffset":21458,"count":0},{"startOffset":21463,"endOffset":21595,"count":0},{"startOffset":21600,"endOffset":21760,"count":0}],"isBlockCoverage":true},{"functionName":"byteLength","ranges":[{"startOffset":21768,"endOffset":22425,"count":4},{"startOffset":21842,"endOffset":22054,"count":0},{"startOffset":22127,"endOffset":22151,"count":0},{"startOffset":22189,"endOffset":22198,"count":0},{"startOffset":22239,"endOffset":22243,"count":0},{"startOffset":22270,"endOffset":22424,"count":0}],"isBlockCoverage":true},{"functionName":"toString","ranges":[{"startOffset":23281,"endOffset":23860,"count":812},{"startOffset":23353,"endOffset":23401,"count":2},{"startOffset":23401,"endOffset":23453,"count":810},{"startOffset":23453,"endOffset":23463,"count":0},{"startOffset":23463,"endOffset":23526,"count":810},{"startOffset":23493,"endOffset":23503,"count":0},{"startOffset":23526,"endOffset":23552,"count":810},{"startOffset":23552,"endOffset":23564,"count":0},{"startOffset":23570,"endOffset":23580,"count":810},{"startOffset":23580,"endOffset":23601,"count":0},{"startOffset":23601,"endOffset":23627,"count":810},{"startOffset":23627,"endOffset":23637,"count":2},{"startOffset":23637,"endOffset":23673,"count":808},{"startOffset":23673,"endOffset":23707,"count":0},{"startOffset":23707,"endOffset":23778,"count":808},{"startOffset":23778,"endOffset":23819,"count":0},{"startOffset":23819,"endOffset":23859,"count":808}],"isBlockCoverage":true},{"functionName":"adjustOffset","ranges":[{"startOffset":32458,"endOffset":32892,"count":4},{"startOffset":32698,"endOffset":32717,"count":0},{"startOffset":32736,"endOffset":32799,"count":0},{"startOffset":32823,"endOffset":32877,"count":2},{"startOffset":32877,"endOffset":32880,"count":0},{"startOffset":32881,"endOffset":32889,"count":2}],"isBlockCoverage":true},{"functionName":"subarray","ranges":[{"startOffset":32922,"endOffset":33225,"count":2},{"startOffset":33086,"endOffset":33097,"count":0},{"startOffset":33145,"endOffset":33148,"count":0}],"isBlockCoverage":true},{"functionName":"slice","ranges":[{"startOffset":33253,"endOffset":33319,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":37360,"endOffset":37395,"count":3}],"isBlockCoverage":true}]},{"scriptId":"25","url":"node:internal/buffer","functions":[{"functionName":"FastBuffer","ranges":[{"startOffset":26353,"endOffset":26453,"count":925}],"isBlockCoverage":true},{"functionName":"markAsUntransferable","ranges":[{"startOffset":29752,"endOffset":30016,"count":101},{"startOffset":29820,"endOffset":29848,"count":0},{"startOffset":29871,"endOffset":29878,"count":0}],"isBlockCoverage":true},{"functionName":"createUnsafeBuffer","ranges":[{"startOffset":30294,"endOffset":30430,"count":352}],"isBlockCoverage":true},{"functionName":"reconnectZeroFillToggle","ranges":[{"startOffset":30685,"endOffset":30757,"count":1}],"isBlockCoverage":true}]},{"scriptId":"27","url":"node:internal/encoding","functions":[{"functionName":"getEncodingFromLabel","ranges":[{"startOffset":8640,"endOffset":8819,"count":1},{"startOffset":8751,"endOffset":8818,"count":0}],"isBlockCoverage":true},{"functionName":"TextDecoder","ranges":[{"startOffset":10309,"endOffset":11104,"count":1},{"startOffset":10609,"endOffset":10656,"count":0},{"startOffset":10740,"endOffset":10763,"count":0},{"startOffset":10804,"endOffset":10832,"count":0},{"startOffset":10934,"endOffset":10981,"count":0}],"isBlockCoverage":true}]},{"scriptId":"30","url":"node:internal/process/per_thread","functions":[{"functionName":"refreshHrtimeBuffer","ranges":[{"startOffset":1384,"endOffset":1852,"count":1}],"isBlockCoverage":true},{"functionName":"exit","ranges":[{"startOffset":4772,"endOffset":5255,"count":1}],"isBlockCoverage":true},{"functionName":"buildAllowedFlags","ranges":[{"startOffset":7003,"endOffset":10936,"count":1},{"startOffset":7296,"endOffset":7592,"count":129},{"startOffset":7353,"endOffset":7588,"count":101},{"startOffset":7450,"endOffset":7582,"count":51},{"startOffset":8065,"endOffset":8487,"count":22},{"startOffset":8119,"endOffset":8483,"count":10},{"startOffset":8208,"endOffset":8277,"count":2},{"startOffset":8342,"endOffset":8411,"count":0}],"isBlockCoverage":true},{"functionName":"isAccepted","ranges":[{"startOffset":7596,"endOffset":8013,"count":28},{"startOffset":7666,"endOffset":7680,"count":27},{"startOffset":7682,"endOffset":7694,"count":2},{"startOffset":7694,"endOffset":7771,"count":26},{"startOffset":7771,"endOffset":7940,"count":2},{"startOffset":7821,"endOffset":7868,"count":1},{"startOffset":7940,"endOffset":8012,"count":24}],"isBlockCoverage":true},{"functionName":"trimLeadingDashes","ranges":[{"startOffset":8521,"endOffset":8583,"count":162}],"isBlockCoverage":true},{"functionName":"NodeEnvironmentFlagsSet","ranges":[{"startOffset":8893,"endOffset":8969,"count":1}],"isBlockCoverage":true},{"functionName":"add","ranges":[{"startOffset":8975,"endOffset":9044,"count":0}],"isBlockCoverage":false},{"functionName":"delete","ranges":[{"startOffset":9050,"endOffset":9123,"count":0}],"isBlockCoverage":false},{"functionName":"clear","ranges":[{"startOffset":9129,"endOffset":9181,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":9187,"endOffset":9993,"count":1},{"startOffset":9904,"endOffset":9992,"count":0}],"isBlockCoverage":true},{"functionName":"entries","ranges":[{"startOffset":9999,"endOffset":10164,"count":0}],"isBlockCoverage":false},{"functionName":"forEach","ranges":[{"startOffset":10170,"endOffset":10346,"count":0}],"isBlockCoverage":false},{"functionName":"get size","ranges":[{"startOffset":10352,"endOffset":10413,"count":0}],"isBlockCoverage":false},{"functionName":"values","ranges":[{"startOffset":10419,"endOffset":10582,"count":0}],"isBlockCoverage":false},{"functionName":"toggleTraceCategoryState","ranges":[{"startOffset":11126,"endOffset":11456,"count":1},{"startOffset":11206,"endOffset":11381,"count":0},{"startOffset":11413,"endOffset":11454,"count":0}],"isBlockCoverage":true}]},{"scriptId":"32","url":"node:internal/process/task_queues","functions":[{"functionName":"setHasTickScheduled","ranges":[{"startOffset":1076,"endOffset":1162,"count":36},{"startOffset":1152,"endOffset":1155,"count":21},{"startOffset":1156,"endOffset":1159,"count":15}],"isBlockCoverage":true},{"functionName":"processTicksAndRejections","ranges":[{"startOffset":1462,"endOffset":2441,"count":16},{"startOffset":1518,"endOffset":2321,"count":17},{"startOffset":1564,"endOffset":2296,"count":40},{"startOffset":1765,"endOffset":1798,"count":1},{"startOffset":1798,"endOffset":2172,"count":39},{"startOffset":1885,"endOffset":1918,"count":17},{"startOffset":1931,"endOffset":1973,"count":20},{"startOffset":1986,"endOffset":2037,"count":2},{"startOffset":2050,"endOffset":2110,"count":0},{"startOffset":2123,"endOffset":2150,"count":0},{"startOffset":2181,"endOffset":2263,"count":39},{"startOffset":2234,"endOffset":2255,"count":0},{"startOffset":2263,"endOffset":2296,"count":39},{"startOffset":2296,"endOffset":2321,"count":16},{"startOffset":2321,"endOffset":2375,"count":15}],"isBlockCoverage":true},{"functionName":"nextTick","ranges":[{"startOffset":2585,"endOffset":3446,"count":40},{"startOffset":2674,"endOffset":2681,"count":0},{"startOffset":2729,"endOffset":2743,"count":1},{"startOffset":2748,"endOffset":2785,"count":17},{"startOffset":2790,"endOffset":2841,"count":20},{"startOffset":2846,"endOffset":2911,"count":2},{"startOffset":2916,"endOffset":3059,"count":0},{"startOffset":3088,"endOffset":3114,"count":21},{"startOffset":3358,"endOffset":3418,"count":0}],"isBlockCoverage":true}]},{"scriptId":"33","url":"node:internal/process/promises","functions":[{"functionName":"setHasRejectionToWarn","ranges":[{"startOffset":2065,"endOffset":2155,"count":15},{"startOffset":2145,"endOffset":2148,"count":0}],"isBlockCoverage":true},{"functionName":"processPromiseRejections","ranges":[{"startOffset":6407,"endOffset":9566,"count":15},{"startOffset":6565,"endOffset":6744,"count":0},{"startOffset":6809,"endOffset":9470,"count":0}],"isBlockCoverage":true}]},{"scriptId":"34","url":"node:internal/fixed_queue","functions":[{"functionName":"isEmpty","ranges":[{"startOffset":3077,"endOffset":3129,"count":112}],"isBlockCoverage":true},{"functionName":"isFull","ranges":[{"startOffset":3133,"endOffset":3200,"count":40}],"isBlockCoverage":true},{"functionName":"push","ranges":[{"startOffset":3204,"endOffset":3291,"count":40}],"isBlockCoverage":true},{"functionName":"shift","ranges":[{"startOffset":3295,"endOffset":3510,"count":56},{"startOffset":3388,"endOffset":3400,"count":16},{"startOffset":3400,"endOffset":3509,"count":40}],"isBlockCoverage":true},{"functionName":"isEmpty","ranges":[{"startOffset":3630,"endOffset":3677,"count":56}],"isBlockCoverage":true},{"functionName":"push","ranges":[{"startOffset":3681,"endOffset":3945,"count":40},{"startOffset":3722,"endOffset":3915,"count":0}],"isBlockCoverage":true},{"functionName":"shift","ranges":[{"startOffset":3949,"endOffset":4180,"count":56},{"startOffset":4041,"endOffset":4062,"count":37},{"startOffset":4064,"endOffset":4159,"count":0}],"isBlockCoverage":true}]},{"scriptId":"37","url":"node:internal/console/constructor","functions":[{"functionName":"get","ranges":[{"startOffset":5758,"endOffset":5853,"count":39},{"startOffset":5791,"endOffset":5814,"count":1}],"isBlockCoverage":true},{"functionName":"value","ranges":[{"startOffset":7486,"endOffset":8932,"count":13},{"startOffset":7712,"endOffset":7726,"count":0},{"startOffset":7800,"endOffset":7826,"count":0},{"startOffset":7865,"endOffset":8054,"count":0},{"startOffset":8112,"endOffset":8140,"count":0},{"startOffset":8497,"endOffset":8524,"count":5},{"startOffset":8578,"endOffset":8862,"count":0}],"isBlockCoverage":true},{"functionName":"value","ranges":[{"startOffset":9005,"endOffset":9495,"count":13},{"startOffset":9218,"endOffset":9224,"count":0},{"startOffset":9299,"endOffset":9420,"count":0},{"startOffset":9464,"endOffset":9488,"count":0}],"isBlockCoverage":true},{"functionName":"value","ranges":[{"startOffset":9566,"endOffset":9746,"count":13}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10154,"endOffset":10972,"count":13},{"startOffset":10424,"endOffset":10442,"count":0},{"startOffset":10917,"endOffset":10962,"count":9}],"isBlockCoverage":true},{"functionName":"log","ranges":[{"startOffset":11004,"endOffset":11091,"count":13}],"isBlockCoverage":true}]},{"scriptId":"39","url":"node:internal/url","functions":[{"functionName":"URLContext","ranges":[{"startOffset":3712,"endOffset":3935,"count":1396}],"isBlockCoverage":true},{"functionName":"URLSearchParams","ranges":[{"startOffset":4337,"endOffset":6745,"count":1381},{"startOffset":4452,"endOffset":6683,"count":0}],"isBlockCoverage":true},{"functionName":"onParseComplete","ranges":[{"startOffset":14182,"endOffset":14875,"count":1381},{"startOffset":14437,"endOffset":14447,"count":0},{"startOffset":14510,"endOffset":14520,"count":0},{"startOffset":14601,"endOffset":14605,"count":0}],"isBlockCoverage":true},{"functionName":"onParseError","ranges":[{"startOffset":14877,"endOffset":14952,"count":15}],"isBlockCoverage":true},{"functionName":"onParsePathComplete","ranges":[{"startOffset":16137,"endOffset":16631,"count":831},{"startOffset":16403,"endOffset":16471,"count":0}],"isBlockCoverage":true},{"functionName":"URL","ranges":[{"startOffset":16989,"endOffset":17393,"count":1396},{"startOffset":17136,"endOffset":17188,"count":249}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17482,"endOffset":17575,"count":2301}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18791,"endOffset":20050,"count":1178},{"startOffset":19305,"endOffset":19454,"count":0},{"startOffset":19484,"endOffset":19519,"count":0},{"startOffset":19569,"endOffset":19591,"count":0},{"startOffset":19626,"endOffset":19659,"count":0},{"startOffset":19695,"endOffset":19717,"count":0},{"startOffset":19718,"endOffset":19739,"count":0},{"startOffset":19741,"endOffset":19771,"count":0},{"startOffset":19923,"endOffset":19946,"count":0},{"startOffset":20004,"endOffset":20030,"count":0}],"isBlockCoverage":true},{"functionName":"toString","ranges":[{"startOffset":20107,"endOffset":20153,"count":228}],"isBlockCoverage":true},{"functionName":"get href","ranges":[{"startOffset":20157,"endOffset":20203,"count":950}],"isBlockCoverage":true},{"functionName":"get origin","ranges":[{"startOffset":20464,"endOffset":21033,"count":95},{"startOffset":20603,"endOffset":20831,"count":0},{"startOffset":20838,"endOffset":20850,"count":0},{"startOffset":20857,"endOffset":20870,"count":0},{"startOffset":20877,"endOffset":20891,"count":0},{"startOffset":20898,"endOffset":20909,"count":0},{"startOffset":20916,"endOffset":20997,"count":0}],"isBlockCoverage":true},{"functionName":"get protocol","ranges":[{"startOffset":21037,"endOffset":21090,"count":154}],"isBlockCoverage":true},{"functionName":"get hostname","ranges":[{"startOffset":22717,"endOffset":22774,"count":110}],"isBlockCoverage":true},{"functionName":"get pathname","ranges":[{"startOffset":23507,"endOffset":23712,"count":292},{"startOffset":23589,"endOffset":23608,"count":20},{"startOffset":23608,"endOffset":23646,"count":272},{"startOffset":23646,"endOffset":23656,"count":0},{"startOffset":23656,"endOffset":23711,"count":272}],"isBlockCoverage":true},{"functionName":"set pathname","ranges":[{"startOffset":23716,"endOffset":23930,"count":831},{"startOffset":23827,"endOffset":23834,"count":0}],"isBlockCoverage":true},{"functionName":"get search","ranges":[{"startOffset":23934,"endOffset":24070,"count":3},{"startOffset":24009,"endOffset":24024,"count":0},{"startOffset":24042,"endOffset":24069,"count":0}],"isBlockCoverage":true},{"functionName":"set search","ranges":[{"startOffset":24074,"endOffset":24591,"count":3},{"startOffset":24255,"endOffset":24537,"count":0}],"isBlockCoverage":true},{"functionName":"get hash","ranges":[{"startOffset":24668,"endOffset":24814,"count":3},{"startOffset":24747,"endOffset":24765,"count":0},{"startOffset":24783,"endOffset":24813,"count":0}],"isBlockCoverage":true},{"functionName":"set hash","ranges":[{"startOffset":24818,"endOffset":25259,"count":3},{"startOffset":25029,"endOffset":25258,"count":0}],"isBlockCoverage":true},{"functionName":"initSearchParams","ranges":[{"startOffset":27113,"endOffset":27253,"count":1384},{"startOffset":27210,"endOffset":27252,"count":0}],"isBlockCoverage":true},{"functionName":"getPathFromURLPosix","ranges":[{"startOffset":37821,"endOffset":38325,"count":110},{"startOffset":37884,"endOffset":37940,"count":0},{"startOffset":38018,"endOffset":38284,"count":11783},{"startOffset":38049,"endOffset":38280,"count":1},{"startOffset":38159,"endOffset":38274,"count":0}],"isBlockCoverage":true},{"functionName":"fileURLToPath","ranges":[{"startOffset":38327,"endOffset":38674,"count":110},{"startOffset":38394,"endOffset":38415,"count":16},{"startOffset":38415,"endOffset":38517,"count":94},{"startOffset":38453,"endOffset":38517,"count":0},{"startOffset":38555,"endOffset":38596,"count":0},{"startOffset":38616,"endOffset":38643,"count":0}],"isBlockCoverage":true},{"functionName":"encodePathChars","ranges":[{"startOffset":39434,"endOffset":40150,"count":831},{"startOffset":39521,"endOffset":39586,"count":0},{"startOffset":39708,"endOffset":39775,"count":0},{"startOffset":39827,"endOffset":39892,"count":0},{"startOffset":39944,"endOffset":40016,"count":0},{"startOffset":40068,"endOffset":40129,"count":0}],"isBlockCoverage":true},{"functionName":"pathToFileURL","ranges":[{"startOffset":40152,"endOffset":41403,"count":831},{"startOffset":40240,"endOffset":40286,"count":0},{"startOffset":40288,"endOffset":40890,"count":0},{"startOffset":41212,"endOffset":41251,"count":0},{"startOffset":41254,"endOffset":41307,"count":0},{"startOffset":41315,"endOffset":41331,"count":0}],"isBlockCoverage":true},{"functionName":"isURLInstance","ranges":[{"startOffset":41405,"endOffset":41524,"count":2165},{"startOffset":41498,"endOffset":41521,"count":95}],"isBlockCoverage":true},{"functionName":"toPathIfFileURL","ranges":[{"startOffset":41526,"endOffset":41671,"count":2071},{"startOffset":41609,"endOffset":41630,"count":2070},{"startOffset":41630,"endOffset":41670,"count":1}],"isBlockCoverage":true}]},{"scriptId":"41","url":"node:path","functions":[{"functionName":"isPosixPathSeparator","ranges":[{"startOffset":1825,"endOffset":1902,"count":1179078}],"isBlockCoverage":true},{"functionName":"normalizeString","ranges":[{"startOffset":2137,"endOffset":4085,"count":11576},{"startOffset":2354,"endOffset":4069,"count":1179017},{"startOffset":2387,"endOffset":2429,"count":1167441},{"startOffset":2429,"endOffset":2520,"count":11576},{"startOffset":2472,"endOffset":2478,"count":11515},{"startOffset":2478,"endOffset":2520,"count":61},{"startOffset":2520,"endOffset":2553,"count":1167502},{"startOffset":2553,"endOffset":3970,"count":135450},{"startOffset":2585,"endOffset":2598,"count":119216},{"startOffset":2600,"endOffset":2625,"count":17109},{"startOffset":2625,"endOffset":3927,"count":118341},{"startOffset":2647,"endOffset":3682,"count":144},{"startOffset":2703,"endOffset":2777,"count":0},{"startOffset":2778,"endOffset":2852,"count":0},{"startOffset":3006,"endOffset":3082,"count":0},{"startOffset":3363,"endOffset":3532,"count":0},{"startOffset":3542,"endOffset":3674,"count":0},{"startOffset":3682,"endOffset":3927,"count":118197},{"startOffset":3728,"endOffset":3797,"count":106625},{"startOffset":3797,"endOffset":3872,"count":11572},{"startOffset":3927,"endOffset":3970,"count":135306},{"startOffset":3970,"endOffset":4065,"count":1032052},{"startOffset":3998,"endOffset":4012,"count":10087},{"startOffset":4014,"endOffset":4035,"count":1250},{"startOffset":4035,"endOffset":4065,"count":1030802}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33630,"endOffset":33649,"count":21}],"isBlockCoverage":true},{"functionName":"resolve","ranges":[{"startOffset":33774,"endOffset":34691,"count":11515},{"startOffset":33897,"endOffset":33917,"count":31123},{"startOffset":33924,"endOffset":34245,"count":19629},{"startOffset":33952,"endOffset":33961,"count":19608},{"startOffset":33962,"endOffset":33974,"count":21},{"startOffset":34071,"endOffset":34098,"count":2},{"startOffset":34098,"endOffset":34245,"count":19627},{"startOffset":34630,"endOffset":34680,"count":0},{"startOffset":34681,"endOffset":34686,"count":0}],"isBlockCoverage":true},{"functionName":"normalize","ranges":[{"startOffset":34757,"endOffset":35370,"count":61},{"startOffset":34843,"endOffset":34854,"count":0},{"startOffset":35182,"endOffset":35276,"count":0},{"startOffset":35310,"endOffset":35322,"count":0},{"startOffset":35359,"endOffset":35365,"count":0}],"isBlockCoverage":true},{"functionName":"isAbsolute","ranges":[{"startOffset":35437,"endOffset":35593,"count":2044}],"isBlockCoverage":true},{"functionName":"join","ranges":[{"startOffset":35662,"endOffset":36076,"count":61},{"startOffset":35711,"endOffset":35722,"count":0},{"startOffset":35781,"endOffset":35988,"count":124},{"startOffset":35917,"endOffset":35930,"count":61},{"startOffset":35930,"endOffset":35974,"count":63},{"startOffset":36025,"endOffset":36036,"count":0}],"isBlockCoverage":true},{"functionName":"relative","ranges":[{"startOffset":36166,"endOffset":38526,"count":1},{"startOffset":36279,"endOffset":36289,"count":0},{"startOffset":36416,"endOffset":36426,"count":0},{"startOffset":36699,"endOffset":36706,"count":0},{"startOffset":36780,"endOffset":37015,"count":53},{"startOffset":36928,"endOffset":36934,"count":0},{"startOffset":36991,"endOffset":37009,"count":5},{"startOffset":37347,"endOffset":37529,"count":0},{"startOffset":37537,"endOffset":37994,"count":0},{"startOffset":38000,"endOffset":38525,"count":0}],"isBlockCoverage":true},{"functionName":"toNamespacedPath","ranges":[{"startOffset":38592,"endOffset":38668,"count":10996}],"isBlockCoverage":true},{"functionName":"dirname","ranges":[{"startOffset":38734,"endOffset":39410,"count":3111},{"startOffset":38817,"endOffset":38828,"count":3},{"startOffset":38828,"endOffset":39002,"count":3108},{"startOffset":39002,"endOffset":39255,"count":37391},{"startOffset":39073,"endOffset":39157,"count":3103},{"startOffset":39157,"endOffset":39249,"count":34288},{"startOffset":39255,"endOffset":39283,"count":3108},{"startOffset":39283,"endOffset":39310,"count":5},{"startOffset":39304,"endOffset":39309,"count":0},{"startOffset":39310,"endOffset":39339,"count":3103},{"startOffset":39347,"endOffset":39359,"count":0},{"startOffset":39359,"endOffset":39409,"count":3103}],"isBlockCoverage":true},{"functionName":"basename","ranges":[{"startOffset":39503,"endOffset":41903,"count":776},{"startOffset":39558,"endOffset":39585,"count":0},{"startOffset":39714,"endOffset":39731,"count":0},{"startOffset":39732,"endOffset":39760,"count":0},{"startOffset":39762,"endOffset":41277,"count":0},{"startOffset":41325,"endOffset":41810,"count":9498},{"startOffset":41396,"endOffset":41620,"count":776},{"startOffset":41620,"endOffset":41804,"count":8722},{"startOffset":41642,"endOffset":41804,"count":776},{"startOffset":41838,"endOffset":41848,"count":0}],"isBlockCoverage":true},{"functionName":"extname","ranges":[{"startOffset":41969,"endOffset":43659,"count":449},{"startOffset":42302,"endOffset":43264,"count":5428},{"startOffset":42398,"endOffset":42644,"count":449},{"startOffset":42618,"endOffset":42644,"count":0},{"startOffset":42644,"endOffset":42667,"count":4979},{"startOffset":42667,"endOffset":42824,"count":449},{"startOffset":42824,"endOffset":42854,"count":4979},{"startOffset":42854,"endOffset":43054,"count":484},{"startOffset":42970,"endOffset":42983,"count":448},{"startOffset":42983,"endOffset":43046,"count":36},{"startOffset":43054,"endOffset":43258,"count":4495},{"startOffset":43081,"endOffset":43258,"count":3547},{"startOffset":43290,"endOffset":43311,"count":448},{"startOffset":43312,"endOffset":43405,"count":448},{"startOffset":43406,"endOffset":43575,"count":444},{"startOffset":43503,"endOffset":43535,"count":16},{"startOffset":43536,"endOffset":43574,"count":0},{"startOffset":43577,"endOffset":43601,"count":5},{"startOffset":43601,"endOffset":43658,"count":444}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":43886,"endOffset":46358,"count":3},{"startOffset":44036,"endOffset":44047,"count":0},{"startOffset":44217,"endOffset":44247,"count":0},{"startOffset":44567,"endOffset":45529,"count":45},{"startOffset":44663,"endOffset":44909,"count":3},{"startOffset":44883,"endOffset":44909,"count":0},{"startOffset":44909,"endOffset":44932,"count":42},{"startOffset":44932,"endOffset":45089,"count":3},{"startOffset":45089,"endOffset":45119,"count":42},{"startOffset":45119,"endOffset":45319,"count":0},{"startOffset":45319,"endOffset":45523,"count":42},{"startOffset":45346,"endOffset":45523,"count":0},{"startOffset":45589,"endOffset":45602,"count":0},{"startOffset":45603,"endOffset":45606,"count":0},{"startOffset":45646,"endOffset":45743,"count":0},{"startOffset":45744,"endOffset":45919,"count":0},{"startOffset":46000,"endOffset":46199,"count":0},{"startOffset":46291,"endOffset":46337,"count":0}],"isBlockCoverage":true}]},{"scriptId":"44","url":"node:internal/event_target","functions":[{"functionName":"EventEmitterMixin","ranges":[{"startOffset":25717,"endOffset":26139,"count":1}],"isBlockCoverage":true},{"functionName":"MixedEventEmitter","ranges":[{"startOffset":25786,"endOffset":25927,"count":0}],"isBlockCoverage":false}]},{"scriptId":"45","url":"node:util","functions":[{"functionName":"inherits","ranges":[{"startOffset":5793,"endOffset":6409,"count":33},{"startOffset":5878,"endOffset":5935,"count":0},{"startOffset":5994,"endOffset":6061,"count":0},{"startOffset":6104,"endOffset":6234,"count":0}],"isBlockCoverage":true}]},{"scriptId":"46","url":"node:internal/perf/utils","functions":[{"functionName":"refreshTimeOrigin","ranges":[{"startOffset":499,"endOffset":563,"count":1}],"isBlockCoverage":true}]},{"scriptId":"47","url":"node:timers","functions":[{"functionName":"","ranges":[{"startOffset":1810,"endOffset":1835,"count":1}],"isBlockCoverage":true},{"functionName":"unenroll","ranges":[{"startOffset":2332,"endOffset":3516,"count":2},{"startOffset":2385,"endOffset":2392,"count":0},{"startOffset":2452,"endOffset":2498,"count":0},{"startOffset":2589,"endOffset":2627,"count":0},{"startOffset":2633,"endOffset":2668,"count":0}],"isBlockCoverage":true},{"functionName":"setTimeout","ranges":[{"startOffset":4218,"endOffset":4863,"count":2},{"startOffset":4373,"endOffset":4380,"count":0},{"startOffset":4410,"endOffset":4451,"count":0},{"startOffset":4456,"endOffset":4503,"count":0},{"startOffset":4508,"endOffset":4729,"count":0}],"isBlockCoverage":true},{"functionName":"clearTimeout","ranges":[{"startOffset":5163,"endOffset":5529,"count":15},{"startOffset":5206,"endOffset":5225,"count":2},{"startOffset":5227,"endOffset":5294,"count":2},{"startOffset":5294,"endOffset":5355,"count":13},{"startOffset":5357,"endOffset":5527,"count":0}],"isBlockCoverage":true},{"functionName":"setImmediate","ranges":[{"startOffset":7375,"endOffset":7916,"count":23},{"startOffset":7550,"endOffset":7591,"count":0},{"startOffset":7596,"endOffset":7643,"count":0},{"startOffset":7648,"endOffset":7869,"count":0}],"isBlockCoverage":true}]},{"scriptId":"49","url":"node:stream","functions":[{"functionName":"get","ranges":[{"startOffset":3004,"endOffset":3036,"count":8}],"isBlockCoverage":true}]},{"scriptId":"54","url":"node:internal/streams/destroy","functions":[{"functionName":"checkError","ranges":[{"startOffset":235,"endOffset":546,"count":8},{"startOffset":279,"endOffset":544,"count":0}],"isBlockCoverage":true},{"functionName":"destroy","ranges":[{"startOffset":656,"endOffset":1455,"count":6},{"startOffset":825,"endOffset":829,"count":2},{"startOffset":841,"endOffset":855,"count":4},{"startOffset":857,"endOffset":878,"count":4},{"startOffset":880,"endOffset":957,"count":2},{"startOffset":916,"endOffset":935,"count":0},{"startOffset":957,"endOffset":1142,"count":4},{"startOffset":1142,"endOffset":1171,"count":2},{"startOffset":1171,"endOffset":1290,"count":4},{"startOffset":1290,"endOffset":1397,"count":0},{"startOffset":1397,"endOffset":1454,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1316,"endOffset":1391,"count":0}],"isBlockCoverage":false},{"functionName":"_destroy","ranges":[{"startOffset":1457,"endOffset":2404,"count":4},{"startOffset":2067,"endOffset":2360,"count":0},{"startOffset":2365,"endOffset":2402,"count":0}],"isBlockCoverage":true},{"functionName":"onDestroy","ranges":[{"startOffset":1517,"endOffset":1976,"count":4},{"startOffset":1559,"endOffset":1580,"count":0},{"startOffset":1711,"endOffset":1741,"count":2},{"startOffset":1819,"endOffset":1841,"count":0},{"startOffset":1856,"endOffset":1916,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2188,"endOffset":2259,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2271,"endOffset":2344,"count":0}],"isBlockCoverage":false},{"functionName":"emitCloseNT","ranges":[{"startOffset":2495,"endOffset":2755,"count":4},{"startOffset":2600,"endOffset":2632,"count":2},{"startOffset":2685,"endOffset":2699,"count":2},{"startOffset":2724,"endOffset":2753,"count":2}],"isBlockCoverage":true},{"functionName":"undestroy","ranges":[{"startOffset":3046,"endOffset":3661,"count":6}],"isBlockCoverage":true},{"functionName":"construct","ranges":[{"startOffset":4608,"endOffset":5014,"count":10},{"startOffset":4705,"endOffset":5013,"count":0}],"isBlockCoverage":true}]},{"scriptId":"55","url":"node:internal/streams/duplex","functions":[{"functionName":"Duplex","ranges":[{"startOffset":1936,"endOffset":2360,"count":4},{"startOffset":2000,"endOffset":2027,"count":0},{"startOffset":2182,"endOffset":2204,"count":2},{"startOffset":2248,"endOffset":2270,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3271,"endOffset":3483,"count":23},{"startOffset":3369,"endOffset":3400,"count":0},{"startOffset":3444,"endOffset":3476,"count":0}],"isBlockCoverage":true}]},{"scriptId":"56","url":"node:internal/streams/readable","functions":[{"functionName":"","ranges":[{"startOffset":1731,"endOffset":1756,"count":1}],"isBlockCoverage":true},{"functionName":"ReadableState","ranges":[{"startOffset":2497,"endOffset":6226,"count":6},{"startOffset":2896,"endOffset":2939,"count":0},{"startOffset":3139,"endOffset":3224,"count":4},{"startOffset":3472,"endOffset":3508,"count":0},{"startOffset":6125,"endOffset":6224,"count":0}],"isBlockCoverage":true},{"functionName":"Readable","ranges":[{"startOffset":6229,"endOffset":7126,"count":6},{"startOffset":6297,"endOffset":6326,"count":0},{"startOffset":6649,"endOffset":6675,"count":0},{"startOffset":6730,"endOffset":6762,"count":0},{"startOffset":6819,"endOffset":6855,"count":0},{"startOffset":6879,"endOffset":6891,"count":0},{"startOffset":6899,"endOffset":6946,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7013,"endOffset":7122,"count":0}],"isBlockCoverage":false},{"functionName":"Readable.push","ranges":[{"startOffset":7613,"endOffset":7699,"count":8}],"isBlockCoverage":true},{"functionName":"readableAddChunk","ranges":[{"startOffset":7883,"endOffset":10153,"count":8},{"startOffset":8097,"endOffset":8561,"count":0},{"startOffset":8596,"endOffset":8871,"count":4},{"startOffset":8663,"endOffset":8740,"count":0},{"startOffset":8765,"endOffset":8871,"count":0},{"startOffset":8888,"endOffset":8926,"count":0},{"startOffset":8952,"endOffset":9869,"count":4},{"startOffset":9096,"endOffset":9262,"count":0},{"startOffset":9285,"endOffset":9355,"count":0},{"startOffset":9399,"endOffset":9426,"count":0},{"startOffset":9487,"endOffset":9499,"count":2},{"startOffset":9501,"endOffset":9708,"count":2},{"startOffset":9647,"endOffset":9700,"count":0},{"startOffset":9708,"endOffset":9770,"count":2},{"startOffset":9780,"endOffset":9869,"count":0},{"startOffset":10085,"endOffset":10150,"count":4},{"startOffset":10128,"endOffset":10149,"count":0}],"isBlockCoverage":true},{"functionName":"addChunk","ranges":[{"startOffset":10155,"endOffset":10885,"count":4},{"startOffset":10266,"endOffset":10307,"count":2},{"startOffset":10309,"endOffset":10599,"count":2},{"startOffset":10436,"endOffset":10482,"count":0},{"startOffset":10599,"endOffset":10851,"count":2},{"startOffset":10675,"endOffset":10678,"count":0},{"startOffset":10721,"endOffset":10749,"count":0},{"startOffset":10826,"endOffset":10847,"count":0}],"isBlockCoverage":true},{"functionName":"Readable.isPaused","ranges":[{"startOffset":10917,"endOffset":11029,"count":2}],"isBlockCoverage":true},{"functionName":"Readable.setEncoding","ranges":[{"startOffset":11093,"endOffset":11654,"count":2},{"startOffset":11483,"endOffset":11524,"count":0},{"startOffset":11569,"endOffset":11590,"count":0}],"isBlockCoverage":true},{"functionName":"howMuchToRead","ranges":[{"startOffset":12193,"endOffset":12587,"count":22},{"startOffset":12241,"endOffset":12279,"count":10},{"startOffset":12264,"endOffset":12278,"count":8},{"startOffset":12285,"endOffset":12294,"count":18},{"startOffset":12294,"endOffset":12323,"count":4},{"startOffset":12323,"endOffset":12332,"count":0},{"startOffset":12332,"endOffset":12505,"count":4},{"startOffset":12441,"endOffset":12505,"count":2},{"startOffset":12505,"endOffset":12580,"count":0},{"startOffset":12581,"endOffset":12584,"count":0}],"isBlockCoverage":true},{"functionName":"Readable.read","ranges":[{"startOffset":12684,"endOffset":17055,"count":22},{"startOffset":12868,"endOffset":12886,"count":10},{"startOffset":12886,"endOffset":12953,"count":12},{"startOffset":12917,"endOffset":12953,"count":0},{"startOffset":13118,"endOffset":13167,"count":0},{"startOffset":13188,"endOffset":13218,"count":10},{"startOffset":13404,"endOffset":13431,"count":12},{"startOffset":13432,"endOffset":13565,"count":4},{"startOffset":13515,"endOffset":13541,"count":0},{"startOffset":13567,"endOffset":13752,"count":0},{"startOffset":13861,"endOffset":13875,"count":20},{"startOffset":13877,"endOffset":13952,"count":12},{"startOffset":13913,"endOffset":13931,"count":10},{"startOffset":13952,"endOffset":15228,"count":10},{"startOffset":15228,"endOffset":15269,"count":2},{"startOffset":15271,"endOffset":15573,"count":10},{"startOffset":15573,"endOffset":15589,"count":8},{"startOffset":15590,"endOffset":15608,"count":4},{"startOffset":15609,"endOffset":15625,"count":4},{"startOffset":15626,"endOffset":15653,"count":4},{"startOffset":15655,"endOffset":15733,"count":6},{"startOffset":15733,"endOffset":16268,"count":4},{"startOffset":16232,"endOffset":16264,"count":0},{"startOffset":16268,"endOffset":16298,"count":10},{"startOffset":16298,"endOffset":16323,"count":2},{"startOffset":16323,"endOffset":16346,"count":8},{"startOffset":16346,"endOffset":16368,"count":10},{"startOffset":16368,"endOffset":16446,"count":8},{"startOffset":16446,"endOffset":16609,"count":2},{"startOffset":16508,"endOffset":16554,"count":0},{"startOffset":16609,"endOffset":16953,"count":10},{"startOffset":16786,"endOffset":16812,"count":8},{"startOffset":16909,"endOffset":16923,"count":4},{"startOffset":16931,"endOffset":16949,"count":2},{"startOffset":16953,"endOffset":16975,"count":10},{"startOffset":16975,"endOffset":17038,"count":2},{"startOffset":17038,"endOffset":17054,"count":10}],"isBlockCoverage":true},{"functionName":"onEofChunk","ranges":[{"startOffset":17058,"endOffset":17878,"count":4},{"startOffset":17137,"endOffset":17144,"count":0},{"startOffset":17166,"endOffset":17340,"count":2},{"startOffset":17221,"endOffset":17236,"count":0},{"startOffset":17238,"endOffset":17336,"count":0},{"startOffset":17382,"endOffset":17876,"count":2}],"isBlockCoverage":true},{"functionName":"emitReadable","ranges":[{"startOffset":18079,"endOffset":18406,"count":2}],"isBlockCoverage":true},{"functionName":"emitReadable_","ranges":[{"startOffset":18408,"endOffset":19062,"count":4},{"startOffset":18981,"endOffset":19000,"count":0},{"startOffset":19001,"endOffset":19043,"count":0}],"isBlockCoverage":true},{"functionName":"maybeReadMore","ranges":[{"startOffset":19412,"endOffset":19589,"count":4},{"startOffset":19477,"endOffset":19497,"count":2},{"startOffset":19499,"endOffset":19587,"count":2}],"isBlockCoverage":true},{"functionName":"maybeReadMore_","ranges":[{"startOffset":19591,"endOffset":21383,"count":2},{"startOffset":21121,"endOffset":21171,"count":0}],"isBlockCoverage":true},{"functionName":"Readable.on","ranges":[{"startOffset":27740,"endOffset":28647,"count":64},{"startOffset":27872,"endOffset":28204,"count":8},{"startOffset":28204,"endOffset":28630,"count":56},{"startOffset":28233,"endOffset":28630,"count":0}],"isBlockCoverage":true},{"functionName":"Readable.removeListener","ranges":[{"startOffset":28742,"endOffset":29307,"count":29},{"startOffset":28904,"endOffset":29290,"count":0}],"isBlockCoverage":true},{"functionName":"Readable.resume","ranges":[{"startOffset":30761,"endOffset":31086,"count":10},{"startOffset":30833,"endOffset":31043,"count":4}],"isBlockCoverage":true},{"functionName":"resume","ranges":[{"startOffset":31089,"endOffset":31239,"count":4}],"isBlockCoverage":true},{"functionName":"resume_","ranges":[{"startOffset":31241,"endOffset":31492,"count":4},{"startOffset":31475,"endOffset":31490,"count":2}],"isBlockCoverage":true},{"functionName":"flow","ranges":[{"startOffset":31791,"endOffset":31938,"count":8},{"startOffset":31909,"endOffset":31934,"count":10},{"startOffset":31935,"endOffset":31936,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":35414,"endOffset":35803,"count":6},{"startOffset":35753,"endOffset":35771,"count":4},{"startOffset":35772,"endOffset":35796,"count":4}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":35809,"endOffset":35939,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":36397,"endOffset":36463,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":37770,"endOffset":37858,"count":2},{"startOffset":37844,"endOffset":37851,"count":0}],"isBlockCoverage":true},{"functionName":"fromList","ranges":[{"startOffset":38490,"endOffset":39052,"count":2},{"startOffset":38573,"endOffset":38585,"count":0},{"startOffset":38626,"endOffset":38653,"count":0},{"startOffset":38788,"endOffset":38918,"count":0},{"startOffset":38948,"endOffset":39035,"count":0}],"isBlockCoverage":true},{"functionName":"endReadable","ranges":[{"startOffset":39054,"endOffset":39275,"count":12}],"isBlockCoverage":true},{"functionName":"endReadableNT","ranges":[{"startOffset":39277,"endOffset":40202,"count":12},{"startOffset":39500,"endOffset":39521,"count":4},{"startOffset":39523,"endOffset":40200,"count":4},{"startOffset":39603,"endOffset":39636,"count":0},{"startOffset":39638,"endOffset":39692,"count":0},{"startOffset":39924,"endOffset":40129,"count":2},{"startOffset":40155,"endOffset":40190,"count":2}],"isBlockCoverage":true}]},{"scriptId":"57","url":"node:internal/streams/legacy","functions":[{"functionName":"Stream","ranges":[{"startOffset":112,"endOffset":160,"count":16}],"isBlockCoverage":true}]},{"scriptId":"59","url":"node:internal/streams/buffer_list","functions":[{"functionName":"BufferList","ranges":[{"startOffset":254,"endOffset":338,"count":6}],"isBlockCoverage":true},{"functionName":"push","ranges":[{"startOffset":342,"endOffset":529,"count":2},{"startOffset":426,"endOffset":449,"count":0}],"isBlockCoverage":true},{"functionName":"clear","ranges":[{"startOffset":926,"endOffset":994,"count":4}],"isBlockCoverage":true},{"functionName":"join","ranges":[{"startOffset":998,"endOffset":1180,"count":2},{"startOffset":1041,"endOffset":1051,"count":0},{"startOffset":1142,"endOffset":1160,"count":0}],"isBlockCoverage":true},{"functionName":"first","ranges":[{"startOffset":2009,"endOffset":2049,"count":2}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":2053,"endOffset":2149,"count":2},{"startOffset":2118,"endOffset":2145,"count":0}],"isBlockCoverage":true}]},{"scriptId":"60","url":"node:internal/streams/state","functions":[{"functionName":"highWaterMarkFrom","ranges":[{"startOffset":142,"endOffset":309,"count":10},{"startOffset":240,"endOffset":263,"count":2},{"startOffset":264,"endOffset":306,"count":8},{"startOffset":300,"endOffset":306,"count":0}],"isBlockCoverage":true},{"functionName":"getDefaultHighWaterMark","ranges":[{"startOffset":311,"endOffset":397,"count":9},{"startOffset":378,"endOffset":382,"count":0}],"isBlockCoverage":true},{"functionName":"getHighWaterMark","ranges":[{"startOffset":399,"endOffset":832,"count":10},{"startOffset":546,"endOffset":758,"count":2},{"startOffset":590,"endOffset":727,"count":0},{"startOffset":758,"endOffset":831,"count":8}],"isBlockCoverage":true}]},{"scriptId":"61","url":"node:string_decoder","functions":[{"functionName":"normalizeEncoding","ranges":[{"startOffset":2130,"endOffset":2392,"count":2},{"startOffset":2242,"endOffset":2375,"count":0}],"isBlockCoverage":true},{"functionName":"StringDecoder","ranges":[{"startOffset":2709,"endOffset":2908,"count":2}],"isBlockCoverage":true},{"functionName":"write","ranges":[{"startOffset":3234,"endOffset":3619,"count":2},{"startOffset":3291,"endOffset":3302,"count":0},{"startOffset":3338,"endOffset":3489,"count":0},{"startOffset":3519,"endOffset":3573,"count":0}],"isBlockCoverage":true},{"functionName":"end","ranges":[{"startOffset":3899,"endOffset":4090,"count":2},{"startOffset":3964,"endOffset":3986,"count":0},{"startOffset":4039,"endOffset":4074,"count":0}],"isBlockCoverage":true}]},{"scriptId":"63","url":"node:internal/streams/writable","functions":[{"functionName":"WritableState","ranges":[{"startOffset":2460,"endOffset":6983,"count":4},{"startOffset":2855,"endOffset":2898,"count":0},{"startOffset":3449,"endOffset":3485,"count":0}],"isBlockCoverage":true},{"functionName":"resetBuffer","ranges":[{"startOffset":6985,"endOffset":7117,"count":6}],"isBlockCoverage":true},{"functionName":"Writable","ranges":[{"startOffset":7392,"endOffset":8929,"count":4},{"startOffset":8033,"endOffset":8087,"count":0},{"startOffset":8093,"endOffset":8122,"count":0},{"startOffset":8261,"endOffset":8289,"count":0},{"startOffset":8343,"endOffset":8373,"count":0},{"startOffset":8428,"endOffset":8460,"count":0},{"startOffset":8513,"endOffset":8541,"count":0},{"startOffset":8598,"endOffset":8634,"count":0},{"startOffset":8665,"endOffset":8712,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8779,"endOffset":8925,"count":0}],"isBlockCoverage":false},{"functionName":"_write","ranges":[{"startOffset":9368,"endOffset":10712,"count":19},{"startOffset":9493,"endOffset":9555,"count":15},{"startOffset":9555,"endOffset":9791,"count":4},{"startOffset":9588,"endOffset":9737,"count":2},{"startOffset":9696,"endOffset":9737,"count":0},{"startOffset":9778,"endOffset":9787,"count":0},{"startOffset":9815,"endOffset":9860,"count":0},{"startOffset":9969,"endOffset":10053,"count":0},{"startOffset":10059,"endOffset":10362,"count":0},{"startOffset":10399,"endOffset":10448,"count":0},{"startOffset":10475,"endOffset":10525,"count":0},{"startOffset":10538,"endOffset":10629,"count":0}],"isBlockCoverage":true},{"functionName":"Writable.write","ranges":[{"startOffset":10741,"endOffset":10827,"count":19}],"isBlockCoverage":true},{"functionName":"Writable.cork","ranges":[{"startOffset":10856,"endOffset":10902,"count":2}],"isBlockCoverage":true},{"functionName":"Writable.uncork","ranges":[{"startOffset":10933,"endOffset":11088,"count":2}],"isBlockCoverage":true},{"functionName":"writeOrBuffer","ranges":[{"startOffset":11646,"endOffset":12659,"count":19},{"startOffset":11744,"endOffset":11747,"count":0},{"startOffset":11966,"endOffset":11989,"count":0},{"startOffset":12027,"endOffset":12043,"count":15},{"startOffset":12044,"endOffset":12065,"count":15},{"startOffset":12067,"endOffset":12299,"count":4},{"startOffset":12150,"endOffset":12174,"count":2},{"startOffset":12176,"endOffset":12215,"count":2},{"startOffset":12238,"endOffset":12257,"count":2},{"startOffset":12259,"endOffset":12295,"count":2},{"startOffset":12299,"endOffset":12490,"count":15}],"isBlockCoverage":true},{"functionName":"doWrite","ranges":[{"startOffset":12661,"endOffset":13039,"count":2},{"startOffset":12847,"endOffset":12896,"count":0},{"startOffset":12957,"endOffset":13015,"count":0}],"isBlockCoverage":true},{"functionName":"onwrite","ranges":[{"startOffset":13428,"endOffset":15067,"count":17},{"startOffset":13586,"endOffset":13660,"count":0},{"startOffset":13778,"endOffset":14334,"count":0},{"startOffset":14395,"endOffset":14436,"count":0},{"startOffset":14452,"endOffset":15008,"count":15},{"startOffset":14751,"endOffset":14798,"count":4},{"startOffset":14800,"endOffset":14851,"count":4},{"startOffset":14851,"endOffset":15002,"count":11},{"startOffset":15008,"endOffset":15061,"count":2}],"isBlockCoverage":true},{"functionName":"afterWriteTick","ranges":[{"startOffset":15069,"endOffset":15208,"count":11}],"isBlockCoverage":true},{"functionName":"afterWrite","ranges":[{"startOffset":15210,"endOffset":15585,"count":13},{"startOffset":15376,"endOffset":15436,"count":0},{"startOffset":15460,"endOffset":15498,"count":17},{"startOffset":15498,"endOffset":15523,"count":12},{"startOffset":15523,"endOffset":15552,"count":0},{"startOffset":15552,"endOffset":15584,"count":12}],"isBlockCoverage":true},{"functionName":"clearBuffer","ranges":[{"startOffset":16246,"endOffset":17740,"count":2},{"startOffset":16389,"endOffset":16406,"count":0},{"startOffset":16547,"endOffset":16564,"count":0},{"startOffset":16750,"endOffset":16755,"count":0},{"startOffset":17027,"endOffset":17037,"count":0},{"startOffset":17038,"endOffset":17054,"count":0},{"startOffset":17232,"endOffset":17704,"count":0}],"isBlockCoverage":true},{"functionName":"callback","ranges":[{"startOffset":16758,"endOffset":16867,"count":2},{"startOffset":16817,"endOffset":16861,"count":4}],"isBlockCoverage":true},{"functionName":"Writable.end","ranges":[{"startOffset":18003,"endOffset":19339,"count":2},{"startOffset":18108,"endOffset":18168,"count":0},{"startOffset":18210,"endOffset":18255,"count":0},{"startOffset":18314,"endOffset":18421,"count":0},{"startOffset":18470,"endOffset":18516,"count":0},{"startOffset":18529,"endOffset":18555,"count":0},{"startOffset":19006,"endOffset":19162,"count":0},{"startOffset":19196,"endOffset":19321,"count":0}],"isBlockCoverage":true},{"functionName":"needFinish","ranges":[{"startOffset":19342,"endOffset":19652,"count":16},{"startOffset":19394,"endOffset":19424,"count":4},{"startOffset":19425,"endOffset":19456,"count":4},{"startOffset":19457,"endOffset":19484,"count":4},{"startOffset":19485,"endOffset":19525,"count":4},{"startOffset":19526,"endOffset":19554,"count":4},{"startOffset":19555,"endOffset":19582,"count":4},{"startOffset":19583,"endOffset":19615,"count":4},{"startOffset":19616,"endOffset":19648,"count":4}],"isBlockCoverage":true},{"functionName":"callFinal","ranges":[{"startOffset":19654,"endOffset":21017,"count":2},{"startOffset":20574,"endOffset":20951,"count":0},{"startOffset":20956,"endOffset":20992,"count":0}],"isBlockCoverage":true},{"functionName":"onFinish","ranges":[{"startOffset":19715,"endOffset":20453,"count":2},{"startOffset":19756,"endOffset":19839,"count":0},{"startOffset":19896,"endOffset":20114,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20695,"endOffset":20808,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20820,"endOffset":20935,"count":0}],"isBlockCoverage":false},{"functionName":"prefinish","ranges":[{"startOffset":21019,"endOffset":21324,"count":2},{"startOffset":21241,"endOffset":21318,"count":0}],"isBlockCoverage":true},{"functionName":"finishMaybe","ranges":[{"startOffset":21326,"endOffset":21638,"count":14},{"startOffset":21395,"endOffset":21636,"count":2},{"startOffset":21457,"endOffset":21477,"count":0},{"startOffset":21479,"endOffset":21632,"count":0}],"isBlockCoverage":true},{"functionName":"finish","ranges":[{"startOffset":21640,"endOffset":22366,"count":2},{"startOffset":21831,"endOffset":21864,"count":0},{"startOffset":22271,"endOffset":22299,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":22733,"endOffset":23125,"count":18},{"startOffset":23072,"endOffset":23085,"count":14},{"startOffset":23086,"endOffset":23106,"count":14},{"startOffset":23107,"endOffset":23118,"count":10}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":23298,"endOffset":23384,"count":2},{"startOffset":23370,"endOffset":23377,"count":0}],"isBlockCoverage":true}]},{"scriptId":"70","url":"node:internal/perf/observe","functions":[{"functionName":"getObserverType","ranges":[{"startOffset":2406,"endOffset":2634,"count":4},{"startOffset":2461,"endOffset":2510,"count":0},{"startOffset":2515,"endOffset":2570,"count":0}],"isBlockCoverage":true},{"functionName":"hasObserver","ranges":[{"startOffset":11597,"endOffset":11716,"count":4}],"isBlockCoverage":true}]},{"scriptId":"73","url":"node:internal/perf/performance","functions":[{"functionName":"refreshTimeOrigin","ranges":[{"startOffset":3834,"endOffset":4017,"count":1}],"isBlockCoverage":true}]},{"scriptId":"78","url":"node:internal/process/execution","functions":[{"functionName":"tryGetCwd","ranges":[{"startOffset":586,"endOffset":916,"count":1},{"startOffset":647,"endOffset":914,"count":0}],"isBlockCoverage":true}]},{"scriptId":"80","url":"node:fs","functions":[{"functionName":"isFileType","ranges":[{"startOffset":5266,"endOffset":5526,"count":16122},{"startOffset":5465,"endOffset":5485,"count":1290}],"isBlockCoverage":true},{"functionName":"accessSync","ranges":[{"startOffset":6288,"endOffset":6526,"count":1}],"isBlockCoverage":true},{"functionName":"existsSync","ranges":[{"startOffset":7624,"endOffset":8154,"count":61},{"startOffset":7699,"endOffset":7728,"count":0},{"startOffset":8036,"endOffset":8062,"count":0},{"startOffset":8064,"endOffset":8117,"count":0}],"isBlockCoverage":true},{"functionName":"tryStatSync","ranges":[{"startOffset":10302,"endOffset":10532,"count":792},{"startOffset":10445,"endOffset":10457,"count":0},{"startOffset":10459,"endOffset":10514,"count":0}],"isBlockCoverage":true},{"functionName":"tryCreateBuffer","ranges":[{"startOffset":10534,"endOffset":10845,"count":790},{"startOffset":10652,"endOffset":10704,"count":0},{"startOffset":10791,"endOffset":10803,"count":0},{"startOffset":10805,"endOffset":10822,"count":0}],"isBlockCoverage":true},{"functionName":"tryReadSync","ranges":[{"startOffset":10847,"endOffset":11102,"count":792},{"startOffset":11045,"endOffset":11057,"count":0},{"startOffset":11059,"endOffset":11076,"count":0}],"isBlockCoverage":true},{"functionName":"readFileSync","ranges":[{"startOffset":11326,"endOffset":12724,"count":793},{"startOffset":11495,"endOffset":11501,"count":0},{"startOffset":11630,"endOffset":11640,"count":792},{"startOffset":11641,"endOffset":11644,"count":0},{"startOffset":11774,"endOffset":11797,"count":2},{"startOffset":11797,"endOffset":11858,"count":790},{"startOffset":11858,"endOffset":11896,"count":792},{"startOffset":11896,"endOffset":12049,"count":790},{"startOffset":12049,"endOffset":12418,"count":2},{"startOffset":12285,"endOffset":12359,"count":0},{"startOffset":12418,"endOffset":12478,"count":792},{"startOffset":12478,"endOffset":12574,"count":2},{"startOffset":12574,"endOffset":12636,"count":790},{"startOffset":12596,"endOffset":12636,"count":0},{"startOffset":12636,"endOffset":12662,"count":792},{"startOffset":12662,"endOffset":12705,"count":790},{"startOffset":12705,"endOffset":12723,"count":792}],"isBlockCoverage":true},{"functionName":"closeSync","ranges":[{"startOffset":13269,"endOffset":13409,"count":792}],"isBlockCoverage":true},{"functionName":"openSync","ranges":[{"startOffset":14401,"endOffset":14797,"count":793}],"isBlockCoverage":true},{"functionName":"readSync","ranges":[{"startOffset":17135,"endOffset":18141,"count":792},{"startOffset":17277,"endOffset":17488,"count":0},{"startOffset":17512,"endOffset":17533,"count":0},{"startOffset":17624,"endOffset":17643,"count":0},{"startOffset":17676,"endOffset":17806,"count":0}],"isBlockCoverage":true},{"functionName":"readdirSync","ranges":[{"startOffset":35333,"endOffset":35759,"count":3},{"startOffset":35721,"endOffset":35747,"count":0}],"isBlockCoverage":true},{"functionName":"hasNoEntryError","ranges":[{"startOffset":37582,"endOffset":37797,"count":9},{"startOffset":37631,"endOffset":37714,"count":4},{"startOffset":37714,"endOffset":37733,"count":5},{"startOffset":37733,"endOffset":37778,"count":0},{"startOffset":37778,"endOffset":37796,"count":5}],"isBlockCoverage":true},{"functionName":"lstatSync","ranges":[{"startOffset":38513,"endOffset":38937,"count":4},{"startOffset":38815,"endOffset":38838,"count":0},{"startOffset":38840,"endOffset":38867,"count":0}],"isBlockCoverage":true},{"functionName":"statSync","ranges":[{"startOffset":39152,"endOffset":39573,"count":62},{"startOffset":39451,"endOffset":39474,"count":9},{"startOffset":39476,"endOffset":39503,"count":4},{"startOffset":39503,"endOffset":39572,"count":58}],"isBlockCoverage":true},{"functionName":"splitRoot","ranges":[{"startOffset":63115,"endOffset":63325,"count":767},{"startOffset":63182,"endOffset":63305,"count":1534},{"startOffset":63260,"endOffset":63299,"count":767},{"startOffset":63305,"endOffset":63324,"count":0}],"isBlockCoverage":true},{"functionName":"encodeRealpathResult","ranges":[{"startOffset":63330,"endOffset":63617,"count":766},{"startOffset":63415,"endOffset":63445,"count":0},{"startOffset":63465,"endOffset":63616,"count":0}],"isBlockCoverage":true},{"functionName":"nextPart","ranges":[{"startOffset":64023,"endOffset":64098,"count":8310}],"isBlockCoverage":true},{"functionName":"realpathSync","ranges":[{"startOffset":64310,"endOffset":68232,"count":1147},{"startOffset":64444,"endOffset":64462,"count":0},{"startOffset":64623,"endOffset":64658,"count":381},{"startOffset":64658,"endOffset":65230,"count":766},{"startOffset":65230,"endOffset":65405,"count":0},{"startOffset":65405,"endOffset":65542,"count":766},{"startOffset":65542,"endOffset":68159,"count":8310},{"startOffset":65654,"endOffset":65785,"count":767},{"startOffset":65785,"endOffset":65943,"count":7543},{"startOffset":66026,"endOffset":66054,"count":8303},{"startOffset":66056,"endOffset":66209,"count":7020},{"startOffset":66163,"endOffset":66187,"count":0},{"startOffset":66209,"endOffset":66275,"count":1290},{"startOffset":66312,"endOffset":66361,"count":0},{"startOffset":66361,"endOffset":67657,"count":1290},{"startOffset":66713,"endOffset":66804,"count":1289},{"startOffset":66804,"endOffset":67217,"count":1},{"startOffset":67160,"endOffset":67209,"count":0},{"startOffset":67217,"endOffset":67580,"count":1},{"startOffset":67624,"endOffset":67651,"count":1},{"startOffset":67657,"endOffset":67949,"count":1},{"startOffset":67949,"endOffset":67968,"count":0},{"startOffset":67970,"endOffset":68155,"count":0},{"startOffset":68159,"endOffset":68173,"count":766}],"isBlockCoverage":true},{"functionName":"lazyLoadStreams","ranges":[{"startOffset":76850,"endOffset":77041,"count":160},{"startOffset":76898,"endOffset":77039,"count":1}],"isBlockCoverage":true},{"functionName":"get ReadStream","ranges":[{"startOffset":79255,"endOffset":79323,"count":40}],"isBlockCoverage":true},{"functionName":"get WriteStream","ranges":[{"startOffset":79380,"endOffset":79450,"count":40}],"isBlockCoverage":true},{"functionName":"get FileReadStream","ranges":[{"startOffset":79642,"endOffset":79718,"count":40}],"isBlockCoverage":true},{"functionName":"get FileWriteStream","ranges":[{"startOffset":79783,"endOffset":79861,"count":40}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":80354,"endOffset":80450,"count":40}],"isBlockCoverage":true}]},{"scriptId":"81","url":"node:internal/fs/utils","functions":[{"functionName":"assertEncoding","ranges":[{"startOffset":3538,"endOffset":3738,"count":1938},{"startOffset":3589,"endOffset":3620,"count":791},{"startOffset":3622,"endOffset":3736,"count":0}],"isBlockCoverage":true},{"functionName":"getOptions","ranges":[{"startOffset":7233,"endOffset":7875,"count":1943},{"startOffset":7328,"endOffset":7366,"count":1938},{"startOffset":7368,"endOffset":7400,"count":5},{"startOffset":7400,"endOffset":7437,"count":1938},{"startOffset":7437,"endOffset":7555,"count":790},{"startOffset":7555,"endOffset":7677,"count":1148},{"startOffset":7594,"endOffset":7677,"count":0},{"startOffset":7677,"endOffset":7791,"count":1938},{"startOffset":7791,"endOffset":7855,"count":0},{"startOffset":7855,"endOffset":7874,"count":1938}],"isBlockCoverage":true},{"functionName":"handleErrorFromBinding","ranges":[{"startOffset":7933,"endOffset":8462,"count":3735},{"startOffset":8003,"endOffset":8138,"count":43},{"startOffset":8138,"endOffset":8170,"count":3692},{"startOffset":8170,"endOffset":8460,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8603,"endOffset":9192,"count":2071},{"startOffset":8833,"endOffset":8853,"count":0},{"startOffset":8923,"endOffset":8991,"count":0},{"startOffset":9010,"endOffset":9191,"count":0}],"isBlockCoverage":true},{"functionName":"StatsBase","ranges":[{"startOffset":9929,"endOffset":10236,"count":24}],"isBlockCoverage":true},{"functionName":"StatsBase.isDirectory","ranges":[{"startOffset":10272,"endOffset":10329,"count":13}],"isBlockCoverage":true},{"functionName":"StatsBase.isFile","ranges":[{"startOffset":10361,"endOffset":10418,"count":8}],"isBlockCoverage":true},{"functionName":"StatsBase.isSymbolicLink","ranges":[{"startOffset":10654,"endOffset":10711,"count":4}],"isBlockCoverage":true},{"functionName":"msFromTimeSpec","ranges":[{"startOffset":11017,"endOffset":11099,"count":80}],"isBlockCoverage":true},{"functionName":"dateFromMs","ranges":[{"startOffset":11533,"endOffset":11597,"count":96}],"isBlockCoverage":true},{"functionName":"Stats","ranges":[{"startOffset":12769,"endOffset":13311,"count":24}],"isBlockCoverage":true},{"functionName":"Stats._checkModeProperty","ranges":[{"startOffset":13652,"endOffset":13882,"count":25},{"startOffset":13689,"endOffset":13767,"count":0},{"startOffset":13769,"endOffset":13836,"count":0}],"isBlockCoverage":true},{"functionName":"getStatsFromBinding","ranges":[{"startOffset":14001,"endOffset":15079,"count":20},{"startOffset":14082,"endOffset":14607,"count":0}],"isBlockCoverage":true},{"functionName":"stringToFlags","ranges":[{"startOffset":15081,"endOffset":16337,"count":793},{"startOffset":15162,"endOffset":15217,"count":0},{"startOffset":15240,"endOffset":15266,"count":1},{"startOffset":15266,"endOffset":15318,"count":792},{"startOffset":15323,"endOffset":15334,"count":0},{"startOffset":15356,"endOffset":15393,"count":0},{"startOffset":15398,"endOffset":15424,"count":0},{"startOffset":15429,"endOffset":15441,"count":0},{"startOffset":15463,"endOffset":15499,"count":0},{"startOffset":15505,"endOffset":15552,"count":0},{"startOffset":15557,"endOffset":15568,"count":0},{"startOffset":15590,"endOffset":15647,"count":0},{"startOffset":15653,"endOffset":15699,"count":0},{"startOffset":15704,"endOffset":15715,"count":0},{"startOffset":15737,"endOffset":15792,"count":0},{"startOffset":15798,"endOffset":15846,"count":0},{"startOffset":15851,"endOffset":15862,"count":0},{"startOffset":15884,"endOffset":15942,"count":0},{"startOffset":15947,"endOffset":15958,"count":0},{"startOffset":15980,"endOffset":16038,"count":0},{"startOffset":16044,"endOffset":16091,"count":0},{"startOffset":16096,"endOffset":16107,"count":0},{"startOffset":16129,"endOffset":16185,"count":0},{"startOffset":16190,"endOffset":16201,"count":0},{"startOffset":16223,"endOffset":16279,"count":0},{"startOffset":16283,"endOffset":16336,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17314,"endOffset":17693,"count":792},{"startOffset":17370,"endOffset":17437,"count":0},{"startOffset":17458,"endOffset":17525,"count":0},{"startOffset":17566,"endOffset":17689,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18197,"endOffset":18467,"count":2071},{"startOffset":18259,"endOffset":18281,"count":0},{"startOffset":18283,"endOffset":18369,"count":0},{"startOffset":18445,"endOffset":18465,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18512,"endOffset":18647,"count":924}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18690,"endOffset":18811,"count":1584},{"startOffset":18741,"endOffset":18760,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23222,"endOffset":23799,"count":1},{"startOffset":23349,"endOffset":23446,"count":0},{"startOffset":23530,"endOffset":23573,"count":0},{"startOffset":23574,"endOffset":23588,"count":0},{"startOffset":23590,"endOffset":23798,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24279,"endOffset":24837,"count":792},{"startOffset":24385,"endOffset":24835,"count":0}],"isBlockCoverage":true}]},{"scriptId":"87","url":"node:internal/stream_base_commons","functions":[{"functionName":"handleWriteReq","ranges":[{"startOffset":1151,"endOffset":2006,"count":15},{"startOffset":1251,"endOffset":1418,"count":0},{"startOffset":1423,"endOffset":1437,"count":0},{"startOffset":1442,"endOffset":1506,"count":0},{"startOffset":1594,"endOffset":1656,"count":0},{"startOffset":1661,"endOffset":1673,"count":0},{"startOffset":1678,"endOffset":1691,"count":0},{"startOffset":1696,"endOffset":1711,"count":0},{"startOffset":1716,"endOffset":1780,"count":0},{"startOffset":1785,"endOffset":2000,"count":0}],"isBlockCoverage":true},{"functionName":"createWriteWrap","ranges":[{"startOffset":2695,"endOffset":2933,"count":17}],"isBlockCoverage":true},{"functionName":"writevGeneric","ranges":[{"startOffset":2935,"endOffset":3574,"count":2},{"startOffset":3096,"endOffset":3193,"count":0},{"startOffset":3285,"endOffset":3398,"count":4}],"isBlockCoverage":true},{"functionName":"writeGeneric","ranges":[{"startOffset":3576,"endOffset":3781,"count":15}],"isBlockCoverage":true},{"functionName":"afterWriteDispatched","ranges":[{"startOffset":3783,"endOffset":4086,"count":17},{"startOffset":3950,"endOffset":4001,"count":0}],"isBlockCoverage":true},{"functionName":"onStreamRead","ranges":[{"startOffset":4088,"endOffset":6019,"count":4},{"startOffset":4282,"endOffset":4302,"count":2},{"startOffset":4304,"endOffset":5040,"count":2},{"startOffset":4389,"endOffset":4648,"count":0},{"startOffset":4832,"endOffset":5019,"count":0},{"startOffset":5040,"endOffset":5061,"count":2},{"startOffset":5061,"endOffset":5078,"count":0},{"startOffset":5078,"endOffset":5409,"count":2},{"startOffset":5409,"endOffset":5598,"count":0},{"startOffset":5598,"endOffset":5683,"count":2},{"startOffset":5683,"endOffset":5750,"count":0},{"startOffset":5750,"endOffset":6017,"count":2},{"startOffset":5795,"endOffset":5835,"count":0}],"isBlockCoverage":true}]},{"scriptId":"88","url":"node:vm","functions":[{"functionName":"compileFunction","ranges":[{"startOffset":9538,"endOffset":11817,"count":752},{"startOffset":10238,"endOffset":10287,"count":0},{"startOffset":10391,"endOffset":10652,"count":0},{"startOffset":11114,"endOffset":11187,"count":0},{"startOffset":11214,"endOffset":11271,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9752,"endOffset":9803,"count":3760}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10761,"endOffset":10893,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamically","ranges":[{"startOffset":11742,"endOffset":11775,"count":3}],"isBlockCoverage":true}]},{"scriptId":"89","url":"node:url","functions":[{"functionName":"Url","ranges":[{"startOffset":1966,"endOffset":2242,"count":2}],"isBlockCoverage":true},{"functionName":"urlParse","ranges":[{"startOffset":3847,"endOffset":4061,"count":2},{"startOffset":3935,"endOffset":3946,"count":0}],"isBlockCoverage":true},{"functionName":"isIpv6Hostname","ranges":[{"startOffset":4063,"endOffset":4286,"count":2},{"startOffset":4182,"endOffset":4279,"count":0}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":4310,"endOffset":13385,"count":2},{"startOffset":4782,"endOffset":5848,"count":66},{"startOffset":5045,"endOffset":5113,"count":2},{"startOffset":5071,"endOffset":5080,"count":0},{"startOffset":5113,"endOffset":5260,"count":64},{"startOffset":5129,"endOffset":5203,"count":0},{"startOffset":5219,"endOffset":5260,"count":0},{"startOffset":5382,"endOffset":5436,"count":0},{"startOffset":5445,"endOffset":5486,"count":0},{"startOffset":5519,"endOffset":5584,"count":0},{"startOffset":5593,"endOffset":5759,"count":0},{"startOffset":5773,"endOffset":5844,"count":0},{"startOffset":6091,"endOffset":6139,"count":0},{"startOffset":6147,"endOffset":6200,"count":0},{"startOffset":6206,"endOffset":6536,"count":0},{"startOffset":6693,"endOffset":7150,"count":0},{"startOffset":7630,"endOffset":7655,"count":0},{"startOffset":7966,"endOffset":8007,"count":0},{"startOffset":8528,"endOffset":9779,"count":30},{"startOffset":8574,"endOffset":8588,"count":0},{"startOffset":8597,"endOffset":8617,"count":0},{"startOffset":8626,"endOffset":8652,"count":0},{"startOffset":8661,"endOffset":8677,"count":0},{"startOffset":8686,"endOffset":8709,"count":0},{"startOffset":8718,"endOffset":8736,"count":0},{"startOffset":8745,"endOffset":8768,"count":0},{"startOffset":8777,"endOffset":8797,"count":0},{"startOffset":8806,"endOffset":8835,"count":0},{"startOffset":8844,"endOffset":8874,"count":0},{"startOffset":8883,"endOffset":8908,"count":0},{"startOffset":8917,"endOffset":8945,"count":0},{"startOffset":8954,"endOffset":8977,"count":0},{"startOffset":8986,"endOffset":9015,"count":0},{"startOffset":9024,"endOffset":9048,"count":0},{"startOffset":9057,"endOffset":9239,"count":0},{"startOffset":9248,"endOffset":9263,"count":0},{"startOffset":9272,"endOffset":9296,"count":2},{"startOffset":9305,"endOffset":9491,"count":2},{"startOffset":9500,"endOffset":9724,"count":0},{"startOffset":9767,"endOffset":9773,"count":2},{"startOffset":9818,"endOffset":9912,"count":0},{"startOffset":9937,"endOffset":9998,"count":0},{"startOffset":10288,"endOffset":10307,"count":0},{"startOffset":10641,"endOffset":10674,"count":0},{"startOffset":11248,"endOffset":11252,"count":0},{"startOffset":11282,"endOffset":11287,"count":0},{"startOffset":11423,"endOffset":11544,"count":0},{"startOffset":11930,"endOffset":12164,"count":24},{"startOffset":11997,"endOffset":12069,"count":0},{"startOffset":12107,"endOffset":12128,"count":0},{"startOffset":12130,"endOffset":12160,"count":0},{"startOffset":12192,"endOffset":12530,"count":0},{"startOffset":12558,"endOffset":12685,"count":0},{"startOffset":12735,"endOffset":12779,"count":0},{"startOffset":12815,"endOffset":12828,"count":0},{"startOffset":12921,"endOffset":12995,"count":0},{"startOffset":13076,"endOffset":13106,"count":0},{"startOffset":13157,"endOffset":13171,"count":0},{"startOffset":13203,"endOffset":13208,"count":0}],"isBlockCoverage":true},{"functionName":"getHostname","ranges":[{"startOffset":13388,"endOffset":14113,"count":2},{"startOffset":13477,"endOffset":14096,"count":18},{"startOffset":13595,"endOffset":13635,"count":0},{"startOffset":13636,"endOffset":13713,"count":0},{"startOffset":13714,"endOffset":13771,"count":0},{"startOffset":13772,"endOffset":13821,"count":0},{"startOffset":13822,"endOffset":13863,"count":0},{"startOffset":13864,"endOffset":13911,"count":0},{"startOffset":13912,"endOffset":13945,"count":0},{"startOffset":13996,"endOffset":14092,"count":0}],"isBlockCoverage":true},{"functionName":"autoEscapeStr","ranges":[{"startOffset":15170,"endOffset":15876,"count":2},{"startOffset":15287,"endOffset":15653,"count":24},{"startOffset":15438,"endOffset":15649,"count":0},{"startOffset":15728,"endOffset":15875,"count":0}],"isBlockCoverage":true},{"functionName":"format","ranges":[{"startOffset":17340,"endOffset":19717,"count":2},{"startOffset":17402,"endOffset":17476,"count":0},{"startOffset":17509,"endOffset":17514,"count":0},{"startOffset":17547,"endOffset":17552,"count":0},{"startOffset":17671,"endOffset":17914,"count":0},{"startOffset":17942,"endOffset":17975,"count":0},{"startOffset":17977,"endOffset":18029,"count":0},{"startOffset":18068,"endOffset":18084,"count":0},{"startOffset":18172,"endOffset":18188,"count":0},{"startOffset":18277,"endOffset":18683,"count":24},{"startOffset":18323,"endOffset":18490,"count":0},{"startOffset":18497,"endOffset":18673,"count":0},{"startOffset":18703,"endOffset":18840,"count":0},{"startOffset":18971,"endOffset":19003,"count":0},{"startOffset":19028,"endOffset":19035,"count":0},{"startOffset":19116,"endOffset":19142,"count":0},{"startOffset":19174,"endOffset":19456,"count":0},{"startOffset":19514,"endOffset":19549,"count":0},{"startOffset":19555,"endOffset":19573,"count":0},{"startOffset":19587,"endOffset":19633,"count":0},{"startOffset":19639,"endOffset":19661,"count":0}],"isBlockCoverage":true},{"functionName":"parseHost","ranges":[{"startOffset":29272,"endOffset":29545,"count":2}],"isBlockCoverage":true}]},{"scriptId":"91","url":"node:internal/options","functions":[{"functionName":"getCLIOptionsFromBinding","ranges":[{"startOffset":464,"endOffset":598,"count":822},{"startOffset":521,"endOffset":575,"count":1}],"isBlockCoverage":true},{"functionName":"getAliasesFromBinding","ranges":[{"startOffset":600,"endOffset":731,"count":1}],"isBlockCoverage":true},{"functionName":"getEmbedderOptions","ranges":[{"startOffset":733,"endOffset":877,"count":2},{"startOffset":789,"endOffset":849,"count":1}],"isBlockCoverage":true},{"functionName":"getOptionValue","ranges":[{"startOffset":879,"endOffset":1145,"count":821},{"startOffset":1001,"endOffset":1102,"count":4},{"startOffset":1102,"endOffset":1142,"count":817}],"isBlockCoverage":true},{"functionName":"get options","ranges":[{"startOffset":1635,"endOffset":1693,"count":1}],"isBlockCoverage":true},{"functionName":"get aliases","ranges":[{"startOffset":1697,"endOffset":1752,"count":1}],"isBlockCoverage":true}]},{"scriptId":"92","url":"node:internal/bootstrap/switches/is_main_thread","functions":[{"functionName":"createWritableStdioStream","ranges":[{"startOffset":1278,"endOffset":2877,"count":2},{"startOffset":1570,"endOffset":1764,"count":0},{"startOffset":1770,"endOffset":1782,"count":0},{"startOffset":1787,"endOffset":2497,"count":0},{"startOffset":2503,"endOffset":2756,"count":0}],"isBlockCoverage":true},{"functionName":"write","ranges":[{"startOffset":2693,"endOffset":2740,"count":0}],"isBlockCoverage":false},{"functionName":"getStdout","ranges":[{"startOffset":3321,"endOffset":3652,"count":10},{"startOffset":3358,"endOffset":3372,"count":9},{"startOffset":3372,"endOffset":3651,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3600,"endOffset":3627,"count":0}],"isBlockCoverage":false},{"functionName":"getStderr","ranges":[{"startOffset":3654,"endOffset":3985,"count":26},{"startOffset":3691,"endOffset":3705,"count":25},{"startOffset":3705,"endOffset":3984,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3933,"endOffset":3960,"count":0}],"isBlockCoverage":false}]},{"scriptId":"93","url":"node:internal/process/signal","functions":[{"functionName":"isSignal","ranges":[{"startOffset":238,"endOffset":334,"count":6}],"isBlockCoverage":true},{"functionName":"startListeningIfSignal","ranges":[{"startOffset":398,"endOffset":904,"count":6},{"startOffset":459,"endOffset":484,"count":2},{"startOffset":486,"endOffset":902,"count":1},{"startOffset":785,"endOffset":864,"count":0}],"isBlockCoverage":true}]},{"scriptId":"94","url":"node:internal/bootstrap/switches/does_own_process_state","functions":[{"functionName":"wrappedUmask","ranges":[{"startOffset":3184,"endOffset":3320,"count":1},{"startOffset":3240,"endOffset":3285,"count":0}],"isBlockCoverage":true},{"functionName":"wrappedCwd","ranges":[{"startOffset":3322,"endOffset":3425,"count":41},{"startOffset":3374,"endOffset":3403,"count":1}],"isBlockCoverage":true}]},{"scriptId":"95","url":"node:internal/main/run_main_module","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":632,"count":1}],"isBlockCoverage":true}]},{"scriptId":"96","url":"node:internal/bootstrap/pre_execution","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":17700,"count":1}],"isBlockCoverage":true},{"functionName":"prepareMainThreadExecution","ranges":[{"startOffset":593,"endOffset":2553,"count":1}],"isBlockCoverage":true},{"functionName":"patchProcessObject","ranges":[{"startOffset":2555,"endOffset":4195,"count":1},{"startOffset":3170,"endOffset":3222,"count":0}],"isBlockCoverage":true},{"functionName":"addReadOnlyProcessAlias","ranges":[{"startOffset":4197,"endOffset":4454,"count":13},{"startOffset":4318,"endOffset":4452,"count":1}],"isBlockCoverage":true},{"functionName":"setupWarningHandler","ranges":[{"startOffset":4456,"endOffset":4681,"count":1}],"isBlockCoverage":true},{"functionName":"setupFetch","ranges":[{"startOffset":4717,"endOffset":5192,"count":1},{"startOffset":4805,"endOffset":5191,"count":0}],"isBlockCoverage":true},{"functionName":"setupWebCrypto","ranges":[{"startOffset":5298,"endOffset":6420,"count":1},{"startOffset":5459,"endOffset":6418,"count":0}],"isBlockCoverage":true},{"functionName":"get crypto","ranges":[{"startOffset":5604,"endOffset":5776,"count":0}],"isBlockCoverage":false},{"functionName":"setupCoverageHooks","ranges":[{"startOffset":6532,"endOffset":7209,"count":1},{"startOffset":7002,"endOffset":7179,"count":0}],"isBlockCoverage":true},{"functionName":"setupStacktracePrinterOnSigint","ranges":[{"startOffset":7211,"endOffset":7436,"count":1},{"startOffset":7313,"endOffset":7435,"count":0}],"isBlockCoverage":true},{"functionName":"initializeReport","ranges":[{"startOffset":7438,"endOffset":7661,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":7619,"endOffset":7653,"count":0}],"isBlockCoverage":false},{"functionName":"setupDebugEnv","ranges":[{"startOffset":7663,"endOffset":7895,"count":1},{"startOffset":7814,"endOffset":7893,"count":0}],"isBlockCoverage":true},{"functionName":"initializeReportSignalHandlers","ranges":[{"startOffset":7957,"endOffset":8092,"count":1}],"isBlockCoverage":true},{"functionName":"initializeHeapSnapshotSignalHandlers","ranges":[{"startOffset":8094,"endOffset":8401,"count":1},{"startOffset":8229,"endOffset":8400,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8361,"endOffset":8397,"count":0}],"isBlockCoverage":false},{"functionName":"setupTraceCategoryState","ranges":[{"startOffset":8403,"endOffset":8662,"count":1}],"isBlockCoverage":true},{"functionName":"setupPerfHooks","ranges":[{"startOffset":8664,"endOffset":8807,"count":1}],"isBlockCoverage":true},{"functionName":"setupInspectorHooks","ranges":[{"startOffset":8809,"endOffset":9390,"count":1}],"isBlockCoverage":true},{"functionName":"initializeDeprecations","ranges":[{"startOffset":9585,"endOffset":12115,"count":1},{"startOffset":10297,"endOffset":10599,"count":16},{"startOffset":10342,"endOffset":10574,"count":0},{"startOffset":10916,"endOffset":11089,"count":0},{"startOffset":11117,"endOffset":11511,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":11764,"endOffset":11800,"count":1723}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":11806,"endOffset":11848,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11978,"endOffset":12013,"count":21}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":12019,"endOffset":12060,"count":0}],"isBlockCoverage":false},{"functionName":"setupChildProcessIpcChannel","ranges":[{"startOffset":12117,"endOffset":12682,"count":1},{"startOffset":12193,"endOffset":12680,"count":0}],"isBlockCoverage":true},{"functionName":"initializeClusterIPC","ranges":[{"startOffset":12684,"endOffset":12954,"count":1},{"startOffset":12771,"endOffset":12952,"count":0}],"isBlockCoverage":true},{"functionName":"initializePolicy","ranges":[{"startOffset":12956,"endOffset":14779,"count":1},{"startOffset":13082,"endOffset":14777,"count":0}],"isBlockCoverage":true},{"functionName":"initializeWASI","ranges":[{"startOffset":14781,"endOffset":15010,"count":1}],"isBlockCoverage":true},{"functionName":"initializeCJSLoader","ranges":[{"startOffset":15012,"endOffset":15355,"count":1}],"isBlockCoverage":true},{"functionName":"initializeESMLoader","ranges":[{"startOffset":15357,"endOffset":16473,"count":1},{"startOffset":15587,"endOffset":15594,"count":0},{"startOffset":16226,"endOffset":16471,"count":0}],"isBlockCoverage":true},{"functionName":"initializeSourceMapsHandlers","ranges":[{"startOffset":16475,"endOffset":16661,"count":1}],"isBlockCoverage":true},{"functionName":"initializeFrozenIntrinsics","ranges":[{"startOffset":16663,"endOffset":16920,"count":1},{"startOffset":16748,"endOffset":16918,"count":0}],"isBlockCoverage":true},{"functionName":"loadPreloadModules","ranges":[{"startOffset":16922,"endOffset":17269,"count":1},{"startOffset":17116,"endOffset":17267,"count":0}],"isBlockCoverage":true}]},{"scriptId":"97","url":"node:internal/inspector_async_hook","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1972,"count":1}],"isBlockCoverage":false},{"functionName":"lazyHookCreation","ranges":[{"startOffset":75,"endOffset":1257,"count":0}],"isBlockCoverage":false},{"functionName":"enable","ranges":[{"startOffset":1259,"endOffset":1840,"count":0}],"isBlockCoverage":false},{"functionName":"disable","ranges":[{"startOffset":1842,"endOffset":1928,"count":0}],"isBlockCoverage":false}]},{"scriptId":"98","url":"node:internal/source_map/source_map_cache","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7630,"count":1}],"isBlockCoverage":false},{"functionName":"ObjectGetValueSafe","ranges":[{"startOffset":254,"endOffset":432,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":614,"endOffset":639,"count":1}],"isBlockCoverage":true},{"functionName":"getSourceMapsEnabled","ranges":[{"startOffset":1389,"endOffset":1563,"count":752},{"startOffset":1462,"endOffset":1533,"count":1}],"isBlockCoverage":true},{"functionName":"setSourceMapsEnabled","ranges":[{"startOffset":1565,"endOffset":2209,"count":1},{"startOffset":1776,"endOffset":1930,"count":0},{"startOffset":1973,"endOffset":2179,"count":0}],"isBlockCoverage":true},{"functionName":"maybeCacheSourceMap","ranges":[{"startOffset":2211,"endOffset":3267,"count":752},{"startOffset":2369,"endOffset":2389,"count":0},{"startOffset":2392,"endOffset":2399,"count":0},{"startOffset":2459,"endOffset":2591,"count":0},{"startOffset":2722,"endOffset":3265,"count":33},{"startOffset":2816,"endOffset":2822,"count":32},{"startOffset":2823,"endOffset":2854,"count":1},{"startOffset":3036,"endOffset":3261,"count":0}],"isBlockCoverage":true},{"functionName":"dataFromUrl","ranges":[{"startOffset":3269,"endOffset":3789,"count":33},{"startOffset":3406,"endOffset":3481,"count":20},{"startOffset":3488,"endOffset":3568,"count":0},{"startOffset":3579,"endOffset":3787,"count":13}],"isBlockCoverage":true},{"functionName":"lineLengths","ranges":[{"startOffset":3979,"endOffset":4318,"count":33}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4275,"endOffset":4314,"count":24239}],"isBlockCoverage":true},{"functionName":"sourceMapFromFile","ranges":[{"startOffset":4320,"endOffset":4570,"count":13},{"startOffset":4518,"endOffset":4568,"count":1}],"isBlockCoverage":true},{"functionName":"sourceMapFromDataUrl","ranges":[{"startOffset":4664,"endOffset":5335,"count":20},{"startOffset":5067,"endOffset":5073,"count":0},{"startOffset":5195,"endOffset":5251,"count":0},{"startOffset":5255,"endOffset":5333,"count":0}],"isBlockCoverage":true},{"functionName":"sourcesToAbsolute","ranges":[{"startOffset":5520,"endOffset":5847,"count":32}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5598,"endOffset":5704,"count":81},{"startOffset":5642,"endOffset":5647,"count":79}],"isBlockCoverage":true},{"functionName":"sourceMapCacheToObject","ranges":[{"startOffset":6285,"endOffset":6532,"count":0}],"isBlockCoverage":false},{"functionName":"appendCJSCache","ranges":[{"startOffset":6534,"endOffset":6823,"count":0}],"isBlockCoverage":false},{"functionName":"findSourceMap","ranges":[{"startOffset":6825,"endOffset":7492,"count":0}],"isBlockCoverage":false}]},{"scriptId":"99","url":"node:internal/util/iterable_weak_map","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1958,"count":1}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":399,"endOffset":516,"count":1}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":521,"endOffset":1032,"count":33},{"startOffset":596,"endOffset":800,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1036,"endOffset":1092,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":1096,"endOffset":1145,"count":0}],"isBlockCoverage":false},{"functionName":"delete","ranges":[{"startOffset":1149,"endOffset":1387,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1391,"endOffset":1816,"count":0}],"isBlockCoverage":false},{"functionName":"cleanup","ranges":[{"startOffset":1820,"endOffset":1873,"count":0}],"isBlockCoverage":false}]},{"scriptId":"100","url":"node:internal/modules/cjs/helpers","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6812,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":810,"endOffset":835,"count":1}],"isBlockCoverage":true},{"functionName":"loadNativeModule","ranges":[{"startOffset":1126,"endOffset":1431,"count":983},{"startOffset":1228,"endOffset":1250,"count":211},{"startOffset":1252,"endOffset":1429,"count":211}],"isBlockCoverage":true},{"functionName":"makeRequireFunction","ranges":[{"startOffset":1680,"endOffset":3678,"count":752},{"startOffset":1794,"endOffset":3070,"count":0}],"isBlockCoverage":true},{"functionName":"require","ranges":[{"startOffset":1932,"endOffset":3065,"count":0}],"isBlockCoverage":false},{"functionName":"require","ranges":[{"startOffset":3092,"endOffset":3154,"count":1738}],"isBlockCoverage":true},{"functionName":"resolve","ranges":[{"startOffset":3163,"endOffset":3309,"count":4}],"isBlockCoverage":true},{"functionName":"paths","ranges":[{"startOffset":3343,"endOffset":3465,"count":0}],"isBlockCoverage":false},{"functionName":"stripBOM","ranges":[{"startOffset":3863,"endOffset":4018,"count":20},{"startOffset":3945,"endOffset":3998,"count":0}],"isBlockCoverage":true},{"functionName":"addBuiltinLibsToObject","ranges":[{"startOffset":4020,"endOffset":5822,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeReferrerURL","ranges":[{"startOffset":5890,"endOffset":6078,"count":755},{"startOffset":6043,"endOffset":6077,"count":0}],"isBlockCoverage":true},{"functionName":"hasEsmSyntax","ranges":[{"startOffset":6148,"endOffset":6650,"count":0}],"isBlockCoverage":false}]},{"scriptId":"101","url":"node:internal/process/report","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2545,"count":1}],"isBlockCoverage":false},{"functionName":"writeReport","ranges":[{"startOffset":292,"endOffset":674,"count":0}],"isBlockCoverage":false},{"functionName":"getReport","ranges":[{"startOffset":678,"endOffset":843,"count":0}],"isBlockCoverage":false},{"functionName":"get directory","ranges":[{"startOffset":847,"endOffset":898,"count":0}],"isBlockCoverage":false},{"functionName":"set directory","ranges":[{"startOffset":902,"endOffset":990,"count":0}],"isBlockCoverage":false},{"functionName":"get filename","ranges":[{"startOffset":994,"endOffset":1043,"count":0}],"isBlockCoverage":false},{"functionName":"set filename","ranges":[{"startOffset":1047,"endOffset":1135,"count":0}],"isBlockCoverage":false},{"functionName":"get compact","ranges":[{"startOffset":1139,"endOffset":1186,"count":0}],"isBlockCoverage":false},{"functionName":"set compact","ranges":[{"startOffset":1190,"endOffset":1267,"count":0}],"isBlockCoverage":false},{"functionName":"get signal","ranges":[{"startOffset":1271,"endOffset":1316,"count":0}],"isBlockCoverage":false},{"functionName":"set signal","ranges":[{"startOffset":1320,"endOffset":1457,"count":0}],"isBlockCoverage":false},{"functionName":"get reportOnFatalError","ranges":[{"startOffset":1461,"endOffset":1533,"count":0}],"isBlockCoverage":false},{"functionName":"set reportOnFatalError","ranges":[{"startOffset":1537,"endOffset":1655,"count":0}],"isBlockCoverage":false},{"functionName":"get reportOnSignal","ranges":[{"startOffset":1659,"endOffset":1723,"count":0}],"isBlockCoverage":false},{"functionName":"set reportOnSignal","ranges":[{"startOffset":1727,"endOffset":1888,"count":0}],"isBlockCoverage":false},{"functionName":"get reportOnUncaughtException","ranges":[{"startOffset":1892,"endOffset":1978,"count":0}],"isBlockCoverage":false},{"functionName":"set reportOnUncaughtException","ranges":[{"startOffset":1982,"endOffset":2114,"count":0}],"isBlockCoverage":false},{"functionName":"addSignalHandler","ranges":[{"startOffset":2119,"endOffset":2290,"count":1},{"startOffset":2185,"endOffset":2288,"count":0}],"isBlockCoverage":true},{"functionName":"removeSignalHandler","ranges":[{"startOffset":2292,"endOffset":2416,"count":0}],"isBlockCoverage":false},{"functionName":"signalHandler","ranges":[{"startOffset":2418,"endOffset":2492,"count":0}],"isBlockCoverage":false}]},{"scriptId":"102","url":"node:internal/modules/cjs/loader","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":40466,"count":1}],"isBlockCoverage":false},{"functionName":"get hasLoadedAnyUserCJSModule","ranges":[{"startOffset":2277,"endOffset":2346,"count":1}],"isBlockCoverage":true},{"functionName":"stat","ranges":[{"startOffset":4614,"endOffset":5024,"count":8253},{"startOffset":4712,"endOffset":4806,"count":3032},{"startOffset":4788,"endOffset":4802,"count":761},{"startOffset":4806,"endOffset":4879,"count":7492},{"startOffset":4879,"endOffset":4893,"count":2271},{"startOffset":4895,"endOffset":5005,"count":639},{"startOffset":5005,"endOffset":5023,"count":7492}],"isBlockCoverage":true},{"functionName":"updateChildren","ranges":[{"startOffset":5026,"endOffset":5222,"count":1537},{"startOffset":5098,"endOffset":5108,"count":1527},{"startOffset":5125,"endOffset":5178,"count":1527},{"startOffset":5135,"endOffset":5177,"count":759},{"startOffset":5184,"endOffset":5220,"count":1524}],"isBlockCoverage":true},{"functionName":"Module","ranges":[{"startOffset":5269,"endOffset":5521,"count":775}],"isBlockCoverage":true},{"functionName":"wrap","ranges":[{"startOffset":5995,"endOffset":6072,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":6218,"endOffset":6340,"count":0}],"isBlockCoverage":false},{"functionName":"defineProperty","ranges":[{"startOffset":6345,"endOffset":6478,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6525,"endOffset":6553,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":6558,"endOffset":6612,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6662,"endOffset":6698,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":6703,"endOffset":6765,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6798,"endOffset":6828,"count":0}],"isBlockCoverage":false},{"functionName":"getModuleParent","ranges":[{"startOffset":6987,"endOffset":7055,"count":0}],"isBlockCoverage":false},{"functionName":"setModuleParent","ranges":[{"startOffset":7057,"endOffset":7130,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7709,"endOffset":7734,"count":1}],"isBlockCoverage":true},{"functionName":"readPackage","ranges":[{"startOffset":8082,"endOffset":8892,"count":5724},{"startOffset":8262,"endOffset":8278,"count":5195},{"startOffset":8278,"endOffset":8376,"count":529},{"startOffset":8376,"endOffset":8382,"count":0},{"startOffset":8383,"endOffset":8398,"count":529},{"startOffset":8426,"endOffset":8492,"count":265},{"startOffset":8492,"endOffset":8775,"count":264},{"startOffset":8775,"endOffset":8890,"count":0}],"isBlockCoverage":true},{"functionName":"readPackageScope","ranges":[{"startOffset":8894,"endOffset":9437,"count":2024},{"startOffset":9029,"endOffset":9374,"count":4641},{"startOffset":9236,"endOffset":9249,"count":0},{"startOffset":9313,"endOffset":9370,"count":2024},{"startOffset":9374,"endOffset":9436,"count":0}],"isBlockCoverage":true},{"functionName":"tryPackage","ranges":[{"startOffset":9439,"endOffset":10716,"count":497},{"startOffset":9561,"endOffset":9642,"count":114},{"startOffset":9642,"endOffset":9736,"count":383},{"startOffset":9736,"endOffset":9780,"count":19},{"startOffset":9781,"endOffset":9848,"count":3},{"startOffset":9874,"endOffset":10697,"count":0},{"startOffset":10697,"endOffset":10715,"count":383}],"isBlockCoverage":true},{"functionName":"tryFile","ranges":[{"startOffset":11061,"endOffset":11271,"count":4587},{"startOffset":11149,"endOffset":11156,"count":3496},{"startOffset":11156,"endOffset":11180,"count":1091},{"startOffset":11180,"endOffset":11190,"count":0},{"startOffset":11192,"endOffset":11235,"count":0},{"startOffset":11235,"endOffset":11270,"count":1091}],"isBlockCoverage":true},{"functionName":"toRealPath","ranges":[{"startOffset":11273,"endOffset":11404,"count":1144}],"isBlockCoverage":true},{"functionName":"tryExtensions","ranges":[{"startOffset":11479,"endOffset":11685,"count":1206},{"startOffset":11561,"endOffset":11667,"count":4134},{"startOffset":11633,"endOffset":11663,"count":657},{"startOffset":11667,"endOffset":11684,"count":549}],"isBlockCoverage":true},{"functionName":"findLongestRegisteredExtension","ranges":[{"startOffset":11774,"endOffset":12242,"count":772},{"startOffset":11998,"endOffset":12224,"count":779},{"startOffset":12049,"endOffset":12058,"count":0},{"startOffset":12196,"endOffset":12220,"count":765},{"startOffset":12224,"endOffset":12241,"count":7}],"isBlockCoverage":true},{"functionName":"trySelfParentPath","ranges":[{"startOffset":12244,"endOffset":12533,"count":1282},{"startOffset":12296,"endOffset":12309,"count":4},{"startOffset":12309,"endOffset":12367,"count":1278},{"startOffset":12367,"endOffset":12531,"count":0}],"isBlockCoverage":true},{"functionName":"trySelf","ranges":[{"startOffset":12535,"endOffset":13384,"count":1282},{"startOffset":12594,"endOffset":12607,"count":4},{"startOffset":12607,"endOffset":12677,"count":1278},{"startOffset":12677,"endOffset":12682,"count":0},{"startOffset":12695,"endOffset":12723,"count":1278},{"startOffset":12725,"endOffset":12738,"count":1104},{"startOffset":12738,"endOffset":12775,"count":174},{"startOffset":12775,"endOffset":12788,"count":0},{"startOffset":12788,"endOffset":12835,"count":174},{"startOffset":12835,"endOffset":12861,"count":0},{"startOffset":12861,"endOffset":13027,"count":174},{"startOffset":12923,"endOffset":12998,"count":0},{"startOffset":13027,"endOffset":13382,"count":0}],"isBlockCoverage":true},{"functionName":"resolveExports","ranges":[{"startOffset":13545,"endOffset":14253,"count":1189},{"startOffset":13753,"endOffset":13758,"count":603},{"startOffset":13777,"endOffset":13784,"count":603},{"startOffset":13784,"endOffset":13885,"count":586},{"startOffset":13895,"endOffset":14251,"count":70},{"startOffset":14098,"endOffset":14247,"count":0}],"isBlockCoverage":true},{"functionName":"Module._findPath","ranges":[{"startOffset":14319,"endOffset":16931,"count":1283},{"startOffset":14429,"endOffset":14452,"count":8},{"startOffset":14452,"endOffset":14515,"count":1275},{"startOffset":14492,"endOffset":14515,"count":0},{"startOffset":14652,"endOffset":14665,"count":139},{"startOffset":14665,"endOffset":14808,"count":1144},{"startOffset":14832,"endOffset":14907,"count":1142},{"startOffset":14907,"endOffset":14969,"count":1144},{"startOffset":14969,"endOffset":16912,"count":2547},{"startOffset":15067,"endOffset":15087,"count":2540},{"startOffset":15089,"endOffset":15098,"count":1351},{"startOffset":15098,"endOffset":15126,"count":1196},{"startOffset":15126,"endOffset":15256,"count":1189},{"startOffset":15227,"endOffset":15250,"count":70},{"startOffset":15256,"endOffset":15385,"count":1126},{"startOffset":15385,"endOffset":16563,"count":1122},{"startOffset":15407,"endOffset":16340,"count":52},{"startOffset":15440,"endOffset":15608,"count":51},{"startOffset":15474,"endOffset":15534,"count":0},{"startOffset":15608,"endOffset":16332,"count":1},{"startOffset":15640,"endOffset":16272,"count":0},{"startOffset":16363,"endOffset":16557,"count":1070},{"startOffset":16453,"endOffset":16491,"count":1024},{"startOffset":16563,"endOffset":16583,"count":1126},{"startOffset":16583,"endOffset":16594,"count":550},{"startOffset":16596,"endOffset":16812,"count":497},{"startOffset":16706,"endOffset":16744,"count":4},{"startOffset":16812,"endOffset":16832,"count":1126},{"startOffset":16832,"endOffset":16908,"count":1073},{"startOffset":16912,"endOffset":16930,"count":1}],"isBlockCoverage":true},{"functionName":"Module._nodeModulePaths","ranges":[{"startOffset":17175,"endOffset":18691,"count":0}],"isBlockCoverage":false},{"functionName":"Module._nodeModulePaths","ranges":[{"startOffset":18783,"endOffset":19922,"count":778},{"startOffset":19061,"endOffset":19086,"count":0},{"startOffset":19379,"endOffset":19800,"count":71410},{"startOffset":19475,"endOffset":19670,"count":7629},{"startOffset":19512,"endOffset":19629,"count":6811},{"startOffset":19670,"endOffset":19794,"count":63781},{"startOffset":19690,"endOffset":19794,"count":18711},{"startOffset":19725,"endOffset":19751,"count":11900},{"startOffset":19751,"endOffset":19786,"count":6811}],"isBlockCoverage":true},{"functionName":"Module._resolveLookupPaths","ranges":[{"startOffset":19956,"endOffset":21141,"count":1282},{"startOffset":20034,"endOffset":20100,"count":0},{"startOffset":20185,"endOffset":20384,"count":673},{"startOffset":20265,"endOffset":20315,"count":513},{"startOffset":20316,"endOffset":20383,"count":0},{"startOffset":20386,"endOffset":20613,"count":609},{"startOffset":20432,"endOffset":20447,"count":605},{"startOffset":20449,"endOffset":20513,"count":605},{"startOffset":20602,"endOffset":20608,"count":0},{"startOffset":20613,"endOffset":20681,"count":673},{"startOffset":20682,"endOffset":20701,"count":673},{"startOffset":20703,"endOffset":20952,"count":0},{"startOffset":20952,"endOffset":21140,"count":673}],"isBlockCoverage":true},{"functionName":"emitCircularRequireWarning","ranges":[{"startOffset":21144,"endOffset":21327,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21520,"endOffset":21892,"count":0}],"isBlockCoverage":false},{"functionName":"getOwnPropertyDescriptor","ranges":[{"startOffset":21897,"endOffset":22138,"count":0}],"isBlockCoverage":false},{"functionName":"getExportsForCircularRequire","ranges":[{"startOffset":22144,"endOffset":22788,"count":28},{"startOffset":22313,"endOffset":22606,"count":21},{"startOffset":22608,"endOffset":22760,"count":2}],"isBlockCoverage":true},{"functionName":"Module._load","ranges":[{"startOffset":23200,"endOffset":26126,"count":1743},{"startOffset":23283,"endOffset":24060,"count":1739},{"startOffset":23703,"endOffset":24056,"count":260},{"startOffset":23795,"endOffset":23988,"count":254},{"startOffset":23893,"endOffset":23943,"count":5},{"startOffset":23943,"endOffset":23988,"count":249},{"startOffset":23988,"endOffset":24056,"count":6},{"startOffset":24060,"endOffset":24183,"count":1489},{"startOffset":24183,"endOffset":24446,"count":0},{"startOffset":24446,"endOffset":24530,"count":1488},{"startOffset":24530,"endOffset":24890,"count":508},{"startOffset":24610,"endOffset":24838,"count":26},{"startOffset":24706,"endOffset":24733,"count":3},{"startOffset":24743,"endOffset":24793,"count":23},{"startOffset":24793,"endOffset":24838,"count":3},{"startOffset":24838,"endOffset":24886,"count":482},{"startOffset":24890,"endOffset":24952,"count":983},{"startOffset":24952,"endOffset":24974,"count":211},{"startOffset":24976,"endOffset":24995,"count":211},{"startOffset":24995,"endOffset":25094,"count":772},{"startOffset":25094,"endOffset":25125,"count":769},{"startOffset":25142,"endOffset":25201,"count":1},{"startOffset":25201,"endOffset":25267,"count":772},{"startOffset":25267,"endOffset":25336,"count":769},{"startOffset":25336,"endOffset":26098,"count":772},{"startOffset":25441,"endOffset":25844,"count":0},{"startOffset":26026,"endOffset":26094,"count":2},{"startOffset":26098,"endOffset":26125,"count":772}],"isBlockCoverage":true},{"functionName":"Module._resolveFilename","ranges":[{"startOffset":26155,"endOffset":29160,"count":1493},{"startOffset":26303,"endOffset":26328,"count":211},{"startOffset":26328,"endOffset":26378,"count":1282},{"startOffset":26378,"endOffset":26397,"count":3},{"startOffset":26399,"endOffset":27476,"count":3},{"startOffset":26586,"endOffset":26630,"count":0},{"startOffset":26713,"endOffset":26753,"count":0},{"startOffset":27125,"endOffset":27259,"count":30},{"startOffset":27283,"endOffset":27472,"count":0},{"startOffset":27476,"endOffset":27544,"count":1279},{"startOffset":27544,"endOffset":27558,"count":1282},{"startOffset":27558,"endOffset":27568,"count":1278},{"startOffset":27570,"endOffset":28094,"count":1278},{"startOffset":27600,"endOffset":28090,"count":0},{"startOffset":28094,"endOffset":28255,"count":1282},{"startOffset":28255,"endOffset":28451,"count":0},{"startOffset":28451,"endOffset":28598,"count":1282},{"startOffset":28598,"endOffset":28614,"count":1281},{"startOffset":28614,"endOffset":28726,"count":1},{"startOffset":28726,"endOffset":28799,"count":6},{"startOffset":28781,"endOffset":28793,"count":0},{"startOffset":28799,"endOffset":29159,"count":1}],"isBlockCoverage":true},{"functionName":"finalizeEsmResolution","ranges":[{"startOffset":29163,"endOffset":29876,"count":70},{"startOffset":29328,"endOffset":29447,"count":0},{"startOffset":29539,"endOffset":29549,"count":0},{"startOffset":29551,"endOffset":29708,"count":0},{"startOffset":29741,"endOffset":29875,"count":0}],"isBlockCoverage":true},{"functionName":"createEsmNotFoundErr","ranges":[{"startOffset":29878,"endOffset":30168,"count":0}],"isBlockCoverage":false},{"functionName":"Module.load","ranges":[{"startOffset":30257,"endOffset":31078,"count":772},{"startOffset":30592,"endOffset":30622,"count":0},{"startOffset":30628,"endOffset":30670,"count":0},{"startOffset":30944,"endOffset":30992,"count":0}],"isBlockCoverage":true},{"functionName":"Module.require","ranges":[{"startOffset":31196,"endOffset":31495,"count":1739},{"startOffset":31256,"endOffset":31374,"count":0}],"isBlockCoverage":true},{"functionName":"wrapSafe","ranges":[{"startOffset":31675,"endOffset":32784,"count":752},{"startOffset":31748,"endOffset":32204,"count":0},{"startOffset":32664,"endOffset":32782,"count":0}],"isBlockCoverage":true},{"functionName":"importModuleDynamically","ranges":[{"startOffset":31929,"endOffset":32191,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamically","ranges":[{"startOffset":32374,"endOffset":32650,"count":3}],"isBlockCoverage":true},{"functionName":"Module._compile","ranges":[{"startOffset":32984,"endOffset":34833,"count":752},{"startOffset":33060,"endOffset":33070,"count":0},{"startOffset":33072,"endOffset":33239,"count":0},{"startOffset":33420,"endOffset":33444,"count":0},{"startOffset":33446,"endOffset":34182,"count":0},{"startOffset":34405,"endOffset":34431,"count":4},{"startOffset":34456,"endOffset":34595,"count":0},{"startOffset":34797,"endOffset":34814,"count":4}],"isBlockCoverage":true},{"functionName":"Module._extensions..js","ranges":[{"startOffset":34892,"endOffset":36652,"count":752},{"startOffset":35053,"endOffset":35061,"count":3},{"startOffset":35063,"endOffset":35128,"count":3},{"startOffset":35128,"endOffset":35188,"count":749},{"startOffset":35237,"endOffset":36612,"count":745},{"startOffset":35378,"endOffset":36608,"count":0}],"isBlockCoverage":true},{"functionName":"Module._extensions..json","ranges":[{"startOffset":36716,"endOffset":37080,"count":20},{"startOffset":36811,"endOffset":36821,"count":0},{"startOffset":36823,"endOffset":36932,"count":0},{"startOffset":36997,"endOffset":37078,"count":0}],"isBlockCoverage":true},{"functionName":"Module._extensions..node","ranges":[{"startOffset":37144,"endOffset":37462,"count":0}],"isBlockCoverage":false},{"functionName":"createRequireFromPath","ranges":[{"startOffset":37465,"endOffset":37926,"count":0}],"isBlockCoverage":false},{"functionName":"createRequire","ranges":[{"startOffset":38034,"endOffset":38587,"count":0}],"isBlockCoverage":false},{"functionName":"Module._initPaths","ranges":[{"startOffset":38648,"endOffset":39612,"count":1},{"startOffset":38689,"endOffset":38714,"count":0},{"startOffset":38766,"endOffset":38789,"count":0},{"startOffset":38997,"endOffset":39039,"count":0},{"startOffset":39338,"endOffset":39479,"count":0}],"isBlockCoverage":true},{"functionName":"Module._preloadModules","ranges":[{"startOffset":39640,"endOffset":40222,"count":0}],"isBlockCoverage":false},{"functionName":"syncBuiltinESMExports","ranges":[{"startOffset":40256,"endOffset":40412,"count":0}],"isBlockCoverage":false}]},{"scriptId":"103","url":"node:internal/modules/package_json_reader","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":983,"count":1}],"isBlockCoverage":false},{"functionName":"read","ranges":[{"startOffset":279,"endOffset":954,"count":536},{"startOffset":332,"endOffset":369,"count":7},{"startOffset":369,"endOffset":601,"count":529},{"startOffset":601,"endOffset":904,"count":264},{"startOffset":635,"endOffset":769,"count":1},{"startOffset":694,"endOffset":747,"count":0},{"startOffset":797,"endOffset":900,"count":0},{"startOffset":904,"endOffset":953,"count":529}],"isBlockCoverage":true}]},{"scriptId":"104","url":"node:internal/process/esm_loader","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2883,"count":1}],"isBlockCoverage":false},{"functionName":"exports.initializeImportMetaObject","ranges":[{"startOffset":450,"endOffset":746,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamicallyCallback","ranges":[{"startOffset":791,"endOffset":1238,"count":3},{"startOffset":1182,"endOffset":1237,"count":0}],"isBlockCoverage":true},{"functionName":"initializeLoader","ranges":[{"startOffset":1410,"endOffset":2526,"count":0}],"isBlockCoverage":false},{"functionName":"loadESM","ranges":[{"startOffset":2546,"endOffset":2881,"count":0}],"isBlockCoverage":false}]},{"scriptId":"105","url":"node:internal/modules/esm/loader","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":18003,"count":1}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":1877,"endOffset":2720,"count":1}],"isBlockCoverage":false},{"functionName":"pluckHooks","ranges":[{"startOffset":2732,"endOffset":4189,"count":0}],"isBlockCoverage":false},{"functionName":"addCustomLoaders","ranges":[{"startOffset":4451,"endOffset":5282,"count":0}],"isBlockCoverage":false},{"functionName":"eval","ranges":[{"startOffset":5286,"endOffset":6102,"count":0}],"isBlockCoverage":false},{"functionName":"getBaseURL","ranges":[{"startOffset":6882,"endOffset":7482,"count":3},{"startOffset":7011,"endOffset":7462,"count":0}],"isBlockCoverage":true},{"functionName":"getModuleJob","ranges":[{"startOffset":8217,"endOffset":9061,"count":3},{"startOffset":8350,"endOffset":8601,"count":0},{"startOffset":8865,"endOffset":8927,"count":0}],"isBlockCoverage":true},{"functionName":"#createModuleJob","ranges":[{"startOffset":9699,"endOffset":10530,"count":3},{"startOffset":10248,"endOffset":10288,"count":0}],"isBlockCoverage":true},{"functionName":"moduleProvider","ranges":[{"startOffset":9787,"endOffset":10190,"count":3},{"startOffset":10036,"endOffset":10108,"count":0}],"isBlockCoverage":true},{"functionName":"import","ranges":[{"startOffset":11164,"endOffset":11728,"count":3},{"startOffset":11683,"endOffset":11701,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11513,"endOffset":11531,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11547,"endOffset":11584,"count":3}],"isBlockCoverage":true},{"functionName":"load","ranges":[{"startOffset":12085,"endOffset":13303,"count":3},{"startOffset":12230,"endOffset":12254,"count":0},{"startOffset":12355,"endOffset":12470,"count":0},{"startOffset":12553,"endOffset":12776,"count":0},{"startOffset":12814,"endOffset":12959,"count":0},{"startOffset":12991,"endOffset":13026,"count":0},{"startOffset":13027,"endOffset":13061,"count":0},{"startOffset":13062,"endOffset":13097,"count":0},{"startOffset":13104,"endOffset":13250,"count":0}],"isBlockCoverage":true},{"functionName":"preload","ranges":[{"startOffset":13307,"endOffset":15769,"count":0}],"isBlockCoverage":false},{"functionName":"importMetaInitialize","ranges":[{"startOffset":15773,"endOffset":15862,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":16434,"endOffset":17918,"count":3},{"startOffset":16642,"endOffset":16676,"count":0},{"startOffset":16683,"endOffset":16782,"count":0},{"startOffset":16951,"endOffset":16977,"count":0},{"startOffset":17196,"endOffset":17318,"count":0},{"startOffset":17433,"endOffset":17578,"count":0},{"startOffset":17613,"endOffset":17798,"count":0}],"isBlockCoverage":true}]},{"scriptId":"106","url":"node:internal/modules/esm/module_map","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1444,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":263,"endOffset":288,"count":1}],"isBlockCoverage":true},{"functionName":"ModuleMap","ranges":[{"startOffset":507,"endOffset":535,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":584,"endOffset":727,"count":3},{"startOffset":714,"endOffset":722,"count":0}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":730,"endOffset":1253,"count":3},{"startOffset":882,"endOffset":918,"count":0},{"startOffset":920,"endOffset":990,"count":0},{"startOffset":1074,"endOffset":1080,"count":0}],"isBlockCoverage":true},{"functionName":"has","ranges":[{"startOffset":1256,"endOffset":1413,"count":0}],"isBlockCoverage":false}]},{"scriptId":"107","url":"node:internal/modules/esm/module_job","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8238,"count":1}],"isBlockCoverage":false},{"functionName":"isCommonJSGlobalLikeNotDefinedError","ranges":[{"startOffset":933,"endOffset":1063,"count":0}],"isBlockCoverage":false},{"functionName":"ModuleJob","ranges":[{"startOffset":1301,"endOffset":3173,"count":3}],"isBlockCoverage":true},{"functionName":"link","ranges":[{"startOffset":1869,"endOffset":2800,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2325,"endOffset":2633,"count":0}],"isBlockCoverage":false},{"functionName":"instantiate","ranges":[{"startOffset":3177,"endOffset":3322,"count":3}],"isBlockCoverage":true},{"functionName":"_instantiate","ranges":[{"startOffset":3326,"endOffset":6972,"count":3},{"startOffset":3823,"endOffset":4000,"count":0},{"startOffset":4057,"endOffset":6725,"count":0}],"isBlockCoverage":true},{"functionName":"addJobsToDependencyGraph","ranges":[{"startOffset":3425,"endOffset":3722,"count":3},{"startOffset":3486,"endOffset":3511,"count":0}],"isBlockCoverage":true},{"functionName":"run","ranges":[{"startOffset":6976,"endOffset":8158,"count":3},{"startOffset":7151,"endOffset":8118,"count":0}],"isBlockCoverage":true}]},{"scriptId":"108","url":"node:internal/modules/esm/assert","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3624,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1295,"endOffset":1333,"count":5}],"isBlockCoverage":true},{"functionName":"validateAssertions","ranges":[{"startOffset":1754,"endOffset":2908,"count":3},{"startOffset":1935,"endOffset":2080,"count":0},{"startOffset":2345,"endOffset":2405,"count":0},{"startOffset":2411,"endOffset":2519,"count":0},{"startOffset":2525,"endOffset":2902,"count":0}],"isBlockCoverage":true},{"functionName":"handleInvalidType","ranges":[{"startOffset":3140,"endOffset":3554,"count":0}],"isBlockCoverage":false}]},{"scriptId":"109","url":"node:internal/modules/esm/resolve","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":41025,"count":1}],"isBlockCoverage":false},{"functionName":"emitFolderMapDeprecation","ranges":[{"startOffset":2764,"endOffset":3377,"count":0}],"isBlockCoverage":false},{"functionName":"emitTrailingSlashPatternDeprecation","ranges":[{"startOffset":3379,"endOffset":4043,"count":0}],"isBlockCoverage":false},{"functionName":"emitLegacyIndexDeprecation","ranges":[{"startOffset":4189,"endOffset":5285,"count":0}],"isBlockCoverage":false},{"functionName":"getConditionsSet","ranges":[{"startOffset":5355,"endOffset":5707,"count":3},{"startOffset":5464,"endOffset":5672,"count":0}],"isBlockCoverage":true},{"functionName":"tryStatSync","ranges":[{"startOffset":5910,"endOffset":5976,"count":8},{"startOffset":5962,"endOffset":5976,"count":4}],"isBlockCoverage":true},{"functionName":"getPackageConfig","ranges":[{"startOffset":6110,"endOffset":7448,"count":10},{"startOffset":6238,"endOffset":6264,"count":3},{"startOffset":6264,"endOffset":6347,"count":7},{"startOffset":6347,"endOffset":6622,"count":4},{"startOffset":6622,"endOffset":6692,"count":3},{"startOffset":6692,"endOffset":6871,"count":0},{"startOffset":6871,"endOffset":6993,"count":3},{"startOffset":6993,"endOffset":7012,"count":0},{"startOffset":7014,"endOffset":7067,"count":3},{"startOffset":7067,"endOffset":7084,"count":1},{"startOffset":7084,"endOffset":7117,"count":3},{"startOffset":7117,"endOffset":7134,"count":0},{"startOffset":7134,"endOffset":7234,"count":3},{"startOffset":7236,"endOffset":7250,"count":1},{"startOffset":7250,"endOffset":7447,"count":3}],"isBlockCoverage":true},{"functionName":"getPackageScopeConfig","ranges":[{"startOffset":7520,"endOffset":8620,"count":4},{"startOffset":7638,"endOffset":8291,"count":9},{"startOffset":7778,"endOffset":7784,"count":0},{"startOffset":7943,"endOffset":7964,"count":4},{"startOffset":7964,"endOffset":8281,"count":5},{"startOffset":8281,"endOffset":8287,"count":0},{"startOffset":8291,"endOffset":8619,"count":0}],"isBlockCoverage":true},{"functionName":"fileExists","ranges":[{"startOffset":8681,"endOffset":8779,"count":1},{"startOffset":8768,"endOffset":8776,"count":0}],"isBlockCoverage":true},{"functionName":"legacyMainResolve","ranges":[{"startOffset":9167,"endOffset":11006,"count":1},{"startOffset":9506,"endOffset":10491,"count":0},{"startOffset":10515,"endOffset":11005,"count":0}],"isBlockCoverage":true},{"functionName":"resolveExtensionsWithTryExactName","ranges":[{"startOffset":11069,"endOffset":11200,"count":0}],"isBlockCoverage":false},{"functionName":"resolveExtensions","ranges":[{"startOffset":11318,"endOffset":11575,"count":0}],"isBlockCoverage":false},{"functionName":"resolveDirectoryEntry","ranges":[{"startOffset":11638,"endOffset":12169,"count":0}],"isBlockCoverage":false},{"functionName":"finalizeResolution","ranges":[{"startOffset":12400,"endOffset":14285,"count":3},{"startOffset":12531,"endOffset":12674,"count":0},{"startOffset":12786,"endOffset":13539,"count":0},{"startOffset":13604,"endOffset":13640,"count":0},{"startOffset":13677,"endOffset":13804,"count":0},{"startOffset":13831,"endOffset":13945,"count":0},{"startOffset":14190,"endOffset":14195,"count":0}],"isBlockCoverage":true},{"functionName":"throwImportNotDefined","ranges":[{"startOffset":14397,"endOffset":14612,"count":0}],"isBlockCoverage":false},{"functionName":"throwExportsNotFound","ranges":[{"startOffset":14722,"endOffset":14921,"count":0}],"isBlockCoverage":false},{"functionName":"throwInvalidSubpath","ranges":[{"startOffset":15069,"endOffset":15419,"count":0}],"isBlockCoverage":false},{"functionName":"throwInvalidPackageTarget","ranges":[{"startOffset":15421,"endOffset":15803,"count":0}],"isBlockCoverage":false},{"functionName":"resolvePackageTargetString","ranges":[{"startOffset":16077,"endOffset":17833,"count":70},{"startOffset":16217,"endOffset":16228,"count":0},{"startOffset":16229,"endOffset":16265,"count":0},{"startOffset":16271,"endOffset":16344,"count":0},{"startOffset":16394,"endOffset":17005,"count":0},{"startOffset":17092,"endOffset":17165,"count":0},{"startOffset":17388,"endOffset":17461,"count":0},{"startOffset":17501,"endOffset":17832,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16781,"endOffset":16794,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17761,"endOffset":17774,"count":0}],"isBlockCoverage":false},{"functionName":"isArrayIndex","ranges":[{"startOffset":17888,"endOffset":18028,"count":67},{"startOffset":17980,"endOffset":18025,"count":0}],"isBlockCoverage":true},{"functionName":"resolvePackageTarget","ranges":[{"startOffset":18030,"endOffset":20232,"count":117},{"startOffset":18212,"endOffset":18355,"count":70},{"startOffset":18355,"endOffset":20117,"count":47},{"startOffset":18387,"endOffset":19214,"count":18},{"startOffset":18418,"endOffset":18444,"count":0},{"startOffset":18753,"endOffset":18901,"count":0},{"startOffset":18941,"endOffset":18968,"count":0},{"startOffset":19003,"endOffset":19060,"count":0},{"startOffset":19094,"endOffset":19156,"count":0},{"startOffset":19164,"endOffset":19214,"count":0},{"startOffset":19214,"endOffset":20117,"count":29},{"startOffset":19367,"endOffset":19595,"count":67},{"startOffset":19425,"endOffset":19589,"count":0},{"startOffset":19638,"endOffset":20042,"count":55},{"startOffset":19695,"endOffset":19717,"count":44},{"startOffset":19719,"endOffset":20036,"count":29},{"startOffset":19989,"endOffset":19998,"count":0},{"startOffset":20042,"endOffset":20117,"count":0},{"startOffset":20117,"endOffset":20231,"count":0}],"isBlockCoverage":true},{"functionName":"isConditionalExportsMainSugar","ranges":[{"startOffset":20368,"endOffset":21303,"count":70},{"startOffset":20500,"endOffset":20512,"count":0},{"startOffset":20568,"endOffset":20581,"count":0},{"startOffset":20721,"endOffset":21272,"count":368},{"startOffset":20831,"endOffset":20888,"count":70},{"startOffset":20888,"endOffset":21268,"count":298},{"startOffset":20944,"endOffset":21268,"count":0}],"isBlockCoverage":true},{"functionName":"packageExportsResolve","ranges":[{"startOffset":21513,"endOffset":24181,"count":70},{"startOffset":21725,"endOffset":21752,"count":1},{"startOffset":22130,"endOffset":22203,"count":0},{"startOffset":22246,"endOffset":24180,"count":0}],"isBlockCoverage":true},{"functionName":"patternKeyCompare","ranges":[{"startOffset":24183,"endOffset":24714,"count":0}],"isBlockCoverage":false},{"functionName":"packageImportsResolve","ranges":[{"startOffset":24843,"endOffset":27612,"count":0}],"isBlockCoverage":false},{"functionName":"getPackageType","ranges":[{"startOffset":27668,"endOffset":27781,"count":3}],"isBlockCoverage":true},{"functionName":"parsePackageName","ranges":[{"startOffset":27943,"endOffset":28995,"count":1},{"startOffset":28214,"endOffset":28253,"count":0},{"startOffset":28424,"endOffset":28476,"count":0},{"startOffset":28653,"endOffset":28678,"count":0},{"startOffset":28705,"endOffset":28824,"count":0},{"startOffset":28885,"endOffset":28938,"count":0}],"isBlockCoverage":true},{"functionName":"packageResolve","ranges":[{"startOffset":29129,"endOffset":31185,"count":1},{"startOffset":29240,"endOffset":29276,"count":0},{"startOffset":29580,"endOffset":29626,"count":0},{"startOffset":29627,"endOffset":29660,"count":0},{"startOffset":29662,"endOffset":29795,"count":0},{"startOffset":29970,"endOffset":30976,"count":5},{"startOffset":30152,"endOffset":30429,"count":4},{"startOffset":30267,"endOffset":30293,"count":0},{"startOffset":30429,"endOffset":30575,"count":1},{"startOffset":30575,"endOffset":30608,"count":0},{"startOffset":30610,"endOffset":30743,"count":0},{"startOffset":30743,"endOffset":30885,"count":1},{"startOffset":30885,"endOffset":30976,"count":0},{"startOffset":30976,"endOffset":31184,"count":0}],"isBlockCoverage":true},{"functionName":"isBareSpecifier","ranges":[{"startOffset":31246,"endOffset":31356,"count":0}],"isBlockCoverage":false},{"functionName":"isRelativeSpecifier","ranges":[{"startOffset":31358,"endOffset":31629,"count":6},{"startOffset":31428,"endOffset":31611,"count":0}],"isBlockCoverage":true},{"functionName":"shouldBeTreatedAsRelativeOrAbsolutePath","ranges":[{"startOffset":31631,"endOffset":31814,"count":6},{"startOffset":31717,"endOffset":31730,"count":0},{"startOffset":31759,"endOffset":31771,"count":0}],"isBlockCoverage":true},{"functionName":"moduleResolve","ranges":[{"startOffset":31985,"endOffset":32776,"count":3},{"startOffset":32311,"endOffset":32357,"count":0},{"startOffset":32402,"endOffset":32480,"count":0},{"startOffset":32541,"endOffset":32649,"count":1},{"startOffset":32695,"endOffset":32711,"count":0}],"isBlockCoverage":true},{"functionName":"resolveAsCommonJS","ranges":[{"startOffset":32922,"endOffset":34379,"count":0}],"isBlockCoverage":false},{"functionName":"checkIfDisallowedImport","ranges":[{"startOffset":34441,"endOffset":35610,"count":3},{"startOffset":34703,"endOffset":35604,"count":0}],"isBlockCoverage":true},{"functionName":"throwIfUnsupportedURLProtocol","ranges":[{"startOffset":35612,"endOffset":35810,"count":3},{"startOffset":35689,"endOffset":35716,"count":0},{"startOffset":35717,"endOffset":35750,"count":0},{"startOffset":35752,"endOffset":35808,"count":0}],"isBlockCoverage":true},{"functionName":"throwIfUnsupportedURLScheme","ranges":[{"startOffset":35812,"endOffset":36300,"count":3},{"startOffset":35905,"endOffset":35939,"count":2},{"startOffset":35940,"endOffset":35974,"count":0},{"startOffset":35975,"endOffset":36118,"count":0},{"startOffset":36123,"endOffset":36298,"count":0}],"isBlockCoverage":true},{"functionName":"defaultResolve","ranges":[{"startOffset":36302,"endOffset":40238,"count":3},{"startOffset":36449,"endOffset":36459,"count":0},{"startOffset":36461,"endOffset":37252,"count":0},{"startOffset":37356,"endOffset":37395,"count":0},{"startOffset":37483,"endOffset":37542,"count":0},{"startOffset":37590,"endOffset":37775,"count":2},{"startOffset":37665,"endOffset":37767,"count":0},{"startOffset":37782,"endOffset":37824,"count":0},{"startOffset":37829,"endOffset":37864,"count":1},{"startOffset":38198,"endOffset":38217,"count":0},{"startOffset":38282,"endOffset":38312,"count":2},{"startOffset":38314,"endOffset":38340,"count":0},{"startOffset":38466,"endOffset":38987,"count":0},{"startOffset":39142,"endOffset":39164,"count":0},{"startOffset":39190,"endOffset":39994,"count":0}],"isBlockCoverage":true},{"functionName":"defaultResolve","ranges":[{"startOffset":40604,"endOffset":41021,"count":0}],"isBlockCoverage":false}]},{"scriptId":"110","url":"node:internal/modules/esm/get_format","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4134,"count":1}],"isBlockCoverage":false},{"functionName":"node:","ranges":[{"startOffset":1124,"endOffset":1155,"count":0}],"isBlockCoverage":false},{"functionName":"getDataProtocolModuleFormat","ranges":[{"startOffset":1162,"endOffset":1378,"count":0}],"isBlockCoverage":false},{"functionName":"getFileProtocolModuleFormat","ranges":[{"startOffset":1502,"endOffset":2843,"count":3},{"startOffset":1708,"endOffset":1718,"count":0},{"startOffset":1736,"endOffset":2840,"count":0}],"isBlockCoverage":true},{"functionName":"getHttpProtocolModuleFormat","ranges":[{"startOffset":2979,"endOffset":3249,"count":0}],"isBlockCoverage":false},{"functionName":"defaultGetFormatWithoutErrors","ranges":[{"startOffset":3408,"endOffset":3652,"count":3},{"startOffset":3571,"endOffset":3583,"count":0}],"isBlockCoverage":true},{"functionName":"defaultGetFormat","ranges":[{"startOffset":3811,"endOffset":4035,"count":0}],"isBlockCoverage":false}]},{"scriptId":"111","url":"node:internal/modules/esm/fetch_module","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7773,"count":1}],"isBlockCoverage":false},{"functionName":"HTTPSGet","ranges":[{"startOffset":1164,"endOffset":1372,"count":0}],"isBlockCoverage":false},{"functionName":"HTTPGet","ranges":[{"startOffset":1389,"endOffset":1590,"count":0}],"isBlockCoverage":false},{"functionName":"dnsLookup","ranges":[{"startOffset":1592,"endOffset":1749,"count":0}],"isBlockCoverage":false},{"functionName":"createBrotliDecompress","ranges":[{"startOffset":1761,"endOffset":1969,"count":0}],"isBlockCoverage":false},{"functionName":"createUnzip","ranges":[{"startOffset":1971,"endOffset":2135,"count":0}],"isBlockCoverage":false},{"functionName":"fetchWithRedirects","ranges":[{"startOffset":2215,"endOffset":5883,"count":0}],"isBlockCoverage":false},{"functionName":"isLocalAddress","ranges":[{"startOffset":6243,"endOffset":6694,"count":0}],"isBlockCoverage":false},{"functionName":"fetchModule","ranges":[{"startOffset":7152,"endOffset":7722,"count":0}],"isBlockCoverage":false}]},{"scriptId":"112","url":"node:net","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":49192,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1464,"endOffset":1489,"count":1}],"isBlockCoverage":true},{"functionName":"noop","ranges":[{"startOffset":3481,"endOffset":3489,"count":0}],"isBlockCoverage":false},{"functionName":"getFlags","ranges":[{"startOffset":3492,"endOffset":3586,"count":0}],"isBlockCoverage":false},{"functionName":"createHandle","ranges":[{"startOffset":3588,"endOffset":3969,"count":0}],"isBlockCoverage":false},{"functionName":"getNewAsyncId","ranges":[{"startOffset":3972,"endOffset":4110,"count":6},{"startOffset":4067,"endOffset":4085,"count":0}],"isBlockCoverage":true},{"functionName":"isPipeName","ranges":[{"startOffset":4113,"endOffset":4196,"count":0}],"isBlockCoverage":false},{"functionName":"createServer","ranges":[{"startOffset":4397,"endOffset":4501,"count":0}],"isBlockCoverage":false},{"functionName":"connect","ranges":[{"startOffset":4724,"endOffset":5015,"count":2},{"startOffset":4930,"endOffset":4975,"count":0}],"isBlockCoverage":true},{"functionName":"normalizeArgs","ranges":[{"startOffset":5510,"endOffset":6236,"count":2},{"startOffset":5578,"endOffset":5659,"count":0},{"startOffset":5807,"endOffset":6055,"count":0},{"startOffset":6129,"endOffset":6151,"count":0}],"isBlockCoverage":true},{"functionName":"initSocketHandle","ranges":[{"startOffset":6308,"endOffset":6911,"count":6},{"startOffset":6475,"endOffset":6909,"count":4},{"startOffset":6664,"endOffset":6905,"count":0}],"isBlockCoverage":true},{"functionName":"Socket","ranges":[{"startOffset":7164,"endOffset":11637,"count":4},{"startOffset":7224,"endOffset":7251,"count":0},{"startOffset":7279,"endOffset":7407,"count":0},{"startOffset":7477,"endOffset":7724,"count":0},{"startOffset":7786,"endOffset":7981,"count":0},{"startOffset":8502,"endOffset":8528,"count":0},{"startOffset":8934,"endOffset":10256,"count":2},{"startOffset":9078,"endOffset":10256,"count":0},{"startOffset":10343,"endOffset":10420,"count":0},{"startOffset":10421,"endOffset":10467,"count":0},{"startOffset":10469,"endOffset":10684,"count":0},{"startOffset":11188,"endOffset":11217,"count":2},{"startOffset":11219,"endOffset":11484,"count":0}],"isBlockCoverage":true},{"functionName":"_unrefTimer","ranges":[{"startOffset":11810,"endOffset":11940,"count":27},{"startOffset":11912,"endOffset":11934,"count":0}],"isBlockCoverage":true},{"functionName":"Socket._final","ranges":[{"startOffset":12060,"endOffset":12676,"count":2},{"startOffset":12174,"endOffset":12275,"count":0},{"startOffset":12302,"endOffset":12314,"count":0},{"startOffset":12592,"endOffset":12604,"count":0},{"startOffset":12631,"endOffset":12674,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":12248,"endOffset":12269,"count":0}],"isBlockCoverage":false},{"functionName":"afterShutdown","ranges":[{"startOffset":12679,"endOffset":12854,"count":2}],"isBlockCoverage":true},{"functionName":"writeAfterFIN","ranges":[{"startOffset":13061,"endOffset":13568,"count":0}],"isBlockCoverage":false},{"functionName":"Socket._onTimeout","ranges":[{"startOffset":13650,"endOffset":14154,"count":0}],"isBlockCoverage":false},{"functionName":"Socket.setNoDelay","ranges":[{"startOffset":14188,"endOffset":14565,"count":2},{"startOffset":14314,"endOffset":14320,"count":0},{"startOffset":14354,"endOffset":14408,"count":0}],"isBlockCoverage":true},{"functionName":"Socket.setKeepAlive","ranges":[{"startOffset":14601,"endOffset":15081,"count":0}],"isBlockCoverage":false},{"functionName":"Socket.address","ranges":[{"startOffset":15112,"endOffset":15156,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15223,"endOffset":15267,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15327,"endOffset":15383,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":15474,"endOffset":15789,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15858,"endOffset":15938,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16006,"endOffset":16051,"count":4}],"isBlockCoverage":true},{"functionName":"tryReadStart","ranges":[{"startOffset":16058,"endOffset":16304,"count":2},{"startOffset":16258,"endOffset":16302,"count":0}],"isBlockCoverage":true},{"functionName":"Socket._read","ranges":[{"startOffset":16396,"endOffset":16625,"count":6},{"startOffset":16451,"endOffset":16467,"count":4},{"startOffset":16469,"endOffset":16561,"count":2},{"startOffset":16561,"endOffset":16623,"count":4},{"startOffset":16594,"endOffset":16623,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16536,"endOffset":16555,"count":2}],"isBlockCoverage":true},{"functionName":"Socket.end","ranges":[{"startOffset":16652,"endOffset":16839,"count":2}],"isBlockCoverage":true},{"functionName":"Socket.pause","ranges":[{"startOffset":16868,"endOffset":17202,"count":0}],"isBlockCoverage":false},{"functionName":"Socket.resume","ranges":[{"startOffset":17232,"endOffset":17416,"count":4},{"startOffset":17265,"endOffset":17284,"count":0},{"startOffset":17285,"endOffset":17300,"count":0},{"startOffset":17301,"endOffset":17331,"count":0},{"startOffset":17333,"endOffset":17362,"count":0}],"isBlockCoverage":true},{"functionName":"Socket.read","ranges":[{"startOffset":17444,"endOffset":17630,"count":12},{"startOffset":17478,"endOffset":17497,"count":0},{"startOffset":17498,"endOffset":17513,"count":0},{"startOffset":17514,"endOffset":17544,"count":0},{"startOffset":17546,"endOffset":17575,"count":0}],"isBlockCoverage":true},{"functionName":"onReadableStreamEnd","ranges":[{"startOffset":17677,"endOffset":17776,"count":2}],"isBlockCoverage":true},{"functionName":"Socket.destroySoon","ranges":[{"startOffset":17810,"endOffset":17957,"count":2},{"startOffset":17894,"endOffset":17909,"count":0}],"isBlockCoverage":true},{"functionName":"Socket._destroy","ranges":[{"startOffset":17989,"endOffset":18943,"count":2},{"startOffset":18286,"endOffset":18292,"count":0},{"startOffset":18693,"endOffset":18764,"count":0},{"startOffset":18786,"endOffset":18941,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18505,"endOffset":18584,"count":2}],"isBlockCoverage":true},{"functionName":"Socket._getpeername","ranges":[{"startOffset":18978,"endOffset":19272,"count":0}],"isBlockCoverage":false},{"functionName":"protoGetter","ranges":[{"startOffset":19275,"endOffset":19435,"count":8}],"isBlockCoverage":true},{"functionName":"bytesRead","ranges":[{"startOffset":19462,"endOffset":19553,"count":0}],"isBlockCoverage":false},{"functionName":"remoteAddress","ranges":[{"startOffset":19586,"endOffset":19652,"count":0}],"isBlockCoverage":false},{"functionName":"remoteFamily","ranges":[{"startOffset":19684,"endOffset":19748,"count":0}],"isBlockCoverage":false},{"functionName":"remotePort","ranges":[{"startOffset":19778,"endOffset":19838,"count":0}],"isBlockCoverage":false},{"functionName":"Socket._getsockname","ranges":[{"startOffset":19875,"endOffset":20151,"count":0}],"isBlockCoverage":false},{"functionName":"localAddress","ranges":[{"startOffset":20183,"endOffset":20248,"count":0}],"isBlockCoverage":false},{"functionName":"localPort","ranges":[{"startOffset":20278,"endOffset":20337,"count":0}],"isBlockCoverage":false},{"functionName":"Socket.<computed>","ranges":[{"startOffset":20379,"endOffset":20426,"count":0}],"isBlockCoverage":false},{"functionName":"Socket._writeGeneric","ranges":[{"startOffset":20462,"endOffset":21223,"count":19},{"startOffset":20684,"endOffset":20877,"count":2},{"startOffset":20877,"endOffset":20958,"count":17},{"startOffset":20958,"endOffset":21014,"count":0},{"startOffset":21014,"endOffset":21068,"count":17},{"startOffset":21068,"endOffset":21104,"count":2},{"startOffset":21104,"endOffset":21161,"count":15},{"startOffset":21161,"endOffset":21183,"count":17},{"startOffset":21183,"endOffset":21221,"count":0}],"isBlockCoverage":true},{"functionName":"connect","ranges":[{"startOffset":20779,"endOffset":20859,"count":2}],"isBlockCoverage":true},{"functionName":"Socket._writev","ranges":[{"startOffset":21254,"endOffset":21322,"count":2}],"isBlockCoverage":true},{"functionName":"Socket._write","ranges":[{"startOffset":21352,"endOffset":21433,"count":15}],"isBlockCoverage":true},{"functionName":"_bytesDispatched","ranges":[{"startOffset":21626,"endOffset":21730,"count":0}],"isBlockCoverage":false},{"functionName":"bytesWritten","ranges":[{"startOffset":21762,"endOffset":22691,"count":0}],"isBlockCoverage":false},{"functionName":"checkBindError","ranges":[{"startOffset":22696,"endOffset":23495,"count":0}],"isBlockCoverage":false},{"functionName":"internalConnect","ranges":[{"startOffset":23498,"endOffset":25203,"count":2},{"startOffset":23753,"endOffset":24379,"count":0},{"startOffset":24699,"endOffset":24763,"count":0},{"startOffset":24767,"endOffset":24940,"count":0},{"startOffset":24953,"endOffset":25201,"count":0}],"isBlockCoverage":true},{"functionName":"Socket.connect","ranges":[{"startOffset":25233,"endOffset":26683,"count":2},{"startOffset":25642,"endOffset":25691,"count":0},{"startOffset":25837,"endOffset":25860,"count":0},{"startOffset":25866,"endOffset":25922,"count":0},{"startOffset":25973,"endOffset":26009,"count":0},{"startOffset":26033,"endOffset":26117,"count":0},{"startOffset":26247,"endOffset":26285,"count":0},{"startOffset":26475,"endOffset":26618,"count":0}],"isBlockCoverage":true},{"functionName":"lookupAndConnect","ranges":[{"startOffset":26687,"endOffset":29567,"count":2},{"startOffset":26805,"endOffset":26819,"count":0},{"startOffset":26867,"endOffset":26889,"count":0},{"startOffset":26891,"endOffset":26948,"count":0},{"startOffset":26967,"endOffset":27024,"count":0},{"startOffset":27125,"endOffset":27251,"count":0},{"startOffset":27395,"endOffset":27699,"count":0},{"startOffset":27741,"endOffset":27792,"count":0},{"startOffset":27819,"endOffset":27840,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27469,"endOffset":27681,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":28274,"endOffset":29563,"count":2}],"isBlockCoverage":true},{"functionName":"emitLookup","ranges":[{"startOffset":28313,"endOffset":29557,"count":2},{"startOffset":28601,"endOffset":28608,"count":0},{"startOffset":28625,"endOffset":28920,"count":0},{"startOffset":28941,"endOffset":29049,"count":0},{"startOffset":29077,"endOffset":29097,"count":0},{"startOffset":29099,"endOffset":29338,"count":0}],"isBlockCoverage":true},{"functionName":"connectErrorNT","ranges":[{"startOffset":29570,"endOffset":29629,"count":0}],"isBlockCoverage":false},{"functionName":"Socket.ref","ranges":[{"startOffset":29655,"endOffset":29842,"count":0}],"isBlockCoverage":false},{"functionName":"Socket.unref","ranges":[{"startOffset":29871,"endOffset":30064,"count":0}],"isBlockCoverage":false},{"functionName":"afterConnect","ranges":[{"startOffset":30068,"endOffset":31555,"count":2},{"startOffset":30238,"endOffset":30255,"count":0},{"startOffset":30421,"endOffset":30470,"count":0},{"startOffset":30507,"endOffset":30532,"count":0},{"startOffset":30686,"endOffset":30714,"count":0},{"startOffset":30716,"endOffset":30795,"count":0},{"startOffset":31027,"endOffset":31553,"count":0}],"isBlockCoverage":true},{"functionName":"addAbortSignalOption","ranges":[{"startOffset":31557,"endOffset":31997,"count":0}],"isBlockCoverage":false},{"functionName":"Server","ranges":[{"startOffset":31999,"endOffset":33260,"count":0}],"isBlockCoverage":false},{"functionName":"toNumber","ranges":[{"startOffset":33371,"endOffset":33436,"count":0}],"isBlockCoverage":false},{"functionName":"createServerHandle","ranges":[{"startOffset":33504,"endOffset":34956,"count":0}],"isBlockCoverage":false},{"functionName":"setupListenHandle","ranges":[{"startOffset":34958,"endOffset":37309,"count":0}],"isBlockCoverage":false},{"functionName":"emitErrorNT","ranges":[{"startOffset":37376,"endOffset":37438,"count":0}],"isBlockCoverage":false},{"functionName":"emitListeningNT","ranges":[{"startOffset":37441,"endOffset":37556,"count":0}],"isBlockCoverage":false},{"functionName":"listenInCluster","ranges":[{"startOffset":37559,"endOffset":38795,"count":0}],"isBlockCoverage":false},{"functionName":"Server.listen","ranges":[{"startOffset":38824,"endOffset":42362,"count":0}],"isBlockCoverage":false},{"functionName":"lookupAndListen","ranges":[{"startOffset":42365,"endOffset":42777,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":42840,"endOffset":42883,"count":0}],"isBlockCoverage":false},{"functionName":"Server.address","ranges":[{"startOffset":42958,"endOffset":43247,"count":0}],"isBlockCoverage":false},{"functionName":"onconnection","ranges":[{"startOffset":43250,"endOffset":44099,"count":0}],"isBlockCoverage":false},{"functionName":"Server.getConnections","ranges":[{"startOffset":44248,"endOffset":45001,"count":0}],"isBlockCoverage":false},{"functionName":"Server.close","ranges":[{"startOffset":45030,"endOffset":45897,"count":0}],"isBlockCoverage":false},{"functionName":"Server._emitCloseIfDrained","ranges":[{"startOffset":45939,"endOffset":46325,"count":0}],"isBlockCoverage":false},{"functionName":"emitCloseNT","ranges":[{"startOffset":46329,"endOffset":46412,"count":0}],"isBlockCoverage":false},{"functionName":"Server.<computed>","ranges":[{"startOffset":46471,"endOffset":46633,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":46836,"endOffset":46872,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":46876,"endOffset":46917,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":46977,"endOffset":47008,"count":89}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":47012,"endOffset":47048,"count":6}],"isBlockCoverage":true},{"functionName":"Server._setupWorker","ranges":[{"startOffset":47086,"endOffset":47327,"count":0}],"isBlockCoverage":false},{"functionName":"Server.ref","ranges":[{"startOffset":47353,"endOffset":47451,"count":0}],"isBlockCoverage":false},{"functionName":"Server.unref","ranges":[{"startOffset":47479,"endOffset":47578,"count":0}],"isBlockCoverage":false},{"functionName":"_setSimultaneousAccepts","ranges":[{"startOffset":47720,"endOffset":48389,"count":0}],"isBlockCoverage":false},{"functionName":"_setSimultaneousAccepts","ranges":[{"startOffset":48428,"endOffset":48669,"count":0}],"isBlockCoverage":false},{"functionName":"get BlockList","ranges":[{"startOffset":48798,"endOffset":48900,"count":3}],"isBlockCoverage":true},{"functionName":"get SocketAddress","ranges":[{"startOffset":48904,"endOffset":49026,"count":2}],"isBlockCoverage":true}]},{"scriptId":"113","url":"node:internal/net","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1749,"count":1}],"isBlockCoverage":false},{"functionName":"isIPv4","ranges":[{"startOffset":997,"endOffset":1061,"count":10}],"isBlockCoverage":true},{"functionName":"isIPv6","ranges":[{"startOffset":1063,"endOffset":1127,"count":6}],"isBlockCoverage":true},{"functionName":"isIP","ranges":[{"startOffset":1129,"endOffset":1215,"count":10},{"startOffset":1165,"endOffset":1174,"count":4},{"startOffset":1174,"endOffset":1192,"count":6},{"startOffset":1192,"endOffset":1201,"count":0},{"startOffset":1201,"endOffset":1214,"count":6}],"isBlockCoverage":true},{"functionName":"makeSyncWrite","ranges":[{"startOffset":1217,"endOffset":1631,"count":0}],"isBlockCoverage":false}]},{"scriptId":"114","url":"node:internal/dtrace","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":568,"count":1}],"isBlockCoverage":false},{"functionName":"DTRACE_HTTP_CLIENT_REQUEST","ranges":[{"startOffset":97,"endOffset":105,"count":2}],"isBlockCoverage":true},{"functionName":"DTRACE_HTTP_CLIENT_RESPONSE","ranges":[{"startOffset":139,"endOffset":147,"count":2}],"isBlockCoverage":true},{"functionName":"DTRACE_HTTP_SERVER_REQUEST","ranges":[{"startOffset":180,"endOffset":188,"count":0}],"isBlockCoverage":false},{"functionName":"DTRACE_HTTP_SERVER_RESPONSE","ranges":[{"startOffset":222,"endOffset":230,"count":0}],"isBlockCoverage":false},{"functionName":"DTRACE_NET_SERVER_CONNECTION","ranges":[{"startOffset":265,"endOffset":273,"count":0}],"isBlockCoverage":false},{"functionName":"DTRACE_NET_STREAM_END","ranges":[{"startOffset":301,"endOffset":309,"count":2}],"isBlockCoverage":true}]},{"scriptId":"115","url":"node:internal/blocklist","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3877,"count":1}],"isBlockCoverage":false},{"functionName":"BlockList","ranges":[{"startOffset":764,"endOffset":879,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":883,"endOffset":1135,"count":0}],"isBlockCoverage":false},{"functionName":"addAddress","ranges":[{"startOffset":1139,"endOffset":1460,"count":1}],"isBlockCoverage":true},{"functionName":"addRange","ranges":[{"startOffset":1464,"endOffset":2142,"count":1},{"startOffset":2066,"endOffset":2138,"count":0}],"isBlockCoverage":true},{"functionName":"addSubnet","ranges":[{"startOffset":2146,"endOffset":2691,"count":0}],"isBlockCoverage":false},{"functionName":"check","ranges":[{"startOffset":2695,"endOffset":3160,"count":0}],"isBlockCoverage":false},{"functionName":"get rules","ranges":[{"startOffset":3164,"endOffset":3218,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3222,"endOffset":3379,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3383,"endOffset":3483,"count":0}],"isBlockCoverage":false},{"functionName":"InternalBlockList","ranges":[{"startOffset":3538,"endOffset":3669,"count":0}],"isBlockCoverage":false}]},{"scriptId":"116","url":"node:internal/socketaddress","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3207,"count":1}],"isBlockCoverage":false},{"functionName":"isSocketAddress","ranges":[{"startOffset":727,"endOffset":798,"count":3}],"isBlockCoverage":true},{"functionName":"SocketAddress","ranges":[{"startOffset":802,"endOffset":1761,"count":3},{"startOffset":969,"endOffset":982,"count":0},{"startOffset":983,"endOffset":989,"count":0},{"startOffset":1177,"endOffset":1228,"count":2},{"startOffset":1235,"endOffset":1287,"count":1},{"startOffset":1294,"endOffset":1377,"count":0}],"isBlockCoverage":true},{"functionName":"get address","ranges":[{"startOffset":1765,"endOffset":1818,"count":0}],"isBlockCoverage":false},{"functionName":"get port","ranges":[{"startOffset":1822,"endOffset":1869,"count":0}],"isBlockCoverage":false},{"functionName":"get family","ranges":[{"startOffset":1873,"endOffset":1954,"count":0}],"isBlockCoverage":false},{"functionName":"get flowlabel","ranges":[{"startOffset":1958,"endOffset":2066,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2070,"endOffset":2308,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2312,"endOffset":2477,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2481,"endOffset":2687,"count":0}],"isBlockCoverage":false},{"functionName":"toJSON","ranges":[{"startOffset":2691,"endOffset":2837,"count":0}],"isBlockCoverage":false},{"functionName":"InternalSocketAddress","ranges":[{"startOffset":2896,"endOffset":2962,"count":0}],"isBlockCoverage":false}]},{"scriptId":"117","url":"node:internal/modules/esm/formats","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1190,"count":1}],"isBlockCoverage":false},{"functionName":"mimeToFormat","ranges":[{"startOffset":674,"endOffset":988,"count":0}],"isBlockCoverage":false},{"functionName":"getLegacyExtensionFormat","ranges":[{"startOffset":990,"endOffset":1072,"count":0}],"isBlockCoverage":false}]},{"scriptId":"118","url":"node:internal/modules/esm/initialize_import_meta","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1023,"count":1}],"isBlockCoverage":false},{"functionName":"createImportMetaResolve","ranges":[{"startOffset":289,"endOffset":660,"count":0}],"isBlockCoverage":false},{"functionName":"initializeImportMeta","ranges":[{"startOffset":728,"endOffset":976,"count":0}],"isBlockCoverage":false}]},{"scriptId":"119","url":"node:internal/modules/esm/load","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":860,"count":1}],"isBlockCoverage":false},{"functionName":"defaultLoad","ranges":[{"startOffset":342,"endOffset":821,"count":3},{"startOffset":495,"endOffset":551,"count":0},{"startOffset":696,"endOffset":778,"count":0}],"isBlockCoverage":true}]},{"scriptId":"120","url":"node:internal/modules/esm/get_source","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1869,"count":1}],"isBlockCoverage":false},{"functionName":"defaultGetSource","ranges":[{"startOffset":843,"endOffset":1823,"count":0}],"isBlockCoverage":false}]},{"scriptId":"121","url":"node:internal/fs/promises","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":22841,"count":1}],"isBlockCoverage":false},{"functionName":"lazyLoadCpPromises","ranges":[{"startOffset":2472,"endOffset":2564,"count":0}],"isBlockCoverage":false},{"functionName":"lazyFsStreams","ranges":[{"startOffset":2626,"endOffset":2709,"count":0}],"isBlockCoverage":false},{"functionName":"FileHandle","ranges":[{"startOffset":2852,"endOffset":3029,"count":0}],"isBlockCoverage":false},{"functionName":"getAsyncId","ranges":[{"startOffset":3033,"endOffset":3090,"count":0}],"isBlockCoverage":false},{"functionName":"get fd","ranges":[{"startOffset":3094,"endOffset":3130,"count":0}],"isBlockCoverage":false},{"functionName":"appendFile","ranges":[{"startOffset":3134,"endOffset":3216,"count":0}],"isBlockCoverage":false},{"functionName":"chmod","ranges":[{"startOffset":3220,"endOffset":3276,"count":0}],"isBlockCoverage":false},{"functionName":"chown","ranges":[{"startOffset":3280,"endOffset":3344,"count":0}],"isBlockCoverage":false},{"functionName":"datasync","ranges":[{"startOffset":3348,"endOffset":3400,"count":0}],"isBlockCoverage":false},{"functionName":"sync","ranges":[{"startOffset":3404,"endOffset":3448,"count":0}],"isBlockCoverage":false},{"functionName":"read","ranges":[{"startOffset":3452,"endOffset":3561,"count":0}],"isBlockCoverage":false},{"functionName":"readv","ranges":[{"startOffset":3565,"endOffset":3646,"count":0}],"isBlockCoverage":false},{"functionName":"readFile","ranges":[{"startOffset":3650,"endOffset":3717,"count":0}],"isBlockCoverage":false},{"functionName":"stat","ranges":[{"startOffset":3721,"endOffset":3781,"count":0}],"isBlockCoverage":false},{"functionName":"truncate","ranges":[{"startOffset":3785,"endOffset":3849,"count":0}],"isBlockCoverage":false},{"functionName":"utimes","ranges":[{"startOffset":3853,"endOffset":3927,"count":0}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":3931,"endOffset":4042,"count":0}],"isBlockCoverage":false},{"functionName":"writev","ranges":[{"startOffset":4046,"endOffset":4129,"count":0}],"isBlockCoverage":false},{"functionName":"writeFile","ranges":[{"startOffset":4133,"endOffset":4214,"count":0}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":4218,"endOffset":5016,"count":0}],"isBlockCoverage":false},{"functionName":"createReadStream","ranges":[{"startOffset":5315,"endOffset":5466,"count":0}],"isBlockCoverage":false},{"functionName":"createWriteStream","ranges":[{"startOffset":5715,"endOffset":5869,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5873,"endOffset":6272,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6276,"endOffset":6329,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6333,"endOffset":6420,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6424,"endOffset":6457,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6461,"endOffset":6677,"count":0}],"isBlockCoverage":false},{"functionName":"fsCall","ranges":[{"startOffset":6681,"endOffset":7141,"count":0}],"isBlockCoverage":false},{"functionName":"checkAborted","ranges":[{"startOffset":7143,"endOffset":7227,"count":0}],"isBlockCoverage":false},{"functionName":"writeFileHandle","ranges":[{"startOffset":7229,"endOffset":8370,"count":0}],"isBlockCoverage":false},{"functionName":"readFileHandle","ranges":[{"startOffset":8372,"endOffset":10173,"count":0}],"isBlockCoverage":false},{"functionName":"access","ranges":[{"startOffset":10326,"endOffset":10547,"count":0}],"isBlockCoverage":false},{"functionName":"cp","ranges":[{"startOffset":10549,"endOffset":10818,"count":0}],"isBlockCoverage":false},{"functionName":"copyFile","ranges":[{"startOffset":10820,"endOffset":11178,"count":0}],"isBlockCoverage":false},{"functionName":"open","ranges":[{"startOffset":11298,"endOffset":11623,"count":0}],"isBlockCoverage":false},{"functionName":"read","ranges":[{"startOffset":11625,"endOffset":12638,"count":0}],"isBlockCoverage":false},{"functionName":"readv","ranges":[{"startOffset":12640,"endOffset":12960,"count":0}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":12962,"endOffset":13931,"count":0}],"isBlockCoverage":false},{"functionName":"writev","ranges":[{"startOffset":13933,"endOffset":14341,"count":0}],"isBlockCoverage":false},{"functionName":"rename","ranges":[{"startOffset":14343,"endOffset":14649,"count":0}],"isBlockCoverage":false},{"functionName":"truncate","ranges":[{"startOffset":14651,"endOffset":14798,"count":0}],"isBlockCoverage":false},{"functionName":"ftruncate","ranges":[{"startOffset":14800,"endOffset":14959,"count":0}],"isBlockCoverage":false},{"functionName":"rm","ranges":[{"startOffset":14961,"endOffset":15165,"count":0}],"isBlockCoverage":false},{"functionName":"rmdir","ranges":[{"startOffset":15167,"endOffset":15538,"count":0}],"isBlockCoverage":false},{"functionName":"fdatasync","ranges":[{"startOffset":15540,"endOffset":15629,"count":0}],"isBlockCoverage":false},{"functionName":"fsync","ranges":[{"startOffset":15631,"endOffset":15712,"count":0}],"isBlockCoverage":false},{"functionName":"mkdir","ranges":[{"startOffset":15714,"endOffset":16180,"count":0}],"isBlockCoverage":false},{"functionName":"readdir","ranges":[{"startOffset":16182,"endOffset":16634,"count":0}],"isBlockCoverage":false},{"functionName":"readlink","ranges":[{"startOffset":16636,"endOffset":16879,"count":0}],"isBlockCoverage":false},{"functionName":"symlink","ranges":[{"startOffset":16881,"endOffset":17294,"count":0}],"isBlockCoverage":false},{"functionName":"fstat","ranges":[{"startOffset":17296,"endOffset":17474,"count":0}],"isBlockCoverage":false},{"functionName":"lstat","ranges":[{"startOffset":17476,"endOffset":17746,"count":0}],"isBlockCoverage":false},{"functionName":"stat","ranges":[{"startOffset":17748,"endOffset":18015,"count":0}],"isBlockCoverage":false},{"functionName":"link","ranges":[{"startOffset":18017,"endOffset":18340,"count":0}],"isBlockCoverage":false},{"functionName":"unlink","ranges":[{"startOffset":18342,"endOffset":18480,"count":0}],"isBlockCoverage":false},{"functionName":"fchmod","ranges":[{"startOffset":18482,"endOffset":18615,"count":0}],"isBlockCoverage":false},{"functionName":"chmod","ranges":[{"startOffset":18617,"endOffset":18803,"count":0}],"isBlockCoverage":false},{"functionName":"lchmod","ranges":[{"startOffset":18805,"endOffset":19047,"count":0}],"isBlockCoverage":false},{"functionName":"lchown","ranges":[{"startOffset":19049,"endOffset":19325,"count":0}],"isBlockCoverage":false},{"functionName":"fchown","ranges":[{"startOffset":19327,"endOffset":19524,"count":0}],"isBlockCoverage":false},{"functionName":"chown","ranges":[{"startOffset":19526,"endOffset":19799,"count":0}],"isBlockCoverage":false},{"functionName":"utimes","ranges":[{"startOffset":19801,"endOffset":20073,"count":0}],"isBlockCoverage":false},{"functionName":"futimes","ranges":[{"startOffset":20075,"endOffset":20274,"count":0}],"isBlockCoverage":false},{"functionName":"lutimes","ranges":[{"startOffset":20276,"endOffset":20553,"count":0}],"isBlockCoverage":false},{"functionName":"realpath","ranges":[{"startOffset":20555,"endOffset":20732,"count":0}],"isBlockCoverage":false},{"functionName":"mkdtemp","ranges":[{"startOffset":20734,"endOffset":20986,"count":0}],"isBlockCoverage":false},{"functionName":"writeFile","ranges":[{"startOffset":20988,"endOffset":21677,"count":0}],"isBlockCoverage":false},{"functionName":"isCustomIterable","ranges":[{"startOffset":21679,"endOffset":21793,"count":0}],"isBlockCoverage":false},{"functionName":"appendFile","ranges":[{"startOffset":21795,"endOffset":22036,"count":0}],"isBlockCoverage":false},{"functionName":"readFile","ranges":[{"startOffset":22038,"endOffset":22396,"count":0}],"isBlockCoverage":false}]},{"scriptId":"122","url":"node:internal/fs/rimraf","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7095,"count":1}],"isBlockCoverage":false},{"functionName":"rimraf","ranges":[{"startOffset":1174,"endOffset":1634,"count":0}],"isBlockCoverage":false},{"functionName":"_rimraf","ranges":[{"startOffset":1637,"endOffset":2495,"count":0}],"isBlockCoverage":false},{"functionName":"fixWinEPERM","ranges":[{"startOffset":2498,"endOffset":2933,"count":0}],"isBlockCoverage":false},{"functionName":"_rmdir","ranges":[{"startOffset":2936,"endOffset":3234,"count":0}],"isBlockCoverage":false},{"functionName":"_rmchildren","ranges":[{"startOffset":3237,"endOffset":3924,"count":0}],"isBlockCoverage":false},{"functionName":"rimrafPromises","ranges":[{"startOffset":3927,"endOffset":4125,"count":0}],"isBlockCoverage":false},{"functionName":"rimrafSync","ranges":[{"startOffset":4128,"endOffset":4811,"count":0}],"isBlockCoverage":false},{"functionName":"_unlinkSync","ranges":[{"startOffset":4814,"endOffset":5297,"count":0}],"isBlockCoverage":false},{"functionName":"_rmdirSync","ranges":[{"startOffset":5300,"endOffset":6585,"count":0}],"isBlockCoverage":false},{"functionName":"fixWinEPERMSync","ranges":[{"startOffset":6588,"endOffset":7035,"count":0}],"isBlockCoverage":false}]},{"scriptId":"123","url":"node:internal/modules/esm/translators","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10778,"count":1}],"isBlockCoverage":false},{"functionName":"lazyTypes","ranges":[{"startOffset":378,"endOffset":490,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1017,"endOffset":1042,"count":1}],"isBlockCoverage":true},{"functionName":"initCJSParse","ranges":[{"startOffset":1577,"endOffset":1869,"count":1},{"startOffset":1651,"endOffset":1726,"count":0}],"isBlockCoverage":true},{"functionName":"assertBufferSource","ranges":[{"startOffset":2003,"endOffset":2423,"count":0}],"isBlockCoverage":false},{"functionName":"stringify","ranges":[{"startOffset":2425,"endOffset":2643,"count":0}],"isBlockCoverage":false},{"functionName":"errPath","ranges":[{"startOffset":2645,"endOffset":2790,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamically","ranges":[{"startOffset":2792,"endOffset":3031,"count":0}],"isBlockCoverage":false},{"functionName":"moduleStrategy","ranges":[{"startOffset":3113,"endOffset":3581,"count":0}],"isBlockCoverage":false},{"functionName":"enrichCJSError","ranges":[{"startOffset":3748,"endOffset":4286,"count":0}],"isBlockCoverage":false},{"functionName":"commonjsStrategy","ranges":[{"startOffset":4444,"endOffset":5887,"count":3},{"startOffset":4686,"endOffset":4749,"count":0},{"startOffset":4768,"endOffset":4789,"count":1},{"startOffset":4914,"endOffset":4936,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5027,"endOffset":5883,"count":3},{"startOffset":5146,"endOffset":5260,"count":0},{"startOffset":5352,"endOffset":5442,"count":0},{"startOffset":5492,"endOffset":5839,"count":1},{"startOffset":5603,"endOffset":5612,"count":0},{"startOffset":5736,"endOffset":5792,"count":0}],"isBlockCoverage":true},{"functionName":"cjsPreparseModuleExports","ranges":[{"startOffset":5891,"endOffset":7411,"count":3},{"startOffset":5994,"endOffset":6119,"count":0},{"startOffset":6418,"endOffset":6466,"count":0},{"startOffset":6548,"endOffset":6553,"count":0},{"startOffset":6561,"endOffset":6610,"count":1},{"startOffset":6794,"endOffset":6891,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6927,"endOffset":7372,"count":0}],"isBlockCoverage":false},{"functionName":"builtinStrategy","ranges":[{"startOffset":7535,"endOffset":7917,"count":0}],"isBlockCoverage":false},{"functionName":"jsonStrategy","ranges":[{"startOffset":7981,"endOffset":9863,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9929,"endOffset":10775,"count":0}],"isBlockCoverage":false}]},{"scriptId":"124","url":"node:internal/modules/esm/create_dynamic_module","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1756,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":190,"endOffset":215,"count":0}],"isBlockCoverage":false},{"functionName":"createImport","ranges":[{"startOffset":219,"endOffset":409,"count":0}],"isBlockCoverage":false},{"functionName":"createExport","ranges":[{"startOffset":411,"endOffset":612,"count":0}],"isBlockCoverage":false},{"functionName":"createDynamicModule","ranges":[{"startOffset":642,"endOffset":1715,"count":0}],"isBlockCoverage":false}]},{"scriptId":"125","url":"node:internal/vm/module","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12310,"count":1}],"isBlockCoverage":false},{"functionName":"Module","ranges":[{"startOffset":1712,"endOffset":3793,"count":0}],"isBlockCoverage":false},{"functionName":"get identifier","ranges":[{"startOffset":3797,"endOffset":3934,"count":0}],"isBlockCoverage":false},{"functionName":"get context","ranges":[{"startOffset":3938,"endOffset":4071,"count":0}],"isBlockCoverage":false},{"functionName":"get namespace","ranges":[{"startOffset":4075,"endOffset":4352,"count":0}],"isBlockCoverage":false},{"functionName":"get status","ranges":[{"startOffset":4356,"endOffset":4509,"count":0}],"isBlockCoverage":false},{"functionName":"get error","ranges":[{"startOffset":4513,"endOffset":4763,"count":0}],"isBlockCoverage":false},{"functionName":"link","ranges":[{"startOffset":4767,"endOffset":5172,"count":0}],"isBlockCoverage":false},{"functionName":"evaluate","ranges":[{"startOffset":5176,"endOffset":5918,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5922,"endOffset":6649,"count":0}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":6796,"endOffset":6832,"count":0}],"isBlockCoverage":false},{"functionName":"SourceTextModule","ranges":[{"startOffset":6837,"endOffset":9189,"count":0}],"isBlockCoverage":false},{"functionName":"get dependencySpecifiers","ranges":[{"startOffset":9193,"endOffset":9492,"count":0}],"isBlockCoverage":false},{"functionName":"get status","ranges":[{"startOffset":9496,"endOffset":9765,"count":0}],"isBlockCoverage":false},{"functionName":"get error","ranges":[{"startOffset":9769,"endOffset":9965,"count":0}],"isBlockCoverage":false},{"functionName":"createCachedData","ranges":[{"startOffset":9969,"endOffset":10231,"count":0}],"isBlockCoverage":false},{"functionName":"SyntheticModule","ranges":[{"startOffset":10276,"endOffset":11359,"count":0}],"isBlockCoverage":false},{"functionName":"setExport","ranges":[{"startOffset":11363,"endOffset":11665,"count":0}],"isBlockCoverage":false},{"functionName":"importModuleDynamicallyWrap","ranges":[{"startOffset":11669,"endOffset":12148,"count":752}],"isBlockCoverage":true},{"functionName":"importModuleDynamicallyWrapper","ranges":[{"startOffset":11774,"endOffset":12104,"count":3},{"startOffset":11925,"endOffset":11962,"count":0},{"startOffset":11964,"endOffset":12103,"count":0}],"isBlockCoverage":true},{"functionName":"getModuleFromWrap","ranges":[{"startOffset":12270,"endOffset":12305,"count":3}],"isBlockCoverage":true}]},{"scriptId":"126","url":"node:internal/modules/run_main","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2537,"count":1}],"isBlockCoverage":false},{"functionName":"resolveMainPath","ranges":[{"startOffset":374,"endOffset":812,"count":1},{"startOffset":641,"endOffset":648,"count":0}],"isBlockCoverage":true},{"functionName":"shouldUseESMLoader","ranges":[{"startOffset":814,"endOffset":1401,"count":1},{"startOffset":938,"endOffset":950,"count":0},{"startOffset":1098,"endOffset":1110,"count":0},{"startOffset":1221,"endOffset":1233,"count":0},{"startOffset":1300,"endOffset":1313,"count":0}],"isBlockCoverage":true},{"functionName":"runMainESM","ranges":[{"startOffset":1403,"endOffset":1762,"count":0}],"isBlockCoverage":false},{"functionName":"handleMainPromise","ranges":[{"startOffset":1764,"endOffset":1946,"count":0}],"isBlockCoverage":false},{"functionName":"executeUserEntryPoint","ranges":[{"startOffset":2132,"endOffset":2467,"count":1},{"startOffset":2312,"endOffset":2355,"count":0}],"isBlockCoverage":true}]},{"scriptId":"127","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/bin/mocha.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4009,"count":1},{"startOffset":1592,"endOffset":1658,"count":0},{"startOffset":2098,"endOffset":2188,"count":0},{"startOffset":2268,"endOffset":3913,"count":0}],"isBlockCoverage":true},{"functionName":"disableTimeouts","ranges":[{"startOffset":831,"endOffset":957,"count":0}],"isBlockCoverage":false},{"functionName":"trimV8Option","ranges":[{"startOffset":1183,"endOffset":1263,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1340,"endOffset":1467,"count":12},{"startOffset":1372,"endOffset":1422,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1537,"endOffset":1564,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1630,"endOffset":1657,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2057,"endOffset":2081,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2454,"endOffset":2467,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2927,"endOffset":3103,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3155,"endOffset":3909,"count":0}],"isBlockCoverage":false}]},{"scriptId":"128","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7612,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1933,"endOffset":2063,"count":10}],"isBlockCoverage":true},{"functionName":"Object.assign","ranges":[{"startOffset":1989,"endOffset":2054,"count":4},{"startOffset":2039,"endOffset":2042,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2152,"endOffset":2240,"count":32}],"isBlockCoverage":true},{"functionName":"Object.assign","ranges":[{"startOffset":2201,"endOffset":2238,"count":10},{"startOffset":2224,"endOffset":2233,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2621,"endOffset":2665,"count":20}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":2970,"endOffset":4343,"count":2},{"startOffset":3424,"endOffset":3441,"count":0},{"startOffset":4114,"endOffset":4203,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3455,"endOffset":3756,"count":7},{"startOffset":3567,"endOffset":3732,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4070,"endOffset":4085,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4263,"endOffset":4316,"count":0}],"isBlockCoverage":false},{"functionName":"loadRc","ranges":[{"startOffset":4727,"endOffset":4873,"count":1},{"startOffset":4841,"endOffset":4861,"count":0}],"isBlockCoverage":true},{"functionName":"loadPkgRc","ranges":[{"startOffset":5309,"endOffset":6046,"count":1},{"startOffset":5370,"endOffset":5394,"count":0},{"startOffset":5589,"endOffset":5695,"count":0},{"startOffset":5767,"endOffset":6023,"count":0}],"isBlockCoverage":true},{"functionName":"loadOptions","ranges":[{"startOffset":6719,"endOffset":7509,"count":1},{"startOffset":6945,"endOffset":6967,"count":0},{"startOffset":7277,"endOffset":7282,"count":0},{"startOffset":7294,"endOffset":7299,"count":0},{"startOffset":7367,"endOffset":7433,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6889,"endOffset":6921,"count":6}],"isBlockCoverage":true}]},{"scriptId":"129","url":"node:internal/fs/streams","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":13266,"count":1}],"isBlockCoverage":false},{"functionName":"_construct","ranges":[{"startOffset":1000,"endOffset":1903,"count":0}],"isBlockCoverage":false},{"functionName":"FileHandleOperations","ranges":[{"startOffset":1996,"endOffset":2994,"count":0}],"isBlockCoverage":false},{"functionName":"close","ranges":[{"startOffset":2997,"endOffset":3250,"count":0}],"isBlockCoverage":false},{"functionName":"importFd","ranges":[{"startOffset":3252,"endOffset":4249,"count":0}],"isBlockCoverage":false},{"functionName":"ReadStream","ranges":[{"startOffset":4251,"endOffset":6006,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6176,"endOffset":6231,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":6235,"endOffset":6292,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6327,"endOffset":6352,"count":0}],"isBlockCoverage":false},{"functionName":"ReadStream._read","ranges":[{"startOffset":6528,"endOffset":7659,"count":0}],"isBlockCoverage":false},{"functionName":"ReadStream._destroy","ranges":[{"startOffset":7694,"endOffset":8255,"count":0}],"isBlockCoverage":false},{"functionName":"ReadStream.close","ranges":[{"startOffset":8287,"endOffset":8373,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8434,"endOffset":8468,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream","ranges":[{"startOffset":8496,"endOffset":10301,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10474,"endOffset":10529,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":10533,"endOffset":10590,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10626,"endOffset":10651,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream._write","ranges":[{"startOffset":10833,"endOffset":11304,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream._writev","ranges":[{"startOffset":11339,"endOffset":11979,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream._destroy","ranges":[{"startOffset":12015,"endOffset":12576,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream.close","ranges":[{"startOffset":12609,"endOffset":12991,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13154,"endOffset":13188,"count":0}],"isBlockCoverage":false}]},{"scriptId":"130","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/ansi-colors/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5874,"count":1}],"isBlockCoverage":true},{"functionName":"isObject","ranges":[{"startOffset":32,"endOffset":101,"count":0}],"isBlockCoverage":false},{"functionName":"identity","ranges":[{"startOffset":120,"endOffset":130,"count":0}],"isBlockCoverage":false},{"functionName":"create","ranges":[{"startOffset":409,"endOffset":5812,"count":1},{"startOffset":527,"endOffset":586,"count":0}],"isBlockCoverage":true},{"functionName":"ansi","ranges":[{"startOffset":603,"endOffset":1269,"count":42}],"isBlockCoverage":true},{"functionName":"style.wrap","ranges":[{"startOffset":826,"endOffset":1246,"count":3},{"startOffset":881,"endOffset":924,"count":0},{"startOffset":1183,"endOffset":1230,"count":0}],"isBlockCoverage":true},{"functionName":"wrap","ranges":[{"startOffset":1287,"endOffset":1403,"count":3},{"startOffset":1355,"endOffset":1369,"count":0}],"isBlockCoverage":true},{"functionName":"style","ranges":[{"startOffset":1422,"endOffset":1868,"count":3},{"startOffset":1481,"endOffset":1491,"count":0},{"startOffset":1526,"endOffset":1539,"count":0},{"startOffset":1574,"endOffset":1584,"count":0},{"startOffset":1714,"endOffset":1782,"count":0}],"isBlockCoverage":true},{"functionName":"define","ranges":[{"startOffset":1888,"endOffset":2429,"count":42},{"startOffset":1995,"endOffset":2022,"count":5}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":2145,"endOffset":2200,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2208,"endOffset":2417,"count":3},{"startOffset":2352,"endOffset":2377,"count":0}],"isBlockCoverage":true},{"functionName":"color","ranges":[{"startOffset":2236,"endOffset":2270,"count":3}],"isBlockCoverage":true},{"functionName":"colors.hasColor.colors.hasAnsi","ranges":[{"startOffset":4269,"endOffset":4397,"count":0}],"isBlockCoverage":false},{"functionName":"colors.alias","ranges":[{"startOffset":4417,"endOffset":5181,"count":2},{"startOffset":4475,"endOffset":4490,"count":0},{"startOffset":4535,"endOffset":4646,"count":0}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":4891,"endOffset":4946,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4954,"endOffset":5169,"count":2},{"startOffset":5098,"endOffset":5127,"count":0}],"isBlockCoverage":true},{"functionName":"color","ranges":[{"startOffset":4982,"endOffset":5016,"count":0}],"isBlockCoverage":false},{"functionName":"colors.theme","ranges":[{"startOffset":5201,"endOffset":5407,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5436,"endOffset":5604,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5631,"endOffset":5641,"count":0}],"isBlockCoverage":false}]},{"scriptId":"131","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/ansi-colors/symbols.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1533,"count":1},{"startOffset":1112,"endOffset":1117,"count":0},{"startOffset":1149,"endOffset":1154,"count":0},{"startOffset":1237,"endOffset":1248,"count":0},{"startOffset":1250,"endOffset":1259,"count":0}],"isBlockCoverage":true}]},{"scriptId":"132","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/yargs-parser/build/index.cjs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":41467,"count":1},{"startOffset":40159,"endOffset":40203,"count":0},{"startOffset":40344,"endOffset":40542,"count":0},{"startOffset":40579,"endOffset":40583,"count":0}],"isBlockCoverage":true},{"functionName":"camelCase","ranges":[{"startOffset":96,"endOffset":904,"count":0}],"isBlockCoverage":false},{"functionName":"decamelize","ranges":[{"startOffset":905,"endOffset":1404,"count":0}],"isBlockCoverage":false},{"functionName":"looksLikeNumber","ranges":[{"startOffset":1405,"endOffset":1728,"count":5},{"startOffset":1482,"endOffset":1495,"count":0},{"startOffset":1535,"endOffset":1547,"count":0},{"startOffset":1590,"endOffset":1602,"count":0},{"startOffset":1649,"endOffset":1662,"count":0}],"isBlockCoverage":true},{"functionName":"tokenizeArgString","ranges":[{"startOffset":1730,"endOffset":2515,"count":2},{"startOffset":1882,"endOffset":2514,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1835,"endOffset":1874,"count":7},{"startOffset":1862,"endOffset":1870,"count":0}],"isBlockCoverage":true},{"functionName":"YargsParser","ranges":[{"startOffset":2552,"endOffset":2603,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":2608,"endOffset":38682,"count":2},{"startOffset":4252,"endOffset":4257,"count":0},{"startOffset":4405,"endOffset":4411,"count":0},{"startOffset":5215,"endOffset":5220,"count":0},{"startOffset":5858,"endOffset":5863,"count":0},{"startOffset":6019,"endOffset":6024,"count":0},{"startOffset":6182,"endOffset":6187,"count":0},{"startOffset":7286,"endOffset":7860,"count":0},{"startOffset":8357,"endOffset":15405,"count":5},{"startOffset":8585,"endOffset":8637,"count":0},{"startOffset":8745,"endOffset":9301,"count":0},{"startOffset":9349,"endOffset":9385,"count":0},{"startOffset":9387,"endOffset":9657,"count":0},{"startOffset":9698,"endOffset":9764,"count":2},{"startOffset":9766,"endOffset":10975,"count":3},{"startOffset":9974,"endOffset":10049,"count":1},{"startOffset":10049,"endOffset":10943,"count":2},{"startOffset":10124,"endOffset":10943,"count":1},{"startOffset":10318,"endOffset":10392,"count":0},{"startOffset":10393,"endOffset":10458,"count":0},{"startOffset":10459,"endOffset":10525,"count":0},{"startOffset":10527,"endOffset":10634,"count":0},{"startOffset":10697,"endOffset":10804,"count":0},{"startOffset":10975,"endOffset":15395,"count":2},{"startOffset":11020,"endOffset":11219,"count":0},{"startOffset":11262,"endOffset":11285,"count":0},{"startOffset":11287,"endOffset":11894,"count":0},{"startOffset":11937,"endOffset":11960,"count":0},{"startOffset":11962,"endOffset":14821,"count":0},{"startOffset":14865,"endOffset":14903,"count":0},{"startOffset":14904,"endOffset":14965,"count":0},{"startOffset":14967,"endOffset":15066,"count":0},{"startOffset":15102,"endOffset":15186,"count":0},{"startOffset":15245,"endOffset":15325,"count":0},{"startOffset":15690,"endOffset":15715,"count":0},{"startOffset":15893,"endOffset":15911,"count":0},{"startOffset":15925,"endOffset":15949,"count":0},{"startOffset":16096,"endOffset":16128,"count":0},{"startOffset":16130,"endOffset":16287,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5246,"endOffset":5824,"count":20},{"startOffset":5311,"endOffset":5320,"count":0},{"startOffset":5680,"endOffset":5742,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5380,"endOffset":5627,"count":170}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5889,"endOffset":5986,"count":44}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6050,"endOffset":6149,"count":16}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6213,"endOffset":6312,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6375,"endOffset":6473,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6540,"endOffset":6641,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6735,"endOffset":6923,"count":40}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7031,"endOffset":7225,"count":84}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7432,"endOffset":7513,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7638,"endOffset":7834,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7969,"endOffset":8126,"count":8},{"startOffset":8018,"endOffset":8023,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8033,"endOffset":8114,"count":5}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":15758,"endOffset":15863,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15975,"endOffset":16043,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16169,"endOffset":16209,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16219,"endOffset":16275,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16384,"endOffset":16399,"count":40}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16410,"endOffset":16662,"count":46},{"startOffset":16479,"endOffset":16501,"count":0},{"startOffset":16503,"endOffset":16612,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16558,"endOffset":16581,"count":0}],"isBlockCoverage":false},{"functionName":"pushPositional","ranges":[{"startOffset":16683,"endOffset":16954,"count":2},{"startOffset":16837,"endOffset":16878,"count":0}],"isBlockCoverage":true},{"functionName":"eatNargs","ranges":[{"startOffset":16963,"endOffset":18584,"count":1},{"startOffset":17157,"endOffset":17160,"count":0},{"startOffset":17199,"endOffset":17436,"count":0},{"startOffset":17500,"endOffset":17503,"count":0},{"startOffset":17558,"endOffset":17773,"count":0},{"startOffset":17850,"endOffset":18077,"count":2},{"startOffset":17904,"endOffset":17931,"count":1},{"startOffset":17932,"endOffset":17965,"count":1},{"startOffset":17991,"endOffset":18059,"count":1},{"startOffset":18137,"endOffset":18198,"count":0},{"startOffset":18316,"endOffset":18331,"count":0},{"startOffset":18333,"endOffset":18424,"count":0}],"isBlockCoverage":true},{"functionName":"eatArray","ranges":[{"startOffset":18593,"endOffset":20377,"count":1},{"startOffset":18851,"endOffset":18884,"count":0},{"startOffset":18886,"endOffset":18939,"count":0},{"startOffset":19049,"endOffset":19072,"count":0},{"startOffset":19073,"endOffset":19103,"count":0},{"startOffset":19106,"endOffset":19315,"count":0},{"startOffset":19388,"endOffset":19481,"count":0},{"startOffset":19543,"endOffset":20037,"count":2},{"startOffset":19602,"endOffset":19625,"count":0},{"startOffset":19760,"endOffset":19844,"count":1},{"startOffset":19844,"endOffset":19867,"count":0},{"startOffset":19868,"endOffset":19898,"count":0},{"startOffset":19924,"endOffset":19930,"count":0},{"startOffset":19930,"endOffset":20037,"count":1},{"startOffset":20187,"endOffset":20212,"count":0},{"startOffset":20216,"endOffset":20309,"count":0}],"isBlockCoverage":true},{"functionName":"setArg","ranges":[{"startOffset":20386,"endOffset":22249,"count":8},{"startOffset":20444,"endOffset":20484,"count":0},{"startOffset":20486,"endOffset":20683,"count":0},{"startOffset":20858,"endOffset":21063,"count":5},{"startOffset":21100,"endOffset":21132,"count":0},{"startOffset":21134,"endOffset":21611,"count":0},{"startOffset":21666,"endOffset":21704,"count":0},{"startOffset":21706,"endOffset":22239,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20537,"endOffset":20616,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20903,"endOffset":21047,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21195,"endOffset":21595,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":21806,"endOffset":22223,"count":0}],"isBlockCoverage":false},{"functionName":"addNewAlias","ranges":[{"startOffset":22258,"endOffset":22603,"count":0}],"isBlockCoverage":false},{"functionName":"processValue","ranges":[{"startOffset":22612,"endOffset":23717,"count":9},{"startOffset":22686,"endOffset":22739,"count":3},{"startOffset":22740,"endOffset":22789,"count":0},{"startOffset":22791,"endOffset":22862,"count":0},{"startOffset":22913,"endOffset":22950,"count":7},{"startOffset":22952,"endOffset":23054,"count":2},{"startOffset":23019,"endOffset":23040,"count":0},{"startOffset":23114,"endOffset":23175,"count":2},{"startOffset":23192,"endOffset":23221,"count":7},{"startOffset":23274,"endOffset":23327,"count":0},{"startOffset":23329,"endOffset":23381,"count":0},{"startOffset":23436,"endOffset":23473,"count":0},{"startOffset":23475,"endOffset":23681,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23124,"endOffset":23174,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23553,"endOffset":23594,"count":0}],"isBlockCoverage":false},{"functionName":"maybeCoerceNumber","ranges":[{"startOffset":23726,"endOffset":24370,"count":25},{"startOffset":23826,"endOffset":23840,"count":0},{"startOffset":23858,"endOffset":23871,"count":0},{"startOffset":23925,"endOffset":23962,"count":14},{"startOffset":23963,"endOffset":23987,"count":9},{"startOffset":23989,"endOffset":24334,"count":5},{"startOffset":24057,"endOffset":24090,"count":0},{"startOffset":24091,"endOffset":24152,"count":0},{"startOffset":24258,"endOffset":24320,"count":0}],"isBlockCoverage":true},{"functionName":"setConfig","ranges":[{"startOffset":24379,"endOffset":26014,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24583,"endOffset":26002,"count":0}],"isBlockCoverage":false},{"functionName":"setConfigObject","ranges":[{"startOffset":26023,"endOffset":26699,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":26104,"endOffset":26687,"count":6},{"startOffset":26201,"endOffset":26219,"count":0},{"startOffset":26273,"endOffset":26290,"count":2},{"startOffset":26291,"endOffset":26315,"count":2},{"startOffset":26316,"endOffset":26348,"count":0},{"startOffset":26350,"endOffset":26422,"count":0},{"startOffset":26504,"endOffset":26582,"count":1},{"startOffset":26547,"endOffset":26581,"count":0},{"startOffset":26584,"endOffset":26655,"count":5}],"isBlockCoverage":true},{"functionName":"setConfigObjects","ranges":[{"startOffset":26708,"endOffset":26952,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":26832,"endOffset":26926,"count":3}],"isBlockCoverage":true},{"functionName":"applyEnvVars","ranges":[{"startOffset":26961,"endOffset":27837,"count":4},{"startOffset":27076,"endOffset":27145,"count":0},{"startOffset":27146,"endOffset":27150,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27226,"endOffset":27825,"count":0}],"isBlockCoverage":false},{"functionName":"applyCoercions","ranges":[{"startOffset":27846,"endOffset":28693,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27979,"endOffset":28681,"count":25},{"startOffset":28035,"endOffset":28667,"count":16},{"startOffset":28159,"endOffset":28649,"count":14},{"startOffset":28334,"endOffset":28339,"count":3},{"startOffset":28547,"endOffset":28627,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28355,"endOffset":28494,"count":23}],"isBlockCoverage":true},{"functionName":"setPlaceholderKeys","ranges":[{"startOffset":28702,"endOffset":28994,"count":0}],"isBlockCoverage":false},{"functionName":"applyDefaultsAndAliases","ranges":[{"startOffset":29003,"endOffset":29620,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29120,"endOffset":29608,"count":26},{"startOffset":29187,"endOffset":29594,"count":14},{"startOffset":29309,"endOffset":29331,"count":6},{"startOffset":29366,"endOffset":29371,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29381,"endOffset":29574,"count":8},{"startOffset":29479,"endOffset":29486,"count":0}],"isBlockCoverage":true},{"functionName":"hasKey","ranges":[{"startOffset":29629,"endOffset":30054,"count":40},{"startOffset":29981,"endOffset":29994,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29810,"endOffset":29876,"count":0}],"isBlockCoverage":false},{"functionName":"setKey","ranges":[{"startOffset":30063,"endOffset":32512,"count":36},{"startOffset":31162,"endOffset":31198,"count":0},{"startOffset":31200,"endOffset":31444,"count":0},{"startOffset":31484,"endOffset":31543,"count":0},{"startOffset":31588,"endOffset":32082,"count":0},{"startOffset":32141,"endOffset":32213,"count":8},{"startOffset":32189,"endOffset":32198,"count":0},{"startOffset":32213,"endOffset":32502,"count":28},{"startOffset":32271,"endOffset":32324,"count":0},{"startOffset":32325,"endOffset":32377,"count":0},{"startOffset":32380,"endOffset":32437,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":30251,"endOffset":30866,"count":0}],"isBlockCoverage":false},{"functionName":"extendAliases","ranges":[{"startOffset":32521,"endOffset":34114,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32580,"endOffset":34102,"count":8},{"startOffset":32629,"endOffset":32634,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32644,"endOffset":34086,"count":68},{"startOffset":32729,"endOffset":32736,"count":16},{"startOffset":32736,"endOffset":32801,"count":52},{"startOffset":32801,"endOffset":32806,"count":12}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32868,"endOffset":33295,"count":98},{"startOffset":32923,"endOffset":32963,"count":14},{"startOffset":32965,"endOffset":33273,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33357,"endOffset":33810,"count":98},{"startOffset":33413,"endOffset":33431,"count":62},{"startOffset":33432,"endOffset":33472,"count":0},{"startOffset":33474,"endOffset":33788,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33860,"endOffset":34066,"count":46}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33957,"endOffset":34041,"count":58}],"isBlockCoverage":true},{"functionName":"checkAllAliases","ranges":[{"startOffset":34123,"endOffset":34408,"count":151},{"startOffset":34218,"endOffset":34223,"count":44},{"startOffset":34373,"endOffset":34389,"count":46},{"startOffset":34390,"endOffset":34397,"count":105}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34317,"endOffset":34342,"count":259}],"isBlockCoverage":true},{"functionName":"hasAnyFlag","ranges":[{"startOffset":34417,"endOffset":34715,"count":0}],"isBlockCoverage":false},{"functionName":"hasFlagsMatching","ranges":[{"startOffset":34724,"endOffset":35004,"count":0}],"isBlockCoverage":false},{"functionName":"hasAllShortFlags","ranges":[{"startOffset":35013,"endOffset":35859,"count":0}],"isBlockCoverage":false},{"functionName":"isUnknownOptionAsArg","ranges":[{"startOffset":35868,"endOffset":35999,"count":6},{"startOffset":35965,"endOffset":35988,"count":0}],"isBlockCoverage":true},{"functionName":"isUnknownOption","ranges":[{"startOffset":36008,"endOffset":36666,"count":0}],"isBlockCoverage":false},{"functionName":"defaultValue","ranges":[{"startOffset":36675,"endOffset":37002,"count":1},{"startOffset":36755,"endOffset":36809,"count":0},{"startOffset":36810,"endOffset":36849,"count":0},{"startOffset":36851,"endOffset":36904,"count":0}],"isBlockCoverage":true},{"functionName":"defaultForType","ranges":[{"startOffset":37011,"endOffset":37243,"count":1}],"isBlockCoverage":true},{"functionName":"guessType","ranges":[{"startOffset":37252,"endOffset":37702,"count":1},{"startOffset":37381,"endOffset":37397,"count":0},{"startOffset":37472,"endOffset":37488,"count":0},{"startOffset":37578,"endOffset":37667,"count":0}],"isBlockCoverage":true},{"functionName":"isUndefined","ranges":[{"startOffset":37711,"endOffset":37786,"count":10}],"isBlockCoverage":true},{"functionName":"checkConfiguration","ranges":[{"startOffset":37795,"endOffset":38367,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":37870,"endOffset":38355,"count":0}],"isBlockCoverage":false},{"functionName":"combineAliases","ranges":[{"startOffset":38685,"endOffset":39887,"count":2},{"startOffset":39025,"endOffset":39513,"count":40},{"startOffset":39091,"endOffset":39503,"count":380},{"startOffset":39284,"endOffset":39489,"count":0},{"startOffset":39503,"endOffset":39513,"count":380},{"startOffset":39513,"endOffset":39519,"count":40}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":38846,"endOffset":38924,"count":40}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39149,"endOffset":39243,"count":810}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39544,"endOffset":39862,"count":40}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39607,"endOffset":39682,"count":86}],"isBlockCoverage":true},{"functionName":"increment","ranges":[{"startOffset":39888,"endOffset":39962,"count":36},{"startOffset":39945,"endOffset":39955,"count":0}],"isBlockCoverage":true},{"functionName":"sanitizeKey","ranges":[{"startOffset":39963,"endOffset":40067,"count":36},{"startOffset":40028,"endOffset":40049,"count":0}],"isBlockCoverage":true},{"functionName":"env","ranges":[{"startOffset":40649,"endOffset":40682,"count":0}],"isBlockCoverage":false},{"functionName":"require","ranges":[{"startOffset":40780,"endOffset":41087,"count":0}],"isBlockCoverage":false},{"functionName":"Parser","ranges":[{"startOffset":41112,"endOffset":41220,"count":0}],"isBlockCoverage":false},{"functionName":"yargsParser.detailed","ranges":[{"startOffset":41245,"endOffset":41315,"count":2}],"isBlockCoverage":true}]},{"scriptId":"133","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/run-option-metadata.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2203,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1613,"endOffset":1923,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1763,"endOffset":1905,"count":42},{"startOffset":1834,"endOffset":1839,"count":22}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1861,"endOffset":1899,"count":23}],"isBlockCoverage":true},{"functionName":"exports.isMochaFlag","ranges":[{"startOffset":2134,"endOffset":2201,"count":15}],"isBlockCoverage":true}]},{"scriptId":"134","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/one-and-dones.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1549,"count":1}],"isBlockCoverage":true},{"functionName":"showKeys","ranges":[{"startOffset":510,"endOffset":996,"count":0}],"isBlockCoverage":false},{"functionName":"list-interfaces","ranges":[{"startOffset":1181,"endOffset":1224,"count":0}],"isBlockCoverage":false},{"functionName":"list-reporters","ranges":[{"startOffset":1309,"endOffset":1351,"count":0}],"isBlockCoverage":false}]},{"scriptId":"135","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/mocha.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":37862,"count":1}],"isBlockCoverage":true},{"functionName":"exports.afterEach","ranges":[{"startOffset":2162,"endOffset":2278,"count":0}],"isBlockCoverage":false},{"functionName":"exports.after","ranges":[{"startOffset":2296,"endOffset":2413,"count":0}],"isBlockCoverage":false},{"functionName":"exports.beforeEach","ranges":[{"startOffset":2436,"endOffset":2538,"count":0}],"isBlockCoverage":false},{"functionName":"exports.before","ranges":[{"startOffset":2557,"endOffset":2660,"count":0}],"isBlockCoverage":false},{"functionName":"exports.describe","ranges":[{"startOffset":2681,"endOffset":2781,"count":0}],"isBlockCoverage":false},{"functionName":"exports.describe.only","ranges":[{"startOffset":2807,"endOffset":2924,"count":0}],"isBlockCoverage":false},{"functionName":"exports.describe.skip","ranges":[{"startOffset":2950,"endOffset":3067,"count":0}],"isBlockCoverage":false},{"functionName":"exports.it","ranges":[{"startOffset":3082,"endOffset":3175,"count":0}],"isBlockCoverage":false},{"functionName":"exports.it.only","ranges":[{"startOffset":3195,"endOffset":3293,"count":0}],"isBlockCoverage":false},{"functionName":"exports.it.skip","ranges":[{"startOffset":3313,"endOffset":3411,"count":0}],"isBlockCoverage":false},{"functionName":"exports.run","ranges":[{"startOffset":3712,"endOffset":3781,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha","ranges":[{"startOffset":6063,"endOffset":8426,"count":1},{"startOffset":6777,"endOffset":6780,"count":0},{"startOffset":6834,"endOffset":6874,"count":0},{"startOffset":7220,"endOffset":7264,"count":0},{"startOffset":8272,"endOffset":8336,"count":0},{"startOffset":8341,"endOffset":8424,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7116,"endOffset":7185,"count":14},{"startOffset":7155,"endOffset":7181,"count":1}],"isBlockCoverage":true},{"functionName":"Mocha.bail","ranges":[{"startOffset":8665,"endOffset":8734,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.addFile","ranges":[{"startOffset":9079,"endOffset":9138,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.reporter","ranges":[{"startOffset":9715,"endOffset":10867,"count":1},{"startOffset":9800,"endOffset":9840,"count":0},{"startOffset":9880,"endOffset":9889,"count":0},{"startOffset":10130,"endOffset":10644,"count":0}],"isBlockCoverage":true},{"functionName":"Mocha.ui","ranges":[{"startOffset":11201,"endOffset":11708,"count":1},{"startOffset":11270,"endOffset":11299,"count":0},{"startOffset":11319,"endOffset":11327,"count":0},{"startOffset":11397,"endOffset":11559,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11634,"endOffset":11688,"count":2}],"isBlockCoverage":true},{"functionName":"Mocha.loadFiles","ranges":[{"startOffset":12243,"endOffset":12579,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.loadFilesAsync","ranges":[{"startOffset":13241,"endOffset":13645,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13383,"endOffset":13468,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13474,"endOffset":13638,"count":2}],"isBlockCoverage":true},{"functionName":"Mocha.unloadFile","ranges":[{"startOffset":13859,"endOffset":14075,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.unloadFiles","ranges":[{"startOffset":14517,"endOffset":14881,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.fgrep","ranges":[{"startOffset":15236,"endOffset":15336,"count":1},{"startOffset":15287,"endOffset":15335,"count":0}],"isBlockCoverage":true},{"functionName":"Mocha.grep","ranges":[{"startOffset":16477,"endOffset":16765,"count":1},{"startOffset":16519,"endOffset":16709,"count":0}],"isBlockCoverage":true},{"functionName":"Mocha.invert","ranges":[{"startOffset":17036,"endOffset":17096,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.checkLeaks","ranges":[{"startOffset":17392,"endOffset":17482,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.cleanReferencesAfterRun","ranges":[{"startOffset":17880,"endOffset":18002,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.dispose","ranges":[{"startOffset":18297,"endOffset":18632,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.fullTrace","ranges":[{"startOffset":18895,"endOffset":18982,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.global","ranges":[{"startOffset":19403,"endOffset":19618,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":19528,"endOffset":19599,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.color","ranges":[{"startOffset":20000,"endOffset":20075,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.inlineDiffs","ranges":[{"startOffset":20375,"endOffset":20468,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.diff","ranges":[{"startOffset":20725,"endOffset":20797,"count":1}],"isBlockCoverage":true},{"functionName":"Mocha.timeout","ranges":[{"startOffset":21370,"endOffset":21434,"count":1}],"isBlockCoverage":true},{"functionName":"Mocha.retries","ranges":[{"startOffset":21803,"endOffset":21867,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.slow","ranges":[{"startOffset":22244,"endOffset":22305,"count":1}],"isBlockCoverage":true},{"functionName":"Mocha.asyncOnly","ranges":[{"startOffset":22596,"endOffset":22683,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.noHighlighting","ranges":[{"startOffset":22825,"endOffset":22893,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.allowUncaught","ranges":[{"startOffset":23164,"endOffset":23263,"count":0}],"isBlockCoverage":false},{"functionName":"delay","ranges":[{"startOffset":23530,"endOffset":23594,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.dryRun","ranges":[{"startOffset":23841,"endOffset":23919,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.failZero","ranges":[{"startOffset":24170,"endOffset":24254,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.forbidOnly","ranges":[{"startOffset":24519,"endOffset":24609,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha.forbidPending","ranges":[{"startOffset":24895,"endOffset":24994,"count":0}],"isBlockCoverage":false},{"functionName":"Mocha._guardRunningStateTransition","ranges":[{"startOffset":25161,"endOffset":25845,"count":1},{"startOffset":25218,"endOffset":25395,"count":0},{"startOffset":25502,"endOffset":25843,"count":0}],"isBlockCoverage":true},{"functionName":"Mocha.run","ranges":[{"startOffset":26867,"endOffset":29194,"count":1},{"startOffset":26987,"endOffset":27052,"count":0},{"startOffset":27102,"endOffset":27129,"count":0},{"startOffset":27795,"endOffset":27847,"count":0},{"startOffset":27947,"endOffset":28006,"count":0}],"isBlockCoverage":true},{"functionName":"done","ranges":[{"startOffset":28134,"endOffset":28447,"count":1},{"startOffset":28276,"endOffset":28294,"count":0},{"startOffset":28308,"endOffset":28321,"count":0},{"startOffset":28368,"endOffset":28410,"count":0}],"isBlockCoverage":true},{"functionName":"runAsync","ranges":[{"startOffset":28469,"endOffset":28901,"count":1},{"startOffset":28585,"endOffset":28629,"count":0},{"startOffset":28810,"endOffset":28872,"count":0}],"isBlockCoverage":true},{"functionName":"rootHooks","ranges":[{"startOffset":29354,"endOffset":29912,"count":0}],"isBlockCoverage":false},{"functionName":"parallelMode","ranges":[{"startOffset":30593,"endOffset":31400,"count":0}],"isBlockCoverage":false},{"functionName":"lazyLoadFiles","ranges":[{"startOffset":31829,"endOffset":31959,"count":1}],"isBlockCoverage":true},{"functionName":"globalSetup","ranges":[{"startOffset":32251,"endOffset":32450,"count":1}],"isBlockCoverage":true},{"functionName":"globalTeardown","ranges":[{"startOffset":32754,"endOffset":32977,"count":1}],"isBlockCoverage":true},{"functionName":"runGlobalSetup","ranges":[{"startOffset":33450,"endOffset":33743,"count":0}],"isBlockCoverage":false},{"functionName":"runGlobalTeardown","ranges":[{"startOffset":34220,"endOffset":34536,"count":0}],"isBlockCoverage":false},{"functionName":"_runGlobalFixtures","ranges":[{"startOffset":34810,"endOffset":34987,"count":0}],"isBlockCoverage":false},{"functionName":"enableGlobalSetup","ranges":[{"startOffset":35215,"endOffset":35329,"count":1}],"isBlockCoverage":true},{"functionName":"enableGlobalTeardown","ranges":[{"startOffset":35566,"endOffset":35690,"count":1}],"isBlockCoverage":true},{"functionName":"hasGlobalSetupFixtures","ranges":[{"startOffset":35850,"endOffset":35938,"count":1}],"isBlockCoverage":true},{"functionName":"hasGlobalTeardownFixtures","ranges":[{"startOffset":36106,"endOffset":36204,"count":1}],"isBlockCoverage":true}]},{"scriptId":"136","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/escape-string-regexp/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":457,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":455,"count":0}],"isBlockCoverage":false}]},{"scriptId":"137","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":946,"count":1}],"isBlockCoverage":true}]},{"scriptId":"138","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/base.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12057,"count":1},{"startOffset":1078,"endOffset":1119,"count":0},{"startOffset":2421,"endOffset":2480,"count":0}],"isBlockCoverage":true},{"functionName":"getBrowserWindowSize","ranges":[{"startOffset":436,"endOffset":636,"count":0}],"isBlockCoverage":false},{"functionName":"exports.color","ranges":[{"startOffset":2116,"endOffset":2265,"count":15},{"startOffset":2165,"endOffset":2194,"count":0}],"isBlockCoverage":true},{"functionName":"hide","ranges":[{"startOffset":2668,"endOffset":2736,"count":0}],"isBlockCoverage":false},{"functionName":"show","ranges":[{"startOffset":2747,"endOffset":2815,"count":0}],"isBlockCoverage":false},{"functionName":"deleteLine","ranges":[{"startOffset":2832,"endOffset":2898,"count":0}],"isBlockCoverage":false},{"functionName":"beginningOfLine","ranges":[{"startOffset":2920,"endOffset":2986,"count":0}],"isBlockCoverage":false},{"functionName":"CR","ranges":[{"startOffset":2995,"endOffset":3158,"count":0}],"isBlockCoverage":false},{"functionName":"exports.showDiff","ranges":[{"startOffset":3198,"endOffset":3346,"count":0}],"isBlockCoverage":false},{"functionName":"stringifyDiffObjs","ranges":[{"startOffset":3350,"endOffset":3555,"count":0}],"isBlockCoverage":false},{"functionName":"exports.generateDiff","ranges":[{"startOffset":3866,"endOffset":4645,"count":0}],"isBlockCoverage":false},{"functionName":"exports.list","ranges":[{"startOffset":4874,"endOffset":6837,"count":0}],"isBlockCoverage":false},{"functionName":"Base","ranges":[{"startOffset":7137,"endOffset":8220,"count":1},{"startOffset":7225,"endOffset":7282,"count":0},{"startOffset":7308,"endOffset":7313,"count":0},{"startOffset":7473,"endOffset":7515,"count":0},{"startOffset":7552,"endOffset":7585,"count":0},{"startOffset":7587,"endOffset":7642,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7673,"endOffset":7885,"count":3},{"startOffset":7728,"endOffset":7762,"count":2},{"startOffset":7762,"endOffset":7881,"count":1},{"startOffset":7805,"endOffset":7841,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7918,"endOffset":8216,"count":0}],"isBlockCoverage":false},{"functionName":"Base.epilogue","ranges":[{"startOffset":8365,"endOffset":8984,"count":1},{"startOffset":8593,"endOffset":8597,"count":0},{"startOffset":8665,"endOffset":8779,"count":0},{"startOffset":8817,"endOffset":8960,"count":0}],"isBlockCoverage":true},{"functionName":"pad","ranges":[{"startOffset":9110,"endOffset":9211,"count":0}],"isBlockCoverage":false},{"functionName":"inlineDiff","ranges":[{"startOffset":9383,"endOffset":9941,"count":0}],"isBlockCoverage":false},{"functionName":"unifiedDiff","ranges":[{"startOffset":10121,"endOffset":10923,"count":0}],"isBlockCoverage":false},{"functionName":"errorDiff","ranges":[{"startOffset":11068,"endOffset":11420,"count":0}],"isBlockCoverage":false},{"functionName":"colorLines","ranges":[{"startOffset":11563,"endOffset":11708,"count":0}],"isBlockCoverage":false},{"functionName":"sameType","ranges":[{"startOffset":11921,"endOffset":12002,"count":0}],"isBlockCoverage":false}]},{"scriptId":"139","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7236,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":174,"endOffset":223,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":301,"endOffset":354,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":432,"endOffset":480,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":567,"endOffset":624,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":702,"endOffset":750,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":835,"endOffset":890,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":972,"endOffset":1028,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1104,"endOffset":1149,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1226,"endOffset":1273,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1354,"endOffset":1405,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1484,"endOffset":1534,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1613,"endOffset":1663,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1744,"endOffset":1796,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1875,"endOffset":1925,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1999,"endOffset":2044,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2128,"endOffset":2184,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2272,"endOffset":2332,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2412,"endOffset":2464,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2552,"endOffset":2609,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2697,"endOffset":2754,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":4100,"endOffset":4197,"count":1},{"startOffset":4174,"endOffset":4194,"count":0}],"isBlockCoverage":true}]},{"scriptId":"140","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/base.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":30923,"count":1}],"isBlockCoverage":true},{"functionName":"Diff","ranges":[{"startOffset":158,"endOffset":176,"count":7}],"isBlockCoverage":true},{"functionName":"diff","ranges":[{"startOffset":260,"endOffset":4471,"count":0}],"isBlockCoverage":false},{"functionName":"pushComponent","ranges":[{"startOffset":4546,"endOffset":5074,"count":0}],"isBlockCoverage":false},{"functionName":"extractCommon","ranges":[{"startOffset":5149,"endOffset":5720,"count":0}],"isBlockCoverage":false},{"functionName":"equals","ranges":[{"startOffset":5788,"endOffset":6029,"count":0}],"isBlockCoverage":false},{"functionName":"removeEmpty","ranges":[{"startOffset":6102,"endOffset":6280,"count":0}],"isBlockCoverage":false},{"functionName":"castInput","ranges":[{"startOffset":6351,"endOffset":6400,"count":0}],"isBlockCoverage":false},{"functionName":"tokenize","ranges":[{"startOffset":6470,"endOffset":6528,"count":0}],"isBlockCoverage":false},{"functionName":"join","ranges":[{"startOffset":6594,"endOffset":6647,"count":0}],"isBlockCoverage":false},{"functionName":"buildValues","ranges":[{"startOffset":6652,"endOffset":8673,"count":0}],"isBlockCoverage":false},{"functionName":"clonePath","ranges":[{"startOffset":8675,"endOffset":8785,"count":0}],"isBlockCoverage":false}]},{"scriptId":"141","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/character.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1671,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":327,"endOffset":424,"count":1},{"startOffset":401,"endOffset":421,"count":0}],"isBlockCoverage":true},{"functionName":"diffChars","ranges":[{"startOffset":688,"endOffset":789,"count":0}],"isBlockCoverage":false}]},{"scriptId":"142","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/word.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8786,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":464,"endOffset":561,"count":1},{"startOffset":538,"endOffset":558,"count":0}],"isBlockCoverage":true},{"functionName":"wordDiff.equals","ranges":[{"startOffset":1546,"endOffset":1789,"count":0}],"isBlockCoverage":false},{"functionName":"wordDiff.tokenize","ranges":[{"startOffset":1812,"endOffset":2493,"count":0}],"isBlockCoverage":false},{"functionName":"diffWords","ranges":[{"startOffset":2496,"endOffset":2853,"count":0}],"isBlockCoverage":false},{"functionName":"diffWordsWithSpace","ranges":[{"startOffset":2855,"endOffset":2960,"count":0}],"isBlockCoverage":false}]},{"scriptId":"143","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/util/params.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1752,"count":1}],"isBlockCoverage":true},{"functionName":"generateOptions","ranges":[{"startOffset":174,"endOffset":502,"count":0}],"isBlockCoverage":false}]},{"scriptId":"144","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/line.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5686,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":460,"endOffset":557,"count":1},{"startOffset":534,"endOffset":554,"count":0}],"isBlockCoverage":true},{"functionName":"lineDiff.tokenize","ranges":[{"startOffset":826,"endOffset":1483,"count":0}],"isBlockCoverage":false},{"functionName":"diffLines","ranges":[{"startOffset":1486,"endOffset":1584,"count":0}],"isBlockCoverage":false},{"functionName":"diffTrimmedLines","ranges":[{"startOffset":1586,"endOffset":1956,"count":0}],"isBlockCoverage":false}]},{"scriptId":"145","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/sentence.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2090,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":334,"endOffset":431,"count":1},{"startOffset":408,"endOffset":428,"count":0}],"isBlockCoverage":true},{"functionName":"sentenceDiff.tokenize","ranges":[{"startOffset":716,"endOffset":783,"count":0}],"isBlockCoverage":false},{"functionName":"diffSentences","ranges":[{"startOffset":786,"endOffset":892,"count":0}],"isBlockCoverage":false}]},{"scriptId":"146","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/css.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1966,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":317,"endOffset":414,"count":1},{"startOffset":391,"endOffset":411,"count":0}],"isBlockCoverage":true},{"functionName":"cssDiff.tokenize","ranges":[{"startOffset":679,"endOffset":738,"count":0}],"isBlockCoverage":false},{"functionName":"diffCss","ranges":[{"startOffset":741,"endOffset":836,"count":0}],"isBlockCoverage":false}]},{"scriptId":"147","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/json.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12937,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":440,"endOffset":537,"count":1},{"startOffset":514,"endOffset":534,"count":0}],"isBlockCoverage":true},{"functionName":"_typeof","ranges":[{"startOffset":539,"endOffset":917,"count":0}],"isBlockCoverage":false},{"functionName":"jsonDiff.castInput","ranges":[{"startOffset":1625,"endOffset":2249,"count":0}],"isBlockCoverage":false},{"functionName":"jsonDiff.equals","ranges":[{"startOffset":2270,"endOffset":2565,"count":0}],"isBlockCoverage":false},{"functionName":"diffJson","ranges":[{"startOffset":2568,"endOffset":2663,"count":0}],"isBlockCoverage":false},{"functionName":"canonicalize","ranges":[{"startOffset":2859,"endOffset":4359,"count":0}],"isBlockCoverage":false}]},{"scriptId":"148","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/array.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2300,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":325,"endOffset":422,"count":1},{"startOffset":399,"endOffset":419,"count":0}],"isBlockCoverage":true},{"functionName":"arrayDiff.tokenize","ranges":[{"startOffset":695,"endOffset":739,"count":0}],"isBlockCoverage":false},{"functionName":"arrayDiff.join.arrayDiff.removeEmpty","ranges":[{"startOffset":783,"endOffset":819,"count":0}],"isBlockCoverage":false},{"functionName":"diffArrays","ranges":[{"startOffset":822,"endOffset":922,"count":0}],"isBlockCoverage":false}]},{"scriptId":"149","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/apply.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":19926,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":450,"endOffset":547,"count":1},{"startOffset":524,"endOffset":544,"count":0}],"isBlockCoverage":true},{"functionName":"applyPatch","ranges":[{"startOffset":573,"endOffset":4807,"count":0}],"isBlockCoverage":false},{"functionName":"applyPatches","ranges":[{"startOffset":4872,"endOffset":5728,"count":0}],"isBlockCoverage":false}]},{"scriptId":"150","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":17908,"count":1}],"isBlockCoverage":true},{"functionName":"parsePatch","ranges":[{"startOffset":164,"endOffset":4730,"count":0}],"isBlockCoverage":false}]},{"scriptId":"151","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/util/distance-iterator.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4641,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":340,"endOffset":1483,"count":0}],"isBlockCoverage":false}]},{"scriptId":"152","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/merge.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":50907,"count":1}],"isBlockCoverage":true},{"functionName":"_toConsumableArray","ranges":[{"startOffset":482,"endOffset":635,"count":0}],"isBlockCoverage":false},{"functionName":"_nonIterableSpread","ranges":[{"startOffset":637,"endOffset":827,"count":0}],"isBlockCoverage":false},{"functionName":"_unsupportedIterableToArray","ranges":[{"startOffset":829,"endOffset":1245,"count":0}],"isBlockCoverage":false},{"functionName":"_iterableToArray","ranges":[{"startOffset":1247,"endOffset":1377,"count":0}],"isBlockCoverage":false},{"functionName":"_arrayWithoutHoles","ranges":[{"startOffset":1379,"endOffset":1470,"count":0}],"isBlockCoverage":false},{"functionName":"_arrayLikeToArray","ranges":[{"startOffset":1472,"endOffset":1655,"count":0}],"isBlockCoverage":false},{"functionName":"calcLineCount","ranges":[{"startOffset":1681,"endOffset":2135,"count":0}],"isBlockCoverage":false},{"functionName":"merge","ranges":[{"startOffset":2137,"endOffset":5016,"count":0}],"isBlockCoverage":false},{"functionName":"loadPatch","ranges":[{"startOffset":5018,"endOffset":5874,"count":0}],"isBlockCoverage":false},{"functionName":"fileNameChanged","ranges":[{"startOffset":5876,"endOffset":5982,"count":0}],"isBlockCoverage":false},{"functionName":"selectField","ranges":[{"startOffset":5984,"endOffset":6172,"count":0}],"isBlockCoverage":false},{"functionName":"hunkBefore","ranges":[{"startOffset":6174,"endOffset":6301,"count":0}],"isBlockCoverage":false},{"functionName":"cloneHunk","ranges":[{"startOffset":6303,"endOffset":6502,"count":0}],"isBlockCoverage":false},{"functionName":"mergeLines","ranges":[{"startOffset":6504,"endOffset":9249,"count":0}],"isBlockCoverage":false},{"functionName":"mutualChange","ranges":[{"startOffset":9251,"endOffset":11898,"count":0}],"isBlockCoverage":false},{"functionName":"removal","ranges":[{"startOffset":11900,"endOffset":12608,"count":0}],"isBlockCoverage":false},{"functionName":"conflict","ranges":[{"startOffset":12610,"endOffset":12754,"count":0}],"isBlockCoverage":false},{"functionName":"insertLeading","ranges":[{"startOffset":12756,"endOffset":12979,"count":0}],"isBlockCoverage":false},{"functionName":"insertTrailing","ranges":[{"startOffset":12981,"endOffset":13145,"count":0}],"isBlockCoverage":false},{"functionName":"collectChange","ranges":[{"startOffset":13147,"endOffset":13641,"count":0}],"isBlockCoverage":false},{"functionName":"collectContext","ranges":[{"startOffset":13643,"endOffset":14910,"count":0}],"isBlockCoverage":false},{"functionName":"allRemoves","ranges":[{"startOffset":14912,"endOffset":15044,"count":0}],"isBlockCoverage":false},{"functionName":"skipRemoveSuperset","ranges":[{"startOffset":15046,"endOffset":15360,"count":0}],"isBlockCoverage":false},{"functionName":"calcOldNewLineCount","ranges":[{"startOffset":15362,"endOffset":16317,"count":0}],"isBlockCoverage":false}]},{"scriptId":"153","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/create.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":23453,"count":1}],"isBlockCoverage":true},{"functionName":"_toConsumableArray","ranges":[{"startOffset":410,"endOffset":563,"count":0}],"isBlockCoverage":false},{"functionName":"_nonIterableSpread","ranges":[{"startOffset":565,"endOffset":755,"count":0}],"isBlockCoverage":false},{"functionName":"_unsupportedIterableToArray","ranges":[{"startOffset":757,"endOffset":1173,"count":0}],"isBlockCoverage":false},{"functionName":"_iterableToArray","ranges":[{"startOffset":1175,"endOffset":1305,"count":0}],"isBlockCoverage":false},{"functionName":"_arrayWithoutHoles","ranges":[{"startOffset":1307,"endOffset":1398,"count":0}],"isBlockCoverage":false},{"functionName":"_arrayLikeToArray","ranges":[{"startOffset":1400,"endOffset":1583,"count":0}],"isBlockCoverage":false},{"functionName":"structuredPatch","ranges":[{"startOffset":1609,"endOffset":6811,"count":0}],"isBlockCoverage":false},{"functionName":"formatPatch","ranges":[{"startOffset":6813,"endOffset":7832,"count":0}],"isBlockCoverage":false},{"functionName":"createTwoFilesPatch","ranges":[{"startOffset":7834,"endOffset":8051,"count":0}],"isBlockCoverage":false},{"functionName":"createPatch","ranges":[{"startOffset":8053,"endOffset":8231,"count":0}],"isBlockCoverage":false}]},{"scriptId":"154","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/util/array.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2026,"count":1}],"isBlockCoverage":true},{"functionName":"arrayEqual","ranges":[{"startOffset":207,"endOffset":322,"count":0}],"isBlockCoverage":false},{"functionName":"arrayStartsWith","ranges":[{"startOffset":324,"endOffset":548,"count":0}],"isBlockCoverage":false}]},{"scriptId":"155","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/convert/dmp.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2255,"count":1}],"isBlockCoverage":true},{"functionName":"convertChangesToDMP","ranges":[{"startOffset":248,"endOffset":609,"count":0}],"isBlockCoverage":false}]},{"scriptId":"156","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/convert/xml.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3359,"count":1}],"isBlockCoverage":true},{"functionName":"convertChangesToXML","ranges":[{"startOffset":182,"endOffset":613,"count":0}],"isBlockCoverage":false},{"functionName":"escapeHTML","ranges":[{"startOffset":615,"endOffset":793,"count":0}],"isBlockCoverage":false}]},{"scriptId":"157","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/ms/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3024,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":422,"endOffset":792,"count":2},{"startOffset":524,"endOffset":541,"count":1},{"startOffset":543,"endOffset":678,"count":1},{"startOffset":643,"endOffset":657,"count":0},{"startOffset":678,"endOffset":791,"count":0}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":916,"endOffset":1999,"count":1},{"startOffset":983,"endOffset":1000,"count":0},{"startOffset":1179,"endOffset":1196,"count":0},{"startOffset":1298,"endOffset":1311,"count":0},{"startOffset":1316,"endOffset":1328,"count":0},{"startOffset":1333,"endOffset":1344,"count":0},{"startOffset":1349,"endOffset":1359,"count":0},{"startOffset":1364,"endOffset":1393,"count":0},{"startOffset":1398,"endOffset":1411,"count":0},{"startOffset":1416,"endOffset":1428,"count":0},{"startOffset":1433,"endOffset":1462,"count":0},{"startOffset":1467,"endOffset":1479,"count":0},{"startOffset":1484,"endOffset":1495,"count":0},{"startOffset":1500,"endOffset":1529,"count":0},{"startOffset":1534,"endOffset":1547,"count":0},{"startOffset":1552,"endOffset":1564,"count":0},{"startOffset":1569,"endOffset":1580,"count":0},{"startOffset":1585,"endOffset":1595,"count":0},{"startOffset":1600,"endOffset":1629,"count":0},{"startOffset":1634,"endOffset":1649,"count":0},{"startOffset":1654,"endOffset":1668,"count":0},{"startOffset":1673,"endOffset":1685,"count":0},{"startOffset":1690,"endOffset":1701,"count":0},{"startOffset":1706,"endOffset":1735,"count":0},{"startOffset":1740,"endOffset":1755,"count":0},{"startOffset":1760,"endOffset":1774,"count":0},{"startOffset":1779,"endOffset":1791,"count":0},{"startOffset":1796,"endOffset":1807,"count":0},{"startOffset":1812,"endOffset":1841,"count":0},{"startOffset":1846,"endOffset":1866,"count":0},{"startOffset":1871,"endOffset":1890,"count":0},{"startOffset":1895,"endOffset":1908,"count":0},{"startOffset":1913,"endOffset":1925,"count":0},{"startOffset":1961,"endOffset":1993,"count":0}],"isBlockCoverage":true},{"functionName":"fmtShort","ranges":[{"startOffset":2097,"endOffset":2414,"count":1},{"startOffset":2167,"endOffset":2209,"count":0},{"startOffset":2228,"endOffset":2270,"count":0},{"startOffset":2289,"endOffset":2331,"count":0},{"startOffset":2392,"endOffset":2413,"count":0}],"isBlockCoverage":true},{"functionName":"fmtLong","ranges":[{"startOffset":2511,"endOffset":2847,"count":0}],"isBlockCoverage":false},{"functionName":"plural","ranges":[{"startOffset":2883,"endOffset":3023,"count":0}],"isBlockCoverage":false}]},{"scriptId":"158","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":17380,"count":1}],"isBlockCoverage":true},{"functionName":"exports.escape","ranges":[{"startOffset":845,"endOffset":927,"count":0}],"isBlockCoverage":false},{"functionName":"exports.isString","ranges":[{"startOffset":1060,"endOffset":1112,"count":8}],"isBlockCoverage":true},{"functionName":"exports.slug","ranges":[{"startOffset":1236,"endOffset":1369,"count":0}],"isBlockCoverage":false},{"functionName":"exports.clean","ranges":[{"startOffset":1521,"endOffset":2180,"count":0}],"isBlockCoverage":false},{"functionName":"emptyRepresentation","ranges":[{"startOffset":2642,"endOffset":2884,"count":0}],"isBlockCoverage":false},{"functionName":"canonicalType","ranges":[{"startOffset":3740,"endOffset":4049,"count":5},{"startOffset":3799,"endOffset":3828,"count":0},{"startOffset":3854,"endOffset":3878,"count":0},{"startOffset":3912,"endOffset":3938,"count":0}],"isBlockCoverage":true},{"functionName":"type","ranges":[{"startOffset":4672,"endOffset":5148,"count":0}],"isBlockCoverage":false},{"functionName":"exports.stringify","ranges":[{"startOffset":5768,"endOffset":6795,"count":0}],"isBlockCoverage":false},{"functionName":"jsonStringify","ranges":[{"startOffset":6956,"endOffset":8999,"count":0}],"isBlockCoverage":false},{"functionName":"canonicalize","ranges":[{"startOffset":9901,"endOffset":11489,"count":0}],"isBlockCoverage":false},{"functionName":"exports.stackTraceFilter","ranges":[{"startOffset":11860,"endOffset":13191,"count":1},{"startOffset":11974,"endOffset":11991,"count":0},{"startOffset":12081,"endOffset":12225,"count":0}],"isBlockCoverage":true},{"functionName":"isMochaInternal","ranges":[{"startOffset":12229,"endOffset":12437,"count":0}],"isBlockCoverage":false},{"functionName":"isNodeInternal","ranges":[{"startOffset":12441,"endOffset":12725,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":12736,"endOffset":13188,"count":0}],"isBlockCoverage":false},{"functionName":"isPromise","ranges":[{"startOffset":13336,"endOffset":13473,"count":0}],"isBlockCoverage":false},{"functionName":"clamp","ranges":[{"startOffset":13711,"endOffset":13799,"count":7}],"isBlockCoverage":true},{"functionName":"exports.noop","ranges":[{"startOffset":13852,"endOffset":13866,"count":0}],"isBlockCoverage":false},{"functionName":"exports.createMap","ranges":[{"startOffset":14771,"endOffset":14906,"count":5}],"isBlockCoverage":true},{"functionName":"exports.defineConstants","ranges":[{"startOffset":15396,"endOffset":15609,"count":5},{"startOffset":15480,"endOffset":15559,"count":0}],"isBlockCoverage":true},{"functionName":"cwd","ranges":[{"startOffset":15734,"endOffset":15776,"count":4}],"isBlockCoverage":true},{"functionName":"isBrowser","ranges":[{"startOffset":15926,"endOffset":15985,"count":2}],"isBlockCoverage":true},{"functionName":"castArray","ranges":[{"startOffset":16490,"endOffset":16793,"count":5},{"startOffset":16545,"endOffset":16565,"count":0},{"startOffset":16588,"endOffset":16612,"count":0},{"startOffset":16703,"endOffset":16732,"count":0},{"startOffset":16773,"endOffset":16792,"count":0}],"isBlockCoverage":true},{"functionName":"exports.uniqueID","ranges":[{"startOffset":16969,"endOffset":16983,"count":7}],"isBlockCoverage":true},{"functionName":"exports.assignNewMochaID","ranges":[{"startOffset":17013,"endOffset":17162,"count":7}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":17110,"endOffset":17140,"count":0}],"isBlockCoverage":false},{"functionName":"exports.getMochaID","ranges":[{"startOffset":17301,"endOffset":17378,"count":0}],"isBlockCoverage":false}]},{"scriptId":"159","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/nanoid/non-secure/index.cjs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":499,"count":1}],"isBlockCoverage":true},{"functionName":"customAlphabet","ranges":[{"startOffset":108,"endOffset":313,"count":0}],"isBlockCoverage":false},{"functionName":"nanoid","ranges":[{"startOffset":327,"endOffset":454,"count":7},{"startOffset":387,"endOffset":440,"count":147}],"isBlockCoverage":true}]},{"scriptId":"160","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/he/he.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":100883,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":61,"endOffset":100874,"count":1},{"startOffset":500,"endOffset":535,"count":0},{"startOffset":100447,"endOffset":100481,"count":0},{"startOffset":100482,"endOffset":100497,"count":0},{"startOffset":100501,"endOffset":100547,"count":0},{"startOffset":100689,"endOffset":100813,"count":0},{"startOffset":100816,"endOffset":100871,"count":0}],"isBlockCoverage":true},{"functionName":"has","ranges":[{"startOffset":92347,"endOffset":92434,"count":0}],"isBlockCoverage":false},{"functionName":"contains","ranges":[{"startOffset":92453,"endOffset":92630,"count":0}],"isBlockCoverage":false},{"functionName":"merge","ranges":[{"startOffset":92646,"endOffset":92997,"count":0}],"isBlockCoverage":false},{"functionName":"codePointToSymbol","ranges":[{"startOffset":93093,"endOffset":94044,"count":0}],"isBlockCoverage":false},{"functionName":"hexEscape","ranges":[{"startOffset":94064,"endOffset":94149,"count":0}],"isBlockCoverage":false},{"functionName":"decEscape","ranges":[{"startOffset":94169,"endOffset":94226,"count":0}],"isBlockCoverage":false},{"functionName":"parseError","ranges":[{"startOffset":94247,"endOffset":94311,"count":0}],"isBlockCoverage":false},{"functionName":"encode","ranges":[{"startOffset":94409,"endOffset":97437,"count":0}],"isBlockCoverage":false},{"functionName":"decode","ranges":[{"startOffset":97673,"endOffset":99781,"count":0}],"isBlockCoverage":false},{"functionName":"escape","ranges":[{"startOffset":99934,"endOffset":100103,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":100512,"endOffset":100542,"count":0}],"isBlockCoverage":false}]},{"scriptId":"161","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/supports-color/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3065,"count":1},{"startOffset":254,"endOffset":278,"count":0},{"startOffset":382,"endOffset":406,"count":0}],"isBlockCoverage":true},{"functionName":"envForceColor","ranges":[{"startOffset":408,"endOffset":672,"count":2},{"startOffset":462,"endOffset":670,"count":0}],"isBlockCoverage":true},{"functionName":"translateLevel","ranges":[{"startOffset":674,"endOffset":832,"count":2},{"startOffset":725,"endOffset":745,"count":0}],"isBlockCoverage":true},{"functionName":"supportsColor","ranges":[{"startOffset":834,"endOffset":2729,"count":2},{"startOffset":990,"endOffset":1031,"count":0},{"startOffset":1081,"endOffset":1099,"count":0},{"startOffset":1125,"endOffset":1141,"count":0},{"startOffset":1251,"endOffset":1269,"count":0},{"startOffset":1299,"endOffset":1317,"count":0},{"startOffset":1354,"endOffset":1381,"count":0},{"startOffset":1383,"endOffset":1399,"count":0},{"startOffset":1458,"endOffset":1476,"count":0},{"startOffset":1513,"endOffset":1868,"count":0},{"startOffset":1888,"endOffset":2077,"count":0},{"startOffset":2111,"endOffset":2192,"count":0},{"startOffset":2246,"endOffset":2728,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1989,"endOffset":2008,"count":0}],"isBlockCoverage":false},{"functionName":"getSupportLevel","ranges":[{"startOffset":2731,"endOffset":2909,"count":2}],"isBlockCoverage":true}]},{"scriptId":"162","url":"node:os","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9062,"count":1}],"isBlockCoverage":false},{"functionName":"getCheckedFunction","ranges":[{"startOffset":2008,"endOffset":2249,"count":3}],"isBlockCoverage":true},{"functionName":"checkError","ranges":[{"startOffset":2067,"endOffset":2245,"count":2},{"startOffset":2179,"endOffset":2225,"count":0}],"isBlockCoverage":true},{"functionName":"getOSRelease","ranges":[{"startOffset":2566,"endOffset":2579,"count":0}],"isBlockCoverage":false},{"functionName":"getOSType","ranges":[{"startOffset":2628,"endOffset":2638,"count":1}],"isBlockCoverage":true},{"functionName":"getOSVersion","ranges":[{"startOffset":2690,"endOffset":2703,"count":0}],"isBlockCoverage":false},{"functionName":"getFreeMem.<computed>","ranges":[{"startOffset":2738,"endOffset":2756,"count":0}],"isBlockCoverage":false},{"functionName":"getHostname.<computed>","ranges":[{"startOffset":2791,"endOffset":2810,"count":0}],"isBlockCoverage":false},{"functionName":"getOSVersion.<computed>","ranges":[{"startOffset":2846,"endOffset":2866,"count":0}],"isBlockCoverage":false},{"functionName":"getOSType.<computed>","ranges":[{"startOffset":2899,"endOffset":2916,"count":0}],"isBlockCoverage":false},{"functionName":"getOSRelease.<computed>","ranges":[{"startOffset":2952,"endOffset":2972,"count":0}],"isBlockCoverage":false},{"functionName":"getHomeDirectory.<computed>","ranges":[{"startOffset":3012,"endOffset":3036,"count":0}],"isBlockCoverage":false},{"functionName":"getTotalMem.<computed>","ranges":[{"startOffset":3071,"endOffset":3090,"count":0}],"isBlockCoverage":false},{"functionName":"getUptime.<computed>","ranges":[{"startOffset":3123,"endOffset":3140,"count":0}],"isBlockCoverage":false},{"functionName":"loadavg","ranges":[{"startOffset":3278,"endOffset":3378,"count":0}],"isBlockCoverage":false},{"functionName":"cpus","ranges":[{"startOffset":3653,"endOffset":4080,"count":0}],"isBlockCoverage":false},{"functionName":"arch","ranges":[{"startOffset":4111,"endOffset":4153,"count":0}],"isBlockCoverage":false},{"functionName":"arch.<computed>","ranges":[{"startOffset":4180,"endOffset":4198,"count":0}],"isBlockCoverage":false},{"functionName":"platform","ranges":[{"startOffset":4230,"endOffset":4280,"count":1}],"isBlockCoverage":true},{"functionName":"platform.<computed>","ranges":[{"startOffset":4311,"endOffset":4333,"count":0}],"isBlockCoverage":false},{"functionName":"tmpdir","ranges":[{"startOffset":4365,"endOffset":4970,"count":0}],"isBlockCoverage":false},{"functionName":"tmpdir.<computed>","ranges":[{"startOffset":4999,"endOffset":5013,"count":0}],"isBlockCoverage":false},{"functionName":"endianness","ranges":[{"startOffset":5050,"endOffset":5097,"count":0}],"isBlockCoverage":false},{"functionName":"endianness.<computed>","ranges":[{"startOffset":5130,"endOffset":5147,"count":0}],"isBlockCoverage":false},{"functionName":"countBinaryOnes","ranges":[{"startOffset":5235,"endOffset":5488,"count":0}],"isBlockCoverage":false},{"functionName":"getCIDR","ranges":[{"startOffset":5490,"endOffset":6226,"count":0}],"isBlockCoverage":false},{"functionName":"networkInterfaces","ranges":[{"startOffset":6430,"endOffset":7122,"count":0}],"isBlockCoverage":false},{"functionName":"setPriority","ranges":[{"startOffset":7206,"endOffset":7495,"count":0}],"isBlockCoverage":false},{"functionName":"getPriority","ranges":[{"startOffset":7553,"endOffset":7808,"count":0}],"isBlockCoverage":false},{"functionName":"userInfo","ranges":[{"startOffset":8107,"endOffset":8333,"count":0}],"isBlockCoverage":false}]},{"scriptId":"163","url":"node:tty","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5065,"count":1}],"isBlockCoverage":false},{"functionName":"isatty","ranges":[{"startOffset":1534,"endOffset":1640,"count":24}],"isBlockCoverage":true},{"functionName":"ReadStream","ranges":[{"startOffset":1642,"endOffset":2126,"count":0}],"isBlockCoverage":false},{"functionName":"ReadStream.setRawMode","ranges":[{"startOffset":2275,"endOffset":2491,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream","ranges":[{"startOffset":2494,"endOffset":3460,"count":2},{"startOffset":2563,"endOffset":2590,"count":0},{"startOffset":2627,"endOffset":2656,"count":0},{"startOffset":2745,"endOffset":2790,"count":0}],"isBlockCoverage":true},{"functionName":"WriteStream._refreshSize","ranges":[{"startOffset":3751,"endOffset":4187,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream.cursorTo","ranges":[{"startOffset":4243,"endOffset":4383,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream.moveCursor","ranges":[{"startOffset":4420,"endOffset":4566,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream.clearLine","ranges":[{"startOffset":4602,"endOffset":4741,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream.clearScreenDown","ranges":[{"startOffset":4783,"endOffset":4918,"count":0}],"isBlockCoverage":false},{"functionName":"WriteStream.getWindowSize","ranges":[{"startOffset":4958,"endOffset":5008,"count":1}],"isBlockCoverage":true}]},{"scriptId":"164","url":"node:internal/tty","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6446,"count":1}],"isBlockCoverage":false},{"functionName":"warnOnDeactivatedColors","ranges":[{"startOffset":2548,"endOffset":3000,"count":0}],"isBlockCoverage":false},{"functionName":"getColorDepth","ranges":[{"startOffset":3158,"endOffset":6118,"count":13},{"startOffset":3362,"endOffset":3720,"count":0},{"startOffset":4061,"endOffset":4087,"count":0},{"startOffset":4125,"endOffset":4683,"count":0},{"startOffset":4701,"endOffset":4729,"count":0},{"startOffset":4745,"endOffset":5008,"count":0},{"startOffset":5043,"endOffset":5164,"count":0},{"startOffset":5200,"endOffset":5392,"count":0},{"startOffset":5397,"endOffset":5414,"count":0},{"startOffset":5419,"endOffset":5459,"count":0},{"startOffset":5464,"endOffset":5511,"count":0},{"startOffset":5553,"endOffset":5581,"count":0},{"startOffset":5611,"endOffset":6117,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4897,"endOffset":4918,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5919,"endOffset":5963,"count":0}],"isBlockCoverage":false},{"functionName":"hasColors","ranges":[{"startOffset":6120,"endOffset":6393,"count":0}],"isBlockCoverage":false}]},{"scriptId":"165","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/has-flag/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":330,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":328,"count":16},{"startOffset":102,"endOffset":106,"count":0},{"startOffset":128,"endOffset":133,"count":0},{"startOffset":262,"endOffset":325,"count":0}],"isBlockCoverage":true}]},{"scriptId":"166","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/log-symbols/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":414,"count":1},{"startOffset":402,"endOffset":412,"count":0}],"isBlockCoverage":true}]},{"scriptId":"167","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/log-symbols/node_modules/chalk/source/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6073,"count":1},{"startOffset":1532,"endOffset":1764,"count":44},{"startOffset":2057,"endOffset":2352,"count":8},{"startOffset":2386,"endOffset":2752,"count":8},{"startOffset":5968,"endOffset":5971,"count":0}],"isBlockCoverage":true},{"functionName":"applyOptions","ranges":[{"startOffset":430,"endOffset":809,"count":2},{"startOffset":477,"endOffset":558,"count":1},{"startOffset":560,"endOffset":638,"count":0},{"startOffset":729,"endOffset":732,"count":0},{"startOffset":778,"endOffset":790,"count":1},{"startOffset":791,"endOffset":806,"count":1}],"isBlockCoverage":true},{"functionName":"ChalkClass","ranges":[{"startOffset":832,"endOffset":941,"count":0}],"isBlockCoverage":false},{"functionName":"chalkFactory","ranges":[{"startOffset":966,"endOffset":1408,"count":2}],"isBlockCoverage":true},{"functionName":"chalk.template","ranges":[{"startOffset":1048,"endOffset":1106,"count":0}],"isBlockCoverage":false},{"functionName":"chalk.template.constructor","ranges":[{"startOffset":1235,"endOffset":1340,"count":0}],"isBlockCoverage":false},{"functionName":"Chalk","ranges":[{"startOffset":1411,"endOffset":1469,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1559,"endOffset":1758,"count":4}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1786,"endOffset":1933,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2080,"endOffset":2346,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2476,"endOffset":2746,"count":0}],"isBlockCoverage":false},{"functionName":"Object.defineProperties","ranges":[{"startOffset":2792,"endOffset":2800,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2848,"endOffset":2892,"count":8}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":2896,"endOffset":2946,"count":0}],"isBlockCoverage":false},{"functionName":"createStyler","ranges":[{"startOffset":2976,"endOffset":3250,"count":4},{"startOffset":3101,"endOffset":3184,"count":0}],"isBlockCoverage":true},{"functionName":"createBuilder","ranges":[{"startOffset":3275,"endOffset":4073,"count":4}],"isBlockCoverage":true},{"functionName":"builder","ranges":[{"startOffset":3323,"endOffset":3790,"count":8},{"startOffset":3373,"endOffset":3402,"count":0},{"startOffset":3404,"endOffset":3556,"count":0},{"startOffset":3763,"endOffset":3785,"count":0}],"isBlockCoverage":true},{"functionName":"applyStyle","ranges":[{"startOffset":4095,"endOffset":5135,"count":8},{"startOffset":4148,"endOffset":4190,"count":0},{"startOffset":4248,"endOffset":4269,"count":0},{"startOffset":4346,"endOffset":4675,"count":0},{"startOffset":5012,"endOffset":5095,"count":0}],"isBlockCoverage":true},{"functionName":"chalkTag","ranges":[{"startOffset":5169,"endOffset":5764,"count":0}],"isBlockCoverage":false}]},{"scriptId":"168","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/log-symbols/node_modules/ansi-styles/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4139,"count":1}],"isBlockCoverage":true},{"functionName":"wrapAnsi16","ranges":[{"startOffset":34,"endOffset":129,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsi256","ranges":[{"startOffset":152,"endOffset":255,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsi16m","ranges":[{"startOffset":278,"endOffset":402,"count":0}],"isBlockCoverage":false},{"functionName":"ansi2ansi","ranges":[{"startOffset":423,"endOffset":429,"count":0}],"isBlockCoverage":false},{"functionName":"rgb2rgb","ranges":[{"startOffset":447,"endOffset":469,"count":0}],"isBlockCoverage":false},{"functionName":"setLazyProperty","ranges":[{"startOffset":496,"endOffset":786,"count":30}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":575,"endOffset":737,"count":0}],"isBlockCoverage":false},{"functionName":"makeDynamicStyles","ranges":[{"startOffset":879,"endOffset":1400,"count":0}],"isBlockCoverage":false},{"functionName":"assembleStyles","ranges":[{"startOffset":1403,"endOffset":4021,"count":5},{"startOffset":2869,"endOffset":3201,"count":15},{"startOffset":2929,"endOffset":3108,"count":220}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3401,"endOffset":3464,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3509,"endOffset":3574,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3619,"endOffset":3678,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3722,"endOffset":3784,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3831,"endOffset":3895,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3942,"endOffset":4000,"count":0}],"isBlockCoverage":false}]},{"scriptId":"169","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/log-symbols/node_modules/supports-color/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2748,"count":1},{"startOffset":250,"endOffset":270,"count":0},{"startOffset":374,"endOffset":394,"count":0},{"startOffset":422,"endOffset":646,"count":0}],"isBlockCoverage":true},{"functionName":"translateLevel","ranges":[{"startOffset":648,"endOffset":806,"count":2},{"startOffset":699,"endOffset":719,"count":0}],"isBlockCoverage":true},{"functionName":"supportsColor","ranges":[{"startOffset":808,"endOffset":2439,"count":2},{"startOffset":881,"endOffset":897,"count":0},{"startOffset":985,"endOffset":1001,"count":0},{"startOffset":1030,"endOffset":1046,"count":0},{"startOffset":1080,"endOffset":1107,"count":0},{"startOffset":1109,"endOffset":1125,"count":0},{"startOffset":1184,"endOffset":1202,"count":0},{"startOffset":1239,"endOffset":1594,"count":0},{"startOffset":1614,"endOffset":1794,"count":0},{"startOffset":1828,"endOffset":1909,"count":0},{"startOffset":1963,"endOffset":2438,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1706,"endOffset":1725,"count":0}],"isBlockCoverage":false},{"functionName":"getSupportLevel","ranges":[{"startOffset":2441,"endOffset":2570,"count":0}],"isBlockCoverage":false}]},{"scriptId":"170","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/log-symbols/node_modules/has-flag/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":330,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":328,"count":16},{"startOffset":102,"endOffset":106,"count":0},{"startOffset":128,"endOffset":133,"count":0},{"startOffset":262,"endOffset":325,"count":0}],"isBlockCoverage":true}]},{"scriptId":"171","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/log-symbols/node_modules/chalk/source/util.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1035,"count":1}],"isBlockCoverage":true},{"functionName":"stringReplaceAll","ranges":[{"startOffset":40,"endOffset":505,"count":0}],"isBlockCoverage":false},{"functionName":"stringEncaseCRLFWithFirstIndex","ranges":[{"startOffset":547,"endOffset":959,"count":0}],"isBlockCoverage":false}]},{"scriptId":"172","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-unicode-supported/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":313,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":311,"count":1},{"startOffset":94,"endOffset":164,"count":0},{"startOffset":165,"endOffset":227,"count":0},{"startOffset":228,"endOffset":270,"count":0},{"startOffset":271,"endOffset":308,"count":0}],"isBlockCoverage":true}]},{"scriptId":"173","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/runner.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":33954,"count":1},{"startOffset":5791,"endOffset":5810,"count":0}],"isBlockCoverage":true},{"functionName":"Runner","ranges":[{"startOffset":3983,"endOffset":5631,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4396,"endOffset":4678,"count":3},{"startOffset":4467,"endOffset":4481,"count":0},{"startOffset":4483,"endOffset":4641,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4719,"endOffset":4773,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.unhandled","ranges":[{"startOffset":4947,"endOffset":5626,"count":0}],"isBlockCoverage":false},{"functionName":"Runner._addEventListener","ranges":[{"startOffset":6139,"endOffset":7047,"count":5},{"startOffset":6388,"endOffset":6442,"count":1},{"startOffset":6443,"endOffset":6511,"count":0},{"startOffset":6516,"endOffset":6633,"count":0},{"startOffset":6731,"endOffset":6765,"count":1},{"startOffset":6770,"endOffset":6781,"count":4},{"startOffset":6849,"endOffset":6881,"count":0}],"isBlockCoverage":true},{"functionName":"Runner._removeEventListener","ranges":[{"startOffset":7358,"endOffset":7971,"count":2},{"startOffset":7486,"endOffset":7886,"count":0}],"isBlockCoverage":true},{"functionName":"Runner.dispose","ranges":[{"startOffset":8147,"endOffset":8477,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.grep","ranges":[{"startOffset":8731,"endOffset":8896,"count":1}],"isBlockCoverage":true},{"functionName":"Runner.grepTotal","ranges":[{"startOffset":9094,"endOffset":9350,"count":5}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9167,"endOffset":9329,"count":10},{"startOffset":9258,"endOffset":9287,"count":0}],"isBlockCoverage":true},{"functionName":"Runner.globalProps","ranges":[{"startOffset":9465,"endOffset":9691,"count":1},{"startOffset":9579,"endOffset":9672,"count":8},{"startOffset":9617,"endOffset":9640,"count":6},{"startOffset":9640,"endOffset":9672,"count":2}],"isBlockCoverage":true},{"functionName":"Runner.globals","ranges":[{"startOffset":9859,"endOffset":10036,"count":2},{"startOffset":9901,"endOffset":9932,"count":0}],"isBlockCoverage":true},{"functionName":"Runner.checkGlobals","ranges":[{"startOffset":10130,"endOffset":10674,"count":3},{"startOffset":10189,"endOffset":10672,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10603,"endOffset":10616,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.fail","ranges":[{"startOffset":11450,"endOffset":12205,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.hook","ranges":[{"startOffset":12357,"endOffset":15153,"count":22},{"startOffset":12404,"endOffset":12416,"count":0}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":12502,"endOffset":15096,"count":22},{"startOffset":12587,"endOffset":15095,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13107,"endOffset":13161,"count":0}],"isBlockCoverage":false},{"functionName":"cbHookRun","ranges":[{"startOffset":13184,"endOffset":14585,"count":0}],"isBlockCoverage":false},{"functionName":"setHookTitle","ranges":[{"startOffset":14593,"endOffset":15092,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15119,"endOffset":15149,"count":22}],"isBlockCoverage":true},{"functionName":"Runner.hooks","ranges":[{"startOffset":15375,"endOffset":15790,"count":6}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":15452,"endOffset":15765,"count":20},{"startOffset":15516,"endOffset":15567,"count":6},{"startOffset":15567,"endOffset":15764,"count":14}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":15589,"endOffset":15759,"count":14},{"startOffset":15621,"endOffset":15726,"count":0}],"isBlockCoverage":true},{"functionName":"Runner.hookUp","ranges":[{"startOffset":15931,"endOffset":16048,"count":3}],"isBlockCoverage":true},{"functionName":"Runner.hookDown","ranges":[{"startOffset":16197,"endOffset":16304,"count":3}],"isBlockCoverage":true},{"functionName":"Runner.parents","ranges":[{"startOffset":16441,"endOffset":16597,"count":6},{"startOffset":16523,"endOffset":16578,"count":8}],"isBlockCoverage":true},{"functionName":"Runner.runTest","ranges":[{"startOffset":16722,"endOffset":17165,"count":3},{"startOffset":16763,"endOffset":16793,"count":0},{"startOffset":16852,"endOffset":16869,"count":0},{"startOffset":16893,"endOffset":16925,"count":0},{"startOffset":17041,"endOffset":17102,"count":0},{"startOffset":17133,"endOffset":17163,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16966,"endOffset":17012,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.runTests","ranges":[{"startOffset":17347,"endOffset":21944,"count":4}],"isBlockCoverage":true},{"functionName":"hookErr","ranges":[{"startOffset":17439,"endOffset":18144,"count":0}],"isBlockCoverage":false},{"functionName":"next","ranges":[{"startOffset":18148,"endOffset":21885,"count":7},{"startOffset":18235,"endOffset":18249,"count":0},{"startOffset":18251,"endOffset":18276,"count":0},{"startOffset":18299,"endOffset":18325,"count":0},{"startOffset":18340,"endOffset":18390,"count":0},{"startOffset":18467,"endOffset":18493,"count":4},{"startOffset":18493,"endOffset":18580,"count":3},{"startOffset":18580,"endOffset":18609,"count":0},{"startOffset":18609,"endOffset":18626,"count":3},{"startOffset":18626,"endOffset":19266,"count":0},{"startOffset":19266,"endOffset":19336,"count":3},{"startOffset":19336,"endOffset":19627,"count":0},{"startOffset":19627,"endOffset":21884,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":19765,"endOffset":21879,"count":3},{"startOffset":19864,"endOffset":20435,"count":0},{"startOffset":20451,"endOffset":20506,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20332,"endOffset":20425,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20566,"endOffset":21871,"count":3},{"startOffset":20673,"endOffset":21033,"count":0},{"startOffset":21048,"endOffset":21675,"count":0}],"isBlockCoverage":true},{"functionName":"Runner.runSuite","ranges":[{"startOffset":22117,"endOffset":23762,"count":4},{"startOffset":22296,"endOffset":22310,"count":0},{"startOffset":22313,"endOffset":22369,"count":0}],"isBlockCoverage":true},{"functionName":"next","ranges":[{"startOffset":22438,"endOffset":23334,"count":7},{"startOffset":22482,"endOffset":22832,"count":0},{"startOffset":22855,"endOffset":22883,"count":0},{"startOffset":22934,"endOffset":22962,"count":4},{"startOffset":22962,"endOffset":23193,"count":3},{"startOffset":23193,"endOffset":23284,"count":0},{"startOffset":23284,"endOffset":23330,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23220,"endOffset":23276,"count":0}],"isBlockCoverage":false},{"functionName":"done","ranges":[{"startOffset":23338,"endOffset":23602,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23506,"endOffset":23596,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23664,"endOffset":23758,"count":4},{"startOffset":23694,"endOffset":23722,"count":0}],"isBlockCoverage":true},{"functionName":"Runner._uncaught","ranges":[{"startOffset":24608,"endOffset":27273,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.run","ranges":[{"startOffset":27640,"endOffset":29659,"count":1},{"startOffset":27726,"endOffset":27731,"count":0},{"startOffset":27788,"endOffset":27805,"count":0},{"startOffset":29337,"endOffset":29597,"count":0}],"isBlockCoverage":true},{"functionName":"fn","ranges":[{"startOffset":27791,"endOffset":27805,"count":0}],"isBlockCoverage":false},{"functionName":"end","ranges":[{"startOffset":27822,"endOffset":28017,"count":1},{"startOffset":27850,"endOffset":27872,"count":0},{"startOffset":27874,"endOffset":27892,"count":0}],"isBlockCoverage":true},{"functionName":"begin","ranges":[{"startOffset":28036,"endOffset":28244,"count":1}],"isBlockCoverage":true},{"functionName":"prepare","ranges":[{"startOffset":28265,"endOffset":28639,"count":1},{"startOffset":28368,"endOffset":28457,"count":0},{"startOffset":28526,"endOffset":28614,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28771,"endOffset":28818,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28875,"endOffset":29014,"count":1}],"isBlockCoverage":true},{"functionName":"Runner.linkPartialObjects","ranges":[{"startOffset":30500,"endOffset":30535,"count":0}],"isBlockCoverage":false},{"functionName":"runAsync","ranges":[{"startOffset":30923,"endOffset":31030,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":30981,"endOffset":31026,"count":1}],"isBlockCoverage":true},{"functionName":"Runner.abort","ranges":[{"startOffset":31165,"endOffset":31248,"count":0}],"isBlockCoverage":false},{"functionName":"isParallelMode","ranges":[{"startOffset":31449,"endOffset":31494,"count":0}],"isBlockCoverage":false},{"functionName":"Runner.workerReporter","ranges":[{"startOffset":31844,"endOffset":31940,"count":0}],"isBlockCoverage":false},{"functionName":"filterLeaks","ranges":[{"startOffset":32088,"endOffset":33126,"count":0}],"isBlockCoverage":false},{"functionName":"isError","ranges":[{"startOffset":33341,"endOffset":33441,"count":0}],"isBlockCoverage":false},{"functionName":"thrown2Error","ranges":[{"startOffset":33604,"endOffset":33757,"count":0}],"isBlockCoverage":false}]},{"scriptId":"174","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/pending.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":221,"count":1}],"isBlockCoverage":true},{"functionName":"Pending","ranges":[{"startOffset":165,"endOffset":220,"count":0}],"isBlockCoverage":false}]},{"scriptId":"175","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/debug/src/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":314,"count":1},{"startOffset":218,"endOffset":264,"count":0}],"isBlockCoverage":true}]},{"scriptId":"176","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/debug/src/node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4685,"count":1},{"startOffset":816,"endOffset":832,"count":0},{"startOffset":1454,"endOffset":1555,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":334,"endOffset":342,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1779,"endOffset":1819,"count":89}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1828,"endOffset":2286,"count":0}],"isBlockCoverage":false},{"functionName":"useColors","ranges":[{"startOffset":2362,"endOffset":2501,"count":14},{"startOffset":2425,"endOffset":2464,"count":0}],"isBlockCoverage":true},{"functionName":"formatArgs","ranges":[{"startOffset":2574,"endOffset":3008,"count":0}],"isBlockCoverage":false},{"functionName":"getDate","ranges":[{"startOffset":3010,"endOffset":3125,"count":0}],"isBlockCoverage":false},{"functionName":"log","ranges":[{"startOffset":3214,"endOffset":3298,"count":0}],"isBlockCoverage":false},{"functionName":"save","ranges":[{"startOffset":3379,"endOffset":3636,"count":1},{"startOffset":3424,"endOffset":3462,"count":0}],"isBlockCoverage":true},{"functionName":"load","ranges":[{"startOffset":3753,"endOffset":3799,"count":1}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":3964,"endOffset":4167,"count":14},{"startOffset":4100,"endOffset":4165,"count":0}],"isBlockCoverage":true},{"functionName":"formatters.o","ranges":[{"startOffset":4332,"endOffset":4488,"count":0}],"isBlockCoverage":false},{"functionName":"formatters.O","ranges":[{"startOffset":4581,"endOffset":4683,"count":0}],"isBlockCoverage":false}]},{"scriptId":"177","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/supports-color/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2771,"count":1},{"startOffset":197,"endOffset":221,"count":0},{"startOffset":325,"endOffset":348,"count":0},{"startOffset":375,"endOffset":461,"count":0}],"isBlockCoverage":true},{"functionName":"translateLevel","ranges":[{"startOffset":463,"endOffset":621,"count":2},{"startOffset":514,"endOffset":534,"count":0}],"isBlockCoverage":true},{"functionName":"supportsColor","ranges":[{"startOffset":623,"endOffset":2524,"count":2},{"startOffset":683,"endOffset":699,"count":0},{"startOffset":787,"endOffset":803,"count":0},{"startOffset":832,"endOffset":848,"count":0},{"startOffset":879,"endOffset":901,"count":0},{"startOffset":903,"endOffset":919,"count":0},{"startOffset":945,"endOffset":948,"count":0},{"startOffset":990,"endOffset":1664,"count":0},{"startOffset":1684,"endOffset":1833,"count":0},{"startOffset":1867,"endOffset":1948,"count":0},{"startOffset":2002,"endOffset":2523,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1745,"endOffset":1764,"count":0}],"isBlockCoverage":false},{"functionName":"getSupportLevel","ranges":[{"startOffset":2526,"endOffset":2631,"count":2}],"isBlockCoverage":true}]},{"scriptId":"178","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/has-flag/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":320,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":31,"endOffset":318,"count":15},{"startOffset":116,"endOffset":120,"count":0},{"startOffset":142,"endOffset":147,"count":0},{"startOffset":261,"endOffset":315,"count":0}],"isBlockCoverage":true}]},{"scriptId":"179","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/debug/src/common.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6289,"count":1}],"isBlockCoverage":true},{"functionName":"setup","ranges":[{"startOffset":108,"endOffset":6263,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":422,"endOffset":464,"count":9}],"isBlockCoverage":true},{"functionName":"selectColor","ranges":[{"startOffset":1012,"endOffset":1290,"count":14},{"startOffset":1108,"endOffset":1213,"count":220}],"isBlockCoverage":true},{"functionName":"createDebug","ranges":[{"startOffset":1460,"endOffset":3626,"count":14}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":1585,"endOffset":2796,"count":56},{"startOffset":1668,"endOffset":1795,"count":0},{"startOffset":1963,"endOffset":2763,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2147,"endOffset":2619,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3149,"endOffset":3415,"count":56},{"startOffset":3190,"endOffset":3225,"count":0},{"startOffset":3278,"endOffset":3384,"count":0}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":3425,"endOffset":3460,"count":0}],"isBlockCoverage":false},{"functionName":"extend","ranges":[{"startOffset":3629,"endOffset":3832,"count":0}],"isBlockCoverage":false},{"functionName":"enable","ranges":[{"startOffset":3993,"endOffset":4609,"count":1},{"startOffset":4205,"endOffset":4217,"count":0},{"startOffset":4366,"endOffset":4602,"count":0}],"isBlockCoverage":true},{"functionName":"disable","ranges":[{"startOffset":4695,"endOffset":4920,"count":0}],"isBlockCoverage":false},{"functionName":"enabled","ranges":[{"startOffset":5063,"endOffset":5450,"count":0}],"isBlockCoverage":false},{"functionName":"toNamespace","ranges":[{"startOffset":5568,"endOffset":5704,"count":0}],"isBlockCoverage":false},{"functionName":"coerce","ranges":[{"startOffset":5793,"endOffset":5902,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":6021,"endOffset":6197,"count":0}],"isBlockCoverage":false}]},{"scriptId":"180","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/ms/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3023,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":422,"endOffset":791,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":915,"endOffset":1998,"count":0}],"isBlockCoverage":false},{"functionName":"fmtShort","ranges":[{"startOffset":2096,"endOffset":2413,"count":0}],"isBlockCoverage":false},{"functionName":"fmtLong","ranges":[{"startOffset":2510,"endOffset":2846,"count":0}],"isBlockCoverage":false},{"functionName":"plural","ranges":[{"startOffset":2882,"endOffset":3022,"count":0}],"isBlockCoverage":false}]},{"scriptId":"181","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/runnable.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10632,"count":1}],"isBlockCoverage":true},{"functionName":"Runnable","ranges":[{"startOffset":774,"endOffset":1152,"count":3},{"startOffset":861,"endOffset":866,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1078,"endOffset":1128,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.reset","ranges":[{"startOffset":1329,"endOffset":1459,"count":6}],"isBlockCoverage":true},{"functionName":"Runnable.timeout","ranges":[{"startOffset":2161,"endOffset":2654,"count":8},{"startOffset":2202,"endOffset":2233,"count":5},{"startOffset":2233,"endOffset":2264,"count":3},{"startOffset":2264,"endOffset":2296,"count":0},{"startOffset":2296,"endOffset":2484,"count":3},{"startOffset":2486,"endOffset":2514,"count":0},{"startOffset":2514,"endOffset":2607,"count":3},{"startOffset":2607,"endOffset":2637,"count":0},{"startOffset":2637,"endOffset":2653,"count":3}],"isBlockCoverage":true},{"functionName":"Runnable.slow","ranges":[{"startOffset":2814,"endOffset":3035,"count":7},{"startOffset":2854,"endOffset":2882,"count":3},{"startOffset":2884,"endOffset":2912,"count":4},{"startOffset":2912,"endOffset":2943,"count":3},{"startOffset":2943,"endOffset":2975,"count":0},{"startOffset":2975,"endOffset":3034,"count":3}],"isBlockCoverage":true},{"functionName":"Runnable.skip","ranges":[{"startOffset":3143,"endOffset":3235,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.isPending","ranges":[{"startOffset":3360,"endOffset":3442,"count":9}],"isBlockCoverage":true},{"functionName":"Runnable.isFailed","ranges":[{"startOffset":3562,"endOffset":3646,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.isPassed","ranges":[{"startOffset":3766,"endOffset":3850,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.retries","ranges":[{"startOffset":3938,"endOffset":4032,"count":3},{"startOffset":3978,"endOffset":4009,"count":0}],"isBlockCoverage":true},{"functionName":"Runnable.currentRetry","ranges":[{"startOffset":4120,"endOffset":4224,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.fullTitle","ranges":[{"startOffset":4420,"endOffset":4472,"count":13}],"isBlockCoverage":true},{"functionName":"Runnable.titlePath","ranges":[{"startOffset":4668,"endOffset":4738,"count":13}],"isBlockCoverage":true},{"functionName":"Runnable.clearTimeout","ranges":[{"startOffset":4820,"endOffset":4863,"count":5}],"isBlockCoverage":true},{"functionName":"Runnable.resetTimeout","ranges":[{"startOffset":4945,"endOffset":5235,"count":2},{"startOffset":5022,"endOffset":5039,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5089,"endOffset":5227,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.globals","ranges":[{"startOffset":5382,"endOffset":5502,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.run","ranges":[{"startOffset":5615,"endOffset":9164,"count":3},{"startOffset":5770,"endOffset":5782,"count":0},{"startOffset":6576,"endOffset":6710,"count":0},{"startOffset":6771,"endOffset":7456,"count":2},{"startOffset":7122,"endOffset":7440,"count":0},{"startOffset":7456,"endOffset":7522,"count":1},{"startOffset":7522,"endOffset":7722,"count":0}],"isBlockCoverage":true},{"functionName":"multiple","ranges":[{"startOffset":5925,"endOffset":6088,"count":0}],"isBlockCoverage":false},{"functionName":"done","ranges":[{"startOffset":6106,"endOffset":6449,"count":3},{"startOffset":6179,"endOffset":6200,"count":0},{"startOffset":6220,"endOffset":6255,"count":0},{"startOffset":6378,"endOffset":6387,"count":0},{"startOffset":6389,"endOffset":6432,"count":0}],"isBlockCoverage":true},{"functionName":"asyncSkip","ranges":[{"startOffset":6876,"endOffset":7075,"count":0}],"isBlockCoverage":false},{"functionName":"callFn","ranges":[{"startOffset":7726,"endOffset":8429,"count":1},{"startOffset":7794,"endOffset":7830,"count":0},{"startOffset":7832,"endOffset":8205,"count":0},{"startOffset":8239,"endOffset":8404,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7888,"endOffset":8070,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8080,"endOffset":8190,"count":0}],"isBlockCoverage":false},{"functionName":"callFnAsync","ranges":[{"startOffset":8433,"endOffset":9162,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8490,"endOffset":9156,"count":2},{"startOffset":8582,"endOffset":8617,"count":0},{"startOffset":8633,"endOffset":8913,"count":0},{"startOffset":8931,"endOffset":8957,"count":0},{"startOffset":8959,"endOffset":9135,"count":0}],"isBlockCoverage":true},{"functionName":"Runnable._timeoutError","ranges":[{"startOffset":9347,"endOffset":9613,"count":0}],"isBlockCoverage":false},{"functionName":"Runnable.toValueOrError","ranges":[{"startOffset":10406,"endOffset":10597,"count":0}],"isBlockCoverage":false}]},{"scriptId":"182","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/errors.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15639,"count":1}],"isBlockCoverage":true},{"functionName":"emitWarning","ranges":[{"startOffset":350,"endOffset":561,"count":0}],"isBlockCoverage":false},{"functionName":"deprecate","ranges":[{"startOffset":753,"endOffset":903,"count":0}],"isBlockCoverage":false},{"functionName":"warn","ranges":[{"startOffset":1062,"endOffset":1111,"count":0}],"isBlockCoverage":false},{"functionName":"createNoFilesMatchPatternError","ranges":[{"startOffset":4375,"endOffset":4554,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidReporterError","ranges":[{"startOffset":4856,"endOffset":5032,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidInterfaceError","ranges":[{"startOffset":5341,"endOffset":5504,"count":0}],"isBlockCoverage":false},{"functionName":"createUnsupportedError","ranges":[{"startOffset":5752,"endOffset":5878,"count":0}],"isBlockCoverage":false},{"functionName":"createMissingArgumentError","ranges":[{"startOffset":6204,"endOffset":6342,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidArgumentTypeError","ranges":[{"startOffset":6687,"endOffset":6936,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidArgumentValueError","ranges":[{"startOffset":7319,"endOffset":7607,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidExceptionError","ranges":[{"startOffset":7870,"endOffset":8067,"count":0}],"isBlockCoverage":false},{"functionName":"createFatalError","ranges":[{"startOffset":8297,"endOffset":8471,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidLegacyPluginError","ranges":[{"startOffset":8820,"endOffset":9158,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidPluginError","ranges":[{"startOffset":9598,"endOffset":9755,"count":0}],"isBlockCoverage":false},{"functionName":"createMochaInstanceAlreadyDisposedError","ranges":[{"startOffset":10106,"endOffset":10390,"count":0}],"isBlockCoverage":false},{"functionName":"createMochaInstanceAlreadyRunningError","ranges":[{"startOffset":10602,"endOffset":10794,"count":0}],"isBlockCoverage":false},{"functionName":"createMultipleDoneError","ranges":[{"startOffset":11082,"endOffset":11849,"count":0}],"isBlockCoverage":false},{"functionName":"createForbiddenExclusivityError","ranges":[{"startOffset":12086,"endOffset":12341,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidPluginDefinitionError","ranges":[{"startOffset":12641,"endOffset":12827,"count":0}],"isBlockCoverage":false},{"functionName":"createInvalidPluginImplementationError","ranges":[{"startOffset":13287,"endOffset":13537,"count":0}],"isBlockCoverage":false},{"functionName":"createTimeoutError","ranges":[{"startOffset":13803,"endOffset":13974,"count":0}],"isBlockCoverage":false},{"functionName":"createUnparsableFileError","ranges":[{"startOffset":14240,"endOffset":14383,"count":0}],"isBlockCoverage":false},{"functionName":"isMochaError","ranges":[{"startOffset":14609,"endOffset":14687,"count":0}],"isBlockCoverage":false}]},{"scriptId":"183","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/suite.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15434,"count":1}],"isBlockCoverage":true},{"functionName":"Suite.create","ranges":[{"startOffset":714,"endOffset":882,"count":3}],"isBlockCoverage":true},{"functionName":"Suite","ranges":[{"startOffset":1284,"endOffset":2125,"count":4},{"startOffset":1355,"endOffset":1549,"count":0}],"isBlockCoverage":true},{"functionName":"Context","ranges":[{"startOffset":1574,"endOffset":1595,"count":4}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2056,"endOffset":2100,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.reset","ranges":[{"startOffset":2290,"endOffset":2601,"count":4}],"isBlockCoverage":true},{"functionName":"doReset","ranges":[{"startOffset":2330,"endOffset":2392,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.clone","ranges":[{"startOffset":2705,"endOffset":2961,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.timeout","ranges":[{"startOffset":3194,"endOffset":3521,"count":10},{"startOffset":3235,"endOffset":3266,"count":6},{"startOffset":3266,"endOffset":3297,"count":4},{"startOffset":3297,"endOffset":3329,"count":1},{"startOffset":3329,"endOffset":3520,"count":4}],"isBlockCoverage":true},{"functionName":"Suite.retries","ranges":[{"startOffset":3694,"endOffset":3848,"count":9},{"startOffset":3734,"endOffset":3765,"count":6},{"startOffset":3765,"endOffset":3826,"count":3},{"startOffset":3826,"endOffset":3830,"count":0}],"isBlockCoverage":true},{"functionName":"Suite.slow","ranges":[{"startOffset":4017,"endOffset":4209,"count":10},{"startOffset":4058,"endOffset":4086,"count":6},{"startOffset":4086,"endOffset":4117,"count":4},{"startOffset":4117,"endOffset":4149,"count":0},{"startOffset":4149,"endOffset":4208,"count":4}],"isBlockCoverage":true},{"functionName":"Suite.bail","ranges":[{"startOffset":4371,"endOffset":4506,"count":6},{"startOffset":4414,"endOffset":4505,"count":3}],"isBlockCoverage":true},{"functionName":"Suite.isPending","ranges":[{"startOffset":4625,"endOffset":4707,"count":28},{"startOffset":4677,"endOffset":4703,"count":16}],"isBlockCoverage":true},{"functionName":"Suite._createHook","ranges":[{"startOffset":4896,"endOffset":5129,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.beforeAll","ranges":[{"startOffset":5312,"endOffset":5672,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.afterAll","ranges":[{"startOffset":5853,"endOffset":6210,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.beforeEach","ranges":[{"startOffset":6395,"endOffset":6758,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.afterEach","ranges":[{"startOffset":6941,"endOffset":7301,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.addSuite","ranges":[{"startOffset":7433,"endOffset":7713,"count":3}],"isBlockCoverage":true},{"functionName":"Suite.addTest","ranges":[{"startOffset":7850,"endOffset":8095,"count":3}],"isBlockCoverage":true},{"functionName":"Suite.fullTitle","ranges":[{"startOffset":8279,"endOffset":8331,"count":7}],"isBlockCoverage":true},{"functionName":"Suite.titlePath","ranges":[{"startOffset":8515,"endOffset":8697,"count":46},{"startOffset":8567,"endOffset":8625,"count":26},{"startOffset":8644,"endOffset":8678,"count":26}],"isBlockCoverage":true},{"functionName":"Suite.total","ranges":[{"startOffset":8822,"endOffset":8964,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8870,"endOffset":8933,"count":3}],"isBlockCoverage":true},{"functionName":"Suite.eachTest","ranges":[{"startOffset":9170,"endOffset":9299,"count":12}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9234,"endOffset":9280,"count":7}],"isBlockCoverage":true},{"functionName":"run","ranges":[{"startOffset":9420,"endOffset":9508,"count":0}],"isBlockCoverage":false},{"functionName":"hasOnly","ranges":[{"startOffset":9657,"endOffset":9841,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9779,"endOffset":9833,"count":3}],"isBlockCoverage":true},{"functionName":"filterOnly","ranges":[{"startOffset":9960,"endOffset":10997,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.appendOnlySuite","ranges":[{"startOffset":11137,"endOffset":11189,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.markOnly","ranges":[{"startOffset":11273,"endOffset":11340,"count":0}],"isBlockCoverage":false},{"functionName":"Suite.appendOnlyTest","ranges":[{"startOffset":11472,"endOffset":11521,"count":0}],"isBlockCoverage":false},{"functionName":"getHooks","ranges":[{"startOffset":11644,"endOffset":11698,"count":22}],"isBlockCoverage":true},{"functionName":"Suite.dispose","ranges":[{"startOffset":11798,"endOffset":11907,"count":0}],"isBlockCoverage":false},{"functionName":"cleanReferences","ranges":[{"startOffset":12307,"endOffset":12877,"count":4},{"startOffset":12841,"endOffset":12875,"count":3}],"isBlockCoverage":true},{"functionName":"cleanArrReferences","ranges":[{"startOffset":12338,"endOffset":12449,"count":16},{"startOffset":12414,"endOffset":12445,"count":0}],"isBlockCoverage":true},{"functionName":"serialize","ranges":[{"startOffset":13046,"endOffset":13339,"count":0}],"isBlockCoverage":false}]},{"scriptId":"184","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/hook.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1787,"count":1}],"isBlockCoverage":true},{"functionName":"Hook","ranges":[{"startOffset":354,"endOffset":438,"count":0}],"isBlockCoverage":false},{"functionName":"Hook.reset","ranges":[{"startOffset":580,"endOffset":656,"count":0}],"isBlockCoverage":false},{"functionName":"Hook.error","ranges":[{"startOffset":793,"endOffset":927,"count":0}],"isBlockCoverage":false},{"functionName":"serialize","ranges":[{"startOffset":1095,"endOffset":1785,"count":0}],"isBlockCoverage":false}]},{"scriptId":"185","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/dot.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1897,"count":1}],"isBlockCoverage":true},{"functionName":"Dot","ranges":[{"startOffset":749,"endOffset":1784,"count":0}],"isBlockCoverage":false}]},{"scriptId":"186","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/doc.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2309,"count":1}],"isBlockCoverage":true},{"functionName":"Doc","ranges":[{"startOffset":690,"endOffset":2267,"count":0}],"isBlockCoverage":false}]},{"scriptId":"187","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/tap.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7044,"count":1}],"isBlockCoverage":true},{"functionName":"TAP","ranges":[{"startOffset":851,"endOffset":1731,"count":0}],"isBlockCoverage":false},{"functionName":"title","ranges":[{"startOffset":1956,"endOffset":2025,"count":0}],"isBlockCoverage":false},{"functionName":"println","ranges":[{"startOffset":2232,"endOffset":2378,"count":0}],"isBlockCoverage":false},{"functionName":"createProducer","ranges":[{"startOffset":2683,"endOffset":2990,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer","ranges":[{"startOffset":3150,"endOffset":3175,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer.writeVersion","ranges":[{"startOffset":3291,"endOffset":3305,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer.writePlan","ranges":[{"startOffset":3481,"endOffset":3534,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer.writePass","ranges":[{"startOffset":3761,"endOffset":3822,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer.writePending","ranges":[{"startOffset":4062,"endOffset":4132,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer.writeFail","ranges":[{"startOffset":4407,"endOffset":4477,"count":0}],"isBlockCoverage":false},{"functionName":"TAPProducer.writeEpilogue","ranges":[{"startOffset":4661,"endOffset":4981,"count":0}],"isBlockCoverage":false},{"functionName":"TAP12Producer","ranges":[{"startOffset":5249,"endOffset":5647,"count":0}],"isBlockCoverage":false},{"functionName":"TAP13Producer","ranges":[{"startOffset":6013,"endOffset":6911,"count":0}],"isBlockCoverage":false}]},{"scriptId":"188","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/json.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3634,"count":1}],"isBlockCoverage":true},{"functionName":"JSONReporter","ranges":[{"startOffset":882,"endOffset":2305,"count":0}],"isBlockCoverage":false},{"functionName":"clean","ranges":[{"startOffset":2458,"endOffset":2781,"count":0}],"isBlockCoverage":false},{"functionName":"cleanCycles","ranges":[{"startOffset":2921,"endOffset":3315,"count":0}],"isBlockCoverage":false},{"functionName":"errorJSON","ranges":[{"startOffset":3431,"endOffset":3583,"count":0}],"isBlockCoverage":false}]},{"scriptId":"189","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/html.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9553,"count":1}],"isBlockCoverage":true},{"functionName":"HTML","ranges":[{"startOffset":1410,"endOffset":6638,"count":0}],"isBlockCoverage":false},{"functionName":"makeUrl","ranges":[{"startOffset":6765,"endOffset":7108,"count":0}],"isBlockCoverage":false},{"functionName":"HTML.suiteURL","ranges":[{"startOffset":7196,"endOffset":7253,"count":0}],"isBlockCoverage":false},{"functionName":"HTML.testURL","ranges":[{"startOffset":7339,"endOffset":7394,"count":0}],"isBlockCoverage":false},{"functionName":"HTML.addCodeToggle","ranges":[{"startOffset":7568,"endOffset":7881,"count":0}],"isBlockCoverage":false},{"functionName":"error","ranges":[{"startOffset":7942,"endOffset":8043,"count":0}],"isBlockCoverage":false},{"functionName":"fragment","ranges":[{"startOffset":8118,"endOffset":8468,"count":0}],"isBlockCoverage":false},{"functionName":"hideSuitesWithout","ranges":[{"startOffset":8590,"endOffset":8864,"count":0}],"isBlockCoverage":false},{"functionName":"unhide","ranges":[{"startOffset":8900,"endOffset":9087,"count":0}],"isBlockCoverage":false},{"functionName":"text","ranges":[{"startOffset":9190,"endOffset":9320,"count":0}],"isBlockCoverage":false},{"functionName":"on","ranges":[{"startOffset":9371,"endOffset":9526,"count":0}],"isBlockCoverage":false}]},{"scriptId":"190","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/browser/progress.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2275,"count":1}],"isBlockCoverage":true},{"functionName":"Progress","ranges":[{"startOffset":158,"endOffset":283,"count":0}],"isBlockCoverage":false},{"functionName":"Progress.size","ranges":[{"startOffset":430,"endOffset":485,"count":0}],"isBlockCoverage":false},{"functionName":"Progress.text","ranges":[{"startOffset":624,"endOffset":679,"count":0}],"isBlockCoverage":false},{"functionName":"Progress.fontSize","ranges":[{"startOffset":827,"endOffset":886,"count":0}],"isBlockCoverage":false},{"functionName":"Progress.font","ranges":[{"startOffset":1018,"endOffset":1077,"count":0}],"isBlockCoverage":false},{"functionName":"Progress.update","ranges":[{"startOffset":1210,"endOffset":1261,"count":0}],"isBlockCoverage":false},{"functionName":"Progress.draw","ranges":[{"startOffset":1401,"endOffset":2273,"count":0}],"isBlockCoverage":false}]},{"scriptId":"191","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/list.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1905,"count":1}],"isBlockCoverage":true},{"functionName":"List","ranges":[{"startOffset":854,"endOffset":1786,"count":0}],"isBlockCoverage":false}]},{"scriptId":"192","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/min.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1091,"count":1}],"isBlockCoverage":true},{"functionName":"Min","ranges":[{"startOffset":674,"endOffset":977,"count":0}],"isBlockCoverage":false}]},{"scriptId":"193","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/spec.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2338,"count":1}],"isBlockCoverage":true},{"functionName":"Spec","ranges":[{"startOffset":879,"endOffset":2216,"count":1}],"isBlockCoverage":true},{"functionName":"indent","ranges":[{"startOffset":1003,"endOffset":1064,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1095,"endOffset":1135,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1170,"endOffset":1275,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1308,"endOffset":1396,"count":4},{"startOffset":1360,"endOffset":1392,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1432,"endOffset":1544,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1577,"endOffset":2025,"count":3},{"startOffset":1639,"endOffset":1800,"count":1},{"startOffset":1800,"endOffset":2021,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2058,"endOffset":2155,"count":0}],"isBlockCoverage":false}]},{"scriptId":"194","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/nyan.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5385,"count":1}],"isBlockCoverage":true},{"functionName":"NyanCat","ranges":[{"startOffset":760,"endOffset":1643,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.draw","ranges":[{"startOffset":1783,"endOffset":1917,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.drawScoreboard","ranges":[{"startOffset":2065,"endOffset":2354,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.appendRainbow","ranges":[{"startOffset":2438,"endOffset":2775,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.drawRainbow","ranges":[{"startOffset":2855,"endOffset":3074,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.drawNyanCat","ranges":[{"startOffset":3153,"endOffset":3770,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.face","ranges":[{"startOffset":3865,"endOffset":4079,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.cursorUp","ranges":[{"startOffset":4179,"endOffset":4225,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.cursorDown","ranges":[{"startOffset":4329,"endOffset":4375,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.generateColors","ranges":[{"startOffset":4483,"endOffset":4839,"count":0}],"isBlockCoverage":false},{"functionName":"NyanCat.rainbowify","ranges":[{"startOffset":4976,"endOffset":5201,"count":0}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":5289,"endOffset":5347,"count":0}],"isBlockCoverage":false}]},{"scriptId":"195","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/xunit.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4857,"count":1}],"isBlockCoverage":true},{"functionName":"XUnit","ranges":[{"startOffset":1066,"endOffset":2746,"count":0}],"isBlockCoverage":false},{"functionName":"XUnit.done","ranges":[{"startOffset":2946,"endOffset":3097,"count":0}],"isBlockCoverage":false},{"functionName":"XUnit.write","ranges":[{"startOffset":3188,"endOffset":3415,"count":0}],"isBlockCoverage":false},{"functionName":"XUnit.test","ranges":[{"startOffset":3510,"endOffset":4276,"count":0}],"isBlockCoverage":false},{"functionName":"tag","ranges":[{"startOffset":4395,"endOffset":4804,"count":0}],"isBlockCoverage":false}]},{"scriptId":"196","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/markdown.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2441,"count":1}],"isBlockCoverage":true},{"functionName":"Markdown","ranges":[{"startOffset":753,"endOffset":2388,"count":0}],"isBlockCoverage":false}]},{"scriptId":"197","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/progress.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2517,"count":1}],"isBlockCoverage":true},{"functionName":"Progress","ranges":[{"startOffset":781,"endOffset":2405,"count":0}],"isBlockCoverage":false}]},{"scriptId":"198","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/landing.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2518,"count":1}],"isBlockCoverage":true},{"functionName":"Landing","ranges":[{"startOffset":948,"endOffset":2401,"count":0}],"isBlockCoverage":false}]},{"scriptId":"199","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/reporters/json-stream.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2086,"count":1}],"isBlockCoverage":true},{"functionName":"JSONStream","ranges":[{"startOffset":677,"endOffset":1255,"count":0}],"isBlockCoverage":false},{"functionName":"writeEvent","ranges":[{"startOffset":1499,"endOffset":1583,"count":0}],"isBlockCoverage":false},{"functionName":"clean","ranges":[{"startOffset":1819,"endOffset":2026,"count":0}],"isBlockCoverage":false}]},{"scriptId":"200","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/nodejs/esm-utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3286,"count":1}],"isBlockCoverage":true},{"functionName":"formattedImport","ranges":[{"startOffset":83,"endOffset":987,"count":3},{"startOffset":128,"endOffset":962,"count":2},{"startOffset":198,"endOffset":958,"count":0},{"startOffset":962,"endOffset":986,"count":1}],"isBlockCoverage":true},{"functionName":"exports.requireOrImport","ranges":[{"startOffset":1016,"endOffset":2902,"count":3},{"startOffset":1069,"endOffset":1108,"count":0},{"startOffset":1178,"endOffset":2900,"count":0}],"isBlockCoverage":true},{"functionName":"dealWithExports","ranges":[{"startOffset":2905,"endOffset":3051,"count":3},{"startOffset":2994,"endOffset":3049,"count":0}],"isBlockCoverage":true},{"functionName":"exports.loadFilesAsync","ranges":[{"startOffset":3078,"endOffset":3284,"count":1},{"startOffset":3152,"endOffset":3282,"count":2}],"isBlockCoverage":true}]},{"scriptId":"201","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/stats-collector.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2220,"count":1}],"isBlockCoverage":true},{"functionName":"createStatsCollector","ranges":[{"startOffset":1329,"endOffset":2179,"count":1},{"startOffset":1520,"endOffset":1577,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1635,"endOffset":1682,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1716,"endOffset":1772,"count":4},{"startOffset":1750,"endOffset":1767,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1804,"endOffset":1841,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1873,"endOffset":1912,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1947,"endOffset":1985,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2016,"endOffset":2052,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2084,"endOffset":2175,"count":1}],"isBlockCoverage":true}]},{"scriptId":"202","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/interfaces/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":155,"count":1}],"isBlockCoverage":true}]},{"scriptId":"203","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/interfaces/bdd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2563,"count":1}],"isBlockCoverage":true},{"functionName":"bddInterface","ranges":[{"startOffset":544,"endOffset":2499,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":635,"endOffset":2495,"count":2},{"startOffset":926,"endOffset":955,"count":0}],"isBlockCoverage":true},{"functionName":"context.describe.context.context","ranges":[{"startOffset":1135,"endOffset":1265,"count":3}],"isBlockCoverage":true},{"functionName":"context.xdescribe.context.xcontext.context.describe.skip","ranges":[{"startOffset":1397,"endOffset":1549,"count":0}],"isBlockCoverage":false},{"functionName":"context.describe.only","ranges":[{"startOffset":1621,"endOffset":1749,"count":0}],"isBlockCoverage":false},{"functionName":"context.it.context.specify","ranges":[{"startOffset":1923,"endOffset":2146,"count":3},{"startOffset":2004,"endOffset":2032,"count":0}],"isBlockCoverage":true},{"functionName":"context.it.only","ranges":[{"startOffset":2216,"endOffset":2305,"count":0}],"isBlockCoverage":false},{"functionName":"context.xit.context.xspecify.context.it.skip","ranges":[{"startOffset":2426,"endOffset":2490,"count":0}],"isBlockCoverage":false}]},{"scriptId":"204","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/test.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2635,"count":1}],"isBlockCoverage":true},{"functionName":"Test","ranges":[{"startOffset":557,"endOffset":870,"count":3},{"startOffset":608,"endOffset":796,"count":0}],"isBlockCoverage":true},{"functionName":"Test.reset","ranges":[{"startOffset":1031,"endOffset":1133,"count":6}],"isBlockCoverage":true},{"functionName":"Test.retriedTest","ranges":[{"startOffset":1215,"endOffset":1317,"count":3},{"startOffset":1290,"endOffset":1316,"count":0}],"isBlockCoverage":true},{"functionName":"Test.markOnly","ranges":[{"startOffset":1417,"endOffset":1468,"count":0}],"isBlockCoverage":false},{"functionName":"Test.clone","ranges":[{"startOffset":1494,"endOffset":1857,"count":0}],"isBlockCoverage":false},{"functionName":"serialize","ranges":[{"startOffset":2051,"endOffset":2633,"count":0}],"isBlockCoverage":false}]},{"scriptId":"205","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/interfaces/tdd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2392,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":625,"endOffset":2294,"count":0}],"isBlockCoverage":false}]},{"scriptId":"206","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/interfaces/qunit.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2161,"count":1}],"isBlockCoverage":true},{"functionName":"qUnitInterface","ranges":[{"startOffset":648,"endOffset":2114,"count":0}],"isBlockCoverage":false}]},{"scriptId":"207","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/interfaces/exports.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1428,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":460,"endOffset":1360,"count":0}],"isBlockCoverage":false}]},{"scriptId":"208","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/context.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1440,"count":1}],"isBlockCoverage":true},{"functionName":"Context","ranges":[{"startOffset":152,"endOffset":173,"count":1}],"isBlockCoverage":true},{"functionName":"Context.runnable","ranges":[{"startOffset":338,"endOffset":475,"count":3},{"startOffset":385,"endOffset":417,"count":0}],"isBlockCoverage":true},{"functionName":"Context.timeout","ranges":[{"startOffset":610,"endOffset":742,"count":0}],"isBlockCoverage":false},{"functionName":"Context.slow","ranges":[{"startOffset":885,"endOffset":1011,"count":0}],"isBlockCoverage":false},{"functionName":"Context.skip","ranges":[{"startOffset":1108,"endOffset":1149,"count":0}],"isBlockCoverage":false},{"functionName":"Context.retries","ranges":[{"startOffset":1308,"endOffset":1438,"count":0}],"isBlockCoverage":false}]},{"scriptId":"209","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/run-helpers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7263,"count":1}],"isBlockCoverage":true},{"functionName":"exitMochaLater","ranges":[{"startOffset":735,"endOffset":825,"count":0}],"isBlockCoverage":false},{"functionName":"exitMocha","ranges":[{"startOffset":1056,"endOffset":1783,"count":1}],"isBlockCoverage":true},{"functionName":"done","ranges":[{"startOffset":1501,"endOffset":1574,"count":3},{"startOffset":1530,"endOffset":1570,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1648,"endOffset":1768,"count":2}],"isBlockCoverage":true},{"functionName":"exports.list","ranges":[{"startOffset":2002,"endOffset":2080,"count":16},{"startOffset":2030,"endOffset":2059,"count":8},{"startOffset":2060,"endOffset":2080,"count":8}],"isBlockCoverage":true},{"functionName":"exports.handleRequires","ranges":[{"startOffset":2350,"endOffset":3208,"count":1},{"startOffset":2625,"endOffset":2729,"count":0},{"startOffset":2851,"endOffset":2987,"count":0},{"startOffset":3123,"endOffset":3188,"count":0}],"isBlockCoverage":true},{"functionName":"singleRun","ranges":[{"startOffset":3637,"endOffset":3922,"count":1},{"startOffset":3902,"endOffset":3918,"count":0}],"isBlockCoverage":true},{"functionName":"parallelRun","ranges":[{"startOffset":4327,"endOffset":4656,"count":0}],"isBlockCoverage":false},{"functionName":"exports.runMocha","ranges":[{"startOffset":5119,"endOffset":5616,"count":1},{"startOffset":5452,"endOffset":5507,"count":0},{"startOffset":5534,"endOffset":5547,"count":0}],"isBlockCoverage":true},{"functionName":"exports.validateLegacyPlugin","ranges":[{"startOffset":6197,"endOffset":7261,"count":2},{"startOffset":6470,"endOffset":6595,"count":0},{"startOffset":6877,"endOffset":7259,"count":0}],"isBlockCoverage":true},{"functionName":"createUnknownError","ranges":[{"startOffset":6626,"endOffset":6782,"count":0}],"isBlockCoverage":false}]},{"scriptId":"210","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/watch-run.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10757,"count":1}],"isBlockCoverage":true},{"functionName":"exports.watchParallelRun","ranges":[{"startOffset":1013,"endOffset":2625,"count":0}],"isBlockCoverage":false},{"functionName":"exports.watchRun","ranges":[{"startOffset":3277,"endOffset":4728,"count":0}],"isBlockCoverage":false},{"functionName":"createWatcher","ranges":[{"startOffset":5520,"endOffset":7787,"count":0}],"isBlockCoverage":false},{"functionName":"createRerunner","ranges":[{"startOffset":8168,"endOffset":9165,"count":0}],"isBlockCoverage":false},{"functionName":"getWatchedFiles","ranges":[{"startOffset":9392,"endOffset":9605,"count":0}],"isBlockCoverage":false},{"functionName":"hideCursor","ranges":[{"startOffset":9678,"endOffset":9726,"count":0}],"isBlockCoverage":false},{"functionName":"showCursor","ranges":[{"startOffset":9799,"endOffset":9847,"count":0}],"isBlockCoverage":false},{"functionName":"eraseLine","ranges":[{"startOffset":9917,"endOffset":9963,"count":0}],"isBlockCoverage":false},{"functionName":"blastCache","ranges":[{"startOffset":10124,"endOffset":10312,"count":0}],"isBlockCoverage":false}]},{"scriptId":"211","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chokidar/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":28364,"count":1}],"isBlockCoverage":true},{"functionName":"arrify","ranges":[{"startOffset":1627,"endOffset":1681,"count":0}],"isBlockCoverage":false},{"functionName":"flatten","ranges":[{"startOffset":1699,"endOffset":1877,"count":0}],"isBlockCoverage":false},{"functionName":"unifyPaths","ranges":[{"startOffset":1899,"endOffset":2164,"count":0}],"isBlockCoverage":false},{"functionName":"toUnix","ranges":[{"startOffset":2322,"endOffset":2619,"count":0}],"isBlockCoverage":false},{"functionName":"normalizePathToUnix","ranges":[{"startOffset":2754,"endOffset":2803,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeIgnored","ranges":[{"startOffset":2831,"endOffset":3002,"count":0}],"isBlockCoverage":false},{"functionName":"getAbsolutePath","ranges":[{"startOffset":3029,"endOffset":3223,"count":0}],"isBlockCoverage":false},{"functionName":"undef","ranges":[{"startOffset":3240,"endOffset":3278,"count":0}],"isBlockCoverage":false},{"functionName":"DirEntry","ranges":[{"startOffset":3456,"endOffset":3612,"count":0}],"isBlockCoverage":false},{"functionName":"add","ranges":[{"startOffset":3616,"endOffset":3745,"count":0}],"isBlockCoverage":false},{"functionName":"remove","ranges":[{"startOffset":3749,"endOffset":4084,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":4088,"endOffset":4181,"count":0}],"isBlockCoverage":false},{"functionName":"getChildren","ranges":[{"startOffset":4227,"endOffset":4328,"count":0}],"isBlockCoverage":false},{"functionName":"dispose","ranges":[{"startOffset":4332,"endOffset":4473,"count":0}],"isBlockCoverage":false},{"functionName":"WatchHelper","ranges":[{"startOffset":4560,"endOffset":5278,"count":0}],"isBlockCoverage":false},{"functionName":"checkGlobSymlink","ranges":[{"startOffset":5282,"endOffset":5763,"count":0}],"isBlockCoverage":false},{"functionName":"entryPath","ranges":[{"startOffset":5767,"endOffset":5905,"count":0}],"isBlockCoverage":false},{"functionName":"filterPath","ranges":[{"startOffset":5909,"endOffset":6326,"count":0}],"isBlockCoverage":false},{"functionName":"getDirParts","ranges":[{"startOffset":6330,"endOffset":6644,"count":0}],"isBlockCoverage":false},{"functionName":"filterDir","ranges":[{"startOffset":6648,"endOffset":7167,"count":0}],"isBlockCoverage":false},{"functionName":"FSWatcher","ranges":[{"startOffset":7511,"endOffset":11137,"count":0}],"isBlockCoverage":false},{"functionName":"add","ranges":[{"startOffset":11450,"endOffset":13176,"count":0}],"isBlockCoverage":false},{"functionName":"unwatch","ranges":[{"startOffset":13387,"endOffset":14065,"count":0}],"isBlockCoverage":false},{"functionName":"close","ranges":[{"startOffset":14166,"endOffset":14930,"count":0}],"isBlockCoverage":false},{"functionName":"getWatched","ranges":[{"startOffset":15005,"endOffset":15255,"count":0}],"isBlockCoverage":false},{"functionName":"emitWithAll","ranges":[{"startOffset":15257,"endOffset":15361,"count":0}],"isBlockCoverage":false},{"functionName":"_emit","ranges":[{"startOffset":15770,"endOffset":18071,"count":0}],"isBlockCoverage":false},{"functionName":"_handleError","ranges":[{"startOffset":18246,"endOffset":18522,"count":0}],"isBlockCoverage":false},{"functionName":"_throttle","ranges":[{"startOffset":18818,"endOffset":19552,"count":0}],"isBlockCoverage":false},{"functionName":"_incrReadyCount","ranges":[{"startOffset":19554,"endOffset":19604,"count":0}],"isBlockCoverage":false},{"functionName":"_awaitWriteFinish","ranges":[{"startOffset":20051,"endOffset":21407,"count":0}],"isBlockCoverage":false},{"functionName":"_getGlobIgnored","ranges":[{"startOffset":21409,"endOffset":21473,"count":0}],"isBlockCoverage":false},{"functionName":"_isIgnored","ranges":[{"startOffset":21647,"endOffset":22247,"count":0}],"isBlockCoverage":false},{"functionName":"_isntIgnored","ranges":[{"startOffset":22249,"endOffset":22316,"count":0}],"isBlockCoverage":false},{"functionName":"_getWatchHelpers","ranges":[{"startOffset":22613,"endOffset":22852,"count":0}],"isBlockCoverage":false},{"functionName":"_getWatchedDir","ranges":[{"startOffset":23050,"endOffset":23318,"count":0}],"isBlockCoverage":false},{"functionName":"_hasReadPermissions","ranges":[{"startOffset":23583,"endOffset":23859,"count":0}],"isBlockCoverage":false},{"functionName":"_remove","ranges":[{"startOffset":24165,"endOffset":26854,"count":0}],"isBlockCoverage":false},{"functionName":"_closePath","ranges":[{"startOffset":26920,"endOffset":27060,"count":0}],"isBlockCoverage":false},{"functionName":"_closeFile","ranges":[{"startOffset":27130,"endOffset":27286,"count":0}],"isBlockCoverage":false},{"functionName":"_addPathCloser","ranges":[{"startOffset":27349,"endOffset":27532,"count":0}],"isBlockCoverage":false},{"functionName":"_readdirp","ranges":[{"startOffset":27534,"endOffset":27932,"count":0}],"isBlockCoverage":false},{"functionName":"watch","ranges":[{"startOffset":28233,"endOffset":28338,"count":0}],"isBlockCoverage":false}]},{"scriptId":"212","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/readdirp/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8876,"count":1},{"startOffset":1140,"endOffset":1181,"count":0}],"isBlockCoverage":true},{"functionName":"isNormalFlowError","ranges":[{"startOffset":942,"endOffset":985,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1055,"endOffset":1082,"count":2}],"isBlockCoverage":true},{"functionName":"normalizeFilter","ranges":[{"startOffset":1208,"endOffset":2067,"count":0}],"isBlockCoverage":false},{"functionName":"get defaultOptions","ranges":[{"startOffset":2119,"endOffset":2430,"count":0}],"isBlockCoverage":false},{"functionName":"ReaddirpStream","ranges":[{"startOffset":2434,"endOffset":3722,"count":0}],"isBlockCoverage":false},{"functionName":"_read","ranges":[{"startOffset":3726,"endOffset":5128,"count":0}],"isBlockCoverage":false},{"functionName":"_exploreDir","ranges":[{"startOffset":5132,"endOffset":5336,"count":0}],"isBlockCoverage":false},{"functionName":"_formatEntry","ranges":[{"startOffset":5340,"endOffset":5774,"count":0}],"isBlockCoverage":false},{"functionName":"_onError","ranges":[{"startOffset":5778,"endOffset":5924,"count":0}],"isBlockCoverage":false},{"functionName":"_getEntryType","ranges":[{"startOffset":5928,"endOffset":7108,"count":0}],"isBlockCoverage":false},{"functionName":"_includeAsFile","ranges":[{"startOffset":7112,"endOffset":7258,"count":0}],"isBlockCoverage":false},{"functionName":"readdirp","ranges":[{"startOffset":7820,"endOffset":8455,"count":0}],"isBlockCoverage":false},{"functionName":"readdirpPromise","ranges":[{"startOffset":8482,"endOffset":8738,"count":0}],"isBlockCoverage":false}]},{"scriptId":"213","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/picomatch/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":60,"count":1}],"isBlockCoverage":true}]},{"scriptId":"214","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/picomatch/lib/picomatch.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9956,"count":1}],"isBlockCoverage":true},{"functionName":"isObject","ranges":[{"startOffset":204,"endOffset":264,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch","ranges":[{"startOffset":1018,"endOffset":2836,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.test","ranges":[{"startOffset":3384,"endOffset":4185,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.matchBase","ranges":[{"startOffset":4600,"endOffset":4787,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.isMatch","ranges":[{"startOffset":5423,"endOffset":5484,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.parse","ranges":[{"startOffset":5894,"endOffset":6062,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.scan","ranges":[{"startOffset":6697,"endOffset":6737,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.compileRe","ranges":[{"startOffset":7228,"endOffset":7738,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.makeRe","ranges":[{"startOffset":8611,"endOffset":9117,"count":0}],"isBlockCoverage":false},{"functionName":"picomatch.toRegex","ranges":[{"startOffset":9579,"endOffset":9807,"count":0}],"isBlockCoverage":false}]},{"scriptId":"215","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/picomatch/lib/scan.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9189,"count":1}],"isBlockCoverage":true},{"functionName":"isPathSeparator","ranges":[{"startOffset":665,"endOffset":746,"count":0}],"isBlockCoverage":false},{"functionName":"depth","ranges":[{"startOffset":763,"endOffset":863,"count":0}],"isBlockCoverage":false},{"functionName":"scan","ranges":[{"startOffset":1512,"endOffset":9163,"count":0}],"isBlockCoverage":false}]},{"scriptId":"216","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/picomatch/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1885,"count":1}],"isBlockCoverage":true},{"functionName":"exports.isObject","ranges":[{"startOffset":242,"endOffset":311,"count":0}],"isBlockCoverage":false},{"functionName":"exports.hasRegexChars","ranges":[{"startOffset":337,"endOffset":373,"count":0}],"isBlockCoverage":false},{"functionName":"exports.isRegexChar","ranges":[{"startOffset":397,"endOffset":450,"count":0}],"isBlockCoverage":false},{"functionName":"exports.escapeRegex","ranges":[{"startOffset":474,"endOffset":528,"count":0}],"isBlockCoverage":false},{"functionName":"exports.toPosixSlashes","ranges":[{"startOffset":555,"endOffset":595,"count":0}],"isBlockCoverage":false},{"functionName":"exports.removeBackslashes","ranges":[{"startOffset":626,"endOffset":738,"count":0}],"isBlockCoverage":false},{"functionName":"exports.supportsLookbehinds","ranges":[{"startOffset":771,"endOffset":960,"count":0}],"isBlockCoverage":false},{"functionName":"exports.isWindows","ranges":[{"startOffset":983,"endOffset":1132,"count":0}],"isBlockCoverage":false},{"functionName":"exports.escapeLast","ranges":[{"startOffset":1156,"endOffset":1401,"count":0}],"isBlockCoverage":false},{"functionName":"exports.removePrefix","ranges":[{"startOffset":1427,"endOffset":1584,"count":0}],"isBlockCoverage":false},{"functionName":"exports.wrapOutput","ranges":[{"startOffset":1608,"endOffset":1883,"count":0}],"isBlockCoverage":false}]},{"scriptId":"217","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/picomatch/lib/constants.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4448,"count":1}],"isBlockCoverage":true},{"functionName":"extglobChars","ranges":[{"startOffset":3985,"endOffset":4324,"count":0}],"isBlockCoverage":false},{"functionName":"globChars","ranges":[{"startOffset":4365,"endOffset":4444,"count":0}],"isBlockCoverage":false}]},{"scriptId":"218","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/picomatch/lib/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":27763,"count":1}],"isBlockCoverage":true},{"functionName":"expandRange","ranges":[{"startOffset":287,"endOffset":640,"count":0}],"isBlockCoverage":false},{"functionName":"syntaxError","ranges":[{"startOffset":713,"endOffset":819,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":950,"endOffset":25216,"count":0}],"isBlockCoverage":false},{"functionName":"parse.fastpaths","ranges":[{"startOffset":25439,"endOffset":27736,"count":0}],"isBlockCoverage":false}]},{"scriptId":"219","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/anymatch/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3173,"count":1}],"isBlockCoverage":true},{"functionName":"arrify","ranges":[{"startOffset":432,"endOffset":477,"count":0}],"isBlockCoverage":false},{"functionName":"createPattern","ranges":[{"startOffset":598,"endOffset":944,"count":0}],"isBlockCoverage":false},{"functionName":"matchPatterns","ranges":[{"startOffset":1145,"endOffset":1951,"count":0}],"isBlockCoverage":false},{"functionName":"anymatch","ranges":[{"startOffset":2117,"endOffset":3114,"count":0}],"isBlockCoverage":false}]},{"scriptId":"220","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/normalize-path/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1024,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":176,"endOffset":1022,"count":0}],"isBlockCoverage":false}]},{"scriptId":"221","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/glob-parent/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1120,"count":1}],"isBlockCoverage":true},{"functionName":"globParent","ranges":[{"startOffset":461,"endOffset":1118,"count":0}],"isBlockCoverage":false}]},{"scriptId":"222","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-glob/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3628,"count":1}],"isBlockCoverage":true},{"functionName":"strictCheck","ranges":[{"startOffset":247,"endOffset":2745,"count":0}],"isBlockCoverage":false},{"functionName":"relaxedCheck","ranges":[{"startOffset":2767,"endOffset":3304,"count":0}],"isBlockCoverage":false},{"functionName":"isGlob","ranges":[{"startOffset":3324,"endOffset":3626,"count":0}],"isBlockCoverage":false}]},{"scriptId":"223","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-extglob/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":441,"count":1}],"isBlockCoverage":true},{"functionName":"isExtglob","ranges":[{"startOffset":168,"endOffset":439,"count":0}],"isBlockCoverage":false}]},{"scriptId":"224","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4375,"count":1}],"isBlockCoverage":true},{"functionName":"braces","ranges":[{"startOffset":543,"endOffset":1030,"count":0}],"isBlockCoverage":false},{"functionName":"braces.parse","ranges":[{"startOffset":1359,"endOffset":1405,"count":0}],"isBlockCoverage":false},{"functionName":"braces.stringify","ranges":[{"startOffset":1795,"endOffset":1959,"count":0}],"isBlockCoverage":false},{"functionName":"braces.compile","ranges":[{"startOffset":2407,"endOffset":2550,"count":0}],"isBlockCoverage":false},{"functionName":"braces.expand","ranges":[{"startOffset":3141,"endOffset":3541,"count":0}],"isBlockCoverage":false},{"functionName":"braces.create","ranges":[{"startOffset":4118,"endOffset":4319,"count":0}],"isBlockCoverage":false}]},{"scriptId":"225","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/lib/stringify.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":700,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":67,"endOffset":697,"count":0}],"isBlockCoverage":false}]},{"scriptId":"226","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2451,"count":1}],"isBlockCoverage":true},{"functionName":"exports.isInteger","ranges":[{"startOffset":35,"endOffset":232,"count":0}],"isBlockCoverage":false},{"functionName":"exports.find","ranges":[{"startOffset":292,"endOffset":351,"count":0}],"isBlockCoverage":false},{"functionName":"exports.exceedsLimit","ranges":[{"startOffset":419,"endOffset":626,"count":0}],"isBlockCoverage":false},{"functionName":"exports.escapeNode","ranges":[{"startOffset":712,"endOffset":985,"count":0}],"isBlockCoverage":false},{"functionName":"exports.encloseBrace","ranges":[{"startOffset":1097,"endOffset":1266,"count":0}],"isBlockCoverage":false},{"functionName":"exports.isInvalidBrace","ranges":[{"startOffset":1347,"endOffset":1680,"count":0}],"isBlockCoverage":false},{"functionName":"exports.isOpenOrClose","ranges":[{"startOffset":1767,"endOffset":1906,"count":0}],"isBlockCoverage":false},{"functionName":"exports.reduce","ranges":[{"startOffset":1969,"endOffset":2127,"count":0}],"isBlockCoverage":false},{"functionName":"exports.flatten","ranges":[{"startOffset":2177,"endOffset":2449,"count":0}],"isBlockCoverage":false}]},{"scriptId":"227","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/lib/compile.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1415,"count":1}],"isBlockCoverage":true},{"functionName":"compile","ranges":[{"startOffset":102,"endOffset":1386,"count":0}],"isBlockCoverage":false}]},{"scriptId":"228","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/fill-range/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6315,"count":1}],"isBlockCoverage":true},{"functionName":"isObject","ranges":[{"startOffset":265,"endOffset":334,"count":0}],"isBlockCoverage":false},{"functionName":"transform","ranges":[{"startOffset":355,"endOffset":439,"count":0}],"isBlockCoverage":false},{"functionName":"isValidValue","ranges":[{"startOffset":463,"endOffset":558,"count":0}],"isBlockCoverage":false},{"functionName":"isNumber","ranges":[{"startOffset":578,"endOffset":607,"count":0}],"isBlockCoverage":false},{"functionName":"zeros","ranges":[{"startOffset":624,"endOffset":817,"count":0}],"isBlockCoverage":false},{"functionName":"stringify","ranges":[{"startOffset":838,"endOffset":986,"count":0}],"isBlockCoverage":false},{"functionName":"pad","ranges":[{"startOffset":1001,"endOffset":1295,"count":0}],"isBlockCoverage":false},{"functionName":"toMaxLen","ranges":[{"startOffset":1315,"endOffset":1552,"count":0}],"isBlockCoverage":false},{"functionName":"toSequence","ranges":[{"startOffset":1574,"endOffset":2208,"count":0}],"isBlockCoverage":false},{"functionName":"toRange","ranges":[{"startOffset":2227,"endOffset":2480,"count":0}],"isBlockCoverage":false},{"functionName":"toRegex","ranges":[{"startOffset":2499,"endOffset":2758,"count":0}],"isBlockCoverage":false},{"functionName":"rangeError","ranges":[{"startOffset":2780,"endOffset":2874,"count":0}],"isBlockCoverage":false},{"functionName":"invalidRange","ranges":[{"startOffset":2898,"endOffset":3008,"count":0}],"isBlockCoverage":false},{"functionName":"invalidStep","ranges":[{"startOffset":3031,"endOffset":3176,"count":0}],"isBlockCoverage":false},{"functionName":"fillNumbers","ranges":[{"startOffset":3199,"endOffset":4682,"count":0}],"isBlockCoverage":false},{"functionName":"fillLetters","ranges":[{"startOffset":4705,"endOffset":5486,"count":0}],"isBlockCoverage":false},{"functionName":"fill","ranges":[{"startOffset":5502,"endOffset":6289,"count":0}],"isBlockCoverage":false}]},{"scriptId":"229","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/to-regex-range/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6481,"count":1}],"isBlockCoverage":true},{"functionName":"toRegexRange","ranges":[{"startOffset":235,"endOffset":2177,"count":0}],"isBlockCoverage":false},{"functionName":"collatePatterns","ranges":[{"startOffset":2180,"endOffset":2554,"count":0}],"isBlockCoverage":false},{"functionName":"splitToRanges","ranges":[{"startOffset":2556,"endOffset":3037,"count":0}],"isBlockCoverage":false},{"functionName":"rangeToPattern","ranges":[{"startOffset":3159,"endOffset":3832,"count":0}],"isBlockCoverage":false},{"functionName":"splitToPatterns","ranges":[{"startOffset":3834,"endOffset":4632,"count":0}],"isBlockCoverage":false},{"functionName":"filterPatterns","ranges":[{"startOffset":4634,"endOffset":5094,"count":0}],"isBlockCoverage":false},{"functionName":"zip","ranges":[{"startOffset":5120,"endOffset":5233,"count":0}],"isBlockCoverage":false},{"functionName":"compare","ranges":[{"startOffset":5235,"endOffset":5298,"count":0}],"isBlockCoverage":false},{"functionName":"contains","ranges":[{"startOffset":5300,"endOffset":5380,"count":0}],"isBlockCoverage":false},{"functionName":"countNines","ranges":[{"startOffset":5382,"endOffset":5478,"count":0}],"isBlockCoverage":false},{"functionName":"countZeros","ranges":[{"startOffset":5480,"endOffset":5571,"count":0}],"isBlockCoverage":false},{"functionName":"toQuantifier","ranges":[{"startOffset":5573,"endOffset":5741,"count":0}],"isBlockCoverage":false},{"functionName":"toCharacterClass","ranges":[{"startOffset":5743,"endOffset":5837,"count":0}],"isBlockCoverage":false},{"functionName":"hasPadding","ranges":[{"startOffset":5839,"endOffset":5899,"count":0}],"isBlockCoverage":false},{"functionName":"padZeros","ranges":[{"startOffset":5901,"endOffset":6311,"count":0}],"isBlockCoverage":false},{"functionName":"toRegexRange.clearCache","ranges":[{"startOffset":6382,"endOffset":6413,"count":0}],"isBlockCoverage":false}]},{"scriptId":"230","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-number/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":411,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":184,"endOffset":409,"count":0}],"isBlockCoverage":false}]},{"scriptId":"231","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/lib/expand.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2780,"count":1}],"isBlockCoverage":true},{"functionName":"append","ranges":[{"startOffset":143,"endOffset":810,"count":0}],"isBlockCoverage":false},{"functionName":"expand","ranges":[{"startOffset":828,"endOffset":2752,"count":0}],"isBlockCoverage":false}]},{"scriptId":"232","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/lib/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6913,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":576,"endOffset":6886,"count":0}],"isBlockCoverage":false}]},{"scriptId":"233","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/braces/lib/constants.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1593,"count":1}],"isBlockCoverage":true}]},{"scriptId":"234","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chokidar/lib/nodefs-handler.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":20067,"count":1}],"isBlockCoverage":true},{"functionName":"foreach","ranges":[{"startOffset":725,"endOffset":818,"count":0}],"isBlockCoverage":false},{"functionName":"addAndConvert","ranges":[{"startOffset":843,"endOffset":1013,"count":0}],"isBlockCoverage":false},{"functionName":"clearItem","ranges":[{"startOffset":1034,"endOffset":1159,"count":0}],"isBlockCoverage":false},{"functionName":"delFromSet","ranges":[{"startOffset":1181,"endOffset":1362,"count":0}],"isBlockCoverage":false},{"functionName":"isEmptySet","ranges":[{"startOffset":1384,"endOffset":1435,"count":0}],"isBlockCoverage":false},{"functionName":"createFsWatchInstance","ranges":[{"startOffset":2240,"endOffset":2860,"count":0}],"isBlockCoverage":false},{"functionName":"fsWatchBroadcast","ranges":[{"startOffset":3167,"endOffset":3352,"count":0}],"isBlockCoverage":false},{"functionName":"setFsWatchListener","ranges":[{"startOffset":3691,"endOffset":5797,"count":0}],"isBlockCoverage":false},{"functionName":"setFsWatchFileListener","ranges":[{"startOffset":6374,"endOffset":8442,"count":0}],"isBlockCoverage":false},{"functionName":"NodeFsHandler","ranges":[{"startOffset":8539,"endOffset":8640,"count":0}],"isBlockCoverage":false},{"functionName":"_watchWithNodeFs","ranges":[{"startOffset":8844,"endOffset":9693,"count":0}],"isBlockCoverage":false},{"functionName":"_handleFile","ranges":[{"startOffset":9953,"endOffset":12010,"count":0}],"isBlockCoverage":false},{"functionName":"_handleSymlink","ranges":[{"startOffset":12337,"endOffset":13370,"count":0}],"isBlockCoverage":false},{"functionName":"_handleRead","ranges":[{"startOffset":13372,"endOffset":15882,"count":0}],"isBlockCoverage":false},{"functionName":"_handleDir","ranges":[{"startOffset":16330,"endOffset":17387,"count":0}],"isBlockCoverage":false},{"functionName":"_addToNodeFs","ranges":[{"startOffset":17835,"endOffset":20030,"count":0}],"isBlockCoverage":false}]},{"scriptId":"235","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-binary-path/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":239,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":164,"endOffset":237,"count":0}],"isBlockCoverage":false}]},{"scriptId":"236","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/binary-extensions/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":54,"count":1}],"isBlockCoverage":true}]},{"scriptId":"237","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chokidar/lib/constants.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1834,"count":1}],"isBlockCoverage":true},{"functionName":"exports.EMPTY_FN","ranges":[{"startOffset":1626,"endOffset":1634,"count":0}],"isBlockCoverage":false},{"functionName":"exports.IDENTITY_FN","ranges":[{"startOffset":1658,"endOffset":1668,"count":0}],"isBlockCoverage":false}]},{"scriptId":"238","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chokidar/lib/fsevents-handler.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16274,"count":1},{"startOffset":243,"endOffset":264,"count":0},{"startOffset":282,"endOffset":561,"count":0}],"isBlockCoverage":true},{"functionName":"Depth","ranges":[{"startOffset":973,"endOffset":1018,"count":0}],"isBlockCoverage":false},{"functionName":"createFSEventsInstance","ranges":[{"startOffset":2064,"endOffset":2151,"count":0}],"isBlockCoverage":false},{"functionName":"setFSEventsListener","ranges":[{"startOffset":2552,"endOffset":4873,"count":0}],"isBlockCoverage":false},{"functionName":"couldConsolidate","ranges":[{"startOffset":4978,"endOffset":5217,"count":0}],"isBlockCoverage":false},{"functionName":"canUse","ranges":[{"startOffset":5294,"endOffset":5339,"count":0}],"isBlockCoverage":false},{"functionName":"calcDepth","ranges":[{"startOffset":5422,"endOffset":5544,"count":0}],"isBlockCoverage":false},{"functionName":"sameTypes","ranges":[{"startOffset":5680,"endOffset":5883,"count":0}],"isBlockCoverage":false},{"functionName":"FsEventsHandler","ranges":[{"startOffset":5981,"endOffset":6019,"count":0}],"isBlockCoverage":false},{"functionName":"checkIgnored","ranges":[{"startOffset":6020,"endOffset":6324,"count":0}],"isBlockCoverage":false},{"functionName":"addOrChange","ranges":[{"startOffset":6326,"endOffset":6555,"count":0}],"isBlockCoverage":false},{"functionName":"checkExists","ranges":[{"startOffset":6557,"endOffset":7223,"count":0}],"isBlockCoverage":false},{"functionName":"handleEvent","ranges":[{"startOffset":7225,"endOffset":8519,"count":0}],"isBlockCoverage":false},{"functionName":"_watchWithFsEvents","ranges":[{"startOffset":8907,"endOffset":10901,"count":0}],"isBlockCoverage":false},{"functionName":"_handleFsEventsSymlink","ranges":[{"startOffset":11236,"endOffset":12319,"count":0}],"isBlockCoverage":false},{"functionName":"emitAdd","ranges":[{"startOffset":12384,"endOffset":12857,"count":0}],"isBlockCoverage":false},{"functionName":"initWatch","ranges":[{"startOffset":12859,"endOffset":13124,"count":0}],"isBlockCoverage":false},{"functionName":"_addToFsEvents","ranges":[{"startOffset":13464,"endOffset":16203,"count":0}],"isBlockCoverage":false}]},{"scriptId":"239","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/collect-files.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2672,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":696,"endOffset":2202,"count":1},{"startOffset":1438,"endOffset":1465,"count":0},{"startOffset":1681,"endOffset":2030,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":837,"endOffset":1347,"count":1},{"startOffset":1153,"endOffset":1343,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":963,"endOffset":1039,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":998,"endOffset":1038,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1063,"endOffset":1097,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1557,"endOffset":1591,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2095,"endOffset":2177,"count":0}],"isBlockCoverage":false}]},{"scriptId":"240","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/minimatch/minimatch.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":27216,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":35,"endOffset":267,"count":0}],"isBlockCoverage":false},{"functionName":"charSet","ranges":[{"startOffset":1274,"endOffset":1347,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1298,"endOffset":1342,"count":17}],"isBlockCoverage":true},{"functionName":"minimatch.filter","ranges":[{"startOffset":1617,"endOffset":1692,"count":0}],"isBlockCoverage":false},{"functionName":"ext","ranges":[{"startOffset":1706,"endOffset":1836,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.defaults","ranges":[{"startOffset":1859,"endOffset":2677,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.braceExpand","ranges":[{"startOffset":2957,"endOffset":3008,"count":0}],"isBlockCoverage":false},{"functionName":"braceExpand","ranges":[{"startOffset":3030,"endOffset":3358,"count":0}],"isBlockCoverage":false},{"functionName":"assertValidPattern","ranges":[{"startOffset":3424,"endOffset":3619,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.makeRe","ranges":[{"startOffset":4321,"endOffset":4391,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.match","ranges":[{"startOffset":4411,"endOffset":4615,"count":0}],"isBlockCoverage":false},{"functionName":"globUnescape","ranges":[{"startOffset":4670,"endOffset":4700,"count":0}],"isBlockCoverage":false},{"functionName":"regExpEscape","ranges":[{"startOffset":4722,"endOffset":4772,"count":0}],"isBlockCoverage":false},{"functionName":"Minimatch","ranges":[{"startOffset":4794,"endOffset":5152,"count":0}],"isBlockCoverage":false},{"functionName":"debug","ranges":[{"startOffset":5156,"endOffset":5167,"count":0}],"isBlockCoverage":false},{"functionName":"make","ranges":[{"startOffset":5171,"endOffset":6377,"count":0}],"isBlockCoverage":false},{"functionName":"parseNegate","ranges":[{"startOffset":6381,"endOffset":6740,"count":0}],"isBlockCoverage":false},{"functionName":"matchOne","ranges":[{"startOffset":6972,"endOffset":12131,"count":0}],"isBlockCoverage":false},{"functionName":"braceExpand","ranges":[{"startOffset":12135,"endOffset":12206,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":12210,"endOffset":23228,"count":0}],"isBlockCoverage":false},{"functionName":"makeRe","ranges":[{"startOffset":23232,"endOffset":25589,"count":0}],"isBlockCoverage":false},{"functionName":"match","ranges":[{"startOffset":25593,"endOffset":27104,"count":0}],"isBlockCoverage":false},{"functionName":"defaults","ranges":[{"startOffset":27115,"endOffset":27180,"count":0}],"isBlockCoverage":false}]},{"scriptId":"241","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/minimatch/lib/path.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":151,"count":1},{"startOffset":120,"endOffset":135,"count":0}],"isBlockCoverage":true}]},{"scriptId":"242","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/minimatch/node_modules/brace-expansion/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4992,"count":1}],"isBlockCoverage":true},{"functionName":"numeric","ranges":[{"startOffset":298,"endOffset":406,"count":0}],"isBlockCoverage":false},{"functionName":"escapeBraces","ranges":[{"startOffset":408,"endOffset":645,"count":0}],"isBlockCoverage":false},{"functionName":"unescapeBraces","ranges":[{"startOffset":647,"endOffset":876,"count":0}],"isBlockCoverage":false},{"functionName":"parseCommaParts","ranges":[{"startOffset":1040,"endOffset":1506,"count":0}],"isBlockCoverage":false},{"functionName":"expandTop","ranges":[{"startOffset":1508,"endOffset":2085,"count":0}],"isBlockCoverage":false},{"functionName":"embrace","ranges":[{"startOffset":2087,"endOffset":2138,"count":0}],"isBlockCoverage":false},{"functionName":"isPadded","ranges":[{"startOffset":2139,"endOffset":2192,"count":0}],"isBlockCoverage":false},{"functionName":"lte","ranges":[{"startOffset":2194,"endOffset":2233,"count":0}],"isBlockCoverage":false},{"functionName":"gte","ranges":[{"startOffset":2234,"endOffset":2273,"count":0}],"isBlockCoverage":false},{"functionName":"expand","ranges":[{"startOffset":2275,"endOffset":4990,"count":0}],"isBlockCoverage":false}]},{"scriptId":"243","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/balanced-match/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1219,"count":1}],"isBlockCoverage":true},{"functionName":"balanced","ranges":[{"startOffset":41,"endOffset":368,"count":0}],"isBlockCoverage":false},{"functionName":"maybeMatch","ranges":[{"startOffset":370,"endOffset":455,"count":0}],"isBlockCoverage":false},{"functionName":"range","ranges":[{"startOffset":481,"endOffset":1218,"count":0}],"isBlockCoverage":false}]},{"scriptId":"244","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/lookup-files.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4183,"count":1}],"isBlockCoverage":true},{"functionName":"isHiddenOnUnix","ranges":[{"startOffset":1057,"endOffset":1108,"count":0}],"isBlockCoverage":false},{"functionName":"hasMatchingExtname","ranges":[{"startOffset":1618,"endOffset":1747,"count":0}],"isBlockCoverage":false},{"functionName":"lookupFiles","ranges":[{"startOffset":2409,"endOffset":4181,"count":1},{"startOffset":2682,"endOffset":2979,"count":0},{"startOffset":3057,"endOffset":3198,"count":0},{"startOffset":3220,"endOffset":3334,"count":0},{"startOffset":3339,"endOffset":4180,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2790,"endOffset":2836,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3447,"endOffset":4160,"count":0}],"isBlockCoverage":false}]},{"scriptId":"245","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/glob/glob.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":19362,"count":1}],"isBlockCoverage":true},{"functionName":"glob","ranges":[{"startOffset":2096,"endOffset":2407,"count":0}],"isBlockCoverage":false},{"functionName":"extend","ranges":[{"startOffset":2517,"endOffset":2745,"count":1},{"startOffset":2619,"endOffset":2744,"count":0}],"isBlockCoverage":true},{"functionName":"glob.hasMagic","ranges":[{"startOffset":2763,"endOffset":3120,"count":1},{"startOffset":2945,"endOffset":2957,"count":0},{"startOffset":2985,"endOffset":2996,"count":0},{"startOffset":3040,"endOffset":3102,"count":2},{"startOffset":3087,"endOffset":3098,"count":1},{"startOffset":3102,"endOffset":3119,"count":0}],"isBlockCoverage":true},{"functionName":"Glob","ranges":[{"startOffset":3158,"endOffset":4588,"count":1},{"startOffset":3234,"endOffset":3275,"count":0},{"startOffset":3308,"endOffset":3427,"count":0},{"startOffset":3464,"endOffset":3501,"count":0},{"startOffset":3925,"endOffset":4044,"count":0},{"startOffset":4197,"endOffset":4587,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3989,"endOffset":4039,"count":0}],"isBlockCoverage":false},{"functionName":"done","ranges":[{"startOffset":4363,"endOffset":4586,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._finish","ranges":[{"startOffset":4615,"endOffset":4818,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._realpath","ranges":[{"startOffset":4847,"endOffset":5162,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._realpathSet","ranges":[{"startOffset":5194,"endOffset":6010,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._mark","ranges":[{"startOffset":6035,"endOffset":6081,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._makeAbs","ranges":[{"startOffset":6109,"endOffset":6158,"count":0}],"isBlockCoverage":false},{"functionName":"Glob.abort","ranges":[{"startOffset":6183,"endOffset":6241,"count":0}],"isBlockCoverage":false},{"functionName":"Glob.pause","ranges":[{"startOffset":6266,"endOffset":6353,"count":0}],"isBlockCoverage":false},{"functionName":"Glob.resume","ranges":[{"startOffset":6379,"endOffset":6961,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._process","ranges":[{"startOffset":6989,"endOffset":8755,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._processReaddir","ranges":[{"startOffset":8790,"endOffset":9026,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._processReaddir2","ranges":[{"startOffset":9062,"endOffset":11106,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._emitMatch","ranges":[{"startOffset":11136,"endOffset":11704,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._readdirInGlobStar","ranges":[{"startOffset":11742,"endOffset":12544,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._readdir","ranges":[{"startOffset":12572,"endOffset":13089,"count":0}],"isBlockCoverage":false},{"functionName":"readdirCb","ranges":[{"startOffset":13091,"endOffset":13271,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._readdirEntries","ranges":[{"startOffset":13306,"endOffset":13803,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._readdirError","ranges":[{"startOffset":13836,"endOffset":14921,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._processGlobStar","ranges":[{"startOffset":14957,"endOffset":15187,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._processGlobStar2","ranges":[{"startOffset":15225,"endOffset":16372,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._processSimple","ranges":[{"startOffset":16406,"endOffset":16662,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._processSimple2","ranges":[{"startOffset":16696,"endOffset":17378,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._stat","ranges":[{"startOffset":17445,"endOffset":18836,"count":0}],"isBlockCoverage":false},{"functionName":"Glob._stat2","ranges":[{"startOffset":18862,"endOffset":19361,"count":0}],"isBlockCoverage":false}]},{"scriptId":"246","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/fs.realpath/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1308,"count":1}],"isBlockCoverage":true},{"functionName":"newError","ranges":[{"startOffset":386,"endOffset":548,"count":0}],"isBlockCoverage":false},{"functionName":"realpath","ranges":[{"startOffset":550,"endOffset":865,"count":0}],"isBlockCoverage":false},{"functionName":"realpathSync","ranges":[{"startOffset":867,"endOffset":1123,"count":0}],"isBlockCoverage":false},{"functionName":"monkeypatch","ranges":[{"startOffset":1125,"endOffset":1210,"count":0}],"isBlockCoverage":false},{"functionName":"unmonkeypatch","ranges":[{"startOffset":1212,"endOffset":1307,"count":0}],"isBlockCoverage":false}]},{"scriptId":"247","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/fs.realpath/old.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8542,"count":1},{"startOffset":1341,"endOffset":1377,"count":0},{"startOffset":2489,"endOffset":2534,"count":0},{"startOffset":2673,"endOffset":2754,"count":0}],"isBlockCoverage":true},{"functionName":"rethrow","ranges":[{"startOffset":1380,"endOffset":2224,"count":0}],"isBlockCoverage":false},{"functionName":"maybeCallback","ranges":[{"startOffset":2226,"endOffset":2308,"count":0}],"isBlockCoverage":false},{"functionName":"realpathSync","ranges":[{"startOffset":2818,"endOffset":5360,"count":0}],"isBlockCoverage":false},{"functionName":"realpath","ranges":[{"startOffset":5383,"endOffset":8540,"count":0}],"isBlockCoverage":false}]},{"scriptId":"248","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/glob/node_modules/minimatch/minimatch.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":26266,"count":1},{"startOffset":134,"endOffset":151,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":72,"endOffset":130,"count":1},{"startOffset":117,"endOffset":129,"count":0}],"isBlockCoverage":true},{"functionName":"charSet","ranges":[{"startOffset":1148,"endOffset":1262,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1199,"endOffset":1255,"count":14}],"isBlockCoverage":true},{"functionName":"filter","ranges":[{"startOffset":1337,"endOffset":1480,"count":0}],"isBlockCoverage":false},{"functionName":"ext","ranges":[{"startOffset":1482,"endOffset":1665,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.defaults","ranges":[{"startOffset":1688,"endOffset":2709,"count":0}],"isBlockCoverage":false},{"functionName":"Minimatch.defaults","ranges":[{"startOffset":2732,"endOffset":2793,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch","ranges":[{"startOffset":2795,"endOffset":3068,"count":0}],"isBlockCoverage":false},{"functionName":"Minimatch","ranges":[{"startOffset":3070,"endOffset":3676,"count":2},{"startOffset":3146,"endOffset":3194,"count":0},{"startOffset":3243,"endOffset":3255,"count":0},{"startOffset":3383,"endOffset":3436,"count":0}],"isBlockCoverage":true},{"functionName":"Minimatch.debug","ranges":[{"startOffset":3706,"endOffset":3720,"count":40}],"isBlockCoverage":true},{"functionName":"make","ranges":[{"startOffset":3754,"endOffset":5005,"count":2},{"startOffset":3905,"endOffset":3933,"count":0},{"startOffset":3935,"endOffset":3975,"count":0},{"startOffset":3992,"endOffset":4030,"count":0},{"startOffset":4188,"endOffset":4261,"count":0}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":4201,"endOffset":4261,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4595,"endOffset":4644,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4718,"endOffset":4780,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4898,"endOffset":4951,"count":2}],"isBlockCoverage":true},{"functionName":"parseNegate","ranges":[{"startOffset":5053,"endOffset":5438,"count":2},{"startOffset":5212,"endOffset":5291,"count":0},{"startOffset":5303,"endOffset":5437,"count":0}],"isBlockCoverage":true},{"functionName":"minimatch.braceExpand","ranges":[{"startOffset":5714,"endOffset":5784,"count":0}],"isBlockCoverage":false},{"functionName":"braceExpand","ranges":[{"startOffset":5833,"endOffset":6374,"count":2},{"startOffset":5964,"endOffset":5996,"count":0},{"startOffset":6064,"endOffset":6073,"count":0},{"startOffset":6346,"endOffset":6373,"count":0}],"isBlockCoverage":true},{"functionName":"assertValidPattern","ranges":[{"startOffset":6436,"endOffset":6639,"count":10},{"startOffset":6492,"endOffset":6540,"count":0},{"startOffset":6585,"endOffset":6637,"count":0}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":7337,"endOffset":17832,"count":6},{"startOffset":7471,"endOffset":7556,"count":2},{"startOffset":7523,"endOffset":7552,"count":0},{"startOffset":7556,"endOffset":7579,"count":4},{"startOffset":7579,"endOffset":7588,"count":0},{"startOffset":7588,"endOffset":7973,"count":4},{"startOffset":7973,"endOffset":7977,"count":0},{"startOffset":8055,"endOffset":8119,"count":4},{"startOffset":8069,"endOffset":8105,"count":0},{"startOffset":8688,"endOffset":8714,"count":26},{"startOffset":8726,"endOffset":13397,"count":26},{"startOffset":8835,"endOffset":8851,"count":0},{"startOffset":8853,"endOffset":8919,"count":0},{"startOffset":8977,"endOffset":9114,"count":0},{"startOffset":9122,"endOffset":9196,"count":0},{"startOffset":9276,"endOffset":9285,"count":0},{"startOffset":9292,"endOffset":9301,"count":2},{"startOffset":9308,"endOffset":9317,"count":2},{"startOffset":9324,"endOffset":9333,"count":2},{"startOffset":9340,"endOffset":10205,"count":2},{"startOffset":9551,"endOffset":9691,"count":0},{"startOffset":10174,"endOffset":10190,"count":0},{"startOffset":10213,"endOffset":10764,"count":0},{"startOffset":10772,"endOffset":11199,"count":0},{"startOffset":11207,"endOffset":11416,"count":0},{"startOffset":11478,"endOffset":11757,"count":0},{"startOffset":11765,"endOffset":13086,"count":0},{"startOffset":13094,"endOffset":13376,"count":24},{"startOffset":13206,"endOffset":13265,"count":0},{"startOffset":13299,"endOffset":13325,"count":4},{"startOffset":13314,"endOffset":13324,"count":0},{"startOffset":13327,"endOffset":13359,"count":4},{"startOffset":13397,"endOffset":13514,"count":4},{"startOffset":13514,"endOffset":13890,"count":0},{"startOffset":13890,"endOffset":14294,"count":4},{"startOffset":14294,"endOffset":15231,"count":0},{"startOffset":15231,"endOffset":15330,"count":4},{"startOffset":15330,"endOffset":15371,"count":0},{"startOffset":15371,"endOffset":15547,"count":4},{"startOffset":15547,"endOffset":15556,"count":2},{"startOffset":15557,"endOffset":15566,"count":2},{"startOffset":15567,"endOffset":15599,"count":2},{"startOffset":15603,"endOffset":15920,"count":4},{"startOffset":15920,"endOffset":16734,"count":0},{"startOffset":16734,"endOffset":16934,"count":4},{"startOffset":16936,"endOffset":16963,"count":2},{"startOffset":16963,"endOffset":16988,"count":4},{"startOffset":16988,"endOffset":17020,"count":2},{"startOffset":17020,"endOffset":17095,"count":4},{"startOffset":17095,"endOffset":17126,"count":0},{"startOffset":17126,"endOffset":17286,"count":4},{"startOffset":17286,"endOffset":17355,"count":2},{"startOffset":17355,"endOffset":17360,"count":0},{"startOffset":17361,"endOffset":17365,"count":2},{"startOffset":17429,"endOffset":17768,"count":0},{"startOffset":17768,"endOffset":17831,"count":2}],"isBlockCoverage":true},{"functionName":"clearStateChar","ranges":[{"startOffset":8141,"endOffset":8628,"count":30},{"startOffset":8189,"endOffset":8624,"count":2},{"startOffset":8395,"endOffset":8466,"count":0},{"startOffset":8475,"endOffset":8530,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":14509,"endOffset":15009,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.makeRe","ranges":[{"startOffset":17853,"endOffset":17940,"count":0}],"isBlockCoverage":false},{"functionName":"makeRe","ranges":[{"startOffset":17978,"endOffset":19165,"count":0}],"isBlockCoverage":false},{"functionName":"minimatch.match","ranges":[{"startOffset":19185,"endOffset":19439,"count":0}],"isBlockCoverage":false},{"functionName":"match","ranges":[{"startOffset":19469,"endOffset":20941,"count":0}],"isBlockCoverage":false},{"functionName":"Minimatch.matchOne","ranges":[{"startOffset":21192,"endOffset":26081,"count":0}],"isBlockCoverage":false},{"functionName":"globUnescape","ranges":[{"startOffset":26115,"endOffset":26179,"count":2}],"isBlockCoverage":true},{"functionName":"regExpEscape","ranges":[{"startOffset":26181,"endOffset":26265,"count":0}],"isBlockCoverage":false}]},{"scriptId":"249","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/brace-expansion/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4792,"count":1}],"isBlockCoverage":true},{"functionName":"numeric","ranges":[{"startOffset":337,"endOffset":445,"count":0}],"isBlockCoverage":false},{"functionName":"escapeBraces","ranges":[{"startOffset":447,"endOffset":684,"count":0}],"isBlockCoverage":false},{"functionName":"unescapeBraces","ranges":[{"startOffset":686,"endOffset":915,"count":0}],"isBlockCoverage":false},{"functionName":"parseCommaParts","ranges":[{"startOffset":1079,"endOffset":1545,"count":0}],"isBlockCoverage":false},{"functionName":"expandTop","ranges":[{"startOffset":1547,"endOffset":2124,"count":0}],"isBlockCoverage":false},{"functionName":"identity","ranges":[{"startOffset":2126,"endOffset":2162,"count":0}],"isBlockCoverage":false},{"functionName":"embrace","ranges":[{"startOffset":2164,"endOffset":2215,"count":0}],"isBlockCoverage":false},{"functionName":"isPadded","ranges":[{"startOffset":2216,"endOffset":2269,"count":0}],"isBlockCoverage":false},{"functionName":"lte","ranges":[{"startOffset":2271,"endOffset":2310,"count":0}],"isBlockCoverage":false},{"functionName":"gte","ranges":[{"startOffset":2311,"endOffset":2350,"count":0}],"isBlockCoverage":false},{"functionName":"expand","ranges":[{"startOffset":2352,"endOffset":4790,"count":0}],"isBlockCoverage":false}]},{"scriptId":"250","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/concat-map/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":345,"count":1},{"startOffset":255,"endOffset":343,"count":0}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":17,"endOffset":224,"count":0}],"isBlockCoverage":false},{"functionName":"isArray","ranges":[{"startOffset":258,"endOffset":343,"count":0}],"isBlockCoverage":false}]},{"scriptId":"251","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/inherits/inherits.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":250,"count":1},{"startOffset":108,"endOffset":117,"count":0},{"startOffset":154,"endOffset":249,"count":0}],"isBlockCoverage":true}]},{"scriptId":"252","url":"node:assert","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":31697,"count":1}],"isBlockCoverage":false},{"functionName":"lazyLoadComparison","ranges":[{"startOffset":2647,"endOffset":2831,"count":0}],"isBlockCoverage":false},{"functionName":"escapeFn","ranges":[{"startOffset":3412,"endOffset":3460,"count":0}],"isBlockCoverage":false},{"functionName":"innerFail","ranges":[{"startOffset":4014,"endOffset":4130,"count":0}],"isBlockCoverage":false},{"functionName":"fail","ranges":[{"startOffset":4291,"endOffset":5270,"count":0}],"isBlockCoverage":false},{"functionName":"findColumn","ranges":[{"startOffset":5386,"endOffset":6326,"count":0}],"isBlockCoverage":false},{"functionName":"getCode","ranges":[{"startOffset":6328,"endOffset":7972,"count":0}],"isBlockCoverage":false},{"functionName":"parseCode","ranges":[{"startOffset":7974,"endOffset":9278,"count":0}],"isBlockCoverage":false},{"functionName":"getErrMessage","ranges":[{"startOffset":9280,"endOffset":12492,"count":0}],"isBlockCoverage":false},{"functionName":"innerOk","ranges":[{"startOffset":12494,"endOffset":13101,"count":9},{"startOffset":12555,"endOffset":13099,"count":0}],"isBlockCoverage":true},{"functionName":"ok","ranges":[{"startOffset":13234,"endOffset":13295,"count":9}],"isBlockCoverage":true},{"functionName":"equal","ranges":[{"startOffset":13554,"endOffset":13925,"count":1},{"startOffset":13626,"endOffset":13685,"count":0},{"startOffset":13748,"endOffset":13799,"count":0},{"startOffset":13801,"endOffset":13923,"count":0}],"isBlockCoverage":true},{"functionName":"notEqual","ranges":[{"startOffset":14144,"endOffset":14519,"count":0}],"isBlockCoverage":false},{"functionName":"deepEqual","ranges":[{"startOffset":14719,"endOffset":15083,"count":0}],"isBlockCoverage":false},{"functionName":"notDeepEqual","ranges":[{"startOffset":15289,"endOffset":15661,"count":0}],"isBlockCoverage":false},{"functionName":"deepStrictEqual","ranges":[{"startOffset":15904,"endOffset":16292,"count":0}],"isBlockCoverage":false},{"functionName":"notDeepStrictEqual","ranges":[{"startOffset":16541,"endOffset":16937,"count":0}],"isBlockCoverage":false},{"functionName":"strictEqual","ranges":[{"startOffset":17142,"endOffset":17454,"count":0}],"isBlockCoverage":false},{"functionName":"notStrictEqual","ranges":[{"startOffset":17666,"endOffset":17986,"count":6},{"startOffset":17747,"endOffset":17806,"count":0},{"startOffset":17841,"endOffset":17984,"count":0}],"isBlockCoverage":true},{"functionName":"Comparison","ranges":[{"startOffset":18010,"endOffset":18383,"count":0}],"isBlockCoverage":false},{"functionName":"compareExceptionKey","ranges":[{"startOffset":18387,"endOffset":19104,"count":0}],"isBlockCoverage":false},{"functionName":"expectedException","ranges":[{"startOffset":19106,"endOffset":22490,"count":0}],"isBlockCoverage":false},{"functionName":"getActual","ranges":[{"startOffset":22492,"endOffset":22632,"count":0}],"isBlockCoverage":false},{"functionName":"checkIsPromise","ranges":[{"startOffset":22634,"endOffset":22998,"count":0}],"isBlockCoverage":false},{"functionName":"waitForActual","ranges":[{"startOffset":23000,"endOffset":23714,"count":0}],"isBlockCoverage":false},{"functionName":"expectsError","ranges":[{"startOffset":23716,"endOffset":25330,"count":0}],"isBlockCoverage":false},{"functionName":"hasMatchingError","ranges":[{"startOffset":25332,"endOffset":25940,"count":0}],"isBlockCoverage":false},{"functionName":"expectsNoError","ranges":[{"startOffset":25942,"endOffset":26592,"count":0}],"isBlockCoverage":false},{"functionName":"throws","ranges":[{"startOffset":26750,"endOffset":26844,"count":0}],"isBlockCoverage":false},{"functionName":"rejects","ranges":[{"startOffset":27023,"endOffset":27135,"count":0}],"isBlockCoverage":false},{"functionName":"doesNotThrow","ranges":[{"startOffset":27297,"endOffset":27391,"count":0}],"isBlockCoverage":false},{"functionName":"doesNotReject","ranges":[{"startOffset":27557,"endOffset":27669,"count":0}],"isBlockCoverage":false},{"functionName":"ifError","ranges":[{"startOffset":27797,"endOffset":29584,"count":0}],"isBlockCoverage":false},{"functionName":"internalMatch","ranges":[{"startOffset":29587,"endOffset":30659,"count":0}],"isBlockCoverage":false},{"functionName":"match","ranges":[{"startOffset":30855,"endOffset":30947,"count":0}],"isBlockCoverage":false},{"functionName":"doesNotMatch","ranges":[{"startOffset":31155,"endOffset":31261,"count":0}],"isBlockCoverage":false},{"functionName":"strict","ranges":[{"startOffset":31393,"endOffset":31462,"count":0}],"isBlockCoverage":false}]},{"scriptId":"253","url":"node:internal/assert/assertion_error","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":17184,"count":1}],"isBlockCoverage":false},{"functionName":"copyError","ranges":[{"startOffset":1477,"endOffset":1753,"count":0}],"isBlockCoverage":false},{"functionName":"inspectValue","ranges":[{"startOffset":1755,"endOffset":2362,"count":0}],"isBlockCoverage":false},{"functionName":"createErrDiff","ranges":[{"startOffset":2364,"endOffset":10918,"count":0}],"isBlockCoverage":false},{"functionName":"addEllipsis","ranges":[{"startOffset":10920,"endOffset":11223,"count":0}],"isBlockCoverage":false},{"functionName":"AssertionError","ranges":[{"startOffset":11264,"endOffset":16214,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":16218,"endOffset":16293,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16297,"endOffset":17147,"count":0}],"isBlockCoverage":false}]},{"scriptId":"254","url":"node:internal/assert/calltracker","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2345,"count":1}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":395,"endOffset":422,"count":0}],"isBlockCoverage":false},{"functionName":"calls","ranges":[{"startOffset":427,"endOffset":1444,"count":0}],"isBlockCoverage":false},{"functionName":"report","ranges":[{"startOffset":1448,"endOffset":2079,"count":0}],"isBlockCoverage":false},{"functionName":"verify","ranges":[{"startOffset":2083,"endOffset":2311,"count":0}],"isBlockCoverage":false}]},{"scriptId":"255","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/path-is-absolute/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":611,"count":1},{"startOffset":534,"endOffset":541,"count":0}],"isBlockCoverage":true},{"functionName":"posix","ranges":[{"startOffset":15,"endOffset":71,"count":32}],"isBlockCoverage":true},{"functionName":"win32","ranges":[{"startOffset":73,"endOffset":486,"count":0}],"isBlockCoverage":false}]},{"scriptId":"256","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/glob/sync.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11931,"count":1}],"isBlockCoverage":true},{"functionName":"globSync","ranges":[{"startOffset":501,"endOffset":790,"count":1},{"startOffset":607,"endOffset":741,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync","ranges":[{"startOffset":792,"endOffset":1419,"count":1},{"startOffset":851,"endOffset":890,"count":0},{"startOffset":959,"endOffset":1093,"count":0},{"startOffset":1134,"endOffset":1171,"count":0},{"startOffset":1234,"endOffset":1245,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._finish","ranges":[{"startOffset":1450,"endOffset":2007,"count":1},{"startOffset":1520,"endOffset":1983,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1567,"endOffset":1978,"count":0}],"isBlockCoverage":false},{"functionName":"GlobSync._process","ranges":[{"startOffset":2040,"endOffset":3541,"count":8},{"startOffset":2231,"endOffset":2245,"count":14},{"startOffset":2420,"endOffset":2505,"count":2},{"startOffset":2511,"endOffset":2675,"count":0},{"startOffset":2681,"endOffset":2910,"count":6},{"startOffset":2914,"endOffset":3017,"count":6},{"startOffset":3017,"endOffset":3027,"count":0},{"startOffset":3027,"endOffset":3206,"count":6},{"startOffset":3092,"endOffset":3183,"count":0},{"startOffset":3206,"endOffset":3312,"count":6},{"startOffset":3312,"endOffset":3318,"count":0},{"startOffset":3318,"endOffset":3394,"count":6},{"startOffset":3394,"endOffset":3539,"count":3}],"isBlockCoverage":true},{"functionName":"GlobSync._processReaddir","ranges":[{"startOffset":3581,"endOffset":5539,"count":3},{"startOffset":3760,"endOffset":3766,"count":2},{"startOffset":3766,"endOffset":4028,"count":1},{"startOffset":4099,"endOffset":4332,"count":2},{"startOffset":4152,"endOffset":4160,"count":0},{"startOffset":4193,"endOffset":4203,"count":0},{"startOffset":4205,"endOffset":4239,"count":0},{"startOffset":4332,"endOffset":4449,"count":1},{"startOffset":4449,"endOffset":4455,"count":0},{"startOffset":4455,"endOffset":4703,"count":1},{"startOffset":4704,"endOffset":4717,"count":0},{"startOffset":4719,"endOffset":5206,"count":0},{"startOffset":5206,"endOffset":5340,"count":1},{"startOffset":5340,"endOffset":5537,"count":2},{"startOffset":5437,"endOffset":5469,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._emitMatch","ranges":[{"startOffset":5574,"endOffset":5962,"count":2},{"startOffset":5626,"endOffset":5632,"count":0},{"startOffset":5725,"endOffset":5742,"count":0},{"startOffset":5778,"endOffset":5784,"count":0},{"startOffset":5881,"endOffset":5887,"count":0},{"startOffset":5947,"endOffset":5960,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._readdirInGlobStar","ranges":[{"startOffset":6005,"endOffset":6717,"count":2},{"startOffset":6148,"endOffset":6180,"count":0},{"startOffset":6266,"endOffset":6375,"count":0},{"startOffset":6650,"endOffset":6697,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._readdir","ranges":[{"startOffset":6749,"endOffset":7180,"count":6},{"startOffset":6810,"endOffset":6841,"count":4},{"startOffset":6847,"endOffset":6882,"count":2},{"startOffset":6882,"endOffset":6916,"count":4},{"startOffset":6916,"endOffset":7037,"count":3},{"startOffset":6980,"endOffset":6991,"count":2},{"startOffset":6991,"endOffset":7033,"count":1},{"startOffset":7037,"endOffset":7114,"count":1},{"startOffset":7114,"endOffset":7178,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._readdirEntries","ranges":[{"startOffset":7219,"endOffset":7700,"count":1},{"startOffset":7416,"endOffset":7429,"count":0},{"startOffset":7431,"endOffset":7622,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._readdirError","ranges":[{"startOffset":7737,"endOffset":8601,"count":0}],"isBlockCoverage":false},{"functionName":"GlobSync._processGlobStar","ranges":[{"startOffset":8641,"endOffset":9739,"count":3},{"startOffset":8868,"endOffset":8874,"count":2},{"startOffset":8874,"endOffset":9053,"count":1},{"startOffset":9054,"endOffset":9058,"count":0},{"startOffset":9346,"endOffset":9359,"count":0},{"startOffset":9365,"endOffset":9371,"count":0},{"startOffset":9371,"endOffset":9405,"count":1},{"startOffset":9405,"endOffset":9737,"count":2},{"startOffset":9458,"endOffset":9470,"count":0},{"startOffset":9478,"endOffset":9486,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._processSimple","ranges":[{"startOffset":9777,"endOffset":10523,"count":2},{"startOffset":9971,"endOffset":10012,"count":1},{"startOffset":10094,"endOffset":10100,"count":0},{"startOffset":10137,"endOffset":10153,"count":0},{"startOffset":10155,"endOffset":10384,"count":0},{"startOffset":10426,"endOffset":10461,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._stat","ranges":[{"startOffset":10594,"endOffset":11774,"count":2},{"startOffset":10712,"endOffset":10724,"count":0},{"startOffset":10772,"endOffset":11102,"count":0},{"startOffset":11232,"endOffset":11382,"count":0},{"startOffset":11425,"endOffset":11531,"count":0},{"startOffset":11653,"endOffset":11660,"count":0},{"startOffset":11727,"endOffset":11742,"count":0},{"startOffset":11748,"endOffset":11760,"count":0}],"isBlockCoverage":true},{"functionName":"GlobSync._mark","ranges":[{"startOffset":11803,"endOffset":11849,"count":4}],"isBlockCoverage":true},{"functionName":"GlobSync._makeAbs","ranges":[{"startOffset":11881,"endOffset":11930,"count":10}],"isBlockCoverage":true}]},{"scriptId":"257","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/node_modules/glob/common.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6048,"count":1}],"isBlockCoverage":true},{"functionName":"ownProp","ranges":[{"startOffset":195,"endOffset":286,"count":12}],"isBlockCoverage":true},{"functionName":"alphasort","ranges":[{"startOffset":457,"endOffset":520,"count":1}],"isBlockCoverage":true},{"functionName":"setupIgnores","ranges":[{"startOffset":522,"endOffset":746,"count":2},{"startOffset":639,"endOffset":666,"count":0},{"startOffset":694,"endOffset":744,"count":0}],"isBlockCoverage":true},{"functionName":"ignoreMap","ranges":[{"startOffset":796,"endOffset":1089,"count":0}],"isBlockCoverage":false},{"functionName":"setopts","ranges":[{"startOffset":1091,"endOffset":3295,"count":2},{"startOffset":1155,"endOffset":1167,"count":0},{"startOffset":1241,"endOffset":1271,"count":0},{"startOffset":1273,"endOffset":1401,"count":0},{"startOffset":1749,"endOffset":1765,"count":1},{"startOffset":2419,"endOffset":2512,"count":0},{"startOffset":2650,"endOffset":2691,"count":0},{"startOffset":2891,"endOffset":2916,"count":0},{"startOffset":2957,"endOffset":3002,"count":0}],"isBlockCoverage":true},{"functionName":"finish","ranges":[{"startOffset":3297,"endOffset":4614,"count":1},{"startOffset":3364,"endOffset":3368,"count":0},{"startOffset":3539,"endOffset":3775,"count":0},{"startOffset":3862,"endOffset":3884,"count":0},{"startOffset":4171,"endOffset":4212,"count":2},{"startOffset":4522,"endOffset":4592,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3914,"endOffset":3962,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4258,"endOffset":4479,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4539,"endOffset":4591,"count":0}],"isBlockCoverage":false},{"functionName":"mark","ranges":[{"startOffset":4616,"endOffset":5067,"count":4},{"startOffset":4819,"endOffset":4828,"count":0},{"startOffset":4836,"endOffset":4844,"count":0},{"startOffset":4881,"endOffset":4899,"count":0},{"startOffset":4918,"endOffset":5049,"count":0}],"isBlockCoverage":true},{"functionName":"makeAbs","ranges":[{"startOffset":5088,"endOffset":5443,"count":16},{"startOffset":5158,"endOffset":5197,"count":0},{"startOffset":5234,"endOffset":5251,"count":0},{"startOffset":5278,"endOffset":5319,"count":0},{"startOffset":5398,"endOffset":5427,"count":0}],"isBlockCoverage":true},{"functionName":"isIgnored","ranges":[{"startOffset":5639,"endOffset":5853,"count":2},{"startOffset":5716,"endOffset":5852,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5744,"endOffset":5850,"count":0}],"isBlockCoverage":false},{"functionName":"childrenIgnored","ranges":[{"startOffset":5855,"endOffset":6047,"count":6},{"startOffset":5938,"endOffset":6046,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5966,"endOffset":6044,"count":0}],"isBlockCoverage":false}]},{"scriptId":"258","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/inflight/inflight.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1365,"count":1}],"isBlockCoverage":true},{"functionName":"inflight","ranges":[{"startOffset":125,"endOffset":274,"count":0}],"isBlockCoverage":false},{"functionName":"makeres","ranges":[{"startOffset":276,"endOffset":1223,"count":0}],"isBlockCoverage":false},{"functionName":"slice","ranges":[{"startOffset":1225,"endOffset":1364,"count":0}],"isBlockCoverage":false}]},{"scriptId":"259","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/wrappy/wrappy.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":905,"count":1}],"isBlockCoverage":true},{"functionName":"wrappy","ranges":[{"startOffset":301,"endOffset":904,"count":3},{"startOffset":344,"endOffset":365,"count":0},{"startOffset":403,"endOffset":447,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":475,"endOffset":516,"count":0}],"isBlockCoverage":false},{"functionName":"wrapper","ranges":[{"startOffset":539,"endOffset":902,"count":0}],"isBlockCoverage":false}]},{"scriptId":"260","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/once/once.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":935,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":123,"endOffset":427,"count":0}],"isBlockCoverage":false},{"functionName":"once","ranges":[{"startOffset":430,"endOffset":610,"count":1}],"isBlockCoverage":true},{"functionName":"f","ranges":[{"startOffset":461,"endOffset":578,"count":0}],"isBlockCoverage":false},{"functionName":"onceStrict","ranges":[{"startOffset":612,"endOffset":934,"count":0}],"isBlockCoverage":false}]},{"scriptId":"261","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/plugin-loader.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8391,"count":1}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":611,"endOffset":923,"count":0}],"isBlockCoverage":false},{"functionName":"finalize","ranges":[{"startOffset":929,"endOffset":1838,"count":0}],"isBlockCoverage":false},{"functionName":"validate","ranges":[{"startOffset":2005,"endOffset":2484,"count":0}],"isBlockCoverage":false},{"functionName":"validate","ranges":[{"startOffset":2660,"endOffset":3142,"count":0}],"isBlockCoverage":false},{"functionName":"PluginLoader","ranges":[{"startOffset":3633,"endOffset":4623,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4435,"endOffset":4487,"count":3}],"isBlockCoverage":true},{"functionName":"register","ranges":[{"startOffset":4723,"endOffset":5868,"count":3},{"startOffset":4798,"endOffset":4924,"count":0},{"startOffset":4956,"endOffset":5097,"count":0},{"startOffset":5181,"endOffset":5312,"count":0},{"startOffset":5405,"endOffset":5418,"count":0},{"startOffset":5468,"endOffset":5630,"count":0}],"isBlockCoverage":true},{"functionName":"load","ranges":[{"startOffset":6119,"endOffset":6956,"count":0}],"isBlockCoverage":false},{"functionName":"finalize","ranges":[{"startOffset":7385,"endOffset":7889,"count":1},{"startOffset":7528,"endOffset":7801,"count":3},{"startOffset":7560,"endOffset":7795,"count":0}],"isBlockCoverage":true},{"functionName":"create","ranges":[{"startOffset":8016,"endOffset":8126,"count":1}],"isBlockCoverage":true}]},{"scriptId":"262","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/config.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2624,"count":1}],"isBlockCoverage":true},{"functionName":"yaml","ranges":[{"startOffset":880,"endOffset":950,"count":0}],"isBlockCoverage":false},{"functionName":"js","ranges":[{"startOffset":958,"endOffset":1365,"count":0}],"isBlockCoverage":false},{"functionName":"json","ranges":[{"startOffset":1375,"endOffset":1480,"count":0}],"isBlockCoverage":false},{"functionName":"exports.loadConfig","ranges":[{"startOffset":1723,"endOffset":2244,"count":0}],"isBlockCoverage":false},{"functionName":"exports.findConfig","ranges":[{"startOffset":2437,"endOffset":2622,"count":1},{"startOffset":2539,"endOffset":2601,"count":0}],"isBlockCoverage":true}]},{"scriptId":"263","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/find-up/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1940,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":185,"endOffset":1023,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":1048,"endOffset":1825,"count":2},{"startOffset":1116,"endOffset":1121,"count":1},{"startOffset":1559,"endOffset":1823,"count":8},{"startOffset":1650,"endOffset":1666,"count":0},{"startOffset":1685,"endOffset":1736,"count":1},{"startOffset":1736,"endOffset":1764,"count":7},{"startOffset":1764,"endOffset":1780,"count":1},{"startOffset":1780,"endOffset":1823,"count":6}],"isBlockCoverage":true},{"functionName":"runMatcher","ranges":[{"startOffset":1216,"endOffset":1491,"count":8},{"startOffset":1323,"endOffset":1490,"count":0}],"isBlockCoverage":true}]},{"scriptId":"264","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/locate-path/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1329,"count":1}],"isBlockCoverage":true},{"functionName":"checkType","ranges":[{"startOffset":288,"endOffset":414,"count":8},{"startOffset":358,"endOffset":413,"count":0}],"isBlockCoverage":true},{"functionName":"matchType","ranges":[{"startOffset":434,"endOffset":498,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":518,"endOffset":920,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":945,"endOffset":1327,"count":8},{"startOffset":1133,"endOffset":1147,"count":0},{"startOffset":1178,"endOffset":1325,"count":43},{"startOffset":1285,"endOffset":1309,"count":1},{"startOffset":1314,"endOffset":1322,"count":42},{"startOffset":1325,"endOffset":1326,"count":7}],"isBlockCoverage":true}]},{"scriptId":"265","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/p-locate/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1157,"count":1}],"isBlockCoverage":true},{"functionName":"EndError","ranges":[{"startOffset":82,"endOffset":138,"count":0}],"isBlockCoverage":false},{"functionName":"testElement","ranges":[{"startOffset":213,"endOffset":261,"count":0}],"isBlockCoverage":false},{"functionName":"finder","ranges":[{"startOffset":347,"endOffset":490,"count":0}],"isBlockCoverage":false},{"functionName":"pLocate","ranges":[{"startOffset":509,"endOffset":1128,"count":0}],"isBlockCoverage":false}]},{"scriptId":"266","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/p-limit/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1521,"count":1}],"isBlockCoverage":true},{"functionName":"pLimit","ranges":[{"startOffset":68,"endOffset":1493,"count":0}],"isBlockCoverage":false}]},{"scriptId":"267","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yocto-queue/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":949,"count":1}],"isBlockCoverage":true},{"functionName":"Node","ranges":[{"startOffset":38,"endOffset":159,"count":0}],"isBlockCoverage":false},{"functionName":"Queue","ranges":[{"startOffset":277,"endOffset":311,"count":0}],"isBlockCoverage":false},{"functionName":"enqueue","ranges":[{"startOffset":314,"endOffset":511,"count":0}],"isBlockCoverage":false},{"functionName":"dequeue","ranges":[{"startOffset":514,"endOffset":664,"count":0}],"isBlockCoverage":false},{"functionName":"clear","ranges":[{"startOffset":667,"endOffset":749,"count":0}],"isBlockCoverage":false},{"functionName":"get size","ranges":[{"startOffset":752,"endOffset":788,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":791,"endOffset":921,"count":0}],"isBlockCoverage":false}]},{"scriptId":"268","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/path-exists/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":347,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":134,"endOffset":230,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":255,"endOffset":345,"count":0}],"isBlockCoverage":false}]},{"scriptId":"269","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/node-flags.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2844,"count":1}],"isBlockCoverage":true},{"functionName":"exports.isNodeFlag","ranges":[{"startOffset":1079,"endOffset":1831,"count":19},{"startOffset":1125,"endOffset":1360,"count":7},{"startOffset":1225,"endOffset":1252,"count":4},{"startOffset":1252,"endOffset":1360,"count":3},{"startOffset":1360,"endOffset":1595,"count":15},{"startOffset":1595,"endOffset":1607,"count":1},{"startOffset":1608,"endOffset":1630,"count":1},{"startOffset":1632,"endOffset":1659,"count":15},{"startOffset":1660,"endOffset":1824,"count":15}],"isBlockCoverage":true},{"functionName":"exports.impliesNoTimeouts","ranges":[{"startOffset":2107,"endOffset":2135,"count":0}],"isBlockCoverage":false},{"functionName":"exports.unparseNodeFlags","ranges":[{"startOffset":2636,"endOffset":2842,"count":0}],"isBlockCoverage":false}]},{"scriptId":"270","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yargs-unparser/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5238,"count":1}],"isBlockCoverage":true},{"functionName":"isAlias","ranges":[{"startOffset":175,"endOffset":354,"count":0}],"isBlockCoverage":false},{"functionName":"hasDefaultValue","ranges":[{"startOffset":356,"endOffset":442,"count":0}],"isBlockCoverage":false},{"functionName":"isCamelCased","ranges":[{"startOffset":444,"endOffset":639,"count":0}],"isBlockCoverage":false},{"functionName":"keyToFlag","ranges":[{"startOffset":641,"endOffset":722,"count":0}],"isBlockCoverage":false},{"functionName":"parseCommand","ranges":[{"startOffset":724,"endOffset":1760,"count":0}],"isBlockCoverage":false},{"functionName":"unparseOption","ranges":[{"startOffset":1762,"endOffset":2598,"count":0}],"isBlockCoverage":false},{"functionName":"unparsePositional","ranges":[{"startOffset":2600,"endOffset":3641,"count":0}],"isBlockCoverage":false},{"functionName":"unparseOptions","ranges":[{"startOffset":3643,"endOffset":4320,"count":0}],"isBlockCoverage":false},{"functionName":"unparseEndOfOptions","ranges":[{"startOffset":4322,"endOffset":4477,"count":0}],"isBlockCoverage":false},{"functionName":"unparser","ranges":[{"startOffset":4544,"endOffset":5209,"count":0}],"isBlockCoverage":false}]},{"scriptId":"271","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/flat/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3970,"count":1}],"isBlockCoverage":true},{"functionName":"isBuffer","ranges":[{"startOffset":82,"endOffset":238,"count":0}],"isBlockCoverage":false},{"functionName":"keyIdentity","ranges":[{"startOffset":240,"endOffset":283,"count":0}],"isBlockCoverage":false},{"functionName":"flatten","ranges":[{"startOffset":285,"endOffset":1284,"count":0}],"isBlockCoverage":false},{"functionName":"unflatten","ranges":[{"startOffset":1286,"endOffset":3969,"count":0}],"isBlockCoverage":false}]},{"scriptId":"272","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yargs-unparser/node_modules/camelcase/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3272,"count":1}],"isBlockCoverage":true},{"functionName":"preserveCamelCase","ranges":[{"startOffset":464,"endOffset":1410,"count":0}],"isBlockCoverage":false},{"functionName":"preserveConsecutiveUppercase","ranges":[{"startOffset":1450,"endOffset":1573,"count":0}],"isBlockCoverage":false},{"functionName":"postProcess","ranges":[{"startOffset":1596,"endOffset":1855,"count":0}],"isBlockCoverage":false},{"functionName":"camelCase","ranges":[{"startOffset":1876,"endOffset":3157,"count":0}],"isBlockCoverage":false}]},{"scriptId":"273","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yargs-unparser/node_modules/decamelize/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":446,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":444,"count":0}],"isBlockCoverage":false}]},{"scriptId":"274","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-plain-obj/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":245,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":243,"count":0}],"isBlockCoverage":false}]},{"scriptId":"275","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/cli.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2921,"count":1},{"startOffset":2899,"endOffset":2920,"count":0}],"isBlockCoverage":true},{"functionName":"exports.main","ranges":[{"startOffset":1379,"endOffset":2714,"count":1},{"startOffset":1742,"endOffset":1762,"count":0},{"startOffset":2465,"endOffset":2469,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2004,"endOffset":2226,"count":0}],"isBlockCoverage":false}]},{"scriptId":"276","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yargs/yargs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":457,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.applyExtends","ranges":[{"startOffset":275,"endOffset":375,"count":0}],"isBlockCoverage":false}]},{"scriptId":"277","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yargs/build/index.cjs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":107596,"count":1},{"startOffset":106038,"endOffset":106046,"count":0},{"startOffset":106089,"endOffset":106097,"count":0},{"startOffset":106144,"endOffset":106159,"count":0},{"startOffset":106537,"endOffset":106543,"count":0},{"startOffset":106884,"endOffset":106928,"count":0},{"startOffset":107069,"endOffset":107253,"count":0}],"isBlockCoverage":true},{"functionName":"YError","ranges":[{"startOffset":81,"endOffset":219,"count":0}],"isBlockCoverage":false},{"functionName":"applyExtends","ranges":[{"startOffset":268,"endOffset":1455,"count":1},{"startOffset":437,"endOffset":1299,"count":0},{"startOffset":1367,"endOffset":1401,"count":0}],"isBlockCoverage":true},{"functionName":"checkForCircularExtends","ranges":[{"startOffset":1456,"endOffset":1642,"count":0}],"isBlockCoverage":false},{"functionName":"getPathToDefaultConfig","ranges":[{"startOffset":1643,"endOffset":1746,"count":0}],"isBlockCoverage":false},{"functionName":"mergeDeep","ranges":[{"startOffset":1747,"endOffset":2225,"count":0}],"isBlockCoverage":false},{"functionName":"parseCommand","ranges":[{"startOffset":2227,"endOffset":3279,"count":249},{"startOffset":2519,"endOffset":2566,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2718,"endOffset":3249,"count":498},{"startOffset":2833,"endOffset":2865,"count":2},{"startOffset":2879,"endOffset":2895,"count":2},{"startOffset":2925,"endOffset":3077,"count":218},{"startOffset":3077,"endOffset":3243,"count":280}],"isBlockCoverage":true},{"functionName":"argsert","ranges":[{"startOffset":3360,"endOffset":5273,"count":251},{"startOffset":3829,"endOffset":3867,"count":291},{"startOffset":3881,"endOffset":3892,"count":48},{"startOffset":3924,"endOffset":3938,"count":8},{"startOffset":3985,"endOffset":4124,"count":0},{"startOffset":4240,"endOffset":4367,"count":0},{"startOffset":5219,"endOffset":5271,"count":0}],"isBlockCoverage":true},{"functionName":"parseArgs","ranges":[{"startOffset":3401,"endOffset":3648,"count":251},{"startOffset":3476,"endOffset":3522,"count":6},{"startOffset":3535,"endOffset":3641,"count":245}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4400,"endOffset":4756,"count":279},{"startOffset":4663,"endOffset":4719,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4555,"endOffset":4600,"count":611},{"startOffset":4585,"endOffset":4600,"count":332}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4791,"endOffset":5206,"count":216},{"startOffset":4856,"endOffset":4863,"count":62},{"startOffset":4863,"endOffset":5113,"count":154},{"startOffset":5113,"endOffset":5169,"count":0},{"startOffset":5169,"endOffset":5205,"count":154}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5005,"endOffset":5050,"count":201},{"startOffset":5035,"endOffset":5050,"count":55}],"isBlockCoverage":true},{"functionName":"guessType","ranges":[{"startOffset":5274,"endOffset":5442,"count":433},{"startOffset":5328,"endOffset":5359,"count":32},{"startOffset":5359,"endOffset":5417,"count":401},{"startOffset":5387,"endOffset":5417,"count":0},{"startOffset":5417,"endOffset":5441,"count":401}],"isBlockCoverage":true},{"functionName":"argumentTypeError","ranges":[{"startOffset":5443,"endOffset":5661,"count":0}],"isBlockCoverage":false},{"functionName":"isPromise","ranges":[{"startOffset":5663,"endOffset":5810,"count":7},{"startOffset":5756,"endOffset":5806,"count":4}],"isBlockCoverage":true},{"functionName":"assertNotStrictEqual","ranges":[{"startOffset":5812,"endOffset":5937,"count":6}],"isBlockCoverage":true},{"functionName":"assertSingleKey","ranges":[{"startOffset":5938,"endOffset":6034,"count":0}],"isBlockCoverage":false},{"functionName":"objectKeys","ranges":[{"startOffset":6035,"endOffset":6098,"count":30}],"isBlockCoverage":true},{"functionName":"objFilter","ranges":[{"startOffset":6100,"endOffset":6334,"count":26}],"isBlockCoverage":true},{"functionName":"filter","ranges":[{"startOffset":6143,"endOffset":6153,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6210,"endOffset":6314,"count":9},{"startOffset":6259,"endOffset":6308,"count":8}],"isBlockCoverage":true},{"functionName":"globalMiddlewareFactory","ranges":[{"startOffset":6336,"endOffset":7171,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6409,"endOffset":7168,"count":1},{"startOffset":6599,"endOffset":6964,"count":0}],"isBlockCoverage":true},{"functionName":"commandMiddlewareFactory","ranges":[{"startOffset":7172,"endOffset":7409,"count":4},{"startOffset":7273,"endOffset":7408,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7307,"endOffset":7405,"count":0}],"isBlockCoverage":false},{"functionName":"applyMiddleware","ranges":[{"startOffset":7410,"endOffset":8413,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7629,"endOffset":8403,"count":2},{"startOffset":7719,"endOffset":7783,"count":1},{"startOffset":7783,"endOffset":8056,"count":0},{"startOffset":8056,"endOffset":8397,"count":1},{"startOffset":8156,"endOffset":8176,"count":0},{"startOffset":8194,"endOffset":8222,"count":0},{"startOffset":8358,"endOffset":8386,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7830,"endOffset":7947,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7971,"endOffset":8044,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8290,"endOffset":8340,"count":1}],"isBlockCoverage":true},{"functionName":"getProcessArgvBinIndex","ranges":[{"startOffset":8415,"endOffset":8516,"count":1},{"startOffset":8491,"endOffset":8500,"count":0}],"isBlockCoverage":true},{"functionName":"isBundledElectronApp","ranges":[{"startOffset":8517,"endOffset":8603,"count":1},{"startOffset":8578,"endOffset":8600,"count":0}],"isBlockCoverage":true},{"functionName":"isElectronApp","ranges":[{"startOffset":8604,"endOffset":8672,"count":1}],"isBlockCoverage":true},{"functionName":"hideBin","ranges":[{"startOffset":8673,"endOffset":8752,"count":0}],"isBlockCoverage":false},{"functionName":"getProcessArgvBin","ranges":[{"startOffset":8753,"endOffset":8836,"count":1}],"isBlockCoverage":true},{"functionName":"whichModule","ranges":[{"startOffset":8968,"endOffset":9273,"count":0}],"isBlockCoverage":false},{"functionName":"command","ranges":[{"startOffset":9314,"endOffset":23717,"count":1}],"isBlockCoverage":true},{"functionName":"addHandler","ranges":[{"startOffset":9501,"endOffset":12153,"count":4},{"startOffset":9715,"endOffset":9729,"count":2},{"startOffset":9763,"endOffset":10015,"count":1},{"startOffset":9863,"endOffset":10005,"count":0},{"startOffset":10015,"endOffset":10686,"count":3},{"startOffset":10066,"endOffset":10460,"count":2},{"startOffset":10121,"endOffset":10155,"count":1},{"startOffset":10202,"endOffset":10219,"count":0},{"startOffset":10266,"endOffset":10315,"count":0},{"startOffset":10460,"endOffset":10686,"count":1},{"startOffset":10515,"endOffset":10686,"count":0},{"startOffset":10686,"endOffset":12147,"count":2},{"startOffset":11191,"endOffset":11203,"count":0},{"startOffset":11221,"endOffset":11246,"count":0},{"startOffset":11274,"endOffset":11463,"count":1},{"startOffset":11870,"endOffset":11875,"count":0},{"startOffset":12092,"endOffset":12137,"count":1}],"isBlockCoverage":true},{"functionName":"handler","ranges":[{"startOffset":9719,"endOffset":9728,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10813,"endOffset":10845,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10960,"endOffset":11145,"count":3},{"startOffset":11011,"endOffset":11102,"count":1},{"startOffset":11102,"endOffset":11144,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11492,"endOffset":11569,"count":0}],"isBlockCoverage":false},{"functionName":"addDirectory","ranges":[{"startOffset":12179,"endOffset":12983,"count":0}],"isBlockCoverage":false},{"functionName":"moduleName","ranges":[{"startOffset":12989,"endOffset":13214,"count":0}],"isBlockCoverage":false},{"functionName":"commandFromFilename","ranges":[{"startOffset":13219,"endOffset":13339,"count":0}],"isBlockCoverage":false},{"functionName":"extractDesc","ranges":[{"startOffset":13344,"endOffset":13639,"count":2},{"startOffset":13459,"endOffset":13611,"count":3},{"startOffset":13502,"endOffset":13519,"count":1},{"startOffset":13537,"endOffset":13549,"count":2},{"startOffset":13549,"endOffset":13611,"count":1},{"startOffset":13611,"endOffset":13638,"count":0}],"isBlockCoverage":true},{"functionName":"self.getCommands","ranges":[{"startOffset":13663,"endOffset":13720,"count":2}],"isBlockCoverage":true},{"functionName":"self.getCommandHandlers","ranges":[{"startOffset":13752,"endOffset":13766,"count":0}],"isBlockCoverage":false},{"functionName":"self.hasDefaultCommand","ranges":[{"startOffset":13797,"endOffset":13819,"count":1}],"isBlockCoverage":true},{"functionName":"runCommand","ranges":[{"startOffset":13843,"endOffset":18015,"count":1},{"startOffset":14297,"endOffset":14430,"count":0},{"startOffset":14678,"endOffset":14685,"count":0},{"startOffset":15081,"endOffset":15734,"count":0},{"startOffset":16691,"endOffset":16791,"count":0},{"startOffset":17547,"endOffset":17699,"count":0},{"startOffset":17731,"endOffset":17832,"count":0},{"startOffset":17930,"endOffset":17983,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":15518,"endOffset":15594,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16639,"endOffset":16675,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17027,"endOffset":17178,"count":1},{"startOffset":17084,"endOffset":17160,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17207,"endOffset":17407,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17435,"endOffset":17531,"count":1}],"isBlockCoverage":true},{"functionName":"shouldUpdateUsage","ranges":[{"startOffset":18021,"endOffset":18189,"count":1}],"isBlockCoverage":true},{"functionName":"usageFromParentCommandsCommandHandler","ranges":[{"startOffset":18194,"endOffset":18616,"count":1},{"startOffset":18350,"endOffset":18410,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18491,"endOffset":18551,"count":0}],"isBlockCoverage":false},{"functionName":"self.runDefaultBuilderOn","ranges":[{"startOffset":18648,"endOffset":19382,"count":0}],"isBlockCoverage":false},{"functionName":"populatePositionals","ranges":[{"startOffset":19388,"endOffset":20228,"count":1},{"startOffset":19758,"endOffset":19875,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20076,"endOffset":20087,"count":0}],"isBlockCoverage":false},{"functionName":"populatePositional","ranges":[{"startOffset":20233,"endOffset":20567,"count":1},{"startOffset":20442,"endOffset":20561,"count":0}],"isBlockCoverage":true},{"functionName":"postProcessPositionals","ranges":[{"startOffset":20572,"endOffset":22332,"count":1},{"startOffset":21436,"endOffset":21443,"count":0},{"startOffset":21711,"endOffset":21801,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21115,"endOffset":21391,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21159,"endOffset":21379,"count":1},{"startOffset":21260,"endOffset":21284,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21927,"endOffset":22010,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":22058,"endOffset":22314,"count":14},{"startOffset":22123,"endOffset":22300,"count":1},{"startOffset":22194,"endOffset":22232,"count":0}],"isBlockCoverage":true},{"functionName":"self.cmdToParseOptions","ranges":[{"startOffset":22362,"endOffset":23211,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":22602,"endOffset":22893,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":22928,"endOffset":23174,"count":1}],"isBlockCoverage":true},{"functionName":"self.reset","ranges":[{"startOffset":23230,"endOffset":23346,"count":1}],"isBlockCoverage":true},{"functionName":"self.freeze","ranges":[{"startOffset":23390,"endOffset":23510,"count":1}],"isBlockCoverage":true},{"functionName":"self.unfreeze","ranges":[{"startOffset":23532,"endOffset":23697,"count":1}],"isBlockCoverage":true},{"functionName":"isCommandBuilderDefinition","ranges":[{"startOffset":23718,"endOffset":23886,"count":1},{"startOffset":23805,"endOffset":23833,"count":0},{"startOffset":23834,"endOffset":23882,"count":0}],"isBlockCoverage":true},{"functionName":"isCommandAndAliases","ranges":[{"startOffset":23887,"endOffset":24039,"count":1},{"startOffset":23998,"endOffset":24037,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23941,"endOffset":23967,"count":2}],"isBlockCoverage":true},{"functionName":"isCommandBuilderCallback","ranges":[{"startOffset":24040,"endOffset":24128,"count":1}],"isBlockCoverage":true},{"functionName":"isCommandBuilderOptionDefinitions","ranges":[{"startOffset":24129,"endOffset":24224,"count":0}],"isBlockCoverage":false},{"functionName":"isCommandHandlerDefinition","ranges":[{"startOffset":24225,"endOffset":24328,"count":3},{"startOffset":24303,"endOffset":24325,"count":2}],"isBlockCoverage":true},{"functionName":"setBlocking","ranges":[{"startOffset":24330,"endOffset":24700,"count":0}],"isBlockCoverage":false},{"functionName":"usage","ranges":[{"startOffset":24702,"endOffset":43891,"count":1}],"isBlockCoverage":true},{"functionName":"failFn","ranges":[{"startOffset":24823,"endOffset":24872,"count":1}],"isBlockCoverage":true},{"functionName":"showHelpOnFailFn","ranges":[{"startOffset":24959,"endOffset":25277,"count":0}],"isBlockCoverage":false},{"functionName":"fail","ranges":[{"startOffset":25326,"endOffset":26442,"count":0}],"isBlockCoverage":false},{"functionName":"self.usage","ranges":[{"startOffset":26513,"endOffset":26763,"count":1},{"startOffset":26563,"endOffset":26658,"count":0},{"startOffset":26728,"endOffset":26733,"count":0}],"isBlockCoverage":true},{"functionName":"self.getUsage","ranges":[{"startOffset":26785,"endOffset":26821,"count":1}],"isBlockCoverage":true},{"functionName":"self.getUsageDisabled","ranges":[{"startOffset":26851,"endOffset":26894,"count":1}],"isBlockCoverage":true},{"functionName":"self.getPositionalGroupName","ranges":[{"startOffset":26930,"endOffset":26978,"count":82}],"isBlockCoverage":true},{"functionName":"self.example","ranges":[{"startOffset":27022,"endOffset":27100,"count":0}],"isBlockCoverage":false},{"functionName":"command","ranges":[{"startOffset":27144,"endOffset":27478,"count":2},{"startOffset":27244,"endOffset":27391,"count":1},{"startOffset":27432,"endOffset":27437,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27282,"endOffset":27379,"count":0}],"isBlockCoverage":false},{"functionName":"self.getCommands","ranges":[{"startOffset":27503,"endOffset":27517,"count":0}],"isBlockCoverage":false},{"functionName":"describe","ranges":[{"startOffset":27566,"endOffset":27994,"count":47},{"startOffset":27641,"endOffset":27745,"count":0},{"startOffset":27794,"endOffset":27919,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27673,"endOffset":27733,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":27839,"endOffset":27907,"count":0}],"isBlockCoverage":false},{"functionName":"self.getDescriptions","ranges":[{"startOffset":28023,"endOffset":28041,"count":2}],"isBlockCoverage":true},{"functionName":"self.epilog","ranges":[{"startOffset":28083,"endOffset":28124,"count":1}],"isBlockCoverage":true},{"functionName":"self.wrap","ranges":[{"startOffset":28181,"endOffset":28241,"count":1}],"isBlockCoverage":true},{"functionName":"getWrap","ranges":[{"startOffset":28247,"endOffset":28390,"count":1},{"startOffset":28290,"endOffset":28363,"count":0}],"isBlockCoverage":true},{"functionName":"self.deferY18nLookup","ranges":[{"startOffset":28472,"endOffset":28506,"count":3}],"isBlockCoverage":true},{"functionName":"help","ranges":[{"startOffset":28524,"endOffset":38490,"count":1},{"startOffset":28585,"endOffset":28610,"count":0},{"startOffset":28720,"endOffset":28750,"count":0},{"startOffset":29989,"endOffset":30322,"count":0},{"startOffset":30362,"endOffset":32088,"count":0},{"startOffset":32143,"endOffset":32148,"count":0},{"startOffset":32194,"endOffset":32199,"count":0},{"startOffset":37472,"endOffset":38238,"count":0},{"startOffset":38271,"endOffset":38434,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29365,"endOffset":29476,"count":51}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29714,"endOffset":29947,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":30698,"endOffset":30732,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":30778,"endOffset":32054,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":32229,"endOffset":32355,"count":43}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32297,"endOffset":32354,"count":1720},{"startOffset":32328,"endOffset":32333,"count":731}],"isBlockCoverage":true},{"functionName":"isLongSwitch","ranges":[{"startOffset":32575,"endOffset":32606,"count":123}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32680,"endOffset":32721,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32740,"endOffset":33283,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":32874,"endOffset":33221,"count":43},{"startOffset":32948,"endOffset":32959,"count":22},{"startOffset":32959,"endOffset":33048,"count":21},{"startOffset":33048,"endOffset":33179,"count":840},{"startOffset":33100,"endOffset":33105,"count":357},{"startOffset":33145,"endOffset":33161,"count":0},{"startOffset":33179,"endOffset":33220,"count":21}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33305,"endOffset":33354,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33373,"endOffset":34439,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33461,"endOffset":34363,"count":43},{"startOffset":33557,"endOffset":33562,"count":21}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33589,"endOffset":34085,"count":67},{"startOffset":33690,"endOffset":33700,"count":1},{"startOffset":33700,"endOffset":34067,"count":66},{"startOffset":33808,"endOffset":33916,"count":0},{"startOffset":33993,"endOffset":33999,"count":47},{"startOffset":34032,"endOffset":34037,"count":19}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34113,"endOffset":34287,"count":28},{"startOffset":34187,"endOffset":34190,"count":5},{"startOffset":34211,"endOffset":34287,"count":23},{"startOffset":34255,"endOffset":34258,"count":2},{"startOffset":34283,"endOffset":34287,"count":21}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34512,"endOffset":34574,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34594,"endOffset":34685,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34650,"endOffset":34684,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34773,"endOffset":34835,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34862,"endOffset":35142,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34937,"endOffset":35126,"count":42},{"startOffset":34999,"endOffset":35108,"count":23}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":35187,"endOffset":37440,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":35300,"endOffset":37406,"count":43},{"startOffset":35401,"endOffset":35406,"count":0},{"startOffset":35523,"endOffset":35579,"count":0},{"startOffset":35651,"endOffset":35679,"count":23},{"startOffset":35749,"endOffset":35775,"count":0},{"startOffset":35846,"endOffset":35873,"count":8},{"startOffset":35947,"endOffset":35974,"count":2},{"startOffset":36044,"endOffset":36070,"count":10},{"startOffset":36141,"endOffset":36168,"count":2},{"startOffset":36466,"endOffset":36507,"count":0},{"startOffset":36609,"endOffset":36632,"count":0},{"startOffset":36725,"endOffset":36796,"count":0},{"startOffset":37341,"endOffset":37392,"count":0}],"isBlockCoverage":true},{"functionName":"deprecatedExtra","ranges":[{"startOffset":36209,"endOffset":36363,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":37540,"endOffset":37631,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":37663,"endOffset":38204,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":38324,"endOffset":38364,"count":0}],"isBlockCoverage":false},{"functionName":"maxWidth","ranges":[{"startOffset":38496,"endOffset":38973,"count":43}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":38647,"endOffset":38655,"count":441}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":38690,"endOffset":38843,"count":441},{"startOffset":38752,"endOffset":38784,"count":0}],"isBlockCoverage":true},{"functionName":"normalizeAliases","ranges":[{"startOffset":38978,"endOffset":40022,"count":1},{"startOffset":39148,"endOffset":39153,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39163,"endOffset":40014,"count":23}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39211,"endOffset":40002,"count":25},{"startOffset":39283,"endOffset":39323,"count":0},{"startOffset":39390,"endOffset":39438,"count":0},{"startOffset":39512,"endOffset":39531,"count":0},{"startOffset":39603,"endOffset":39620,"count":0},{"startOffset":39693,"endOffset":39711,"count":0},{"startOffset":39787,"endOffset":39808,"count":0},{"startOffset":39880,"endOffset":39897,"count":0},{"startOffset":39970,"endOffset":39988,"count":0}],"isBlockCoverage":true},{"functionName":"self.cacheHelpMessage","ranges":[{"startOffset":40078,"endOffset":40138,"count":1}],"isBlockCoverage":true},{"functionName":"self.clearCachedHelpMessage","ranges":[{"startOffset":40174,"endOffset":40232,"count":1}],"isBlockCoverage":true},{"functionName":"addUngroupedKeys","ranges":[{"startOffset":40238,"endOffset":40737,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":40397,"endOffset":40478,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":40502,"endOffset":40701,"count":43},{"startOffset":40628,"endOffset":40691,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":40591,"endOffset":40625,"count":47}],"isBlockCoverage":true},{"functionName":"filterHiddenOptions","ranges":[{"startOffset":40742,"endOffset":40918,"count":96},{"startOffset":40844,"endOffset":40910,"count":2}],"isBlockCoverage":true},{"functionName":"self.showHelp","ranges":[{"startOffset":40939,"endOffset":41158,"count":0}],"isBlockCoverage":false},{"functionName":"self.functionDescription","ranges":[{"startOffset":41191,"endOffset":41377,"count":0}],"isBlockCoverage":false},{"functionName":"stringifiedValues","ranges":[{"startOffset":41408,"endOffset":41806,"count":0}],"isBlockCoverage":false},{"functionName":"defaultString","ranges":[{"startOffset":41812,"endOffset":42459,"count":43},{"startOffset":41940,"endOffset":41962,"count":35},{"startOffset":41976,"endOffset":41988,"count":30},{"startOffset":41988,"endOffset":42021,"count":13},{"startOffset":42021,"endOffset":42074,"count":5},{"startOffset":42074,"endOffset":42424,"count":8},{"startOffset":42142,"endOffset":42227,"count":2},{"startOffset":42244,"endOffset":42338,"count":3},{"startOffset":42355,"endOffset":42400,"count":3},{"startOffset":42424,"endOffset":42458,"count":13}],"isBlockCoverage":true},{"functionName":"windowWidth","ranges":[{"startOffset":42464,"endOffset":42690,"count":0}],"isBlockCoverage":false},{"functionName":"self.version","ranges":[{"startOffset":42734,"endOffset":42771,"count":3}],"isBlockCoverage":true},{"functionName":"self.showVersion","ranges":[{"startOffset":42796,"endOffset":42889,"count":0}],"isBlockCoverage":false},{"functionName":"reset","ranges":[{"startOffset":42908,"endOffset":43213,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":43164,"endOffset":43184,"count":2}],"isBlockCoverage":true},{"functionName":"freeze","ranges":[{"startOffset":43257,"endOffset":43507,"count":1}],"isBlockCoverage":true},{"functionName":"unfreeze","ranges":[{"startOffset":43529,"endOffset":43871,"count":1}],"isBlockCoverage":true},{"functionName":"isIndentedText","ranges":[{"startOffset":43892,"endOffset":43962,"count":1114}],"isBlockCoverage":true},{"functionName":"addIndentation","ranges":[{"startOffset":43963,"endOffset":44147,"count":23},{"startOffset":44043,"endOffset":44104,"count":0}],"isBlockCoverage":true},{"functionName":"getIndentation","ranges":[{"startOffset":44148,"endOffset":44237,"count":484},{"startOffset":44212,"endOffset":44230,"count":279},{"startOffset":44231,"endOffset":44234,"count":205}],"isBlockCoverage":true},{"functionName":"getText","ranges":[{"startOffset":44238,"endOffset":44316,"count":607},{"startOffset":44295,"endOffset":44306,"count":279},{"startOffset":44307,"endOffset":44313,"count":328}],"isBlockCoverage":true},{"functionName":"completion","ranges":[{"startOffset":45697,"endOffset":50817,"count":1},{"startOffset":46056,"endOffset":46104,"count":0}],"isBlockCoverage":true},{"functionName":"setParsed","ranges":[{"startOffset":45860,"endOffset":45928,"count":1}],"isBlockCoverage":true},{"functionName":"getCompletion","ranges":[{"startOffset":46132,"endOffset":50219,"count":0}],"isBlockCoverage":false},{"functionName":"generateCompletionScript","ranges":[{"startOffset":50257,"endOffset":50686,"count":0}],"isBlockCoverage":false},{"functionName":"self.registerFunction","ranges":[{"startOffset":50751,"endOffset":50797,"count":0}],"isBlockCoverage":false},{"functionName":"isSyncCompletionFunction","ranges":[{"startOffset":50818,"endOffset":50917,"count":0}],"isBlockCoverage":false},{"functionName":"levenshtein","ranges":[{"startOffset":50919,"endOffset":51642,"count":0}],"isBlockCoverage":false},{"functionName":"validation","ranges":[{"startOffset":51683,"endOffset":63616,"count":1}],"isBlockCoverage":true},{"functionName":"nonOptionCount","ranges":[{"startOffset":51828,"endOffset":53555,"count":1},{"startOffset":51982,"endOffset":52001,"count":0},{"startOffset":52112,"endOffset":52187,"count":0},{"startOffset":52189,"endOffset":53549,"count":0}],"isBlockCoverage":true},{"functionName":"positionalCount","ranges":[{"startOffset":53584,"endOffset":53872,"count":1},{"startOffset":53664,"endOffset":53866,"count":0}],"isBlockCoverage":true},{"functionName":"requiredArguments","ranges":[{"startOffset":53903,"endOffset":54878,"count":1},{"startOffset":54082,"endOffset":54321,"count":0},{"startOffset":54343,"endOffset":54872,"count":0}],"isBlockCoverage":true},{"functionName":"unknownArguments","ranges":[{"startOffset":54908,"endOffset":56092,"count":0}],"isBlockCoverage":false},{"functionName":"unknownCommands","ranges":[{"startOffset":56121,"endOffset":56838,"count":0}],"isBlockCoverage":false},{"functionName":"isValidAndSomeAliasIsNotNew","ranges":[{"startOffset":56879,"endOffset":57325,"count":0}],"isBlockCoverage":false},{"functionName":"limitedChoices","ranges":[{"startOffset":57353,"endOffset":58401,"count":1},{"startOffset":57526,"endOffset":58400,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":57561,"endOffset":58012,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":58187,"endOffset":58368,"count":0}],"isBlockCoverage":false},{"functionName":"check","ranges":[{"startOffset":58441,"endOffset":58549,"count":1}],"isBlockCoverage":true},{"functionName":"customChecks","ranges":[{"startOffset":58575,"endOffset":59234,"count":1},{"startOffset":58833,"endOffset":58952,"count":0},{"startOffset":58978,"endOffset":59071,"count":0},{"startOffset":59148,"endOffset":59218,"count":0}],"isBlockCoverage":true},{"functionName":"implies","ranges":[{"startOffset":59277,"endOffset":59940,"count":0}],"isBlockCoverage":false},{"functionName":"getImplied","ranges":[{"startOffset":59964,"endOffset":60017,"count":0}],"isBlockCoverage":false},{"functionName":"keyExists","ranges":[{"startOffset":60023,"endOffset":60422,"count":0}],"isBlockCoverage":false},{"functionName":"implications","ranges":[{"startOffset":60447,"endOffset":61176,"count":1},{"startOffset":60986,"endOffset":61170,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":60544,"endOffset":60953,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":61075,"endOffset":61129,"count":0}],"isBlockCoverage":false},{"functionName":"conflicts","ranges":[{"startOffset":61225,"endOffset":61837,"count":16},{"startOffset":61378,"endOffset":61492,"count":0},{"startOffset":61574,"endOffset":61628,"count":4},{"startOffset":61667,"endOffset":61742,"count":2},{"startOffset":61742,"endOffset":61821,"count":14}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":61417,"endOffset":61480,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":61699,"endOffset":61726,"count":12}],"isBlockCoverage":true},{"functionName":"self.getConflicting","ranges":[{"startOffset":61865,"endOffset":61882,"count":0}],"isBlockCoverage":false},{"functionName":"conflictingFn","ranges":[{"startOffset":61907,"endOffset":62329,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":61972,"endOffset":62321,"count":15},{"startOffset":62015,"endOffset":62311,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":62058,"endOffset":62295,"count":0}],"isBlockCoverage":false},{"functionName":"recommendCommands","ranges":[{"startOffset":62360,"endOffset":62981,"count":0}],"isBlockCoverage":false},{"functionName":"reset","ranges":[{"startOffset":63000,"endOffset":63231,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":63067,"endOffset":63087,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":63135,"endOffset":63155,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":63189,"endOffset":63202,"count":0}],"isBlockCoverage":false},{"functionName":"freeze","ranges":[{"startOffset":63275,"endOffset":63401,"count":1}],"isBlockCoverage":true},{"functionName":"unfreeze","ranges":[{"startOffset":63423,"endOffset":63596,"count":1}],"isBlockCoverage":true},{"functionName":"YargsWithShim","ranges":[{"startOffset":63630,"endOffset":63701,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs","ranges":[{"startOffset":63702,"endOffset":105257,"count":1},{"startOffset":64430,"endOffset":64502,"count":0},{"startOffset":64784,"endOffset":64921,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self.scriptName","ranges":[{"startOffset":64155,"endOffset":64273,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":64540,"endOffset":64665,"count":1},{"startOffset":64655,"endOffset":64658,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self.getContext","ranges":[{"startOffset":65023,"endOffset":65036,"count":2}],"isBlockCoverage":true},{"functionName":"Yargs.self.exit","ranges":[{"startOffset":65107,"endOffset":65244,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.completion","ranges":[{"startOffset":65302,"endOffset":65839,"count":0}],"isBlockCoverage":false},{"functionName":"resetOptions","ranges":[{"startOffset":65895,"endOffset":68249,"count":2},{"startOffset":65985,"endOffset":65990,"count":1},{"startOffset":66064,"endOffset":66079,"count":1},{"startOffset":66080,"endOffset":66084,"count":1},{"startOffset":66155,"endOffset":66178,"count":1},{"startOffset":66191,"endOffset":66195,"count":1},{"startOffset":67651,"endOffset":67679,"count":1},{"startOffset":67680,"endOffset":67707,"count":1},{"startOffset":67757,"endOffset":67790,"count":1},{"startOffset":67803,"endOffset":67844,"count":1},{"startOffset":67888,"endOffset":67907,"count":1},{"startOffset":67920,"endOffset":67984,"count":1},{"startOffset":68025,"endOffset":68085,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":66262,"endOffset":66414,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":66483,"endOffset":66707,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":67323,"endOffset":67418,"count":16},{"startOffset":67370,"endOffset":67375,"count":8}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":67384,"endOffset":67406,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":67451,"endOffset":67542,"count":22}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":67510,"endOffset":67530,"count":4}],"isBlockCoverage":true},{"functionName":"freeze","ranges":[{"startOffset":68304,"endOffset":68860,"count":1}],"isBlockCoverage":true},{"functionName":"unfreeze","ranges":[{"startOffset":68865,"endOffset":69563,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.boolean","ranges":[{"startOffset":69583,"endOffset":69738,"count":5}],"isBlockCoverage":true},{"functionName":"Yargs.self.array","ranges":[{"startOffset":69757,"endOffset":69910,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.number","ranges":[{"startOffset":69930,"endOffset":70084,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.normalize","ranges":[{"startOffset":70107,"endOffset":70264,"count":2}],"isBlockCoverage":true},{"functionName":"Yargs.self.count","ranges":[{"startOffset":70283,"endOffset":70436,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.string","ranges":[{"startOffset":70456,"endOffset":70610,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.requiresArg","ranges":[{"startOffset":70635,"endOffset":70968,"count":14},{"startOffset":70790,"endOffset":70826,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self.skipValidation","ranges":[{"startOffset":70996,"endOffset":71158,"count":0}],"isBlockCoverage":false},{"functionName":"populateParserHintArray","ranges":[{"startOffset":71164,"endOffset":71363,"count":10}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":71264,"endOffset":71355,"count":48}],"isBlockCoverage":true},{"functionName":"Yargs.self.nargs","ranges":[{"startOffset":71381,"endOffset":71595,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.choices","ranges":[{"startOffset":71616,"endOffset":71835,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.alias","ranges":[{"startOffset":71854,"endOffset":72069,"count":23}],"isBlockCoverage":true},{"functionName":"Yargs.self.default.self.defaults","ranges":[{"startOffset":72106,"endOffset":72786,"count":8},{"startOffset":72289,"endOffset":72408,"count":0},{"startOffset":72450,"endOffset":72673,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self.describe","ranges":[{"startOffset":72808,"endOffset":73003,"count":47}],"isBlockCoverage":true},{"functionName":"setKey","ranges":[{"startOffset":73009,"endOffset":73137,"count":47}],"isBlockCoverage":true},{"functionName":"demandOption","ranges":[{"startOffset":73142,"endOffset":73383,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.coerce","ranges":[{"startOffset":73440,"endOffset":73662,"count":6}],"isBlockCoverage":true},{"functionName":"populateParserHintSingleValueDictionary","ranges":[{"startOffset":73668,"endOffset":73891,"count":75}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":73810,"endOffset":73883,"count":75}],"isBlockCoverage":true},{"functionName":"populateParserHintArrayDictionary","ranges":[{"startOffset":73896,"endOffset":74148,"count":23}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":74032,"endOffset":74140,"count":22}],"isBlockCoverage":true},{"functionName":"populateParserHintDictionary","ranges":[{"startOffset":74153,"endOffset":74622,"count":98},{"startOffset":74270,"endOffset":74363,"count":0},{"startOffset":74422,"endOffset":74530,"count":1},{"startOffset":74469,"endOffset":74520,"count":20},{"startOffset":74530,"endOffset":74616,"count":97}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":74296,"endOffset":74351,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":74382,"endOffset":74414,"count":98}],"isBlockCoverage":true},{"functionName":"sanitizeKey","ranges":[{"startOffset":74627,"endOffset":74747,"count":145},{"startOffset":74700,"endOffset":74721,"count":0}],"isBlockCoverage":true},{"functionName":"deleteFromParserHintObject","ranges":[{"startOffset":74752,"endOffset":75313,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":74837,"endOffset":75252,"count":46},{"startOffset":74929,"endOffset":74936,"count":2},{"startOffset":74936,"endOffset":75017,"count":44},{"startOffset":75017,"endOffset":75139,"count":18},{"startOffset":75085,"endOffset":75125,"count":2},{"startOffset":75139,"endOffset":75242,"count":26},{"startOffset":75187,"endOffset":75242,"count":22}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":74869,"endOffset":74901,"count":46}],"isBlockCoverage":true},{"functionName":"config","ranges":[{"startOffset":75332,"endOffset":76111,"count":2},{"startOffset":75520,"endOffset":75542,"count":1},{"startOffset":75544,"endOffset":75770,"count":1},{"startOffset":75716,"endOffset":75721,"count":0},{"startOffset":75770,"endOffset":75810,"count":1},{"startOffset":75810,"endOffset":75877,"count":0},{"startOffset":75877,"endOffset":75963,"count":1},{"startOffset":75994,"endOffset":75999,"count":0},{"startOffset":76000,"endOffset":76007,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":76017,"endOffset":76082,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.example","ranges":[{"startOffset":76132,"endOffset":76460,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.command","ranges":[{"startOffset":76481,"endOffset":76865,"count":2}],"isBlockCoverage":true},{"functionName":"Yargs.self.commandDir","ranges":[{"startOffset":76889,"endOffset":77151,"count":0}],"isBlockCoverage":false},{"functionName":"demand","ranges":[{"startOffset":77202,"endOffset":78178,"count":0}],"isBlockCoverage":false},{"functionName":"demandCommand","ranges":[{"startOffset":78205,"endOffset":78685,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getDemandedOptions","ranges":[{"startOffset":78717,"endOffset":78794,"count":3}],"isBlockCoverage":true},{"functionName":"Yargs.self.getDemandedCommands","ranges":[{"startOffset":78827,"endOffset":78905,"count":2}],"isBlockCoverage":true},{"functionName":"deprecateOption","ranges":[{"startOffset":78934,"endOffset":79140,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getDeprecatedOptions","ranges":[{"startOffset":79174,"endOffset":79253,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.implies","ranges":[{"startOffset":79274,"endOffset":79456,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.conflicts","ranges":[{"startOffset":79479,"endOffset":79656,"count":4}],"isBlockCoverage":true},{"functionName":"Yargs.self.usage","ranges":[{"startOffset":79675,"endOffset":80345,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.epilogue.self.epilog","ranges":[{"startOffset":80381,"endOffset":80507,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.fail","ranges":[{"startOffset":80525,"endOffset":80647,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.onFinishCommand","ranges":[{"startOffset":80676,"endOffset":80805,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getHandlerFinishCommand","ranges":[{"startOffset":80842,"endOffset":80868,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.check","ranges":[{"startOffset":80887,"endOffset":81060,"count":1}],"isBlockCoverage":true},{"functionName":"global","ranges":[{"startOffset":81080,"endOffset":81557,"count":16},{"startOffset":81358,"endOffset":81530,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":81316,"endOffset":81346,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":81402,"endOffset":81518,"count":0}],"isBlockCoverage":false},{"functionName":"pkgConf","ranges":[{"startOffset":81578,"endOffset":82055,"count":0}],"isBlockCoverage":false},{"functionName":"pkgUp","ranges":[{"startOffset":82082,"endOffset":82959,"count":1},{"startOffset":82185,"endOffset":82204,"count":0},{"startOffset":82875,"endOffset":82892,"count":0},{"startOffset":82919,"endOffset":82924,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":82491,"endOffset":82716,"count":2},{"startOffset":82561,"endOffset":82702,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":83030,"endOffset":84057,"count":1},{"startOffset":83258,"endOffset":83453,"count":0},{"startOffset":83500,"endOffset":83589,"count":0},{"startOffset":83638,"endOffset":83719,"count":0},{"startOffset":83812,"endOffset":83832,"count":0},{"startOffset":83973,"endOffset":84008,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self._getParseContext","ranges":[{"startOffset":84087,"endOffset":84111,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self._hasParseCallback","ranges":[{"startOffset":84142,"endOffset":84157,"count":0}],"isBlockCoverage":false},{"functionName":"option","ranges":[{"startOffset":84192,"endOffset":87432,"count":43},{"startOffset":84332,"endOffset":84444,"count":1},{"startOffset":84444,"endOffset":87405,"count":42},{"startOffset":84501,"endOffset":84542,"count":0},{"startOffset":84623,"endOffset":84650,"count":0},{"startOffset":84741,"endOffset":84810,"count":0},{"startOffset":84905,"endOffset":84962,"count":0},{"startOffset":84997,"endOffset":85121,"count":0},{"startOffset":85153,"endOffset":85220,"count":4},{"startOffset":85255,"endOffset":85318,"count":8},{"startOffset":85362,"endOffset":85425,"count":0},{"startOffset":85467,"endOffset":85526,"count":0},{"startOffset":85555,"endOffset":85622,"count":1},{"startOffset":85654,"endOffset":85706,"count":2},{"startOffset":85736,"endOffset":85799,"count":0},{"startOffset":85828,"endOffset":85889,"count":6},{"startOffset":85917,"endOffset":85976,"count":39},{"startOffset":86032,"endOffset":86158,"count":0},{"startOffset":86210,"endOffset":86332,"count":0},{"startOffset":86386,"endOffset":86510,"count":0},{"startOffset":86564,"endOffset":86688,"count":0},{"startOffset":86740,"endOffset":86788,"count":0},{"startOffset":86838,"endOffset":86899,"count":0},{"startOffset":86940,"endOffset":87029,"count":5},{"startOffset":87066,"endOffset":87123,"count":0},{"startOffset":87181,"endOffset":87192,"count":0},{"startOffset":87260,"endOffset":87307,"count":1},{"startOffset":87341,"endOffset":87395,"count":14}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":84371,"endOffset":84432,"count":41}],"isBlockCoverage":true},{"functionName":"Yargs.self.getOptions","ranges":[{"startOffset":87456,"endOffset":87469,"count":103}],"isBlockCoverage":true},{"functionName":"Yargs.self.positional","ranges":[{"startOffset":87493,"endOffset":89136,"count":1},{"startOffset":87619,"endOffset":87728,"count":0},{"startOffset":88450,"endOffset":88492,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":88090,"endOffset":88311,"count":3},{"startOffset":88189,"endOffset":88241,"count":1},{"startOffset":88259,"endOffset":88274,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":88676,"endOffset":89030,"count":4},{"startOffset":88778,"endOffset":88883,"count":1},{"startOffset":88853,"endOffset":88869,"count":0},{"startOffset":88883,"endOffset":89020,"count":3},{"startOffset":88940,"endOffset":88956,"count":0},{"startOffset":88978,"endOffset":89006,"count":0}],"isBlockCoverage":true},{"functionName":"group","ranges":[{"startOffset":89155,"endOffset":89676,"count":40},{"startOffset":89384,"endOffset":89442,"count":0},{"startOffset":89506,"endOffset":89511,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":89533,"endOffset":89647,"count":239},{"startOffset":89585,"endOffset":89598,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self.getGroups","ranges":[{"startOffset":89699,"endOffset":89747,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.env","ranges":[{"startOffset":89764,"endOffset":90002,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.wrap","ranges":[{"startOffset":90020,"endOffset":90162,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.strict","ranges":[{"startOffset":90206,"endOffset":90348,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getStrict","ranges":[{"startOffset":90371,"endOffset":90383,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.strictCommands","ranges":[{"startOffset":90443,"endOffset":90593,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getStrictCommands","ranges":[{"startOffset":90624,"endOffset":90644,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.strictOptions","ranges":[{"startOffset":90702,"endOffset":90851,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getStrictOptions","ranges":[{"startOffset":90881,"endOffset":90900,"count":0}],"isBlockCoverage":false},{"functionName":"parserConfiguration","ranges":[{"startOffset":90960,"endOffset":91113,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.getParserConfiguration","ranges":[{"startOffset":91149,"endOffset":91167,"count":5}],"isBlockCoverage":true},{"functionName":"Yargs.self.showHelp","ranges":[{"startOffset":91189,"endOffset":91534,"count":0}],"isBlockCoverage":false},{"functionName":"version","ranges":[{"startOffset":91582,"endOffset":92607,"count":2},{"startOffset":91775,"endOffset":91909,"count":1},{"startOffset":91946,"endOffset":92322,"count":1},{"startOffset":92070,"endOffset":92217,"count":0},{"startOffset":92259,"endOffset":92322,"count":0},{"startOffset":92374,"endOffset":92393,"count":0},{"startOffset":92413,"endOffset":92462,"count":1},{"startOffset":92492,"endOffset":92504,"count":0}],"isBlockCoverage":true},{"functionName":"guessVersion","ranges":[{"startOffset":92613,"endOffset":92714,"count":1},{"startOffset":92695,"endOffset":92707,"count":0}],"isBlockCoverage":true},{"functionName":"addHelpOpt","ranges":[{"startOffset":92773,"endOffset":93338,"count":2},{"startOffset":92941,"endOffset":93029,"count":1},{"startOffset":93066,"endOffset":93137,"count":0},{"startOffset":93180,"endOffset":93185,"count":1},{"startOffset":93186,"endOffset":93202,"count":1},{"startOffset":93270,"endOffset":93309,"count":1}],"isBlockCoverage":true},{"functionName":"addShowHiddenOpt","ranges":[{"startOffset":93484,"endOffset":93993,"count":0}],"isBlockCoverage":false},{"functionName":"hide","ranges":[{"startOffset":94011,"endOffset":94153,"count":1}],"isBlockCoverage":true},{"functionName":"showHelpOnFail","ranges":[{"startOffset":94181,"endOffset":94385,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.exitProcess","ranges":[{"startOffset":94438,"endOffset":94582,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getExitProcess","ranges":[{"startOffset":94610,"endOffset":94627,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.showCompletionScript","ranges":[{"startOffset":94661,"endOffset":94909,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getCompletion","ranges":[{"startOffset":94936,"endOffset":95084,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.locale","ranges":[{"startOffset":95104,"endOffset":95366,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.updateStrings.self.updateLocale","ranges":[{"startOffset":95413,"endOffset":95572,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.detectLocale","ranges":[{"startOffset":95627,"endOffset":95762,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getDetectLocale","ranges":[{"startOffset":95791,"endOffset":95809,"count":0}],"isBlockCoverage":false},{"functionName":"log","ranges":[{"startOffset":95841,"endOffset":96077,"count":0}],"isBlockCoverage":false},{"functionName":"error","ranges":[{"startOffset":96087,"endOffset":96327,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self._getLoggerInstance","ranges":[{"startOffset":96366,"endOffset":96379,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self._hasOutput","ranges":[{"startOffset":96403,"endOffset":96418,"count":3}],"isBlockCoverage":true},{"functionName":"Yargs.self._setHasOutput","ranges":[{"startOffset":96445,"endOffset":96484,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self.recommendCommands","ranges":[{"startOffset":96542,"endOffset":96698,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getUsageInstance","ranges":[{"startOffset":96728,"endOffset":96741,"count":5}],"isBlockCoverage":true},{"functionName":"Yargs.self.getValidationInstance","ranges":[{"startOffset":96776,"endOffset":96794,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.getCommandInstance","ranges":[{"startOffset":96826,"endOffset":96841,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self.terminalWidth","ranges":[{"startOffset":96868,"endOffset":96947,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":97004,"endOffset":97038,"count":0}],"isBlockCoverage":false},{"functionName":"parseArgs","ranges":[{"startOffset":97096,"endOffset":102725,"count":2},{"startOffset":97242,"endOffset":97256,"count":1},{"startOffset":97788,"endOffset":97833,"count":0},{"startOffset":98002,"endOffset":98105,"count":0},{"startOffset":98221,"endOffset":98226,"count":0},{"startOffset":98347,"endOffset":98442,"count":0},{"startOffset":98723,"endOffset":98793,"count":0},{"startOffset":98868,"endOffset":100055,"count":1},{"startOffset":99107,"endOffset":99135,"count":0},{"startOffset":99137,"endOffset":99343,"count":0},{"startOffset":99834,"endOffset":99899,"count":0},{"startOffset":99900,"endOffset":99922,"count":0},{"startOffset":99924,"endOffset":100037,"count":0},{"startOffset":100055,"endOffset":100094,"count":1},{"startOffset":100094,"endOffset":100151,"count":0},{"startOffset":100152,"endOffset":100194,"count":0},{"startOffset":100196,"endOffset":100378,"count":0},{"startOffset":100392,"endOffset":100632,"count":0},{"startOffset":100632,"endOffset":100669,"count":1},{"startOffset":100669,"endOffset":101256,"count":0},{"startOffset":101256,"endOffset":102007,"count":1},{"startOffset":102007,"endOffset":102043,"count":0},{"startOffset":102045,"endOffset":102188,"count":0},{"startOffset":102188,"endOffset":102222,"count":1},{"startOffset":102222,"endOffset":102466,"count":0},{"startOffset":102485,"endOffset":102639,"count":0},{"startOffset":102639,"endOffset":102724,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":98256,"endOffset":98273,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":100946,"endOffset":101151,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":101329,"endOffset":101958,"count":15},{"startOffset":101378,"endOffset":101390,"count":0},{"startOffset":101392,"endOffset":101634,"count":0},{"startOffset":101683,"endOffset":101695,"count":0},{"startOffset":101697,"endOffset":101940,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":102103,"endOffset":102172,"count":0}],"isBlockCoverage":false},{"functionName":"Yargs.self._postProcess","ranges":[{"startOffset":102751,"endOffset":103332,"count":3},{"startOffset":102857,"endOffset":102869,"count":1},{"startOffset":102869,"endOffset":102913,"count":2},{"startOffset":102913,"endOffset":103201,"count":1},{"startOffset":103239,"endOffset":103331,"count":1}],"isBlockCoverage":true},{"functionName":"Yargs.self._copyDoubleDash","ranges":[{"startOffset":103361,"endOffset":103593,"count":1},{"startOffset":103439,"endOffset":103592,"count":0}],"isBlockCoverage":true},{"functionName":"Yargs.self._parsePositionalNumbers","ranges":[{"startOffset":103630,"endOffset":103987,"count":1},{"startOffset":103680,"endOffset":103692,"count":0},{"startOffset":103768,"endOffset":103960,"count":0}],"isBlockCoverage":true},{"functionName":"runValidation","ranges":[{"startOffset":104015,"endOffset":104874,"count":1},{"startOffset":104146,"endOffset":104184,"count":0},{"startOffset":104344,"endOffset":104426,"count":0},{"startOffset":104446,"endOffset":104470,"count":0},{"startOffset":104472,"endOffset":104574,"count":0},{"startOffset":104607,"endOffset":104694,"count":0}],"isBlockCoverage":true},{"functionName":"guessLocale","ranges":[{"startOffset":104880,"endOffset":105201,"count":2},{"startOffset":104951,"endOffset":105042,"count":0},{"startOffset":105043,"endOffset":105079,"count":0},{"startOffset":105080,"endOffset":105120,"count":0},{"startOffset":105121,"endOffset":105143,"count":0}],"isBlockCoverage":true},{"functionName":"rebase","ranges":[{"startOffset":105273,"endOffset":105319,"count":1}],"isBlockCoverage":true},{"functionName":"isYargsInstance","ranges":[{"startOffset":105321,"endOffset":105406,"count":1}],"isBlockCoverage":true},{"functionName":"getEnv","ranges":[{"startOffset":105816,"endOffset":105865,"count":5}],"isBlockCoverage":true},{"functionName":"argv","ranges":[{"startOffset":106229,"endOffset":106247,"count":2}],"isBlockCoverage":true},{"functionName":"execPath","ranges":[{"startOffset":106293,"endOffset":106315,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":106331,"endOffset":106384,"count":0}],"isBlockCoverage":false}]},{"scriptId":"278","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/y18n/build/index.cjs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6783,"count":1}],"isBlockCoverage":true},{"functionName":"Y18N","ranges":[{"startOffset":123,"endOffset":611,"count":1},{"startOffset":196,"endOffset":201,"count":0},{"startOffset":243,"endOffset":257,"count":0},{"startOffset":343,"endOffset":349,"count":0},{"startOffset":473,"endOffset":498,"count":0}],"isBlockCoverage":true},{"functionName":"__","ranges":[{"startOffset":616,"endOffset":1683,"count":171},{"startOffset":676,"endOffset":755,"count":0},{"startOffset":913,"endOffset":929,"count":0},{"startOffset":946,"endOffset":964,"count":0},{"startOffset":1025,"endOffset":1048,"count":0},{"startOffset":1157,"endOffset":1176,"count":0},{"startOffset":1178,"endOffset":1535,"count":0},{"startOffset":1655,"endOffset":1661,"count":0}],"isBlockCoverage":true},{"functionName":"cb","ranges":[{"startOffset":807,"endOffset":822,"count":171}],"isBlockCoverage":true},{"functionName":"cb","ranges":[{"startOffset":949,"endOffset":964,"count":0}],"isBlockCoverage":false},{"functionName":"__n","ranges":[{"startOffset":1688,"endOffset":3211,"count":0}],"isBlockCoverage":false},{"functionName":"setLocale","ranges":[{"startOffset":3216,"endOffset":3271,"count":0}],"isBlockCoverage":false},{"functionName":"getLocale","ranges":[{"startOffset":3276,"endOffset":3323,"count":0}],"isBlockCoverage":false},{"functionName":"updateLocale","ranges":[{"startOffset":3328,"endOffset":3607,"count":1},{"startOffset":3453,"endOffset":3601,"count":3}],"isBlockCoverage":true},{"functionName":"_taggedLiteral","ranges":[{"startOffset":3612,"endOffset":3952,"count":0}],"isBlockCoverage":false},{"functionName":"_enqueueWrite","ranges":[{"startOffset":3957,"endOffset":4101,"count":0}],"isBlockCoverage":false},{"functionName":"_processWriteQueue","ranges":[{"startOffset":4106,"endOffset":4746,"count":0}],"isBlockCoverage":false},{"functionName":"_readLocaleFile","ranges":[{"startOffset":4751,"endOffset":5465,"count":1},{"startOffset":5145,"endOffset":5411,"count":0}],"isBlockCoverage":true},{"functionName":"_resolveLocaleFile","ranges":[{"startOffset":5470,"endOffset":5946,"count":1},{"startOffset":5645,"endOffset":5672,"count":0},{"startOffset":5674,"endOffset":5919,"count":0}],"isBlockCoverage":true},{"functionName":"_fileExistsSync","ranges":[{"startOffset":5951,"endOffset":6014,"count":1}],"isBlockCoverage":true},{"functionName":"y18n$1","ranges":[{"startOffset":6017,"endOffset":6358,"count":1}],"isBlockCoverage":true},{"functionName":"exists","ranges":[{"startOffset":6537,"endOffset":6683,"count":1},{"startOffset":6628,"endOffset":6677,"count":0}],"isBlockCoverage":true},{"functionName":"y18n","ranges":[{"startOffset":6701,"endOffset":6757,"count":1}],"isBlockCoverage":true}]},{"scriptId":"279","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/yargs-parser/build/index.cjs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":42313,"count":1},{"startOffset":41005,"endOffset":41049,"count":0},{"startOffset":41190,"endOffset":41388,"count":0},{"startOffset":41425,"endOffset":41429,"count":0}],"isBlockCoverage":true},{"functionName":"camelCase","ranges":[{"startOffset":96,"endOffset":980,"count":39},{"startOffset":172,"endOffset":200,"count":0},{"startOffset":297,"endOffset":323,"count":0},{"startOffset":325,"endOffset":352,"count":0},{"startOffset":511,"endOffset":537,"count":0},{"startOffset":564,"endOffset":946,"count":470},{"startOffset":633,"endOffset":727,"count":39},{"startOffset":752,"endOffset":783,"count":431},{"startOffset":768,"endOffset":782,"count":392},{"startOffset":785,"endOffset":837,"count":39},{"startOffset":837,"endOffset":936,"count":431}],"isBlockCoverage":true},{"functionName":"decamelize","ranges":[{"startOffset":981,"endOffset":1474,"count":34},{"startOffset":1089,"endOffset":1095,"count":0},{"startOffset":1165,"endOffset":1447,"count":368},{"startOffset":1289,"endOffset":1297,"count":34},{"startOffset":1299,"endOffset":1377,"count":34},{"startOffset":1377,"endOffset":1441,"count":334}],"isBlockCoverage":true},{"functionName":"looksLikeNumber","ranges":[{"startOffset":1475,"endOffset":1786,"count":28},{"startOffset":1552,"endOffset":1565,"count":0},{"startOffset":1605,"endOffset":1617,"count":1},{"startOffset":1617,"endOffset":1660,"count":27},{"startOffset":1660,"endOffset":1672,"count":0},{"startOffset":1672,"endOffset":1707,"count":27},{"startOffset":1707,"endOffset":1720,"count":0},{"startOffset":1720,"endOffset":1785,"count":27}],"isBlockCoverage":true},{"functionName":"tokenizeArgString","ranges":[{"startOffset":1788,"endOffset":2573,"count":3},{"startOffset":1940,"endOffset":2572,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1893,"endOffset":1932,"count":4},{"startOffset":1920,"endOffset":1928,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2605,"endOffset":2843,"count":1}],"isBlockCoverage":true},{"functionName":"YargsParser","ranges":[{"startOffset":2941,"endOffset":2992,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":2997,"endOffset":39528,"count":3},{"startOffset":4641,"endOffset":4646,"count":0},{"startOffset":4801,"endOffset":4806,"count":0},{"startOffset":4930,"endOffset":4945,"count":0},{"startOffset":5604,"endOffset":5609,"count":0},{"startOffset":6247,"endOffset":6252,"count":0},{"startOffset":6408,"endOffset":6413,"count":0},{"startOffset":6571,"endOffset":6576,"count":0},{"startOffset":6733,"endOffset":6738,"count":0},{"startOffset":6898,"endOffset":6903,"count":0},{"startOffset":7756,"endOffset":7918,"count":0},{"startOffset":9037,"endOffset":9089,"count":0},{"startOffset":9144,"endOffset":9222,"count":0},{"startOffset":9330,"endOffset":9886,"count":0},{"startOffset":9934,"endOffset":9970,"count":0},{"startOffset":9972,"endOffset":10242,"count":0},{"startOffset":10283,"endOffset":10349,"count":2},{"startOffset":10351,"endOffset":11560,"count":1},{"startOffset":10634,"endOffset":11528,"count":0},{"startOffset":11560,"endOffset":15980,"count":2},{"startOffset":11605,"endOffset":11804,"count":0},{"startOffset":11847,"endOffset":11870,"count":0},{"startOffset":11872,"endOffset":12479,"count":0},{"startOffset":12522,"endOffset":12545,"count":0},{"startOffset":12547,"endOffset":15406,"count":0},{"startOffset":15450,"endOffset":15488,"count":0},{"startOffset":15489,"endOffset":15550,"count":0},{"startOffset":15552,"endOffset":15651,"count":0},{"startOffset":15687,"endOffset":15771,"count":0},{"startOffset":15830,"endOffset":15910,"count":0},{"startOffset":16275,"endOffset":16300,"count":0},{"startOffset":16510,"endOffset":16534,"count":0},{"startOffset":16715,"endOffset":16872,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5635,"endOffset":6213,"count":21},{"startOffset":5700,"endOffset":5709,"count":0},{"startOffset":6069,"endOffset":6131,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5769,"endOffset":6016,"count":174}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6278,"endOffset":6375,"count":50}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6439,"endOffset":6538,"count":16}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6602,"endOffset":6701,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6764,"endOffset":6862,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6929,"endOffset":7030,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7124,"endOffset":7312,"count":28}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7420,"endOffset":7614,"count":12}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7821,"endOffset":7902,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8027,"endOffset":8223,"count":1},{"startOffset":8098,"endOffset":8128,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8358,"endOffset":8515,"count":16},{"startOffset":8407,"endOffset":8412,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8422,"endOffset":8503,"count":12}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16343,"endOffset":16448,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16560,"endOffset":16628,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16754,"endOffset":16794,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16804,"endOffset":16860,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16969,"endOffset":16984,"count":47}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16995,"endOffset":17247,"count":52},{"startOffset":17088,"endOffset":17197,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17143,"endOffset":17166,"count":2}],"isBlockCoverage":true},{"functionName":"pushPositional","ranges":[{"startOffset":17268,"endOffset":17539,"count":2},{"startOffset":17422,"endOffset":17463,"count":0}],"isBlockCoverage":true},{"functionName":"eatNargs","ranges":[{"startOffset":17548,"endOffset":19169,"count":0}],"isBlockCoverage":false},{"functionName":"eatArray","ranges":[{"startOffset":19178,"endOffset":20962,"count":1},{"startOffset":19436,"endOffset":19469,"count":0},{"startOffset":19471,"endOffset":19524,"count":0},{"startOffset":19634,"endOffset":19657,"count":0},{"startOffset":19658,"endOffset":19688,"count":0},{"startOffset":19691,"endOffset":19900,"count":0},{"startOffset":19973,"endOffset":20066,"count":0},{"startOffset":20187,"endOffset":20210,"count":0},{"startOffset":20251,"endOffset":20284,"count":0},{"startOffset":20285,"endOffset":20318,"count":0},{"startOffset":20345,"endOffset":20351,"count":0},{"startOffset":20429,"endOffset":20452,"count":0},{"startOffset":20453,"endOffset":20483,"count":0},{"startOffset":20509,"endOffset":20515,"count":0},{"startOffset":20684,"endOffset":20799,"count":0},{"startOffset":20801,"endOffset":20894,"count":0}],"isBlockCoverage":true},{"functionName":"setArg","ranges":[{"startOffset":20971,"endOffset":22834,"count":34},{"startOffset":21029,"endOffset":21069,"count":3},{"startOffset":21071,"endOffset":21268,"count":3},{"startOffset":21443,"endOffset":21648,"count":24},{"startOffset":21685,"endOffset":21717,"count":0},{"startOffset":21719,"endOffset":22196,"count":0},{"startOffset":22251,"endOffset":22289,"count":2},{"startOffset":22291,"endOffset":22824,"count":2},{"startOffset":22354,"endOffset":22359,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21122,"endOffset":21201,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21488,"endOffset":21632,"count":15}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21780,"endOffset":22180,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":22391,"endOffset":22808,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":22535,"endOffset":22608,"count":1}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":22634,"endOffset":22766,"count":2},{"startOffset":22707,"endOffset":22731,"count":0}],"isBlockCoverage":true},{"functionName":"addNewAlias","ranges":[{"startOffset":22843,"endOffset":23188,"count":4},{"startOffset":22915,"endOffset":22943,"count":2},{"startOffset":22946,"endOffset":23049,"count":2},{"startOffset":23089,"endOffset":23119,"count":3},{"startOffset":23122,"endOffset":23178,"count":1}],"isBlockCoverage":true},{"functionName":"processValue","ranges":[{"startOffset":23197,"endOffset":24302,"count":35},{"startOffset":23271,"endOffset":23324,"count":10},{"startOffset":23325,"endOffset":23374,"count":0},{"startOffset":23376,"endOffset":23447,"count":0},{"startOffset":23498,"endOffset":23535,"count":31},{"startOffset":23537,"endOffset":23639,"count":4},{"startOffset":23604,"endOffset":23625,"count":0},{"startOffset":23699,"endOffset":23760,"count":10},{"startOffset":23777,"endOffset":23806,"count":25},{"startOffset":23859,"endOffset":23912,"count":0},{"startOffset":23914,"endOffset":23966,"count":0},{"startOffset":24021,"endOffset":24058,"count":2},{"startOffset":24060,"endOffset":24266,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23709,"endOffset":23759,"count":19}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24138,"endOffset":24179,"count":0}],"isBlockCoverage":false},{"functionName":"maybeCoerceNumber","ranges":[{"startOffset":24311,"endOffset":24955,"count":50},{"startOffset":24411,"endOffset":24425,"count":32},{"startOffset":24443,"endOffset":24456,"count":2},{"startOffset":24456,"endOffset":24510,"count":48},{"startOffset":24510,"endOffset":24547,"count":36},{"startOffset":24548,"endOffset":24572,"count":32},{"startOffset":24574,"endOffset":24919,"count":28},{"startOffset":24642,"endOffset":24675,"count":2},{"startOffset":24676,"endOffset":24737,"count":2},{"startOffset":24778,"endOffset":24841,"count":26},{"startOffset":24843,"endOffset":24905,"count":2},{"startOffset":24919,"endOffset":24954,"count":48}],"isBlockCoverage":true},{"functionName":"setConfig","ranges":[{"startOffset":24964,"endOffset":26599,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":25168,"endOffset":26587,"count":1},{"startOffset":25302,"endOffset":26573,"count":0}],"isBlockCoverage":true},{"functionName":"setConfigObject","ranges":[{"startOffset":26608,"endOffset":27284,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":26689,"endOffset":27272,"count":36},{"startOffset":26786,"endOffset":26804,"count":0},{"startOffset":26858,"endOffset":26875,"count":12},{"startOffset":26876,"endOffset":26900,"count":12},{"startOffset":26901,"endOffset":26933,"count":0},{"startOffset":26935,"endOffset":27007,"count":0},{"startOffset":27089,"endOffset":27167,"count":3},{"startOffset":27132,"endOffset":27166,"count":0},{"startOffset":27169,"endOffset":27240,"count":33}],"isBlockCoverage":true},{"functionName":"setConfigObjects","ranges":[{"startOffset":27293,"endOffset":27537,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27417,"endOffset":27511,"count":3}],"isBlockCoverage":true},{"functionName":"applyEnvVars","ranges":[{"startOffset":27546,"endOffset":28422,"count":6},{"startOffset":27661,"endOffset":27730,"count":0},{"startOffset":27731,"endOffset":27735,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27811,"endOffset":28410,"count":0}],"isBlockCoverage":false},{"functionName":"applyCoercions","ranges":[{"startOffset":28431,"endOffset":29278,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28564,"endOffset":29266,"count":53},{"startOffset":28620,"endOffset":29252,"count":51},{"startOffset":28744,"endOffset":29234,"count":4},{"startOffset":28919,"endOffset":28924,"count":0},{"startOffset":29132,"endOffset":29212,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28940,"endOffset":29079,"count":6}],"isBlockCoverage":true},{"functionName":"setPlaceholderKeys","ranges":[{"startOffset":29287,"endOffset":29579,"count":0}],"isBlockCoverage":false},{"functionName":"applyDefaultsAndAliases","ranges":[{"startOffset":29588,"endOffset":30205,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29705,"endOffset":30193,"count":56},{"startOffset":29772,"endOffset":30179,"count":17},{"startOffset":29894,"endOffset":29916,"count":1},{"startOffset":29951,"endOffset":29956,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29966,"endOffset":30159,"count":12},{"startOffset":30064,"endOffset":30071,"count":0}],"isBlockCoverage":true},{"functionName":"hasKey","ranges":[{"startOffset":30214,"endOffset":30639,"count":104},{"startOffset":30566,"endOffset":30579,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":30395,"endOffset":30461,"count":0}],"isBlockCoverage":false},{"functionName":"setKey","ranges":[{"startOffset":30648,"endOffset":33097,"count":78},{"startOffset":31747,"endOffset":31783,"count":0},{"startOffset":31785,"endOffset":32029,"count":0},{"startOffset":32069,"endOffset":32128,"count":0},{"startOffset":32173,"endOffset":32667,"count":0},{"startOffset":32726,"endOffset":32798,"count":20},{"startOffset":32774,"endOffset":32783,"count":0},{"startOffset":32798,"endOffset":33087,"count":58},{"startOffset":32856,"endOffset":32909,"count":0},{"startOffset":32910,"endOffset":32962,"count":0},{"startOffset":32965,"endOffset":33022,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":30836,"endOffset":31451,"count":0}],"isBlockCoverage":false},{"functionName":"extendAliases","ranges":[{"startOffset":33106,"endOffset":34699,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33165,"endOffset":34687,"count":12},{"startOffset":33214,"endOffset":33219,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33229,"endOffset":34671,"count":173},{"startOffset":33314,"endOffset":33321,"count":83},{"startOffset":33321,"endOffset":33386,"count":90},{"startOffset":33386,"endOffset":33391,"count":43}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33453,"endOffset":33880,"count":142},{"startOffset":33508,"endOffset":33548,"count":34},{"startOffset":33550,"endOffset":33858,"count":34}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33942,"endOffset":34395,"count":176},{"startOffset":33998,"endOffset":34016,"count":134},{"startOffset":34017,"endOffset":34057,"count":34},{"startOffset":34059,"endOffset":34373,"count":34},{"startOffset":34161,"endOffset":34200,"count":2},{"startOffset":34202,"endOffset":34347,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34445,"endOffset":34651,"count":86}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34542,"endOffset":34626,"count":130}],"isBlockCoverage":true},{"functionName":"checkAllAliases","ranges":[{"startOffset":34708,"endOffset":34993,"count":419},{"startOffset":34803,"endOffset":34808,"count":110},{"startOffset":34958,"endOffset":34974,"count":49},{"startOffset":34975,"endOffset":34982,"count":370}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34902,"endOffset":34927,"count":620}],"isBlockCoverage":true},{"functionName":"hasAnyFlag","ranges":[{"startOffset":35002,"endOffset":35300,"count":0}],"isBlockCoverage":false},{"functionName":"hasFlagsMatching","ranges":[{"startOffset":35309,"endOffset":35589,"count":0}],"isBlockCoverage":false},{"functionName":"hasAllShortFlags","ranges":[{"startOffset":35598,"endOffset":36444,"count":0}],"isBlockCoverage":false},{"functionName":"isUnknownOptionAsArg","ranges":[{"startOffset":36453,"endOffset":36584,"count":3},{"startOffset":36550,"endOffset":36573,"count":0}],"isBlockCoverage":true},{"functionName":"isUnknownOption","ranges":[{"startOffset":36593,"endOffset":37298,"count":0}],"isBlockCoverage":false},{"functionName":"defaultValue","ranges":[{"startOffset":37307,"endOffset":37634,"count":0}],"isBlockCoverage":false},{"functionName":"defaultForType","ranges":[{"startOffset":37643,"endOffset":37979,"count":0}],"isBlockCoverage":false},{"functionName":"guessType","ranges":[{"startOffset":37988,"endOffset":38548,"count":0}],"isBlockCoverage":false},{"functionName":"isUndefined","ranges":[{"startOffset":38557,"endOffset":38632,"count":29}],"isBlockCoverage":true},{"functionName":"checkConfiguration","ranges":[{"startOffset":38641,"endOffset":39213,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":38716,"endOffset":39201,"count":0}],"isBlockCoverage":false},{"functionName":"combineAliases","ranges":[{"startOffset":39531,"endOffset":40733,"count":3},{"startOffset":39871,"endOffset":40359,"count":47},{"startOffset":39937,"endOffset":40349,"count":485},{"startOffset":40130,"endOffset":40335,"count":0},{"startOffset":40349,"endOffset":40359,"count":485},{"startOffset":40359,"endOffset":40365,"count":47}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39692,"endOffset":39770,"count":47}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":39995,"endOffset":40089,"count":1023}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":40390,"endOffset":40708,"count":47}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":40453,"endOffset":40528,"count":99}],"isBlockCoverage":true},{"functionName":"increment","ranges":[{"startOffset":40734,"endOffset":40808,"count":78},{"startOffset":40791,"endOffset":40801,"count":0}],"isBlockCoverage":true},{"functionName":"sanitizeKey","ranges":[{"startOffset":40809,"endOffset":40913,"count":78},{"startOffset":40874,"endOffset":40895,"count":0}],"isBlockCoverage":true},{"functionName":"env","ranges":[{"startOffset":41495,"endOffset":41528,"count":0}],"isBlockCoverage":false},{"functionName":"require","ranges":[{"startOffset":41626,"endOffset":41933,"count":0}],"isBlockCoverage":false},{"functionName":"Parser","ranges":[{"startOffset":41958,"endOffset":42066,"count":0}],"isBlockCoverage":false},{"functionName":"yargsParser.detailed","ranges":[{"startOffset":42091,"endOffset":42161,"count":3}],"isBlockCoverage":true}]},{"scriptId":"280","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/cliui/build/index.cjs","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9953,"count":1}],"isBlockCoverage":true},{"functionName":"UI","ranges":[{"startOffset":162,"endOffset":336,"count":1},{"startOffset":299,"endOffset":305,"count":0}],"isBlockCoverage":true},{"functionName":"span","ranges":[{"startOffset":341,"endOffset":428,"count":43}],"isBlockCoverage":true},{"functionName":"resetOutput","ranges":[{"startOffset":433,"endOffset":478,"count":0}],"isBlockCoverage":false},{"functionName":"div","ranges":[{"startOffset":483,"endOffset":956,"count":111},{"startOffset":529,"endOffset":566,"count":8},{"startOffset":627,"endOffset":657,"count":0},{"startOffset":659,"endOffset":719,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":750,"endOffset":897,"count":146},{"startOffset":800,"endOffset":863,"count":59},{"startOffset":863,"endOffset":896,"count":87}],"isBlockCoverage":true},{"functionName":"shouldApplyLayoutDSL","ranges":[{"startOffset":961,"endOffset":1101,"count":111},{"startOffset":1026,"endOffset":1056,"count":60},{"startOffset":1057,"endOffset":1094,"count":16}],"isBlockCoverage":true},{"functionName":"applyLayoutDSL","ranges":[{"startOffset":1106,"endOffset":2204,"count":0}],"isBlockCoverage":false},{"functionName":"colFromString","ranges":[{"startOffset":2209,"endOffset":2329,"count":59}],"isBlockCoverage":true},{"functionName":"measurePadding","ranges":[{"startOffset":2334,"endOffset":2546,"count":59}],"isBlockCoverage":true},{"functionName":"toString","ranges":[{"startOffset":2551,"endOffset":2880,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2616,"endOffset":2676,"count":111}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2792,"endOffset":2812,"count":110}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2831,"endOffset":2848,"count":76}],"isBlockCoverage":true},{"functionName":"rowToString","ranges":[{"startOffset":2885,"endOffset":4770,"count":111}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2947,"endOffset":4740,"count":110}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3013,"endOffset":4567,"count":159},{"startOffset":3325,"endOffset":3418,"count":153},{"startOffset":3507,"endOffset":3533,"count":43},{"startOffset":3534,"endOffset":3546,"count":43},{"startOffset":3548,"endOffset":3830,"count":43},{"startOffset":3705,"endOffset":3812,"count":0},{"startOffset":3933,"endOffset":3948,"count":0},{"startOffset":3985,"endOffset":4058,"count":92},{"startOffset":4226,"endOffset":4300,"count":49},{"startOffset":4438,"endOffset":4457,"count":146},{"startOffset":4459,"endOffset":4553,"count":145}],"isBlockCoverage":true},{"functionName":"renderInline","ranges":[{"startOffset":4848,"endOffset":5613,"count":145},{"startOffset":4986,"endOffset":4989,"count":0},{"startOffset":5136,"endOffset":5174,"count":102},{"startOffset":5174,"endOffset":5291,"count":43},{"startOffset":5291,"endOffset":5378,"count":0},{"startOffset":5378,"endOffset":5428,"count":43},{"startOffset":5428,"endOffset":5466,"count":9},{"startOffset":5466,"endOffset":5612,"count":34}],"isBlockCoverage":true},{"functionName":"rasterize","ranges":[{"startOffset":5618,"endOffset":7065,"count":111}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5849,"endOffset":7035,"count":146},{"startOffset":6095,"endOffset":6176,"count":0},{"startOffset":6205,"endOffset":6389,"count":0},{"startOffset":6526,"endOffset":6530,"count":145}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6664,"endOffset":7023,"count":154},{"startOffset":6709,"endOffset":6764,"count":110},{"startOffset":6848,"endOffset":6977,"count":49},{"startOffset":6897,"endOffset":6959,"count":5}],"isBlockCoverage":true},{"functionName":"negatePadding","ranges":[{"startOffset":7070,"endOffset":7342,"count":305},{"startOffset":7125,"endOffset":7129,"count":0},{"startOffset":7202,"endOffset":7206,"count":127},{"startOffset":7230,"endOffset":7234,"count":213},{"startOffset":7271,"endOffset":7310,"count":0}],"isBlockCoverage":true},{"functionName":"columnWidths","ranges":[{"startOffset":7347,"endOffset":8184,"count":111},{"startOffset":7391,"endOffset":7519,"count":0},{"startOffset":7952,"endOffset":7988,"count":103},{"startOffset":7989,"endOffset":7992,"count":8}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7420,"endOffset":7507,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7671,"endOffset":7866,"count":146},{"startOffset":7707,"endOffset":7826,"count":43},{"startOffset":7826,"endOffset":7865,"count":103}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8020,"endOffset":8176,"count":146},{"startOffset":8065,"endOffset":8144,"count":103},{"startOffset":8144,"endOffset":8175,"count":43}],"isBlockCoverage":true},{"functionName":"addBorder","ranges":[{"startOffset":8187,"endOffset":8433,"count":318},{"startOffset":8244,"endOffset":8416,"count":0}],"isBlockCoverage":true},{"functionName":"_minWidth","ranges":[{"startOffset":8512,"endOffset":8727,"count":103},{"startOffset":8570,"endOffset":8575,"count":0},{"startOffset":8617,"endOffset":8621,"count":60},{"startOffset":8668,"endOffset":8704,"count":0}],"isBlockCoverage":true},{"functionName":"getWindowWidth","ranges":[{"startOffset":8728,"endOffset":8952,"count":0}],"isBlockCoverage":false},{"functionName":"alignRight","ranges":[{"startOffset":8953,"endOffset":9156,"count":43},{"startOffset":9138,"endOffset":9155,"count":0}],"isBlockCoverage":true},{"functionName":"alignCenter","ranges":[{"startOffset":9157,"endOffset":9400,"count":0}],"isBlockCoverage":false},{"functionName":"cliui","ranges":[{"startOffset":9412,"endOffset":9653,"count":1},{"startOffset":9532,"endOffset":9540,"count":0},{"startOffset":9555,"endOffset":9574,"count":0},{"startOffset":9623,"endOffset":9631,"count":0}],"isBlockCoverage":true},{"functionName":"ui","ranges":[{"startOffset":9823,"endOffset":9930,"count":1}],"isBlockCoverage":true}]},{"scriptId":"281","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/string-width/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":923,"count":1}],"isBlockCoverage":true},{"functionName":"stringWidth","ranges":[{"startOffset":184,"endOffset":805,"count":1964},{"startOffset":252,"endOffset":268,"count":180},{"startOffset":268,"endOffset":326,"count":1784},{"startOffset":326,"endOffset":342,"count":0},{"startOffset":342,"endOffset":449,"count":1784},{"startOffset":449,"endOffset":787,"count":32615},{"startOffset":557,"endOffset":572,"count":0},{"startOffset":575,"endOffset":593,"count":0},{"startOffset":648,"endOffset":664,"count":0},{"startOffset":666,"endOffset":684,"count":0},{"startOffset":723,"endOffset":736,"count":0},{"startOffset":776,"endOffset":779,"count":0},{"startOffset":787,"endOffset":804,"count":1784}],"isBlockCoverage":true}]},{"scriptId":"282","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/strip-ansi/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":154,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":73,"endOffset":152,"count":1843},{"startOffset":144,"endOffset":152,"count":0}],"isBlockCoverage":true}]},{"scriptId":"283","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/ansi-regex/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":350,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":348,"count":1843},{"startOffset":327,"endOffset":338,"count":0}],"isBlockCoverage":true}]},{"scriptId":"284","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-fullwidth-code-point/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1756,"count":1}],"isBlockCoverage":true},{"functionName":"isFullwidthCodePoint","ranges":[{"startOffset":70,"endOffset":1667,"count":32615},{"startOffset":115,"endOffset":135,"count":0},{"startOffset":257,"endOffset":1626,"count":0},{"startOffset":1630,"endOffset":1649,"count":0}],"isBlockCoverage":true}]},{"scriptId":"285","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/emoji-regex/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10286,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":10284,"count":1784}],"isBlockCoverage":true}]},{"scriptId":"286","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/wrap-ansi/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5772,"count":1}],"isBlockCoverage":true},{"functionName":"wrapAnsi","ranges":[{"startOffset":391,"endOffset":473,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsiHyperlink","ranges":[{"startOffset":501,"endOffset":586,"count":0}],"isBlockCoverage":false},{"functionName":"wordLengths","ranges":[{"startOffset":716,"endOffset":784,"count":138}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":748,"endOffset":783,"count":414}],"isBlockCoverage":true},{"functionName":"wrapWord","ranges":[{"startOffset":894,"endOffset":2106,"count":0}],"isBlockCoverage":false},{"functionName":"stringVisibleTrimSpacesRight","ranges":[{"startOffset":2205,"endOffset":2490,"count":145},{"startOffset":2296,"endOffset":2367,"count":152},{"startOffset":2338,"endOffset":2353,"count":145},{"startOffset":2353,"endOffset":2367,"count":7},{"startOffset":2397,"endOffset":2418,"count":138},{"startOffset":2418,"endOffset":2489,"count":7}],"isBlockCoverage":true},{"functionName":"exec","ranges":[{"startOffset":2725,"endOffset":5528,"count":146},{"startOffset":2815,"endOffset":2832,"count":8},{"startOffset":2832,"endOffset":3006,"count":138},{"startOffset":3006,"endOffset":4427,"count":414},{"startOffset":3181,"endOffset":3535,"count":276},{"startOffset":3211,"endOffset":3268,"count":0},{"startOffset":3270,"endOffset":3424,"count":0},{"startOffset":3447,"endOffset":3472,"count":0},{"startOffset":3674,"endOffset":4039,"count":0},{"startOffset":4084,"endOffset":4100,"count":7},{"startOffset":4101,"endOffset":4122,"count":7},{"startOffset":4124,"endOffset":4262,"count":7},{"startOffset":4160,"endOffset":4182,"count":0},{"startOffset":4184,"endOffset":4239,"count":0},{"startOffset":4307,"endOffset":4336,"count":7},{"startOffset":4338,"endOffset":4390,"count":0},{"startOffset":4427,"endOffset":4598,"count":138},{"startOffset":4598,"endOffset":5504,"count":2882},{"startOffset":4659,"endOffset":5083,"count":0},{"startOffset":5174,"endOffset":5316,"count":7},{"startOffset":5194,"endOffset":5242,"count":0},{"startOffset":5262,"endOffset":5269,"count":0},{"startOffset":5271,"endOffset":5312,"count":0},{"startOffset":5316,"endOffset":5501,"count":2875},{"startOffset":5346,"endOffset":5501,"count":7},{"startOffset":5366,"endOffset":5373,"count":0},{"startOffset":5375,"endOffset":5422,"count":0},{"startOffset":5442,"endOffset":5497,"count":0},{"startOffset":5504,"endOffset":5527,"count":138}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":5598,"endOffset":5770,"count":146}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5716,"endOffset":5752,"count":146}],"isBlockCoverage":true}]},{"scriptId":"287","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/wrap-ansi/node_modules/ansi-styles/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4139,"count":1}],"isBlockCoverage":true},{"functionName":"wrapAnsi16","ranges":[{"startOffset":34,"endOffset":129,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsi256","ranges":[{"startOffset":152,"endOffset":255,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsi16m","ranges":[{"startOffset":278,"endOffset":402,"count":0}],"isBlockCoverage":false},{"functionName":"ansi2ansi","ranges":[{"startOffset":423,"endOffset":429,"count":0}],"isBlockCoverage":false},{"functionName":"rgb2rgb","ranges":[{"startOffset":447,"endOffset":469,"count":0}],"isBlockCoverage":false},{"functionName":"setLazyProperty","ranges":[{"startOffset":496,"endOffset":786,"count":30}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":575,"endOffset":737,"count":0}],"isBlockCoverage":false},{"functionName":"makeDynamicStyles","ranges":[{"startOffset":879,"endOffset":1400,"count":0}],"isBlockCoverage":false},{"functionName":"assembleStyles","ranges":[{"startOffset":1403,"endOffset":4021,"count":5},{"startOffset":2869,"endOffset":3201,"count":15},{"startOffset":2929,"endOffset":3108,"count":220}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3401,"endOffset":3464,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3509,"endOffset":3574,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3619,"endOffset":3678,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3722,"endOffset":3784,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3831,"endOffset":3895,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3942,"endOffset":4000,"count":0}],"isBlockCoverage":false}]},{"scriptId":"288","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/escalade/sync/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":416,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":113,"endOffset":415,"count":1},{"startOffset":235,"endOffset":261,"count":0},{"startOffset":277,"endOffset":413,"count":2},{"startOffset":331,"endOffset":404,"count":1},{"startOffset":404,"endOffset":410,"count":0}],"isBlockCoverage":true}]},{"scriptId":"289","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/get-caller-file/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1108,"count":1}],"isBlockCoverage":true},{"functionName":"getCallerFile","ranges":[{"startOffset":233,"endOffset":1073,"count":0}],"isBlockCoverage":false}]},{"scriptId":"290","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/require-directory/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2867,"count":1}],"isBlockCoverage":true},{"functionName":"rename","ranges":[{"startOffset":238,"endOffset":280,"count":0}],"isBlockCoverage":false},{"functionName":"visit","ranges":[{"startOffset":293,"endOffset":333,"count":0}],"isBlockCoverage":false},{"functionName":"checkFileInclusion","ranges":[{"startOffset":340,"endOffset":1270,"count":0}],"isBlockCoverage":false},{"functionName":"requireDirectory","ranges":[{"startOffset":1272,"endOffset":2788,"count":0}],"isBlockCoverage":false}]},{"scriptId":"291","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/commands.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":225,"count":1}],"isBlockCoverage":true}]},{"scriptId":"292","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/init.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":958,"count":1}],"isBlockCoverage":true},{"functionName":"exports.builder","ranges":[{"startOffset":265,"endOffset":347,"count":0}],"isBlockCoverage":false},{"functionName":"exports.handler","ranges":[{"startOffset":368,"endOffset":956,"count":0}],"isBlockCoverage":false}]},{"scriptId":"293","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/cli/run.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10866,"count":1}],"isBlockCoverage":true},{"functionName":"exports.builder","ranges":[{"startOffset":1004,"endOffset":10591,"count":1}],"isBlockCoverage":true},{"functionName":"coerce","ranges":[{"startOffset":3546,"endOffset":3578,"count":0}],"isBlockCoverage":false},{"functionName":"coerce","ranges":[{"startOffset":5551,"endOffset":6040,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7697,"endOffset":9836,"count":1},{"startOffset":8021,"endOffset":8060,"count":0},{"startOffset":8062,"endOffset":8255,"count":0},{"startOffset":8282,"endOffset":9334,"count":0},{"startOffset":9362,"endOffset":9584,"count":0},{"startOffset":9607,"endOffset":9810,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7808,"endOffset":7933,"count":2},{"startOffset":7840,"endOffset":7925,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9854,"endOffset":10466,"count":1},{"startOffset":10279,"endOffset":10460,"count":0}],"isBlockCoverage":true},{"functionName":"exports.handler","ranges":[{"startOffset":10612,"endOffset":10864,"count":1},{"startOffset":10751,"endOffset":10862,"count":0}],"isBlockCoverage":true}]},{"scriptId":"294","url":"node:internal/deps/cjs-module-lexer/dist/lexer","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":33616,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":116,"endOffset":813,"count":3},{"startOffset":146,"endOffset":181,"count":0},{"startOffset":222,"endOffset":237,"count":0},{"startOffset":273,"endOffset":308,"count":0},{"startOffset":332,"endOffset":334,"count":0},{"startOffset":406,"endOffset":553,"count":1},{"startOffset":553,"endOffset":601,"count":2},{"startOffset":601,"endOffset":650,"count":0},{"startOffset":650,"endOffset":663,"count":2},{"startOffset":663,"endOffset":696,"count":0},{"startOffset":696,"endOffset":709,"count":2},{"startOffset":709,"endOffset":773,"count":1},{"startOffset":773,"endOffset":812,"count":2}],"isBlockCoverage":true},{"functionName":"B","ranges":[{"startOffset":813,"endOffset":1040,"count":1},{"startOffset":862,"endOffset":1039,"count":0}],"isBlockCoverage":true},{"functionName":"E","ranges":[{"startOffset":1040,"endOffset":1141,"count":0}],"isBlockCoverage":false},{"functionName":"C","ranges":[{"startOffset":1141,"endOffset":1215,"count":3},{"startOffset":1192,"endOffset":1214,"count":2474}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":1221,"endOffset":33616,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1251,"endOffset":33611,"count":1},{"startOffset":33455,"endOffset":33524,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33505,"endOffset":33523,"count":0}],"isBlockCoverage":false}]},{"scriptId":"296","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":226,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":31,"endOffset":85,"count":0}],"isBlockCoverage":false}]},{"scriptId":"297","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/nodeWrapper.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":412,"count":1}],"isBlockCoverage":true}]},{"scriptId":"298","url":"node:module","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":308,"count":1}],"isBlockCoverage":false}]},{"scriptId":"299","url":"node:internal/source_map/source_map","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10628,"count":1}],"isBlockCoverage":false},{"functionName":"StringCharIterator","ranges":[{"startOffset":4000,"endOffset":4076,"count":0}],"isBlockCoverage":false},{"functionName":"next","ranges":[{"startOffset":4114,"endOffset":4192,"count":0}],"isBlockCoverage":false},{"functionName":"peek","ranges":[{"startOffset":4230,"endOffset":4306,"count":0}],"isBlockCoverage":false},{"functionName":"hasNext","ranges":[{"startOffset":4345,"endOffset":4409,"count":0}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":4570,"endOffset":5714,"count":0}],"isBlockCoverage":false},{"functionName":"findEntry","ranges":[{"startOffset":5861,"endOffset":6725,"count":0}],"isBlockCoverage":false},{"functionName":"#parseMap","ranges":[{"startOffset":6756,"endOffset":8590,"count":0}],"isBlockCoverage":false},{"functionName":"isSeparator","ranges":[{"startOffset":8647,"endOffset":8716,"count":0}],"isBlockCoverage":false},{"functionName":"decodeVLQ","ranges":[{"startOffset":8806,"endOffset":9739,"count":0}],"isBlockCoverage":false},{"functionName":"cloneSourceMapV3","ranges":[{"startOffset":9806,"endOffset":10118,"count":0}],"isBlockCoverage":false},{"functionName":"compareSourceMapEntry","ranges":[{"startOffset":10313,"endOffset":10592,"count":0}],"isBlockCoverage":false}]},{"scriptId":"300","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":318,"count":1}],"isBlockCoverage":true},{"functionName":"register","ranges":[{"startOffset":138,"endOffset":227,"count":1}],"isBlockCoverage":true}]},{"scriptId":"301","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/hook.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1838,"count":1}],"isBlockCoverage":true},{"functionName":"installSourceMapSupport","ranges":[{"startOffset":169,"endOffset":573,"count":1}],"isBlockCoverage":true},{"functionName":"installSourceMapSupport","ranges":[{"startOffset":234,"endOffset":242,"count":1}],"isBlockCoverage":true},{"functionName":"retrieveSourceMap","ranges":[{"startOffset":341,"endOffset":564,"count":0}],"isBlockCoverage":false},{"functionName":"compileBabel7","ranges":[{"startOffset":707,"endOffset":1119,"count":411},{"startOffset":787,"endOffset":826,"count":0},{"startOffset":846,"endOffset":858,"count":305},{"startOffset":858,"endOffset":1115,"count":106}],"isBlockCoverage":true},{"functionName":"compile","ranges":[{"startOffset":1124,"endOffset":1403,"count":106},{"startOffset":1251,"endOffset":1268,"count":104},{"startOffset":1268,"endOffset":1402,"count":2}],"isBlockCoverage":true},{"functionName":"register","ranges":[{"startOffset":1424,"endOffset":1758,"count":1},{"startOffset":1509,"endOffset":1525,"count":0},{"startOffset":1643,"endOffset":1661,"count":0}],"isBlockCoverage":true},{"functionName":"revert","ranges":[{"startOffset":1778,"endOffset":1837,"count":0}],"isBlockCoverage":false}]},{"scriptId":"302","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pirates/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5886,"count":1},{"startOffset":576,"endOffset":596,"count":0}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":220,"endOffset":315,"count":2},{"startOffset":288,"endOffset":293,"count":0}],"isBlockCoverage":true},{"functionName":"shouldCompile","ranges":[{"startOffset":1532,"endOffset":2012,"count":411},{"startOffset":1637,"endOffset":1660,"count":0},{"startOffset":1722,"endOffset":1745,"count":0},{"startOffset":1832,"endOffset":1874,"count":0},{"startOffset":1876,"endOffset":1899,"count":0},{"startOffset":1915,"endOffset":1947,"count":0},{"startOffset":1949,"endOffset":1994,"count":0}],"isBlockCoverage":true},{"functionName":"addHook","ranges":[{"startOffset":3440,"endOffset":5886,"count":1},{"startOffset":3967,"endOffset":3984,"count":0},{"startOffset":3985,"endOffset":3996,"count":0},{"startOffset":3997,"endOffset":4007,"count":0},{"startOffset":4038,"endOffset":4062,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4079,"endOffset":5344,"count":6},{"startOffset":4121,"endOffset":4184,"count":0},{"startOffset":4232,"endOffset":4251,"count":5}],"isBlockCoverage":true},{"functionName":"newLoader","ranges":[{"startOffset":4346,"endOffset":5339,"count":411}],"isBlockCoverage":true},{"functionName":"_compile","ranges":[{"startOffset":4558,"endOffset":5281,"count":411},{"startOffset":5133,"endOffset":5216,"count":0}],"isBlockCoverage":true},{"functionName":"revert","ranges":[{"startOffset":5356,"endOffset":5883,"count":0}],"isBlockCoverage":false}]},{"scriptId":"303","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map-support/source-map-support.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":20223,"count":1},{"startOffset":172,"endOffset":235,"count":0},{"startOffset":238,"endOffset":265,"count":0}],"isBlockCoverage":true},{"functionName":"dynamicRequire","ranges":[{"startOffset":444,"endOffset":516,"count":1}],"isBlockCoverage":true},{"functionName":"isInBrowser","ranges":[{"startOffset":1174,"endOffset":1478,"count":0}],"isBlockCoverage":false},{"functionName":"hasGlobalProcessEventEmitter","ranges":[{"startOffset":1480,"endOffset":1625,"count":0}],"isBlockCoverage":false},{"functionName":"globalProcessVersion","ranges":[{"startOffset":1627,"endOffset":1781,"count":0}],"isBlockCoverage":false},{"functionName":"globalProcessStderr","ranges":[{"startOffset":1783,"endOffset":1909,"count":0}],"isBlockCoverage":false},{"functionName":"globalProcessExit","ranges":[{"startOffset":1911,"endOffset":2083,"count":0}],"isBlockCoverage":false},{"functionName":"handlerExec","ranges":[{"startOffset":2085,"endOffset":2287,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2123,"endOffset":2284,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2370,"endOffset":3400,"count":0}],"isBlockCoverage":false},{"functionName":"supportRelativeURL","ranges":[{"startOffset":3575,"endOffset":4063,"count":0}],"isBlockCoverage":false},{"functionName":"retrieveSourceMapURL","ranges":[{"startOffset":4065,"endOffset":5108,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5515,"endOffset":6256,"count":0}],"isBlockCoverage":false},{"functionName":"mapSourcePosition","ranges":[{"startOffset":6260,"endOffset":8072,"count":0}],"isBlockCoverage":false},{"functionName":"mapEvalOrigin","ranges":[{"startOffset":8212,"endOffset":8908,"count":0}],"isBlockCoverage":false},{"functionName":"CallSiteToString","ranges":[{"startOffset":9304,"endOffset":11294,"count":0}],"isBlockCoverage":false},{"functionName":"cloneCallSite","ranges":[{"startOffset":11296,"endOffset":11601,"count":0}],"isBlockCoverage":false},{"functionName":"wrapCallSite","ranges":[{"startOffset":11603,"endOffset":13958,"count":0}],"isBlockCoverage":false},{"functionName":"prepareStackTrace","ranges":[{"startOffset":14070,"endOffset":14683,"count":0}],"isBlockCoverage":false},{"functionName":"getErrorSource","ranges":[{"startOffset":14750,"endOffset":15569,"count":0}],"isBlockCoverage":false},{"functionName":"printErrorAndExit","ranges":[{"startOffset":15571,"endOffset":15977,"count":0}],"isBlockCoverage":false},{"functionName":"shimEmitUncaughtException","ranges":[{"startOffset":15979,"endOffset":16398,"count":0}],"isBlockCoverage":false},{"functionName":"exports.install","ranges":[{"startOffset":16722,"endOffset":19868,"count":1},{"startOffset":16762,"endOffset":16767,"count":0},{"startOffset":16903,"endOffset":17024,"count":0},{"startOffset":17154,"endOffset":17301,"count":0},{"startOffset":17481,"endOffset":17526,"count":0},{"startOffset":17684,"endOffset":17701,"count":0},{"startOffset":17703,"endOffset":18197,"count":0},{"startOffset":18335,"endOffset":18378,"count":0},{"startOffset":18688,"endOffset":18694,"count":0},{"startOffset":19151,"endOffset":19192,"count":0},{"startOffset":19199,"endOffset":19210,"count":0},{"startOffset":19749,"endOffset":19782,"count":0},{"startOffset":19784,"endOffset":19862,"count":0}],"isBlockCoverage":true},{"functionName":"Module._compile","ranges":[{"startOffset":17941,"endOffset":18126,"count":0}],"isBlockCoverage":false},{"functionName":"exports.resetRetrieveHandlers","ranges":[{"startOffset":19903,"endOffset":20222,"count":0}],"isBlockCoverage":false}]},{"scriptId":"304","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/source-map.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":405,"count":1}],"isBlockCoverage":true}]},{"scriptId":"305","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/source-map-generator.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":14356,"count":1}],"isBlockCoverage":true},{"functionName":"SourceMapGenerator","ranges":[{"startOffset":676,"endOffset":1066,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_fromSourceMap","ranges":[{"startOffset":1269,"endOffset":2690,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_addMapping","ranges":[{"startOffset":3228,"endOffset":4140,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_setSourceContent","ranges":[{"startOffset":4246,"endOffset":5137,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_applySourceMap","ranges":[{"startOffset":6124,"endOffset":8836,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_validateMapping","ranges":[{"startOffset":9271,"endOffset":10865,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_serializeMappings","ranges":[{"startOffset":11038,"endOffset":12997,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_generateSourcesContent","ranges":[{"startOffset":13057,"endOffset":13526,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_toJSON","ranges":[{"startOffset":13608,"endOffset":14111,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapGenerator_toString","ranges":[{"startOffset":14218,"endOffset":14304,"count":0}],"isBlockCoverage":false}]},{"scriptId":"306","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/base64-vlq.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4714,"count":1}],"isBlockCoverage":true},{"functionName":"toVLQSigned","ranges":[{"startOffset":2872,"endOffset":2976,"count":0}],"isBlockCoverage":false},{"functionName":"fromVLQSigned","ranges":[{"startOffset":3238,"endOffset":3390,"count":0}],"isBlockCoverage":false},{"functionName":"base64VLQ_encode","ranges":[{"startOffset":3459,"endOffset":3886,"count":0}],"isBlockCoverage":false},{"functionName":"base64VLQ_decode","ranges":[{"startOffset":4049,"endOffset":4712,"count":0}],"isBlockCoverage":false}]},{"scriptId":"307","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/base64.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1540,"count":1}],"isBlockCoverage":true},{"functionName":"exports.encode","ranges":[{"startOffset":403,"endOffset":576,"count":0}],"isBlockCoverage":false},{"functionName":"exports.decode","ranges":[{"startOffset":693,"endOffset":1538,"count":0}],"isBlockCoverage":false}]},{"scriptId":"308","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/util.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12938,"count":1},{"startOffset":6427,"endOffset":6440,"count":0},{"startOffset":6604,"endOffset":6619,"count":0}],"isBlockCoverage":true},{"functionName":"getArg","ranges":[{"startOffset":594,"endOffset":835,"count":0}],"isBlockCoverage":false},{"functionName":"urlParse","ranges":[{"startOffset":982,"endOffset":1200,"count":0}],"isBlockCoverage":false},{"functionName":"urlGenerate","ranges":[{"startOffset":1231,"endOffset":1618,"count":0}],"isBlockCoverage":false},{"functionName":"normalize","ranges":[{"startOffset":1951,"endOffset":2900,"count":0}],"isBlockCoverage":false},{"functionName":"join","ranges":[{"startOffset":3579,"endOffset":4447,"count":0}],"isBlockCoverage":false},{"functionName":"exports.isAbsolute","ranges":[{"startOffset":4491,"endOffset":4570,"count":0}],"isBlockCoverage":false},{"functionName":"relative","ranges":[{"startOffset":4734,"endOffset":5803,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5859,"endOffset":5939,"count":1}],"isBlockCoverage":true},{"functionName":"identity","ranges":[{"startOffset":5945,"endOffset":5982,"count":0}],"isBlockCoverage":false},{"functionName":"toSetString","ranges":[{"startOffset":6273,"endOffset":6375,"count":0}],"isBlockCoverage":false},{"functionName":"fromSetString","ranges":[{"startOffset":6443,"endOffset":6550,"count":0}],"isBlockCoverage":false},{"functionName":"isProtoString","ranges":[{"startOffset":6622,"endOffset":7404,"count":0}],"isBlockCoverage":false},{"functionName":"compareByOriginalPositions","ranges":[{"startOffset":7741,"endOffset":8377,"count":0}],"isBlockCoverage":false},{"functionName":"compareByGeneratedPositionsDeflated","ranges":[{"startOffset":8830,"endOffset":9477,"count":0}],"isBlockCoverage":false},{"functionName":"strcmp","ranges":[{"startOffset":9562,"endOffset":9817,"count":0}],"isBlockCoverage":false},{"functionName":"compareByGeneratedPositionsInflated","ranges":[{"startOffset":9947,"endOffset":10548,"count":0}],"isBlockCoverage":false},{"functionName":"parseSourceMapInput","ranges":[{"startOffset":10788,"endOffset":10881,"count":0}],"isBlockCoverage":false},{"functionName":"computeSourceURL","ranges":[{"startOffset":11047,"endOffset":12892,"count":0}],"isBlockCoverage":false}]},{"scriptId":"309","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/array-set.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3197,"count":1}],"isBlockCoverage":true},{"functionName":"ArraySet","ranges":[{"startOffset":610,"endOffset":715,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_fromArray","ranges":[{"startOffset":819,"endOffset":1019,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_size","ranges":[{"startOffset":1208,"endOffset":1323,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_add","ranges":[{"startOffset":1421,"endOffset":1844,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_has","ranges":[{"startOffset":1950,"endOffset":2127,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_indexOf","ranges":[{"startOffset":2247,"endOffset":2569,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_at","ranges":[{"startOffset":2672,"endOffset":2836,"count":0}],"isBlockCoverage":false},{"functionName":"ArraySet_toArray","ranges":[{"startOffset":3104,"endOffset":3165,"count":0}],"isBlockCoverage":false}]},{"scriptId":"310","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/mapping-list.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2339,"count":1}],"isBlockCoverage":true},{"functionName":"generatedPositionAfter","ranges":[{"startOffset":334,"endOffset":727,"count":0}],"isBlockCoverage":false},{"functionName":"MappingList","ranges":[{"startOffset":957,"endOffset":1105,"count":0}],"isBlockCoverage":false},{"functionName":"MappingList_forEach","ranges":[{"startOffset":1327,"endOffset":1428,"count":0}],"isBlockCoverage":false},{"functionName":"MappingList_add","ranges":[{"startOffset":1529,"endOffset":1753,"count":0}],"isBlockCoverage":false},{"functionName":"MappingList_toArray","ranges":[{"startOffset":2129,"endOffset":2301,"count":0}],"isBlockCoverage":false}]},{"scriptId":"311","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/source-map-consumer.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":40562,"count":1}],"isBlockCoverage":true},{"functionName":"SourceMapConsumer","ranges":[{"startOffset":426,"endOffset":769,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer.fromSourceMap","ranges":[{"startOffset":805,"endOffset":918,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2628,"endOffset":2786,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2970,"endOffset":3126,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_charIsMappingSeparator","ranges":[{"startOffset":3188,"endOffset":3323,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_parseMappings","ranges":[{"startOffset":3567,"endOffset":3697,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_eachMapping","ranges":[{"startOffset":4634,"endOffset":5706,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_allGeneratedPositionsFor","ranges":[{"startOffset":6792,"endOffset":9416,"count":0}],"isBlockCoverage":false},{"functionName":"BasicSourceMapConsumer","ranges":[{"startOffset":10950,"endOffset":13394,"count":0}],"isBlockCoverage":false},{"functionName":"BasicSourceMapConsumer._findSourceIndex","ranges":[{"startOffset":13679,"endOffset":14207,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_fromSourceMap","ranges":[{"startOffset":14544,"endOffset":16555,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16796,"endOffset":16855,"count":0}],"isBlockCoverage":false},{"functionName":"Mapping","ranges":[{"startOffset":16922,"endOffset":17098,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_parseMappings","ranges":[{"startOffset":17346,"endOffset":20551,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_findMapping","ranges":[{"startOffset":20750,"endOffset":21569,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_computeColumnSpans","ranges":[{"startOffset":21724,"endOffset":22603,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_originalPositionFor","ranges":[{"startOffset":23769,"endOffset":25022,"count":0}],"isBlockCoverage":false},{"functionName":"BasicSourceMapConsumer_hasContentsOfAllSources","ranges":[{"startOffset":25195,"endOffset":25452,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_sourceContentFor","ranges":[{"startOffset":25678,"endOffset":27289,"count":0}],"isBlockCoverage":false},{"functionName":"SourceMapConsumer_generatedPositionFor","ranges":[{"startOffset":28401,"endOffset":29507,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedSourceMapConsumer","ranges":[{"startOffset":31455,"endOffset":32949,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33343,"endOffset":33607,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedSourceMapConsumer_originalPositionFor","ranges":[{"startOffset":34426,"endOffset":35605,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedSourceMapConsumer_hasContentsOfAllSources","ranges":[{"startOffset":35780,"endOffset":35951,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedSourceMapConsumer_sourceContentFor","ranges":[{"startOffset":36179,"endOffset":36618,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedSourceMapConsumer_generatedPositionFor","ranges":[{"startOffset":37381,"endOffset":38292,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedSourceMapConsumer_parseMappings","ranges":[{"startOffset":38543,"endOffset":40498,"count":0}],"isBlockCoverage":false}]},{"scriptId":"312","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/binary-search.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4249,"count":1}],"isBlockCoverage":true},{"functionName":"recursiveSearch","ranges":[{"startOffset":931,"endOffset":2523,"count":0}],"isBlockCoverage":false},{"functionName":"search","ranges":[{"startOffset":3578,"endOffset":4247,"count":0}],"isBlockCoverage":false}]},{"scriptId":"313","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/quick-sort.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3616,"count":1}],"isBlockCoverage":true},{"functionName":"swap","ranges":[{"startOffset":1107,"endOffset":1192,"count":0}],"isBlockCoverage":false},{"functionName":"randomIntInRange","ranges":[{"startOffset":1402,"endOffset":1501,"count":0}],"isBlockCoverage":false},{"functionName":"doQuickSort","ranges":[{"startOffset":1783,"endOffset":3301,"count":0}],"isBlockCoverage":false},{"functionName":"exports.quickSort","ranges":[{"startOffset":3533,"endOffset":3614,"count":0}],"isBlockCoverage":false}]},{"scriptId":"314","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/source-map/lib/source-node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":13808,"count":1}],"isBlockCoverage":true},{"functionName":"SourceNode","ranges":[{"startOffset":1281,"endOffset":1654,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_fromStringWithSourceMap","ranges":[{"startOffset":2008,"endOffset":6512,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_add","ranges":[{"startOffset":6757,"endOffset":7182,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_prepend","ranges":[{"startOffset":7448,"endOffset":7865,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_walk","ranges":[{"startOffset":8168,"endOffset":8584,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_join","ranges":[{"startOffset":8763,"endOffset":9102,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_replaceRight","ranges":[{"startOffset":9399,"endOffset":9832,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_setSourceContent","ranges":[{"startOffset":10120,"endOffset":10264,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_walkSourceContents","ranges":[{"startOffset":10508,"endOffset":10922,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_toString","ranges":[{"startOffset":11111,"endOffset":11230,"count":0}],"isBlockCoverage":false},{"functionName":"SourceNode_toStringWithSourceMap","ranges":[{"startOffset":11371,"endOffset":13772,"count":0}],"isBlockCoverage":false}]},{"scriptId":"315","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/buffer-from/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1675,"count":1}],"isBlockCoverage":true},{"functionName":"isArrayBuffer","ranges":[{"startOffset":264,"endOffset":359,"count":0}],"isBlockCoverage":false},{"functionName":"fromArrayBuffer","ranges":[{"startOffset":361,"endOffset":902,"count":0}],"isBlockCoverage":false},{"functionName":"fromString","ranges":[{"startOffset":904,"endOffset":1232,"count":0}],"isBlockCoverage":false},{"functionName":"bufferFrom","ranges":[{"startOffset":1234,"endOffset":1645,"count":0}],"isBlockCoverage":false}]},{"scriptId":"316","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/worker-client.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5993,"count":1}],"isBlockCoverage":true},{"functionName":"_classStaticPrivateFieldSpecSet","ranges":[{"startOffset":78,"endOffset":358,"count":1}],"isBlockCoverage":true},{"functionName":"_classStaticPrivateFieldSpecGet","ranges":[{"startOffset":360,"endOffset":619,"count":109}],"isBlockCoverage":true},{"functionName":"_classCheckPrivateStaticFieldDescriptor","ranges":[{"startOffset":621,"endOffset":823,"count":110},{"startOffset":722,"endOffset":821,"count":0}],"isBlockCoverage":true},{"functionName":"_classCheckPrivateStaticAccess","ranges":[{"startOffset":825,"endOffset":1001,"count":110},{"startOffset":930,"endOffset":999,"count":0}],"isBlockCoverage":true},{"functionName":"_classPrivateFieldInitSpec","ranges":[{"startOffset":1003,"endOffset":1139,"count":2}],"isBlockCoverage":true},{"functionName":"_checkPrivateRedeclaration","ranges":[{"startOffset":1141,"endOffset":1327,"count":2},{"startOffset":1235,"endOffset":1325,"count":0}],"isBlockCoverage":true},{"functionName":"_classPrivateFieldGet","ranges":[{"startOffset":1329,"endOffset":1516,"count":109}],"isBlockCoverage":true},{"functionName":"_classApplyDescriptorGet","ranges":[{"startOffset":1518,"endOffset":1664,"count":218},{"startOffset":1596,"endOffset":1637,"count":0}],"isBlockCoverage":true},{"functionName":"_classPrivateFieldSet","ranges":[{"startOffset":1666,"endOffset":1874,"count":2}],"isBlockCoverage":true},{"functionName":"_classExtractFieldDescriptor","ranges":[{"startOffset":1876,"endOffset":2097,"count":111},{"startOffset":1977,"endOffset":2062,"count":0}],"isBlockCoverage":true},{"functionName":"_classApplyDescriptorSet","ranges":[{"startOffset":2099,"endOffset":2357,"count":3},{"startOffset":2184,"endOffset":2225,"count":0},{"startOffset":2259,"endOffset":2327,"count":0}],"isBlockCoverage":true},{"functionName":"Client","ranges":[{"startOffset":2630,"endOffset":2895,"count":1}],"isBlockCoverage":true},{"functionName":"getDefaultExtensions","ranges":[{"startOffset":2899,"endOffset":3198,"count":1},{"startOffset":3040,"endOffset":3064,"count":0}],"isBlockCoverage":true},{"functionName":"setOptions","ranges":[{"startOffset":3202,"endOffset":3315,"count":1}],"isBlockCoverage":true},{"functionName":"transform","ranges":[{"startOffset":3319,"endOffset":3463,"count":106}],"isBlockCoverage":true},{"functionName":"WorkerClient","ranges":[{"startOffset":3598,"endOffset":4899,"count":0}],"isBlockCoverage":false},{"functionName":"_get_worker_threads","ranges":[{"startOffset":5056,"endOffset":5126,"count":0}],"isBlockCoverage":false},{"functionName":"_get_markInRegisterWorker","ranges":[{"startOffset":5128,"endOffset":5234,"count":0}],"isBlockCoverage":false},{"functionName":"LocalClient","ranges":[{"startOffset":5361,"endOffset":5914,"count":1},{"startOffset":5521,"endOffset":5544,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5666,"endOffset":5873,"count":108},{"startOffset":5821,"endOffset":5845,"count":106},{"startOffset":5846,"endOffset":5854,"count":2}],"isBlockCoverage":true}]},{"scriptId":"317","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/worker/handle-message.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":602,"count":1}],"isBlockCoverage":true},{"functionName":"handleMessage","ranges":[{"startOffset":137,"endOffset":601,"count":108},{"startOffset":203,"endOffset":272,"count":1},{"startOffset":278,"endOffset":338,"count":1},{"startOffset":344,"endOffset":417,"count":0},{"startOffset":423,"endOffset":523,"count":106},{"startOffset":527,"endOffset":600,"count":0}],"isBlockCoverage":true}]},{"scriptId":"318","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/worker/babel-core.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":429,"count":1}],"isBlockCoverage":true},{"functionName":"initialize","ranges":[{"startOffset":0,"endOffset":386,"count":1}],"isBlockCoverage":true}]},{"scriptId":"319","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5713,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":185,"endOffset":228,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":374,"endOffset":433,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":518,"endOffset":572,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":662,"endOffset":721,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":810,"endOffset":868,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":943,"endOffset":992,"count":20}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1072,"endOffset":1121,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1206,"endOffset":1260,"count":19}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1344,"endOffset":1397,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1483,"endOffset":1538,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1629,"endOffset":1689,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1779,"endOffset":1838,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1912,"endOffset":1954,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2033,"endOffset":2080,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2158,"endOffset":2204,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2286,"endOffset":2336,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2418,"endOffset":2468,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2545,"endOffset":2594,"count":39}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2671,"endOffset":2719,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2797,"endOffset":2847,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2930,"endOffset":2985,"count":19}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3067,"endOffset":3125,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3212,"endOffset":3275,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3361,"endOffset":3423,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3508,"endOffset":3568,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3658,"endOffset":3723,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3812,"endOffset":3876,"count":18}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3958,"endOffset":4012,"count":19}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4089,"endOffset":4138,"count":24}],"isBlockCoverage":true},{"functionName":"_types","ranges":[{"startOffset":4412,"endOffset":4537,"count":1}],"isBlockCoverage":true},{"functionName":"_types","ranges":[{"startOffset":4484,"endOffset":4518,"count":29}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4608,"endOffset":4646,"count":30}],"isBlockCoverage":true},{"functionName":"_parser","ranges":[{"startOffset":4652,"endOffset":4780,"count":1}],"isBlockCoverage":true},{"functionName":"_parser","ranges":[{"startOffset":4727,"endOffset":4761,"count":17}],"isBlockCoverage":true},{"functionName":"_traverse","ranges":[{"startOffset":4782,"endOffset":4916,"count":1}],"isBlockCoverage":true},{"functionName":"_traverse","ranges":[{"startOffset":4863,"endOffset":4897,"count":23}],"isBlockCoverage":true},{"functionName":"_template","ranges":[{"startOffset":4918,"endOffset":5052,"count":1}],"isBlockCoverage":true},{"functionName":"_template","ranges":[{"startOffset":4999,"endOffset":5033,"count":38}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":5483,"endOffset":5542,"count":106}],"isBlockCoverage":true},{"functionName":"Plugin","ranges":[{"startOffset":5587,"endOffset":5713,"count":0}],"isBlockCoverage":false}]},{"scriptId":"320","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/file/file.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5864,"count":1}],"isBlockCoverage":true},{"functionName":"helpers","ranges":[{"startOffset":107,"endOffset":236,"count":0}],"isBlockCoverage":false},{"functionName":"_traverse","ranges":[{"startOffset":238,"endOffset":372,"count":0}],"isBlockCoverage":false},{"functionName":"_codeFrame","ranges":[{"startOffset":374,"endOffset":512,"count":0}],"isBlockCoverage":false},{"functionName":"_t","ranges":[{"startOffset":514,"endOffset":631,"count":1}],"isBlockCoverage":true},{"functionName":"_t","ranges":[{"startOffset":578,"endOffset":612,"count":0}],"isBlockCoverage":false},{"functionName":"_helperModuleTransforms","ranges":[{"startOffset":633,"endOffset":811,"count":0}],"isBlockCoverage":false},{"functionName":"_semver","ranges":[{"startOffset":813,"endOffset":934,"count":0}],"isBlockCoverage":false},{"functionName":"enter","ranges":[{"startOffset":1016,"endOffset":1135,"count":0}],"isBlockCoverage":false},{"functionName":"File","ranges":[{"startOffset":1156,"endOffset":1954,"count":0}],"isBlockCoverage":false},{"functionName":"get shebang","ranges":[{"startOffset":1958,"endOffset":2080,"count":0}],"isBlockCoverage":false},{"functionName":"set shebang","ranges":[{"startOffset":2084,"endOffset":2266,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":2270,"endOffset":2732,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2736,"endOffset":2781,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":2785,"endOffset":2830,"count":0}],"isBlockCoverage":false},{"functionName":"getModuleName","ranges":[{"startOffset":2834,"endOffset":2934,"count":0}],"isBlockCoverage":false},{"functionName":"addImport","ranges":[{"startOffset":2938,"endOffset":3219,"count":0}],"isBlockCoverage":false},{"functionName":"availableHelper","ranges":[{"startOffset":3223,"endOffset":3692,"count":0}],"isBlockCoverage":false},{"functionName":"addHelper","ranges":[{"startOffset":3696,"endOffset":4787,"count":0}],"isBlockCoverage":false},{"functionName":"addTemplateObject","ranges":[{"startOffset":4791,"endOffset":4913,"count":0}],"isBlockCoverage":false},{"functionName":"buildCodeFrameError","ranges":[{"startOffset":4917,"endOffset":5836,"count":0}],"isBlockCoverage":false}]},{"scriptId":"321","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16833,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1564,"endOffset":1613,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1693,"endOffset":1743,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1836,"endOffset":1899,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1978,"endOffset":2027,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2122,"endOffset":2187,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2261,"endOffset":2305,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2383,"endOffset":2431,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2519,"endOffset":2577,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2655,"endOffset":2703,"count":17}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2787,"endOffset":2841,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2929,"endOffset":2987,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3073,"endOffset":3129,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3231,"endOffset":3303,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3397,"endOffset":3455,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3535,"endOffset":3585,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3675,"endOffset":3735,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3830,"endOffset":3895,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3984,"endOffset":4043,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4134,"endOffset":4195,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4287,"endOffset":4349,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4426,"endOffset":4473,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4558,"endOffset":4613,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4684,"endOffset":4725,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4803,"endOffset":4851,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4933,"endOffset":4985,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":5065,"endOffset":5115,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":5189,"endOffset":5233,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5308,"endOffset":5353,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5439,"endOffset":5495,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5581,"endOffset":5637,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5718,"endOffset":5769,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":5845,"endOffset":5891,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":5978,"endOffset":6035,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6110,"endOffset":6155,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":6244,"endOffset":6303,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6389,"endOffset":6445,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6519,"endOffset":6563,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":6646,"endOffset":6699,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":6793,"endOffset":6857,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6964,"endOffset":7017,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":7102,"endOffset":7157,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":7246,"endOffset":7305,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":7394,"endOffset":7453,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7534,"endOffset":7585,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7677,"endOffset":7739,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":7815,"endOffset":7861,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7943,"endOffset":7995,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":8076,"endOffset":8127,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":8208,"endOffset":8259,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":8338,"endOffset":8387,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8476,"endOffset":8535,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":8615,"endOffset":8665,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8742,"endOffset":8789,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":8870,"endOffset":8921,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":8998,"endOffset":9045,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":9125,"endOffset":9175,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9516,"endOffset":9855,"count":301},{"startOffset":9582,"endOffset":9589,"count":0},{"startOffset":9653,"endOffset":9660,"count":0},{"startOffset":9682,"endOffset":9717,"count":0},{"startOffset":9719,"endOffset":9726,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":9798,"endOffset":9847,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10202,"endOffset":10543,"count":331},{"startOffset":10268,"endOffset":10275,"count":0},{"startOffset":10339,"endOffset":10346,"count":0},{"startOffset":10368,"endOffset":10404,"count":0},{"startOffset":10406,"endOffset":10413,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":10485,"endOffset":10535,"count":188}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10640,"endOffset":10979,"count":252},{"startOffset":10706,"endOffset":10713,"count":0},{"startOffset":10777,"endOffset":10784,"count":0},{"startOffset":10806,"endOffset":10841,"count":0},{"startOffset":10843,"endOffset":10850,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":10922,"endOffset":10971,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":11796,"endOffset":12137,"count":49},{"startOffset":11862,"endOffset":11869,"count":0},{"startOffset":11933,"endOffset":11940,"count":0},{"startOffset":11962,"endOffset":11998,"count":0},{"startOffset":12000,"endOffset":12007,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":12079,"endOffset":12129,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":12215,"endOffset":12554,"count":20},{"startOffset":12281,"endOffset":12288,"count":0},{"startOffset":12352,"endOffset":12359,"count":0},{"startOffset":12381,"endOffset":12416,"count":0},{"startOffset":12418,"endOffset":12425,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":12497,"endOffset":12546,"count":12}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13248,"endOffset":13591,"count":11},{"startOffset":13314,"endOffset":13321,"count":0},{"startOffset":13385,"endOffset":13392,"count":0},{"startOffset":13414,"endOffset":13451,"count":0},{"startOffset":13453,"endOffset":13460,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":13532,"endOffset":13583,"count":46}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":14298,"endOffset":14635,"count":1},{"startOffset":14339,"endOffset":14362,"count":0},{"startOffset":14371,"endOffset":14498,"count":0},{"startOffset":14500,"endOffset":14634,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":14579,"endOffset":14627,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15893,"endOffset":16234,"count":301},{"startOffset":15959,"endOffset":15966,"count":0},{"startOffset":16030,"endOffset":16037,"count":1},{"startOffset":16037,"endOffset":16059,"count":300},{"startOffset":16059,"endOffset":16095,"count":0},{"startOffset":16097,"endOffset":16104,"count":0},{"startOffset":16104,"endOffset":16233,"count":300}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":16176,"endOffset":16226,"count":523}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":16324,"endOffset":16665,"count":0}],"isBlockCoverage":false}]},{"scriptId":"322","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/react/isReactComponent.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":330,"count":1}],"isBlockCoverage":true}]},{"scriptId":"323","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":351,"count":1}],"isBlockCoverage":true},{"functionName":"buildMatchMemberExpression","ranges":[{"startOffset":179,"endOffset":351,"count":5}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":281,"endOffset":348,"count":0}],"isBlockCoverage":false}]},{"scriptId":"324","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/matchesPattern.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1081,"count":1}],"isBlockCoverage":true},{"functionName":"matchesPattern","ranges":[{"startOffset":157,"endOffset":1081,"count":0}],"isBlockCoverage":false}]},{"scriptId":"325","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/generated/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":126195,"count":1}],"isBlockCoverage":true},{"functionName":"isArrayExpression","ranges":[{"startOffset":14596,"endOffset":14887,"count":0}],"isBlockCoverage":false},{"functionName":"isAssignmentExpression","ranges":[{"startOffset":14889,"endOffset":15190,"count":0}],"isBlockCoverage":false},{"functionName":"isBinaryExpression","ranges":[{"startOffset":15192,"endOffset":15485,"count":0}],"isBlockCoverage":false},{"functionName":"isInterpreterDirective","ranges":[{"startOffset":15487,"endOffset":15788,"count":0}],"isBlockCoverage":false},{"functionName":"isDirective","ranges":[{"startOffset":15790,"endOffset":16069,"count":0}],"isBlockCoverage":false},{"functionName":"isDirectiveLiteral","ranges":[{"startOffset":16071,"endOffset":16364,"count":0}],"isBlockCoverage":false},{"functionName":"isBlockStatement","ranges":[{"startOffset":16366,"endOffset":16655,"count":0}],"isBlockCoverage":false},{"functionName":"isBreakStatement","ranges":[{"startOffset":16657,"endOffset":16946,"count":0}],"isBlockCoverage":false},{"functionName":"isCallExpression","ranges":[{"startOffset":16948,"endOffset":17237,"count":16},{"startOffset":17001,"endOffset":17014,"count":0},{"startOffset":17083,"endOffset":17218,"count":4},{"startOffset":17148,"endOffset":17214,"count":0},{"startOffset":17218,"endOffset":17236,"count":12}],"isBlockCoverage":true},{"functionName":"isCatchClause","ranges":[{"startOffset":17239,"endOffset":17522,"count":0}],"isBlockCoverage":false},{"functionName":"isConditionalExpression","ranges":[{"startOffset":17524,"endOffset":17827,"count":0}],"isBlockCoverage":false},{"functionName":"isContinueStatement","ranges":[{"startOffset":17829,"endOffset":18124,"count":0}],"isBlockCoverage":false},{"functionName":"isDebuggerStatement","ranges":[{"startOffset":18126,"endOffset":18421,"count":0}],"isBlockCoverage":false},{"functionName":"isDoWhileStatement","ranges":[{"startOffset":18423,"endOffset":18716,"count":0}],"isBlockCoverage":false},{"functionName":"isEmptyStatement","ranges":[{"startOffset":18718,"endOffset":19007,"count":0}],"isBlockCoverage":false},{"functionName":"isExpressionStatement","ranges":[{"startOffset":19009,"endOffset":19308,"count":15},{"startOffset":19067,"endOffset":19080,"count":0},{"startOffset":19154,"endOffset":19289,"count":0}],"isBlockCoverage":true},{"functionName":"isFile","ranges":[{"startOffset":19310,"endOffset":19579,"count":0}],"isBlockCoverage":false},{"functionName":"isForInStatement","ranges":[{"startOffset":19581,"endOffset":19870,"count":0}],"isBlockCoverage":false},{"functionName":"isForStatement","ranges":[{"startOffset":19872,"endOffset":20157,"count":0}],"isBlockCoverage":false},{"functionName":"isFunctionDeclaration","ranges":[{"startOffset":20159,"endOffset":20458,"count":0}],"isBlockCoverage":false},{"functionName":"isFunctionExpression","ranges":[{"startOffset":20460,"endOffset":20757,"count":0}],"isBlockCoverage":false},{"functionName":"isIdentifier","ranges":[{"startOffset":20759,"endOffset":21040,"count":165},{"startOffset":20808,"endOffset":20821,"count":0},{"startOffset":20886,"endOffset":21021,"count":54},{"startOffset":20951,"endOffset":21017,"count":0},{"startOffset":21021,"endOffset":21039,"count":111}],"isBlockCoverage":true},{"functionName":"isIfStatement","ranges":[{"startOffset":21042,"endOffset":21325,"count":0}],"isBlockCoverage":false},{"functionName":"isLabeledStatement","ranges":[{"startOffset":21327,"endOffset":21620,"count":0}],"isBlockCoverage":false},{"functionName":"isStringLiteral","ranges":[{"startOffset":21622,"endOffset":21909,"count":130},{"startOffset":21674,"endOffset":21687,"count":0},{"startOffset":21755,"endOffset":21890,"count":8},{"startOffset":21820,"endOffset":21886,"count":0},{"startOffset":21890,"endOffset":21908,"count":122}],"isBlockCoverage":true},{"functionName":"isNumericLiteral","ranges":[{"startOffset":21911,"endOffset":22200,"count":0}],"isBlockCoverage":false},{"functionName":"isNullLiteral","ranges":[{"startOffset":22202,"endOffset":22485,"count":0}],"isBlockCoverage":false},{"functionName":"isBooleanLiteral","ranges":[{"startOffset":22487,"endOffset":22776,"count":0}],"isBlockCoverage":false},{"functionName":"isRegExpLiteral","ranges":[{"startOffset":22778,"endOffset":23065,"count":0}],"isBlockCoverage":false},{"functionName":"isLogicalExpression","ranges":[{"startOffset":23067,"endOffset":23362,"count":0}],"isBlockCoverage":false},{"functionName":"isMemberExpression","ranges":[{"startOffset":23364,"endOffset":23657,"count":0}],"isBlockCoverage":false},{"functionName":"isNewExpression","ranges":[{"startOffset":23659,"endOffset":23946,"count":16},{"startOffset":23711,"endOffset":23724,"count":0},{"startOffset":23792,"endOffset":23927,"count":0}],"isBlockCoverage":true},{"functionName":"isProgram","ranges":[{"startOffset":23948,"endOffset":24223,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectExpression","ranges":[{"startOffset":24225,"endOffset":24518,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectMethod","ranges":[{"startOffset":24520,"endOffset":24805,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectProperty","ranges":[{"startOffset":24807,"endOffset":25096,"count":0}],"isBlockCoverage":false},{"functionName":"isRestElement","ranges":[{"startOffset":25098,"endOffset":25381,"count":0}],"isBlockCoverage":false},{"functionName":"isReturnStatement","ranges":[{"startOffset":25383,"endOffset":25674,"count":0}],"isBlockCoverage":false},{"functionName":"isSequenceExpression","ranges":[{"startOffset":25676,"endOffset":25973,"count":0}],"isBlockCoverage":false},{"functionName":"isParenthesizedExpression","ranges":[{"startOffset":25975,"endOffset":26282,"count":0}],"isBlockCoverage":false},{"functionName":"isSwitchCase","ranges":[{"startOffset":26284,"endOffset":26565,"count":0}],"isBlockCoverage":false},{"functionName":"isSwitchStatement","ranges":[{"startOffset":26567,"endOffset":26858,"count":0}],"isBlockCoverage":false},{"functionName":"isThisExpression","ranges":[{"startOffset":26860,"endOffset":27149,"count":0}],"isBlockCoverage":false},{"functionName":"isThrowStatement","ranges":[{"startOffset":27151,"endOffset":27440,"count":0}],"isBlockCoverage":false},{"functionName":"isTryStatement","ranges":[{"startOffset":27442,"endOffset":27727,"count":0}],"isBlockCoverage":false},{"functionName":"isUnaryExpression","ranges":[{"startOffset":27729,"endOffset":28020,"count":0}],"isBlockCoverage":false},{"functionName":"isUpdateExpression","ranges":[{"startOffset":28022,"endOffset":28315,"count":0}],"isBlockCoverage":false},{"functionName":"isVariableDeclaration","ranges":[{"startOffset":28317,"endOffset":28616,"count":0}],"isBlockCoverage":false},{"functionName":"isVariableDeclarator","ranges":[{"startOffset":28618,"endOffset":28915,"count":0}],"isBlockCoverage":false},{"functionName":"isWhileStatement","ranges":[{"startOffset":28917,"endOffset":29206,"count":0}],"isBlockCoverage":false},{"functionName":"isWithStatement","ranges":[{"startOffset":29208,"endOffset":29495,"count":0}],"isBlockCoverage":false},{"functionName":"isAssignmentPattern","ranges":[{"startOffset":29497,"endOffset":29792,"count":0}],"isBlockCoverage":false},{"functionName":"isArrayPattern","ranges":[{"startOffset":29794,"endOffset":30079,"count":0}],"isBlockCoverage":false},{"functionName":"isArrowFunctionExpression","ranges":[{"startOffset":30081,"endOffset":30388,"count":0}],"isBlockCoverage":false},{"functionName":"isClassBody","ranges":[{"startOffset":30390,"endOffset":30669,"count":0}],"isBlockCoverage":false},{"functionName":"isClassExpression","ranges":[{"startOffset":30671,"endOffset":30962,"count":0}],"isBlockCoverage":false},{"functionName":"isClassDeclaration","ranges":[{"startOffset":30964,"endOffset":31257,"count":0}],"isBlockCoverage":false},{"functionName":"isExportAllDeclaration","ranges":[{"startOffset":31259,"endOffset":31560,"count":0}],"isBlockCoverage":false},{"functionName":"isExportDefaultDeclaration","ranges":[{"startOffset":31562,"endOffset":31871,"count":0}],"isBlockCoverage":false},{"functionName":"isExportNamedDeclaration","ranges":[{"startOffset":31873,"endOffset":32178,"count":0}],"isBlockCoverage":false},{"functionName":"isExportSpecifier","ranges":[{"startOffset":32180,"endOffset":32471,"count":0}],"isBlockCoverage":false},{"functionName":"isForOfStatement","ranges":[{"startOffset":32473,"endOffset":32762,"count":0}],"isBlockCoverage":false},{"functionName":"isImportDeclaration","ranges":[{"startOffset":32764,"endOffset":33059,"count":0}],"isBlockCoverage":false},{"functionName":"isImportDefaultSpecifier","ranges":[{"startOffset":33061,"endOffset":33366,"count":0}],"isBlockCoverage":false},{"functionName":"isImportNamespaceSpecifier","ranges":[{"startOffset":33368,"endOffset":33677,"count":0}],"isBlockCoverage":false},{"functionName":"isImportSpecifier","ranges":[{"startOffset":33679,"endOffset":33970,"count":0}],"isBlockCoverage":false},{"functionName":"isMetaProperty","ranges":[{"startOffset":33972,"endOffset":34257,"count":0}],"isBlockCoverage":false},{"functionName":"isClassMethod","ranges":[{"startOffset":34259,"endOffset":34542,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectPattern","ranges":[{"startOffset":34544,"endOffset":34831,"count":0}],"isBlockCoverage":false},{"functionName":"isSpreadElement","ranges":[{"startOffset":34833,"endOffset":35120,"count":0}],"isBlockCoverage":false},{"functionName":"isSuper","ranges":[{"startOffset":35122,"endOffset":35393,"count":0}],"isBlockCoverage":false},{"functionName":"isTaggedTemplateExpression","ranges":[{"startOffset":35395,"endOffset":35704,"count":0}],"isBlockCoverage":false},{"functionName":"isTemplateElement","ranges":[{"startOffset":35706,"endOffset":35997,"count":0}],"isBlockCoverage":false},{"functionName":"isTemplateLiteral","ranges":[{"startOffset":35999,"endOffset":36290,"count":0}],"isBlockCoverage":false},{"functionName":"isYieldExpression","ranges":[{"startOffset":36292,"endOffset":36583,"count":0}],"isBlockCoverage":false},{"functionName":"isAwaitExpression","ranges":[{"startOffset":36585,"endOffset":36876,"count":0}],"isBlockCoverage":false},{"functionName":"isImport","ranges":[{"startOffset":36878,"endOffset":37151,"count":0}],"isBlockCoverage":false},{"functionName":"isBigIntLiteral","ranges":[{"startOffset":37153,"endOffset":37440,"count":0}],"isBlockCoverage":false},{"functionName":"isExportNamespaceSpecifier","ranges":[{"startOffset":37442,"endOffset":37751,"count":0}],"isBlockCoverage":false},{"functionName":"isOptionalMemberExpression","ranges":[{"startOffset":37753,"endOffset":38062,"count":0}],"isBlockCoverage":false},{"functionName":"isOptionalCallExpression","ranges":[{"startOffset":38064,"endOffset":38369,"count":0}],"isBlockCoverage":false},{"functionName":"isClassProperty","ranges":[{"startOffset":38371,"endOffset":38658,"count":0}],"isBlockCoverage":false},{"functionName":"isClassAccessorProperty","ranges":[{"startOffset":38660,"endOffset":38963,"count":0}],"isBlockCoverage":false},{"functionName":"isClassPrivateProperty","ranges":[{"startOffset":38965,"endOffset":39266,"count":0}],"isBlockCoverage":false},{"functionName":"isClassPrivateMethod","ranges":[{"startOffset":39268,"endOffset":39565,"count":0}],"isBlockCoverage":false},{"functionName":"isPrivateName","ranges":[{"startOffset":39567,"endOffset":39850,"count":0}],"isBlockCoverage":false},{"functionName":"isStaticBlock","ranges":[{"startOffset":39852,"endOffset":40135,"count":0}],"isBlockCoverage":false},{"functionName":"isAnyTypeAnnotation","ranges":[{"startOffset":40137,"endOffset":40432,"count":0}],"isBlockCoverage":false},{"functionName":"isArrayTypeAnnotation","ranges":[{"startOffset":40434,"endOffset":40733,"count":0}],"isBlockCoverage":false},{"functionName":"isBooleanTypeAnnotation","ranges":[{"startOffset":40735,"endOffset":41038,"count":0}],"isBlockCoverage":false},{"functionName":"isBooleanLiteralTypeAnnotation","ranges":[{"startOffset":41040,"endOffset":41357,"count":0}],"isBlockCoverage":false},{"functionName":"isNullLiteralTypeAnnotation","ranges":[{"startOffset":41359,"endOffset":41670,"count":0}],"isBlockCoverage":false},{"functionName":"isClassImplements","ranges":[{"startOffset":41672,"endOffset":41963,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareClass","ranges":[{"startOffset":41965,"endOffset":42250,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareFunction","ranges":[{"startOffset":42252,"endOffset":42543,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareInterface","ranges":[{"startOffset":42545,"endOffset":42838,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareModule","ranges":[{"startOffset":42840,"endOffset":43127,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareModuleExports","ranges":[{"startOffset":43129,"endOffset":43430,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareTypeAlias","ranges":[{"startOffset":43432,"endOffset":43725,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareOpaqueType","ranges":[{"startOffset":43727,"endOffset":44022,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareVariable","ranges":[{"startOffset":44024,"endOffset":44315,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareExportDeclaration","ranges":[{"startOffset":44317,"endOffset":44626,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclareExportAllDeclaration","ranges":[{"startOffset":44628,"endOffset":44943,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclaredPredicate","ranges":[{"startOffset":44945,"endOffset":45240,"count":0}],"isBlockCoverage":false},{"functionName":"isExistsTypeAnnotation","ranges":[{"startOffset":45242,"endOffset":45543,"count":0}],"isBlockCoverage":false},{"functionName":"isFunctionTypeAnnotation","ranges":[{"startOffset":45545,"endOffset":45850,"count":0}],"isBlockCoverage":false},{"functionName":"isFunctionTypeParam","ranges":[{"startOffset":45852,"endOffset":46147,"count":0}],"isBlockCoverage":false},{"functionName":"isGenericTypeAnnotation","ranges":[{"startOffset":46149,"endOffset":46452,"count":0}],"isBlockCoverage":false},{"functionName":"isInferredPredicate","ranges":[{"startOffset":46454,"endOffset":46749,"count":0}],"isBlockCoverage":false},{"functionName":"isInterfaceExtends","ranges":[{"startOffset":46751,"endOffset":47044,"count":0}],"isBlockCoverage":false},{"functionName":"isInterfaceDeclaration","ranges":[{"startOffset":47046,"endOffset":47347,"count":0}],"isBlockCoverage":false},{"functionName":"isInterfaceTypeAnnotation","ranges":[{"startOffset":47349,"endOffset":47656,"count":0}],"isBlockCoverage":false},{"functionName":"isIntersectionTypeAnnotation","ranges":[{"startOffset":47658,"endOffset":47971,"count":0}],"isBlockCoverage":false},{"functionName":"isMixedTypeAnnotation","ranges":[{"startOffset":47973,"endOffset":48272,"count":0}],"isBlockCoverage":false},{"functionName":"isEmptyTypeAnnotation","ranges":[{"startOffset":48274,"endOffset":48573,"count":0}],"isBlockCoverage":false},{"functionName":"isNullableTypeAnnotation","ranges":[{"startOffset":48575,"endOffset":48880,"count":0}],"isBlockCoverage":false},{"functionName":"isNumberLiteralTypeAnnotation","ranges":[{"startOffset":48882,"endOffset":49197,"count":0}],"isBlockCoverage":false},{"functionName":"isNumberTypeAnnotation","ranges":[{"startOffset":49199,"endOffset":49500,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectTypeAnnotation","ranges":[{"startOffset":49502,"endOffset":49803,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectTypeInternalSlot","ranges":[{"startOffset":49805,"endOffset":50110,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectTypeCallProperty","ranges":[{"startOffset":50112,"endOffset":50417,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectTypeIndexer","ranges":[{"startOffset":50419,"endOffset":50714,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectTypeProperty","ranges":[{"startOffset":50716,"endOffset":51013,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectTypeSpreadProperty","ranges":[{"startOffset":51015,"endOffset":51324,"count":0}],"isBlockCoverage":false},{"functionName":"isOpaqueType","ranges":[{"startOffset":51326,"endOffset":51607,"count":0}],"isBlockCoverage":false},{"functionName":"isQualifiedTypeIdentifier","ranges":[{"startOffset":51609,"endOffset":51916,"count":0}],"isBlockCoverage":false},{"functionName":"isStringLiteralTypeAnnotation","ranges":[{"startOffset":51918,"endOffset":52233,"count":0}],"isBlockCoverage":false},{"functionName":"isStringTypeAnnotation","ranges":[{"startOffset":52235,"endOffset":52536,"count":0}],"isBlockCoverage":false},{"functionName":"isSymbolTypeAnnotation","ranges":[{"startOffset":52538,"endOffset":52839,"count":0}],"isBlockCoverage":false},{"functionName":"isThisTypeAnnotation","ranges":[{"startOffset":52841,"endOffset":53138,"count":0}],"isBlockCoverage":false},{"functionName":"isTupleTypeAnnotation","ranges":[{"startOffset":53140,"endOffset":53439,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeofTypeAnnotation","ranges":[{"startOffset":53441,"endOffset":53742,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeAlias","ranges":[{"startOffset":53744,"endOffset":54023,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeAnnotation","ranges":[{"startOffset":54025,"endOffset":54314,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeCastExpression","ranges":[{"startOffset":54316,"endOffset":54613,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeParameter","ranges":[{"startOffset":54615,"endOffset":54902,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeParameterDeclaration","ranges":[{"startOffset":54904,"endOffset":55213,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeParameterInstantiation","ranges":[{"startOffset":55215,"endOffset":55528,"count":0}],"isBlockCoverage":false},{"functionName":"isUnionTypeAnnotation","ranges":[{"startOffset":55530,"endOffset":55829,"count":0}],"isBlockCoverage":false},{"functionName":"isVariance","ranges":[{"startOffset":55831,"endOffset":56108,"count":0}],"isBlockCoverage":false},{"functionName":"isVoidTypeAnnotation","ranges":[{"startOffset":56110,"endOffset":56407,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumDeclaration","ranges":[{"startOffset":56409,"endOffset":56700,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumBooleanBody","ranges":[{"startOffset":56702,"endOffset":56993,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumNumberBody","ranges":[{"startOffset":56995,"endOffset":57284,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumStringBody","ranges":[{"startOffset":57286,"endOffset":57575,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumSymbolBody","ranges":[{"startOffset":57577,"endOffset":57866,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumBooleanMember","ranges":[{"startOffset":57868,"endOffset":58163,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumNumberMember","ranges":[{"startOffset":58165,"endOffset":58458,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumStringMember","ranges":[{"startOffset":58460,"endOffset":58753,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumDefaultedMember","ranges":[{"startOffset":58755,"endOffset":59054,"count":0}],"isBlockCoverage":false},{"functionName":"isIndexedAccessType","ranges":[{"startOffset":59056,"endOffset":59351,"count":0}],"isBlockCoverage":false},{"functionName":"isOptionalIndexedAccessType","ranges":[{"startOffset":59353,"endOffset":59664,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXAttribute","ranges":[{"startOffset":59666,"endOffset":59951,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXClosingElement","ranges":[{"startOffset":59953,"endOffset":60248,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXElement","ranges":[{"startOffset":60250,"endOffset":60531,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXEmptyExpression","ranges":[{"startOffset":60533,"endOffset":60830,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXExpressionContainer","ranges":[{"startOffset":60832,"endOffset":61137,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXSpreadChild","ranges":[{"startOffset":61139,"endOffset":61428,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXIdentifier","ranges":[{"startOffset":61430,"endOffset":61717,"count":111},{"startOffset":61482,"endOffset":61495,"count":0},{"startOffset":61563,"endOffset":61698,"count":0}],"isBlockCoverage":true},{"functionName":"isJSXMemberExpression","ranges":[{"startOffset":61719,"endOffset":62018,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXNamespacedName","ranges":[{"startOffset":62020,"endOffset":62315,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXOpeningElement","ranges":[{"startOffset":62317,"endOffset":62612,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXSpreadAttribute","ranges":[{"startOffset":62614,"endOffset":62911,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXText","ranges":[{"startOffset":62913,"endOffset":63188,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXFragment","ranges":[{"startOffset":63190,"endOffset":63473,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXOpeningFragment","ranges":[{"startOffset":63475,"endOffset":63772,"count":0}],"isBlockCoverage":false},{"functionName":"isJSXClosingFragment","ranges":[{"startOffset":63774,"endOffset":64071,"count":0}],"isBlockCoverage":false},{"functionName":"isNoop","ranges":[{"startOffset":64073,"endOffset":64342,"count":0}],"isBlockCoverage":false},{"functionName":"isPlaceholder","ranges":[{"startOffset":64344,"endOffset":64627,"count":181},{"startOffset":64394,"endOffset":64407,"count":0},{"startOffset":64473,"endOffset":64608,"count":0}],"isBlockCoverage":true},{"functionName":"isV8IntrinsicIdentifier","ranges":[{"startOffset":64629,"endOffset":64932,"count":0}],"isBlockCoverage":false},{"functionName":"isArgumentPlaceholder","ranges":[{"startOffset":64934,"endOffset":65233,"count":0}],"isBlockCoverage":false},{"functionName":"isBindExpression","ranges":[{"startOffset":65235,"endOffset":65524,"count":0}],"isBlockCoverage":false},{"functionName":"isImportAttribute","ranges":[{"startOffset":65526,"endOffset":65817,"count":0}],"isBlockCoverage":false},{"functionName":"isDecorator","ranges":[{"startOffset":65819,"endOffset":66098,"count":0}],"isBlockCoverage":false},{"functionName":"isDoExpression","ranges":[{"startOffset":66100,"endOffset":66385,"count":0}],"isBlockCoverage":false},{"functionName":"isExportDefaultSpecifier","ranges":[{"startOffset":66387,"endOffset":66692,"count":0}],"isBlockCoverage":false},{"functionName":"isRecordExpression","ranges":[{"startOffset":66694,"endOffset":66987,"count":0}],"isBlockCoverage":false},{"functionName":"isTupleExpression","ranges":[{"startOffset":66989,"endOffset":67280,"count":0}],"isBlockCoverage":false},{"functionName":"isDecimalLiteral","ranges":[{"startOffset":67282,"endOffset":67571,"count":0}],"isBlockCoverage":false},{"functionName":"isModuleExpression","ranges":[{"startOffset":67573,"endOffset":67866,"count":0}],"isBlockCoverage":false},{"functionName":"isTopicReference","ranges":[{"startOffset":67868,"endOffset":68157,"count":0}],"isBlockCoverage":false},{"functionName":"isPipelineTopicExpression","ranges":[{"startOffset":68159,"endOffset":68466,"count":0}],"isBlockCoverage":false},{"functionName":"isPipelineBareFunction","ranges":[{"startOffset":68468,"endOffset":68769,"count":0}],"isBlockCoverage":false},{"functionName":"isPipelinePrimaryTopicReference","ranges":[{"startOffset":68771,"endOffset":69090,"count":0}],"isBlockCoverage":false},{"functionName":"isTSParameterProperty","ranges":[{"startOffset":69092,"endOffset":69391,"count":0}],"isBlockCoverage":false},{"functionName":"isTSDeclareFunction","ranges":[{"startOffset":69393,"endOffset":69688,"count":0}],"isBlockCoverage":false},{"functionName":"isTSDeclareMethod","ranges":[{"startOffset":69690,"endOffset":69981,"count":0}],"isBlockCoverage":false},{"functionName":"isTSQualifiedName","ranges":[{"startOffset":69983,"endOffset":70274,"count":0}],"isBlockCoverage":false},{"functionName":"isTSCallSignatureDeclaration","ranges":[{"startOffset":70276,"endOffset":70589,"count":0}],"isBlockCoverage":false},{"functionName":"isTSConstructSignatureDeclaration","ranges":[{"startOffset":70591,"endOffset":70914,"count":0}],"isBlockCoverage":false},{"functionName":"isTSPropertySignature","ranges":[{"startOffset":70916,"endOffset":71215,"count":0}],"isBlockCoverage":false},{"functionName":"isTSMethodSignature","ranges":[{"startOffset":71217,"endOffset":71512,"count":0}],"isBlockCoverage":false},{"functionName":"isTSIndexSignature","ranges":[{"startOffset":71514,"endOffset":71807,"count":0}],"isBlockCoverage":false},{"functionName":"isTSAnyKeyword","ranges":[{"startOffset":71809,"endOffset":72094,"count":0}],"isBlockCoverage":false},{"functionName":"isTSBooleanKeyword","ranges":[{"startOffset":72096,"endOffset":72389,"count":0}],"isBlockCoverage":false},{"functionName":"isTSBigIntKeyword","ranges":[{"startOffset":72391,"endOffset":72682,"count":0}],"isBlockCoverage":false},{"functionName":"isTSIntrinsicKeyword","ranges":[{"startOffset":72684,"endOffset":72981,"count":0}],"isBlockCoverage":false},{"functionName":"isTSNeverKeyword","ranges":[{"startOffset":72983,"endOffset":73272,"count":0}],"isBlockCoverage":false},{"functionName":"isTSNullKeyword","ranges":[{"startOffset":73274,"endOffset":73561,"count":0}],"isBlockCoverage":false},{"functionName":"isTSNumberKeyword","ranges":[{"startOffset":73563,"endOffset":73854,"count":0}],"isBlockCoverage":false},{"functionName":"isTSObjectKeyword","ranges":[{"startOffset":73856,"endOffset":74147,"count":0}],"isBlockCoverage":false},{"functionName":"isTSStringKeyword","ranges":[{"startOffset":74149,"endOffset":74440,"count":0}],"isBlockCoverage":false},{"functionName":"isTSSymbolKeyword","ranges":[{"startOffset":74442,"endOffset":74733,"count":0}],"isBlockCoverage":false},{"functionName":"isTSUndefinedKeyword","ranges":[{"startOffset":74735,"endOffset":75032,"count":0}],"isBlockCoverage":false},{"functionName":"isTSUnknownKeyword","ranges":[{"startOffset":75034,"endOffset":75327,"count":0}],"isBlockCoverage":false},{"functionName":"isTSVoidKeyword","ranges":[{"startOffset":75329,"endOffset":75616,"count":0}],"isBlockCoverage":false},{"functionName":"isTSThisType","ranges":[{"startOffset":75618,"endOffset":75899,"count":0}],"isBlockCoverage":false},{"functionName":"isTSFunctionType","ranges":[{"startOffset":75901,"endOffset":76190,"count":0}],"isBlockCoverage":false},{"functionName":"isTSConstructorType","ranges":[{"startOffset":76192,"endOffset":76487,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeReference","ranges":[{"startOffset":76489,"endOffset":76780,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypePredicate","ranges":[{"startOffset":76782,"endOffset":77073,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeQuery","ranges":[{"startOffset":77075,"endOffset":77358,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeLiteral","ranges":[{"startOffset":77360,"endOffset":77647,"count":0}],"isBlockCoverage":false},{"functionName":"isTSArrayType","ranges":[{"startOffset":77649,"endOffset":77932,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTupleType","ranges":[{"startOffset":77934,"endOffset":78217,"count":0}],"isBlockCoverage":false},{"functionName":"isTSOptionalType","ranges":[{"startOffset":78219,"endOffset":78508,"count":0}],"isBlockCoverage":false},{"functionName":"isTSRestType","ranges":[{"startOffset":78510,"endOffset":78791,"count":0}],"isBlockCoverage":false},{"functionName":"isTSNamedTupleMember","ranges":[{"startOffset":78793,"endOffset":79090,"count":0}],"isBlockCoverage":false},{"functionName":"isTSUnionType","ranges":[{"startOffset":79092,"endOffset":79375,"count":0}],"isBlockCoverage":false},{"functionName":"isTSIntersectionType","ranges":[{"startOffset":79377,"endOffset":79674,"count":0}],"isBlockCoverage":false},{"functionName":"isTSConditionalType","ranges":[{"startOffset":79676,"endOffset":79971,"count":0}],"isBlockCoverage":false},{"functionName":"isTSInferType","ranges":[{"startOffset":79973,"endOffset":80256,"count":0}],"isBlockCoverage":false},{"functionName":"isTSParenthesizedType","ranges":[{"startOffset":80258,"endOffset":80557,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeOperator","ranges":[{"startOffset":80559,"endOffset":80848,"count":0}],"isBlockCoverage":false},{"functionName":"isTSIndexedAccessType","ranges":[{"startOffset":80850,"endOffset":81149,"count":0}],"isBlockCoverage":false},{"functionName":"isTSMappedType","ranges":[{"startOffset":81151,"endOffset":81436,"count":0}],"isBlockCoverage":false},{"functionName":"isTSLiteralType","ranges":[{"startOffset":81438,"endOffset":81725,"count":0}],"isBlockCoverage":false},{"functionName":"isTSExpressionWithTypeArguments","ranges":[{"startOffset":81727,"endOffset":82046,"count":0}],"isBlockCoverage":false},{"functionName":"isTSInterfaceDeclaration","ranges":[{"startOffset":82048,"endOffset":82353,"count":0}],"isBlockCoverage":false},{"functionName":"isTSInterfaceBody","ranges":[{"startOffset":82355,"endOffset":82646,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeAliasDeclaration","ranges":[{"startOffset":82648,"endOffset":82953,"count":0}],"isBlockCoverage":false},{"functionName":"isTSInstantiationExpression","ranges":[{"startOffset":82955,"endOffset":83266,"count":0}],"isBlockCoverage":false},{"functionName":"isTSAsExpression","ranges":[{"startOffset":83268,"endOffset":83557,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeAssertion","ranges":[{"startOffset":83559,"endOffset":83850,"count":0}],"isBlockCoverage":false},{"functionName":"isTSEnumDeclaration","ranges":[{"startOffset":83852,"endOffset":84147,"count":0}],"isBlockCoverage":false},{"functionName":"isTSEnumMember","ranges":[{"startOffset":84149,"endOffset":84434,"count":0}],"isBlockCoverage":false},{"functionName":"isTSModuleDeclaration","ranges":[{"startOffset":84436,"endOffset":84735,"count":0}],"isBlockCoverage":false},{"functionName":"isTSModuleBlock","ranges":[{"startOffset":84737,"endOffset":85024,"count":0}],"isBlockCoverage":false},{"functionName":"isTSImportType","ranges":[{"startOffset":85026,"endOffset":85311,"count":0}],"isBlockCoverage":false},{"functionName":"isTSImportEqualsDeclaration","ranges":[{"startOffset":85313,"endOffset":85624,"count":0}],"isBlockCoverage":false},{"functionName":"isTSExternalModuleReference","ranges":[{"startOffset":85626,"endOffset":85937,"count":0}],"isBlockCoverage":false},{"functionName":"isTSNonNullExpression","ranges":[{"startOffset":85939,"endOffset":86238,"count":0}],"isBlockCoverage":false},{"functionName":"isTSExportAssignment","ranges":[{"startOffset":86240,"endOffset":86537,"count":0}],"isBlockCoverage":false},{"functionName":"isTSNamespaceExportDeclaration","ranges":[{"startOffset":86539,"endOffset":86856,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeAnnotation","ranges":[{"startOffset":86858,"endOffset":87151,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeParameterInstantiation","ranges":[{"startOffset":87153,"endOffset":87470,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeParameterDeclaration","ranges":[{"startOffset":87472,"endOffset":87785,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeParameter","ranges":[{"startOffset":87787,"endOffset":88078,"count":0}],"isBlockCoverage":false},{"functionName":"isStandardized","ranges":[{"startOffset":88080,"endOffset":91507,"count":0}],"isBlockCoverage":false},{"functionName":"isExpression","ranges":[{"startOffset":91509,"endOffset":93661,"count":0}],"isBlockCoverage":false},{"functionName":"isBinary","ranges":[{"startOffset":93663,"endOffset":93982,"count":0}],"isBlockCoverage":false},{"functionName":"isScopable","ranges":[{"startOffset":93984,"endOffset":94940,"count":0}],"isBlockCoverage":false},{"functionName":"isBlockParent","ranges":[{"startOffset":94942,"endOffset":95832,"count":0}],"isBlockCoverage":false},{"functionName":"isBlock","ranges":[{"startOffset":95834,"endOffset":96244,"count":0}],"isBlockCoverage":false},{"functionName":"isStatement","ranges":[{"startOffset":96246,"endOffset":98335,"count":15},{"startOffset":96294,"endOffset":96307,"count":0},{"startOffset":98060,"endOffset":98179,"count":0},{"startOffset":98181,"endOffset":98316,"count":0}],"isBlockCoverage":true},{"functionName":"isTerminatorless","ranges":[{"startOffset":98337,"endOffset":98797,"count":0}],"isBlockCoverage":false},{"functionName":"isCompletionStatement","ranges":[{"startOffset":98799,"endOffset":99196,"count":0}],"isBlockCoverage":false},{"functionName":"isConditional","ranges":[{"startOffset":99198,"endOffset":99521,"count":0}],"isBlockCoverage":false},{"functionName":"isLoop","ranges":[{"startOffset":99523,"endOffset":99934,"count":0}],"isBlockCoverage":false},{"functionName":"isWhile","ranges":[{"startOffset":99936,"endOffset":100251,"count":0}],"isBlockCoverage":false},{"functionName":"isExpressionWrapper","ranges":[{"startOffset":100253,"endOffset":100629,"count":0}],"isBlockCoverage":false},{"functionName":"isFor","ranges":[{"startOffset":100631,"endOffset":100973,"count":0}],"isBlockCoverage":false},{"functionName":"isForXStatement","ranges":[{"startOffset":100975,"endOffset":101296,"count":0}],"isBlockCoverage":false},{"functionName":"isFunction","ranges":[{"startOffset":101298,"endOffset":101763,"count":15},{"startOffset":101345,"endOffset":101358,"count":0},{"startOffset":101431,"endOffset":101467,"count":14},{"startOffset":101468,"endOffset":101498,"count":14},{"startOffset":101499,"endOffset":101540,"count":14},{"startOffset":101541,"endOffset":101570,"count":14},{"startOffset":101571,"endOffset":101607,"count":14},{"startOffset":101609,"endOffset":101744,"count":1},{"startOffset":101674,"endOffset":101740,"count":0},{"startOffset":101744,"endOffset":101762,"count":14}],"isBlockCoverage":true},{"functionName":"isFunctionParent","ranges":[{"startOffset":101765,"endOffset":102266,"count":0}],"isBlockCoverage":false},{"functionName":"isPureish","ranges":[{"startOffset":102268,"endOffset":102930,"count":0}],"isBlockCoverage":false},{"functionName":"isDeclaration","ranges":[{"startOffset":102932,"endOffset":104211,"count":0}],"isBlockCoverage":false},{"functionName":"isPatternLike","ranges":[{"startOffset":104213,"endOffset":104834,"count":0}],"isBlockCoverage":false},{"functionName":"isLVal","ranges":[{"startOffset":104836,"endOffset":105523,"count":0}],"isBlockCoverage":false},{"functionName":"isTSEntityName","ranges":[{"startOffset":105525,"endOffset":105910,"count":0}],"isBlockCoverage":false},{"functionName":"isLiteral","ranges":[{"startOffset":105912,"endOffset":106491,"count":0}],"isBlockCoverage":false},{"functionName":"isImmutable","ranges":[{"startOffset":106493,"endOffset":107344,"count":0}],"isBlockCoverage":false},{"functionName":"isUserWhitespacable","ranges":[{"startOffset":107346,"endOffset":107867,"count":0}],"isBlockCoverage":false},{"functionName":"isMethod","ranges":[{"startOffset":107869,"endOffset":108215,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectMember","ranges":[{"startOffset":108217,"endOffset":108535,"count":0}],"isBlockCoverage":false},{"functionName":"isProperty","ranges":[{"startOffset":108537,"endOffset":108931,"count":0}],"isBlockCoverage":false},{"functionName":"isUnaryLike","ranges":[{"startOffset":108933,"endOffset":109250,"count":0}],"isBlockCoverage":false},{"functionName":"isPattern","ranges":[{"startOffset":109252,"endOffset":109665,"count":0}],"isBlockCoverage":false},{"functionName":"isClass","ranges":[{"startOffset":109667,"endOffset":109983,"count":0}],"isBlockCoverage":false},{"functionName":"isModuleDeclaration","ranges":[{"startOffset":109985,"endOffset":110403,"count":0}],"isBlockCoverage":false},{"functionName":"isExportDeclaration","ranges":[{"startOffset":110405,"endOffset":110787,"count":0}],"isBlockCoverage":false},{"functionName":"isModuleSpecifier","ranges":[{"startOffset":110789,"endOffset":111282,"count":0}],"isBlockCoverage":false},{"functionName":"isAccessor","ranges":[{"startOffset":111284,"endOffset":111574,"count":0}],"isBlockCoverage":false},{"functionName":"isPrivate","ranges":[{"startOffset":111576,"endOffset":111931,"count":0}],"isBlockCoverage":false},{"functionName":"isFlow","ranges":[{"startOffset":111933,"endOffset":114631,"count":0}],"isBlockCoverage":false},{"functionName":"isFlowType","ranges":[{"startOffset":114633,"endOffset":115929,"count":0}],"isBlockCoverage":false},{"functionName":"isFlowBaseAnnotation","ranges":[{"startOffset":115931,"endOffset":116578,"count":0}],"isBlockCoverage":false},{"functionName":"isFlowDeclaration","ranges":[{"startOffset":116580,"endOffset":117298,"count":0}],"isBlockCoverage":false},{"functionName":"isFlowPredicate","ranges":[{"startOffset":117300,"endOffset":117627,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumBody","ranges":[{"startOffset":117629,"endOffset":118012,"count":0}],"isBlockCoverage":false},{"functionName":"isEnumMember","ranges":[{"startOffset":118014,"endOffset":118410,"count":0}],"isBlockCoverage":false},{"functionName":"isJSX","ranges":[{"startOffset":118412,"endOffset":119173,"count":0}],"isBlockCoverage":false},{"functionName":"isMiscellaneous","ranges":[{"startOffset":119175,"endOffset":119523,"count":0}],"isBlockCoverage":false},{"functionName":"isTypeScript","ranges":[{"startOffset":119525,"endOffset":122071,"count":0}],"isBlockCoverage":false},{"functionName":"isTSTypeElement","ranges":[{"startOffset":122073,"endOffset":122532,"count":0}],"isBlockCoverage":false},{"functionName":"isTSType","ranges":[{"startOffset":122534,"endOffset":123958,"count":0}],"isBlockCoverage":false},{"functionName":"isTSBaseType","ranges":[{"startOffset":123960,"endOffset":124715,"count":0}],"isBlockCoverage":false},{"functionName":"isNumberLiteral","ranges":[{"startOffset":124717,"endOffset":125087,"count":0}],"isBlockCoverage":false},{"functionName":"isRegexLiteral","ranges":[{"startOffset":125089,"endOffset":125455,"count":0}],"isBlockCoverage":false},{"functionName":"isRestProperty","ranges":[{"startOffset":125457,"endOffset":125821,"count":0}],"isBlockCoverage":false},{"functionName":"isSpreadProperty","ranges":[{"startOffset":125823,"endOffset":126195,"count":0}],"isBlockCoverage":false}]},{"scriptId":"326","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/utils/shallowEqual.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":310,"count":1}],"isBlockCoverage":true},{"functionName":"shallowEqual","ranges":[{"startOffset":113,"endOffset":310,"count":0}],"isBlockCoverage":false}]},{"scriptId":"327","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/react/isCompatTag.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":191,"count":1}],"isBlockCoverage":true},{"functionName":"isCompatTag","ranges":[{"startOffset":112,"endOffset":191,"count":0}],"isBlockCoverage":false}]},{"scriptId":"328","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/react/buildChildren.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":736,"count":1}],"isBlockCoverage":true},{"functionName":"buildChildren","ranges":[{"startOffset":265,"endOffset":736,"count":0}],"isBlockCoverage":false}]},{"scriptId":"329","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1060,"count":1}],"isBlockCoverage":true},{"functionName":"cleanJSXElementLiteralChild","ranges":[{"startOffset":183,"endOffset":1060,"count":0}],"isBlockCoverage":false}]},{"scriptId":"330","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/generated/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":51283,"count":1}],"isBlockCoverage":true},{"functionName":"arrayExpression","ranges":[{"startOffset":13948,"endOffset":14077,"count":0}],"isBlockCoverage":false},{"functionName":"assignmentExpression","ranges":[{"startOffset":14079,"endOffset":14247,"count":0}],"isBlockCoverage":false},{"functionName":"binaryExpression","ranges":[{"startOffset":14249,"endOffset":14409,"count":0}],"isBlockCoverage":false},{"functionName":"interpreterDirective","ranges":[{"startOffset":14411,"endOffset":14539,"count":0}],"isBlockCoverage":false},{"functionName":"directive","ranges":[{"startOffset":14541,"endOffset":14647,"count":0}],"isBlockCoverage":false},{"functionName":"directiveLiteral","ranges":[{"startOffset":14649,"endOffset":14769,"count":0}],"isBlockCoverage":false},{"functionName":"blockStatement","ranges":[{"startOffset":14771,"endOffset":14918,"count":0}],"isBlockCoverage":false},{"functionName":"breakStatement","ranges":[{"startOffset":14920,"endOffset":15043,"count":0}],"isBlockCoverage":false},{"functionName":"callExpression","ranges":[{"startOffset":15045,"endOffset":15202,"count":0}],"isBlockCoverage":false},{"functionName":"catchClause","ranges":[{"startOffset":15204,"endOffset":15337,"count":0}],"isBlockCoverage":false},{"functionName":"conditionalExpression","ranges":[{"startOffset":15339,"endOffset":15521,"count":0}],"isBlockCoverage":false},{"functionName":"continueStatement","ranges":[{"startOffset":15523,"endOffset":15652,"count":0}],"isBlockCoverage":false},{"functionName":"debuggerStatement","ranges":[{"startOffset":15654,"endOffset":15732,"count":0}],"isBlockCoverage":false},{"functionName":"doWhileStatement","ranges":[{"startOffset":15734,"endOffset":15868,"count":0}],"isBlockCoverage":false},{"functionName":"emptyStatement","ranges":[{"startOffset":15870,"endOffset":15942,"count":0}],"isBlockCoverage":false},{"functionName":"expressionStatement","ranges":[{"startOffset":15944,"endOffset":16080,"count":0}],"isBlockCoverage":false},{"functionName":"file","ranges":[{"startOffset":16082,"endOffset":16240,"count":0}],"isBlockCoverage":false},{"functionName":"forInStatement","ranges":[{"startOffset":16242,"endOffset":16390,"count":0}],"isBlockCoverage":false},{"functionName":"forStatement","ranges":[{"startOffset":16392,"endOffset":16575,"count":0}],"isBlockCoverage":false},{"functionName":"functionDeclaration","ranges":[{"startOffset":16577,"endOffset":16800,"count":0}],"isBlockCoverage":false},{"functionName":"functionExpression","ranges":[{"startOffset":16802,"endOffset":17023,"count":0}],"isBlockCoverage":false},{"functionName":"identifier","ranges":[{"startOffset":17025,"endOffset":17131,"count":2}],"isBlockCoverage":true},{"functionName":"ifStatement","ranges":[{"startOffset":17133,"endOffset":17302,"count":0}],"isBlockCoverage":false},{"functionName":"labeledStatement","ranges":[{"startOffset":17304,"endOffset":17440,"count":0}],"isBlockCoverage":false},{"functionName":"stringLiteral","ranges":[{"startOffset":17442,"endOffset":17556,"count":0}],"isBlockCoverage":false},{"functionName":"numericLiteral","ranges":[{"startOffset":17558,"endOffset":17674,"count":0}],"isBlockCoverage":false},{"functionName":"nullLiteral","ranges":[{"startOffset":17676,"endOffset":17742,"count":0}],"isBlockCoverage":false},{"functionName":"booleanLiteral","ranges":[{"startOffset":17744,"endOffset":17860,"count":0}],"isBlockCoverage":false},{"functionName":"regExpLiteral","ranges":[{"startOffset":17862,"endOffset":18003,"count":0}],"isBlockCoverage":false},{"functionName":"logicalExpression","ranges":[{"startOffset":18005,"endOffset":18167,"count":0}],"isBlockCoverage":false},{"functionName":"memberExpression","ranges":[{"startOffset":18169,"endOffset":18378,"count":0}],"isBlockCoverage":false},{"functionName":"newExpression","ranges":[{"startOffset":18380,"endOffset":18535,"count":0}],"isBlockCoverage":false},{"functionName":"program","ranges":[{"startOffset":18537,"endOffset":18768,"count":0}],"isBlockCoverage":false},{"functionName":"objectExpression","ranges":[{"startOffset":18770,"endOffset":18900,"count":0}],"isBlockCoverage":false},{"functionName":"objectMethod","ranges":[{"startOffset":18902,"endOffset":19165,"count":0}],"isBlockCoverage":false},{"functionName":"objectProperty","ranges":[{"startOffset":19167,"endOffset":19398,"count":1}],"isBlockCoverage":true},{"functionName":"restElement","ranges":[{"startOffset":19400,"endOffset":19516,"count":0}],"isBlockCoverage":false},{"functionName":"returnStatement","ranges":[{"startOffset":19518,"endOffset":19649,"count":0}],"isBlockCoverage":false},{"functionName":"sequenceExpression","ranges":[{"startOffset":19651,"endOffset":19787,"count":0}],"isBlockCoverage":false},{"functionName":"parenthesizedExpression","ranges":[{"startOffset":19789,"endOffset":19933,"count":0}],"isBlockCoverage":false},{"functionName":"switchCase","ranges":[{"startOffset":19935,"endOffset":20076,"count":0}],"isBlockCoverage":false},{"functionName":"switchStatement","ranges":[{"startOffset":20078,"endOffset":20228,"count":0}],"isBlockCoverage":false},{"functionName":"thisExpression","ranges":[{"startOffset":20230,"endOffset":20302,"count":0}],"isBlockCoverage":false},{"functionName":"throwStatement","ranges":[{"startOffset":20304,"endOffset":20426,"count":0}],"isBlockCoverage":false},{"functionName":"tryStatement","ranges":[{"startOffset":20428,"endOffset":20602,"count":0}],"isBlockCoverage":false},{"functionName":"unaryExpression","ranges":[{"startOffset":20604,"endOffset":20779,"count":0}],"isBlockCoverage":false},{"functionName":"updateExpression","ranges":[{"startOffset":20781,"endOffset":20959,"count":0}],"isBlockCoverage":false},{"functionName":"variableDeclaration","ranges":[{"startOffset":20961,"endOffset":21117,"count":0}],"isBlockCoverage":false},{"functionName":"variableDeclarator","ranges":[{"startOffset":21119,"endOffset":21260,"count":0}],"isBlockCoverage":false},{"functionName":"whileStatement","ranges":[{"startOffset":21262,"endOffset":21392,"count":0}],"isBlockCoverage":false},{"functionName":"withStatement","ranges":[{"startOffset":21394,"endOffset":21526,"count":0}],"isBlockCoverage":false},{"functionName":"assignmentPattern","ranges":[{"startOffset":21528,"endOffset":21666,"count":0}],"isBlockCoverage":false},{"functionName":"arrayPattern","ranges":[{"startOffset":21668,"endOffset":21786,"count":0}],"isBlockCoverage":false},{"functionName":"arrowFunctionExpression","ranges":[{"startOffset":21788,"endOffset":21988,"count":0}],"isBlockCoverage":false},{"functionName":"classBody","ranges":[{"startOffset":21990,"endOffset":22094,"count":0}],"isBlockCoverage":false},{"functionName":"classExpression","ranges":[{"startOffset":22096,"endOffset":22301,"count":0}],"isBlockCoverage":false},{"functionName":"classDeclaration","ranges":[{"startOffset":22303,"endOffset":22503,"count":0}],"isBlockCoverage":false},{"functionName":"exportAllDeclaration","ranges":[{"startOffset":22505,"endOffset":22635,"count":0}],"isBlockCoverage":false},{"functionName":"exportDefaultDeclaration","ranges":[{"startOffset":22637,"endOffset":22785,"count":0}],"isBlockCoverage":false},{"functionName":"exportNamedDeclaration","ranges":[{"startOffset":22787,"endOffset":22998,"count":0}],"isBlockCoverage":false},{"functionName":"exportSpecifier","ranges":[{"startOffset":23000,"endOffset":23142,"count":0}],"isBlockCoverage":false},{"functionName":"forOfStatement","ranges":[{"startOffset":23144,"endOffset":23327,"count":0}],"isBlockCoverage":false},{"functionName":"importDeclaration","ranges":[{"startOffset":23329,"endOffset":23481,"count":0}],"isBlockCoverage":false},{"functionName":"importDefaultSpecifier","ranges":[{"startOffset":23483,"endOffset":23615,"count":0}],"isBlockCoverage":false},{"functionName":"importNamespaceSpecifier","ranges":[{"startOffset":23617,"endOffset":23753,"count":0}],"isBlockCoverage":false},{"functionName":"importSpecifier","ranges":[{"startOffset":23755,"endOffset":23897,"count":0}],"isBlockCoverage":false},{"functionName":"metaProperty","ranges":[{"startOffset":23899,"endOffset":24033,"count":0}],"isBlockCoverage":false},{"functionName":"classMethod","ranges":[{"startOffset":24035,"endOffset":24334,"count":0}],"isBlockCoverage":false},{"functionName":"objectPattern","ranges":[{"startOffset":24336,"endOffset":24460,"count":1}],"isBlockCoverage":true},{"functionName":"spreadElement","ranges":[{"startOffset":24462,"endOffset":24582,"count":0}],"isBlockCoverage":false},{"functionName":"_super","ranges":[{"startOffset":24584,"endOffset":24639,"count":0}],"isBlockCoverage":false},{"functionName":"taggedTemplateExpression","ranges":[{"startOffset":24641,"endOffset":24791,"count":0}],"isBlockCoverage":false},{"functionName":"templateElement","ranges":[{"startOffset":24793,"endOffset":24935,"count":0}],"isBlockCoverage":false},{"functionName":"templateLiteral","ranges":[{"startOffset":24937,"endOffset":25087,"count":0}],"isBlockCoverage":false},{"functionName":"yieldExpression","ranges":[{"startOffset":25089,"endOffset":25252,"count":0}],"isBlockCoverage":false},{"functionName":"awaitExpression","ranges":[{"startOffset":25254,"endOffset":25378,"count":0}],"isBlockCoverage":false},{"functionName":"_import","ranges":[{"startOffset":25380,"endOffset":25437,"count":0}],"isBlockCoverage":false},{"functionName":"bigIntLiteral","ranges":[{"startOffset":25439,"endOffset":25553,"count":0}],"isBlockCoverage":false},{"functionName":"exportNamespaceSpecifier","ranges":[{"startOffset":25555,"endOffset":25697,"count":0}],"isBlockCoverage":false},{"functionName":"optionalMemberExpression","ranges":[{"startOffset":25699,"endOffset":25917,"count":0}],"isBlockCoverage":false},{"functionName":"optionalCallExpression","ranges":[{"startOffset":25919,"endOffset":26116,"count":0}],"isBlockCoverage":false},{"functionName":"classProperty","ranges":[{"startOffset":26118,"endOffset":26401,"count":0}],"isBlockCoverage":false},{"functionName":"classAccessorProperty","ranges":[{"startOffset":26403,"endOffset":26702,"count":0}],"isBlockCoverage":false},{"functionName":"classPrivateProperty","ranges":[{"startOffset":26704,"endOffset":26918,"count":0}],"isBlockCoverage":false},{"functionName":"classPrivateMethod","ranges":[{"startOffset":26920,"endOffset":27141,"count":0}],"isBlockCoverage":false},{"functionName":"privateName","ranges":[{"startOffset":27143,"endOffset":27247,"count":0}],"isBlockCoverage":false},{"functionName":"staticBlock","ranges":[{"startOffset":27249,"endOffset":27357,"count":0}],"isBlockCoverage":false},{"functionName":"anyTypeAnnotation","ranges":[{"startOffset":27359,"endOffset":27437,"count":0}],"isBlockCoverage":false},{"functionName":"arrayTypeAnnotation","ranges":[{"startOffset":27439,"endOffset":27577,"count":0}],"isBlockCoverage":false},{"functionName":"booleanTypeAnnotation","ranges":[{"startOffset":27579,"endOffset":27665,"count":0}],"isBlockCoverage":false},{"functionName":"booleanLiteralTypeAnnotation","ranges":[{"startOffset":27667,"endOffset":27811,"count":0}],"isBlockCoverage":false},{"functionName":"nullLiteralTypeAnnotation","ranges":[{"startOffset":27813,"endOffset":27907,"count":0}],"isBlockCoverage":false},{"functionName":"classImplements","ranges":[{"startOffset":27909,"endOffset":28064,"count":0}],"isBlockCoverage":false},{"functionName":"declareClass","ranges":[{"startOffset":28066,"endOffset":28271,"count":0}],"isBlockCoverage":false},{"functionName":"declareFunction","ranges":[{"startOffset":28273,"endOffset":28385,"count":0}],"isBlockCoverage":false},{"functionName":"declareInterface","ranges":[{"startOffset":28387,"endOffset":28600,"count":0}],"isBlockCoverage":false},{"functionName":"declareModule","ranges":[{"startOffset":28602,"endOffset":28749,"count":0}],"isBlockCoverage":false},{"functionName":"declareModuleExports","ranges":[{"startOffset":28751,"endOffset":28897,"count":0}],"isBlockCoverage":false},{"functionName":"declareTypeAlias","ranges":[{"startOffset":28899,"endOffset":29074,"count":0}],"isBlockCoverage":false},{"functionName":"declareOpaqueType","ranges":[{"startOffset":29076,"endOffset":29268,"count":0}],"isBlockCoverage":false},{"functionName":"declareVariable","ranges":[{"startOffset":29270,"endOffset":29382,"count":0}],"isBlockCoverage":false},{"functionName":"declareExportDeclaration","ranges":[{"startOffset":29384,"endOffset":29601,"count":0}],"isBlockCoverage":false},{"functionName":"declareExportAllDeclaration","ranges":[{"startOffset":29603,"endOffset":29747,"count":0}],"isBlockCoverage":false},{"functionName":"declaredPredicate","ranges":[{"startOffset":29749,"endOffset":29871,"count":0}],"isBlockCoverage":false},{"functionName":"existsTypeAnnotation","ranges":[{"startOffset":29873,"endOffset":29957,"count":0}],"isBlockCoverage":false},{"functionName":"functionTypeAnnotation","ranges":[{"startOffset":29959,"endOffset":30187,"count":0}],"isBlockCoverage":false},{"functionName":"functionTypeParam","ranges":[{"startOffset":30189,"endOffset":30352,"count":0}],"isBlockCoverage":false},{"functionName":"genericTypeAnnotation","ranges":[{"startOffset":30354,"endOffset":30521,"count":0}],"isBlockCoverage":false},{"functionName":"inferredPredicate","ranges":[{"startOffset":30523,"endOffset":30601,"count":0}],"isBlockCoverage":false},{"functionName":"interfaceExtends","ranges":[{"startOffset":30603,"endOffset":30760,"count":0}],"isBlockCoverage":false},{"functionName":"interfaceDeclaration","ranges":[{"startOffset":30762,"endOffset":30983,"count":0}],"isBlockCoverage":false},{"functionName":"interfaceTypeAnnotation","ranges":[{"startOffset":30985,"endOffset":31157,"count":0}],"isBlockCoverage":false},{"functionName":"intersectionTypeAnnotation","ranges":[{"startOffset":31159,"endOffset":31299,"count":0}],"isBlockCoverage":false},{"functionName":"mixedTypeAnnotation","ranges":[{"startOffset":31301,"endOffset":31383,"count":0}],"isBlockCoverage":false},{"functionName":"emptyTypeAnnotation","ranges":[{"startOffset":31385,"endOffset":31467,"count":0}],"isBlockCoverage":false},{"functionName":"nullableTypeAnnotation","ranges":[{"startOffset":31469,"endOffset":31619,"count":0}],"isBlockCoverage":false},{"functionName":"numberLiteralTypeAnnotation","ranges":[{"startOffset":31621,"endOffset":31763,"count":0}],"isBlockCoverage":false},{"functionName":"numberTypeAnnotation","ranges":[{"startOffset":31765,"endOffset":31849,"count":0}],"isBlockCoverage":false},{"functionName":"objectTypeAnnotation","ranges":[{"startOffset":31851,"endOffset":32124,"count":0}],"isBlockCoverage":false},{"functionName":"objectTypeInternalSlot","ranges":[{"startOffset":32126,"endOffset":32344,"count":0}],"isBlockCoverage":false},{"functionName":"objectTypeCallProperty","ranges":[{"startOffset":32346,"endOffset":32496,"count":0}],"isBlockCoverage":false},{"functionName":"objectTypeIndexer","ranges":[{"startOffset":32498,"endOffset":32702,"count":0}],"isBlockCoverage":false},{"functionName":"objectTypeProperty","ranges":[{"startOffset":32704,"endOffset":32962,"count":0}],"isBlockCoverage":false},{"functionName":"objectTypeSpreadProperty","ranges":[{"startOffset":32964,"endOffset":33106,"count":0}],"isBlockCoverage":false},{"functionName":"opaqueType","ranges":[{"startOffset":33108,"endOffset":33310,"count":0}],"isBlockCoverage":false},{"functionName":"qualifiedTypeIdentifier","ranges":[{"startOffset":33312,"endOffset":33474,"count":0}],"isBlockCoverage":false},{"functionName":"stringLiteralTypeAnnotation","ranges":[{"startOffset":33476,"endOffset":33618,"count":0}],"isBlockCoverage":false},{"functionName":"stringTypeAnnotation","ranges":[{"startOffset":33620,"endOffset":33704,"count":0}],"isBlockCoverage":false},{"functionName":"symbolTypeAnnotation","ranges":[{"startOffset":33706,"endOffset":33790,"count":0}],"isBlockCoverage":false},{"functionName":"thisTypeAnnotation","ranges":[{"startOffset":33792,"endOffset":33872,"count":0}],"isBlockCoverage":false},{"functionName":"tupleTypeAnnotation","ranges":[{"startOffset":33874,"endOffset":34000,"count":0}],"isBlockCoverage":false},{"functionName":"typeofTypeAnnotation","ranges":[{"startOffset":34002,"endOffset":34136,"count":0}],"isBlockCoverage":false},{"functionName":"typeAlias","ranges":[{"startOffset":34138,"endOffset":34299,"count":0}],"isBlockCoverage":false},{"functionName":"typeAnnotation","ranges":[{"startOffset":34301,"endOffset":34435,"count":0}],"isBlockCoverage":false},{"functionName":"typeCastExpression","ranges":[{"startOffset":34437,"endOffset":34607,"count":0}],"isBlockCoverage":false},{"functionName":"typeParameter","ranges":[{"startOffset":34609,"endOffset":34817,"count":0}],"isBlockCoverage":false},{"functionName":"typeParameterDeclaration","ranges":[{"startOffset":34819,"endOffset":34957,"count":0}],"isBlockCoverage":false},{"functionName":"typeParameterInstantiation","ranges":[{"startOffset":34959,"endOffset":35101,"count":0}],"isBlockCoverage":false},{"functionName":"unionTypeAnnotation","ranges":[{"startOffset":35103,"endOffset":35229,"count":0}],"isBlockCoverage":false},{"functionName":"variance","ranges":[{"startOffset":35231,"endOffset":35333,"count":0}],"isBlockCoverage":false},{"functionName":"voidTypeAnnotation","ranges":[{"startOffset":35335,"endOffset":35415,"count":0}],"isBlockCoverage":false},{"functionName":"enumDeclaration","ranges":[{"startOffset":35417,"endOffset":35545,"count":0}],"isBlockCoverage":false},{"functionName":"enumBooleanBody","ranges":[{"startOffset":35547,"endOffset":35722,"count":0}],"isBlockCoverage":false},{"functionName":"enumNumberBody","ranges":[{"startOffset":35724,"endOffset":35897,"count":0}],"isBlockCoverage":false},{"functionName":"enumStringBody","ranges":[{"startOffset":35899,"endOffset":36072,"count":0}],"isBlockCoverage":false},{"functionName":"enumSymbolBody","ranges":[{"startOffset":36074,"endOffset":36223,"count":0}],"isBlockCoverage":false},{"functionName":"enumBooleanMember","ranges":[{"startOffset":36225,"endOffset":36357,"count":0}],"isBlockCoverage":false},{"functionName":"enumNumberMember","ranges":[{"startOffset":36359,"endOffset":36489,"count":0}],"isBlockCoverage":false},{"functionName":"enumStringMember","ranges":[{"startOffset":36491,"endOffset":36621,"count":0}],"isBlockCoverage":false},{"functionName":"enumDefaultedMember","ranges":[{"startOffset":36623,"endOffset":36743,"count":0}],"isBlockCoverage":false},{"functionName":"indexedAccessType","ranges":[{"startOffset":36745,"endOffset":36903,"count":0}],"isBlockCoverage":false},{"functionName":"optionalIndexedAccessType","ranges":[{"startOffset":36905,"endOffset":37099,"count":0}],"isBlockCoverage":false},{"functionName":"jsxAttribute","ranges":[{"startOffset":37101,"endOffset":37236,"count":0}],"isBlockCoverage":false},{"functionName":"jsxClosingElement","ranges":[{"startOffset":37238,"endOffset":37358,"count":0}],"isBlockCoverage":false},{"functionName":"jsxElement","ranges":[{"startOffset":37360,"endOffset":37590,"count":0}],"isBlockCoverage":false},{"functionName":"jsxEmptyExpression","ranges":[{"startOffset":37592,"endOffset":37672,"count":0}],"isBlockCoverage":false},{"functionName":"jsxExpressionContainer","ranges":[{"startOffset":37674,"endOffset":37816,"count":0}],"isBlockCoverage":false},{"functionName":"jsxSpreadChild","ranges":[{"startOffset":37818,"endOffset":37944,"count":0}],"isBlockCoverage":false},{"functionName":"jsxIdentifier","ranges":[{"startOffset":37946,"endOffset":38058,"count":0}],"isBlockCoverage":false},{"functionName":"jsxMemberExpression","ranges":[{"startOffset":38060,"endOffset":38212,"count":0}],"isBlockCoverage":false},{"functionName":"jsxNamespacedName","ranges":[{"startOffset":38214,"endOffset":38360,"count":0}],"isBlockCoverage":false},{"functionName":"jsxOpeningElement","ranges":[{"startOffset":38362,"endOffset":38548,"count":0}],"isBlockCoverage":false},{"functionName":"jsxSpreadAttribute","ranges":[{"startOffset":38550,"endOffset":38680,"count":0}],"isBlockCoverage":false},{"functionName":"jsxText","ranges":[{"startOffset":38682,"endOffset":38784,"count":0}],"isBlockCoverage":false},{"functionName":"jsxFragment","ranges":[{"startOffset":38786,"endOffset":38978,"count":0}],"isBlockCoverage":false},{"functionName":"jsxOpeningFragment","ranges":[{"startOffset":38980,"endOffset":39060,"count":0}],"isBlockCoverage":false},{"functionName":"jsxClosingFragment","ranges":[{"startOffset":39062,"endOffset":39142,"count":0}],"isBlockCoverage":false},{"functionName":"noop","ranges":[{"startOffset":39144,"endOffset":39196,"count":0}],"isBlockCoverage":false},{"functionName":"placeholder","ranges":[{"startOffset":39198,"endOffset":39338,"count":0}],"isBlockCoverage":false},{"functionName":"v8IntrinsicIdentifier","ranges":[{"startOffset":39340,"endOffset":39468,"count":0}],"isBlockCoverage":false},{"functionName":"argumentPlaceholder","ranges":[{"startOffset":39470,"endOffset":39552,"count":0}],"isBlockCoverage":false},{"functionName":"bindExpression","ranges":[{"startOffset":39554,"endOffset":39692,"count":0}],"isBlockCoverage":false},{"functionName":"importAttribute","ranges":[{"startOffset":39694,"endOffset":39826,"count":0}],"isBlockCoverage":false},{"functionName":"decorator","ranges":[{"startOffset":39828,"endOffset":39944,"count":0}],"isBlockCoverage":false},{"functionName":"doExpression","ranges":[{"startOffset":39946,"endOffset":40082,"count":0}],"isBlockCoverage":false},{"functionName":"exportDefaultSpecifier","ranges":[{"startOffset":40084,"endOffset":40222,"count":0}],"isBlockCoverage":false},{"functionName":"recordExpression","ranges":[{"startOffset":40224,"endOffset":40354,"count":0}],"isBlockCoverage":false},{"functionName":"tupleExpression","ranges":[{"startOffset":40356,"endOffset":40485,"count":0}],"isBlockCoverage":false},{"functionName":"decimalLiteral","ranges":[{"startOffset":40487,"endOffset":40603,"count":0}],"isBlockCoverage":false},{"functionName":"moduleExpression","ranges":[{"startOffset":40605,"endOffset":40723,"count":0}],"isBlockCoverage":false},{"functionName":"topicReference","ranges":[{"startOffset":40725,"endOffset":40797,"count":0}],"isBlockCoverage":false},{"functionName":"pipelineTopicExpression","ranges":[{"startOffset":40799,"endOffset":40943,"count":0}],"isBlockCoverage":false},{"functionName":"pipelineBareFunction","ranges":[{"startOffset":40945,"endOffset":41075,"count":0}],"isBlockCoverage":false},{"functionName":"pipelinePrimaryTopicReference","ranges":[{"startOffset":41077,"endOffset":41179,"count":0}],"isBlockCoverage":false},{"functionName":"tsParameterProperty","ranges":[{"startOffset":41181,"endOffset":41315,"count":0}],"isBlockCoverage":false},{"functionName":"tsDeclareFunction","ranges":[{"startOffset":41317,"endOffset":41538,"count":0}],"isBlockCoverage":false},{"functionName":"tsDeclareMethod","ranges":[{"startOffset":41540,"endOffset":41787,"count":0}],"isBlockCoverage":false},{"functionName":"tsQualifiedName","ranges":[{"startOffset":41789,"endOffset":41923,"count":0}],"isBlockCoverage":false},{"functionName":"tsCallSignatureDeclaration","ranges":[{"startOffset":41925,"endOffset":42161,"count":0}],"isBlockCoverage":false},{"functionName":"tsConstructSignatureDeclaration","ranges":[{"startOffset":42163,"endOffset":42409,"count":0}],"isBlockCoverage":false},{"functionName":"tsPropertySignature","ranges":[{"startOffset":42411,"endOffset":42629,"count":0}],"isBlockCoverage":false},{"functionName":"tsMethodSignature","ranges":[{"startOffset":42631,"endOffset":42879,"count":0}],"isBlockCoverage":false},{"functionName":"tsIndexSignature","ranges":[{"startOffset":42881,"endOffset":43054,"count":0}],"isBlockCoverage":false},{"functionName":"tsAnyKeyword","ranges":[{"startOffset":43056,"endOffset":43124,"count":0}],"isBlockCoverage":false},{"functionName":"tsBooleanKeyword","ranges":[{"startOffset":43126,"endOffset":43202,"count":0}],"isBlockCoverage":false},{"functionName":"tsBigIntKeyword","ranges":[{"startOffset":43204,"endOffset":43278,"count":0}],"isBlockCoverage":false},{"functionName":"tsIntrinsicKeyword","ranges":[{"startOffset":43280,"endOffset":43360,"count":0}],"isBlockCoverage":false},{"functionName":"tsNeverKeyword","ranges":[{"startOffset":43362,"endOffset":43434,"count":0}],"isBlockCoverage":false},{"functionName":"tsNullKeyword","ranges":[{"startOffset":43436,"endOffset":43506,"count":0}],"isBlockCoverage":false},{"functionName":"tsNumberKeyword","ranges":[{"startOffset":43508,"endOffset":43582,"count":0}],"isBlockCoverage":false},{"functionName":"tsObjectKeyword","ranges":[{"startOffset":43584,"endOffset":43658,"count":0}],"isBlockCoverage":false},{"functionName":"tsStringKeyword","ranges":[{"startOffset":43660,"endOffset":43734,"count":0}],"isBlockCoverage":false},{"functionName":"tsSymbolKeyword","ranges":[{"startOffset":43736,"endOffset":43810,"count":0}],"isBlockCoverage":false},{"functionName":"tsUndefinedKeyword","ranges":[{"startOffset":43812,"endOffset":43892,"count":0}],"isBlockCoverage":false},{"functionName":"tsUnknownKeyword","ranges":[{"startOffset":43894,"endOffset":43970,"count":0}],"isBlockCoverage":false},{"functionName":"tsVoidKeyword","ranges":[{"startOffset":43972,"endOffset":44042,"count":0}],"isBlockCoverage":false},{"functionName":"tsThisType","ranges":[{"startOffset":44044,"endOffset":44108,"count":0}],"isBlockCoverage":false},{"functionName":"tsFunctionType","ranges":[{"startOffset":44110,"endOffset":44322,"count":0}],"isBlockCoverage":false},{"functionName":"tsConstructorType","ranges":[{"startOffset":44324,"endOffset":44542,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeReference","ranges":[{"startOffset":44544,"endOffset":44711,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypePredicate","ranges":[{"startOffset":44713,"endOffset":44919,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeQuery","ranges":[{"startOffset":44921,"endOffset":45080,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeLiteral","ranges":[{"startOffset":45082,"endOffset":45200,"count":0}],"isBlockCoverage":false},{"functionName":"tsArrayType","ranges":[{"startOffset":45202,"endOffset":45324,"count":0}],"isBlockCoverage":false},{"functionName":"tsTupleType","ranges":[{"startOffset":45326,"endOffset":45450,"count":0}],"isBlockCoverage":false},{"functionName":"tsOptionalType","ranges":[{"startOffset":45452,"endOffset":45586,"count":0}],"isBlockCoverage":false},{"functionName":"tsRestType","ranges":[{"startOffset":45588,"endOffset":45714,"count":0}],"isBlockCoverage":false},{"functionName":"tsNamedTupleMember","ranges":[{"startOffset":45716,"endOffset":45902,"count":0}],"isBlockCoverage":false},{"functionName":"tsUnionType","ranges":[{"startOffset":45904,"endOffset":46014,"count":0}],"isBlockCoverage":false},{"functionName":"tsIntersectionType","ranges":[{"startOffset":46016,"endOffset":46140,"count":0}],"isBlockCoverage":false},{"functionName":"tsConditionalType","ranges":[{"startOffset":46142,"endOffset":46352,"count":0}],"isBlockCoverage":false},{"functionName":"tsInferType","ranges":[{"startOffset":46354,"endOffset":46480,"count":0}],"isBlockCoverage":false},{"functionName":"tsParenthesizedType","ranges":[{"startOffset":46482,"endOffset":46626,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeOperator","ranges":[{"startOffset":46628,"endOffset":46782,"count":0}],"isBlockCoverage":false},{"functionName":"tsIndexedAccessType","ranges":[{"startOffset":46784,"endOffset":46946,"count":0}],"isBlockCoverage":false},{"functionName":"tsMappedType","ranges":[{"startOffset":46948,"endOffset":47150,"count":0}],"isBlockCoverage":false},{"functionName":"tsLiteralType","ranges":[{"startOffset":47152,"endOffset":47270,"count":0}],"isBlockCoverage":false},{"functionName":"tsExpressionWithTypeArguments","ranges":[{"startOffset":47272,"endOffset":47471,"count":0}],"isBlockCoverage":false},{"functionName":"tsInterfaceDeclaration","ranges":[{"startOffset":47473,"endOffset":47698,"count":0}],"isBlockCoverage":false},{"functionName":"tsInterfaceBody","ranges":[{"startOffset":47700,"endOffset":47816,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeAliasDeclaration","ranges":[{"startOffset":47818,"endOffset":48023,"count":0}],"isBlockCoverage":false},{"functionName":"tsInstantiationExpression","ranges":[{"startOffset":48025,"endOffset":48216,"count":0}],"isBlockCoverage":false},{"functionName":"tsAsExpression","ranges":[{"startOffset":48218,"endOffset":48380,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeAssertion","ranges":[{"startOffset":48382,"endOffset":48546,"count":0}],"isBlockCoverage":false},{"functionName":"tsEnumDeclaration","ranges":[{"startOffset":48548,"endOffset":48686,"count":0}],"isBlockCoverage":false},{"functionName":"tsEnumMember","ranges":[{"startOffset":48688,"endOffset":48831,"count":0}],"isBlockCoverage":false},{"functionName":"tsModuleDeclaration","ranges":[{"startOffset":48833,"endOffset":48969,"count":0}],"isBlockCoverage":false},{"functionName":"tsModuleBlock","ranges":[{"startOffset":48971,"endOffset":49083,"count":0}],"isBlockCoverage":false},{"functionName":"tsImportType","ranges":[{"startOffset":49085,"endOffset":49279,"count":0}],"isBlockCoverage":false},{"functionName":"tsImportEqualsDeclaration","ranges":[{"startOffset":49281,"endOffset":49471,"count":0}],"isBlockCoverage":false},{"functionName":"tsExternalModuleReference","ranges":[{"startOffset":49473,"endOffset":49621,"count":0}],"isBlockCoverage":false},{"functionName":"tsNonNullExpression","ranges":[{"startOffset":49623,"endOffset":49759,"count":0}],"isBlockCoverage":false},{"functionName":"tsExportAssignment","ranges":[{"startOffset":49761,"endOffset":49895,"count":0}],"isBlockCoverage":false},{"functionName":"tsNamespaceExportDeclaration","ranges":[{"startOffset":49897,"endOffset":50035,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeAnnotation","ranges":[{"startOffset":50037,"endOffset":50175,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeParameterInstantiation","ranges":[{"startOffset":50177,"endOffset":50323,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeParameterDeclaration","ranges":[{"startOffset":50325,"endOffset":50467,"count":0}],"isBlockCoverage":false},{"functionName":"tsTypeParameter","ranges":[{"startOffset":50469,"endOffset":50660,"count":0}],"isBlockCoverage":false},{"functionName":"NumberLiteral","ranges":[{"startOffset":50662,"endOffset":50810,"count":0}],"isBlockCoverage":false},{"functionName":"RegexLiteral","ranges":[{"startOffset":50812,"endOffset":50979,"count":0}],"isBlockCoverage":false},{"functionName":"RestProperty","ranges":[{"startOffset":50981,"endOffset":51127,"count":0}],"isBlockCoverage":false},{"functionName":"SpreadProperty","ranges":[{"startOffset":51129,"endOffset":51283,"count":0}],"isBlockCoverage":false}]},{"scriptId":"331","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/validateNode.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":361,"count":1}],"isBlockCoverage":true},{"functionName":"validateNode","ranges":[{"startOffset":189,"endOffset":361,"count":4},{"startOffset":288,"endOffset":343,"count":8}],"isBlockCoverage":true}]},{"scriptId":"332","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/validate.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":842,"count":1}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":234,"endOffset":471,"count":8},{"startOffset":283,"endOffset":290,"count":0},{"startOffset":360,"endOffset":367,"count":0}],"isBlockCoverage":true},{"functionName":"validateField","ranges":[{"startOffset":473,"endOffset":651,"count":8},{"startOffset":563,"endOffset":570,"count":0},{"startOffset":592,"endOffset":606,"count":1},{"startOffset":608,"endOffset":615,"count":1},{"startOffset":615,"endOffset":650,"count":7}],"isBlockCoverage":true},{"functionName":"validateChild","ranges":[{"startOffset":653,"endOffset":842,"count":11},{"startOffset":713,"endOffset":720,"count":1},{"startOffset":720,"endOffset":805,"count":10},{"startOffset":805,"endOffset":841,"count":5}],"isBlockCoverage":true}]},{"scriptId":"333","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2297,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":154,"endOffset":201,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":282,"endOffset":331,"count":4}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":415,"endOffset":467,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":554,"endOffset":609,"count":53}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":689,"endOffset":737,"count":8}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":829,"endOffset":889,"count":10}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":970,"endOffset":1026,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1113,"endOffset":1175,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1270,"endOffset":1340,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1445,"endOffset":1494,"count":335}],"isBlockCoverage":true}]},{"scriptId":"334","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/to-fast-properties/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1001,"count":1}],"isBlockCoverage":true},{"functionName":"FastObject","ranges":[{"startOffset":349,"endOffset":856,"count":18},{"startOffset":635,"endOffset":663,"count":9},{"startOffset":665,"endOffset":804,"count":9},{"startOffset":804,"endOffset":825,"count":1},{"startOffset":826,"endOffset":829,"count":8}],"isBlockCoverage":true},{"functionName":"toFastproperties","ranges":[{"startOffset":944,"endOffset":999,"count":8}],"isBlockCoverage":true}]},{"scriptId":"335","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/core.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":52747,"count":1},{"startOffset":919,"endOffset":930,"count":0},{"startOffset":1652,"endOffset":1807,"count":0},{"startOffset":4674,"endOffset":4678,"count":0},{"startOffset":6899,"endOffset":6982,"count":0},{"startOffset":7447,"endOffset":7625,"count":0},{"startOffset":15718,"endOffset":15722,"count":0},{"startOffset":16572,"endOffset":16576,"count":0},{"startOffset":18156,"endOffset":18160,"count":0},{"startOffset":19339,"endOffset":19343,"count":0},{"startOffset":21899,"endOffset":22054,"count":0},{"startOffset":25643,"endOffset":25705,"count":0},{"startOffset":46974,"endOffset":47073,"count":0},{"startOffset":47695,"endOffset":47794,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1078,"endOffset":1541,"count":1},{"startOffset":1208,"endOffset":1540,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1367,"endOffset":1532,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2208,"endOffset":2644,"count":1}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":2396,"endOffset":2542,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.comments.validate.process.env.BABEL_TYPES_8_BREAKING.Object.assign.each.oneOfNodeTypes","ranges":[{"startOffset":6794,"endOffset":6802,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.tokens.validate.Object.assign.type","ranges":[{"startOffset":7079,"endOffset":7087,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9963,"endOffset":10272,"count":1},{"startOffset":10038,"endOffset":10271,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10029,"endOffset":10037,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10115,"endOffset":10267,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.Object.assign.name.validate.Object.assign.type","ranges":[{"startOffset":11507,"endOffset":11744,"count":2},{"startOffset":11591,"endOffset":11736,"count":0}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":11896,"endOffset":13104,"count":4},{"startOffset":11978,"endOffset":12995,"count":0},{"startOffset":12997,"endOffset":13020,"count":0},{"startOffset":13022,"endOffset":13100,"count":0}],"isBlockCoverage":true},{"functionName":"defineType.fields.flags.validate.Object.assign.type","ranges":[{"startOffset":14853,"endOffset":15103,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15932,"endOffset":16373,"count":1}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":16120,"endOffset":16257,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18234,"endOffset":18715,"count":1}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":18442,"endOffset":18579,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":19430,"endOffset":20011,"count":1}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":19688,"endOffset":19825,"count":1},{"startOffset":19758,"endOffset":19768,"count":0}],"isBlockCoverage":true},{"functionName":"defineType.fields.shorthand.validate.Object.assign.type","ranges":[{"startOffset":20218,"endOffset":20463,"count":1},{"startOffset":20302,"endOffset":20336,"count":0},{"startOffset":20338,"endOffset":20455,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20501,"endOffset":20782,"count":1},{"startOffset":20585,"endOffset":20647,"count":0},{"startOffset":20649,"endOffset":20774,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21118,"endOffset":21571,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21341,"endOffset":21566,"count":1},{"startOffset":21426,"endOffset":21502,"count":0},{"startOffset":21503,"endOffset":21515,"count":0}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":22170,"endOffset":22537,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.block.validate.Object.assign.oneOfNodeTypes","ranges":[{"startOffset":24505,"endOffset":24740,"count":0}],"isBlockCoverage":false},{"functionName":"validate","ranges":[{"startOffset":26383,"endOffset":26724,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":26830,"endOffset":27279,"count":1},{"startOffset":26957,"endOffset":27278,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27138,"endOffset":27270,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":33193,"endOffset":33496,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33283,"endOffset":33491,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.declaration.validate.Object.assign.oneOfNodeTypes","ranges":[{"startOffset":34740,"endOffset":34990,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":35044,"endOffset":35257,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":35588,"endOffset":36028,"count":1},{"startOffset":35865,"endOffset":36027,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":35881,"endOffset":36019,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":36874,"endOffset":37510,"count":1},{"startOffset":37024,"endOffset":37509,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":37296,"endOffset":37501,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.meta.validate.Object.assign.oneOfNodeTypes","ranges":[{"startOffset":39467,"endOffset":40019,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":40657,"endOffset":40985,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":40847,"endOffset":40978,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":44450,"endOffset":44736,"count":0}],"isBlockCoverage":false},{"functionName":"defineType.fields.delegate.validate.Object.assign.type","ranges":[{"startOffset":45007,"endOffset":45257,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":46400,"endOffset":46811,"count":1}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":46573,"endOffset":46710,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":49469,"endOffset":49826,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":49680,"endOffset":49817,"count":0}],"isBlockCoverage":false}]},{"scriptId":"336","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/is.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":747,"count":1}],"isBlockCoverage":true},{"functionName":"is","ranges":[{"startOffset":299,"endOffset":747,"count":6},{"startOffset":344,"endOffset":357,"count":0},{"startOffset":432,"endOffset":624,"count":1},{"startOffset":479,"endOffset":521,"count":0},{"startOffset":523,"endOffset":601,"count":0},{"startOffset":624,"endOffset":683,"count":5},{"startOffset":683,"endOffset":745,"count":0}],"isBlockCoverage":true}]},{"scriptId":"337","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isType.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":529,"count":1}],"isBlockCoverage":true},{"functionName":"isType","ranges":[{"startOffset":154,"endOffset":529,"count":6},{"startOffset":225,"endOffset":237,"count":4},{"startOffset":237,"endOffset":281,"count":2},{"startOffset":281,"endOffset":510,"count":1},{"startOffset":409,"endOffset":421,"count":0},{"startOffset":456,"endOffset":506,"count":7},{"startOffset":488,"endOffset":500,"count":1},{"startOffset":506,"endOffset":510,"count":0},{"startOffset":510,"endOffset":528,"count":0}],"isBlockCoverage":true}]},{"scriptId":"338","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isPlaceholderType.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":468,"count":1}],"isBlockCoverage":true},{"functionName":"isPlaceholderType","ranges":[{"startOffset":165,"endOffset":468,"count":0}],"isBlockCoverage":false}]},{"scriptId":"339","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isValidIdentifier.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":540,"count":1}],"isBlockCoverage":true},{"functionName":"isValidIdentifier","ranges":[{"startOffset":199,"endOffset":540,"count":0}],"isBlockCoverage":false}]},{"scriptId":"340","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-validator-identifier/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1322,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":160,"endOffset":218,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":303,"endOffset":361,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":447,"endOffset":506,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":584,"endOffset":632,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":715,"endOffset":768,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":865,"endOffset":932,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1025,"endOffset":1088,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1177,"endOffset":1236,"count":0}],"isBlockCoverage":false}]},{"scriptId":"341","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-validator-identifier/lib/identifier.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12003,"count":1}],"isBlockCoverage":true},{"functionName":"isInAstralSet","ranges":[{"startOffset":10401,"endOffset":10652,"count":0}],"isBlockCoverage":false},{"functionName":"isIdentifierStart","ranges":[{"startOffset":10654,"endOffset":10999,"count":0}],"isBlockCoverage":false},{"functionName":"isIdentifierChar","ranges":[{"startOffset":11001,"endOffset":11447,"count":0}],"isBlockCoverage":false},{"functionName":"isIdentifierName","ranges":[{"startOffset":11449,"endOffset":12003,"count":0}],"isBlockCoverage":false}]},{"scriptId":"342","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-validator-identifier/lib/keyword.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1544,"count":1}],"isBlockCoverage":true},{"functionName":"isReservedWord","ranges":[{"startOffset":1020,"endOffset":1121,"count":0}],"isBlockCoverage":false},{"functionName":"isStrictReservedWord","ranges":[{"startOffset":1123,"endOffset":1249,"count":0}],"isBlockCoverage":false},{"functionName":"isStrictBindOnlyReservedWord","ranges":[{"startOffset":1251,"endOffset":1345,"count":0}],"isBlockCoverage":false},{"functionName":"isStrictBindReservedWord","ranges":[{"startOffset":1347,"endOffset":1485,"count":0}],"isBlockCoverage":false},{"functionName":"isKeyword","ranges":[{"startOffset":1487,"endOffset":1544,"count":0}],"isBlockCoverage":false}]},{"scriptId":"343","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/constants/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3248,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2244,"endOffset":2258,"count":11}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2286,"endOffset":2300,"count":3}],"isBlockCoverage":true}]},{"scriptId":"344","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9111,"count":1}],"isBlockCoverage":true},{"functionName":"getType","ranges":[{"startOffset":1550,"endOffset":1709,"count":19},{"startOffset":1600,"endOffset":1625,"count":1},{"startOffset":1625,"endOffset":1707,"count":18},{"startOffset":1649,"endOffset":1673,"count":0}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":1711,"endOffset":1771,"count":142}],"isBlockCoverage":true},{"functionName":"typeIs","ranges":[{"startOffset":1773,"endOffset":1898,"count":175},{"startOffset":1839,"endOffset":1865,"count":158},{"startOffset":1866,"endOffset":1895,"count":17}],"isBlockCoverage":true},{"functionName":"validateType","ranges":[{"startOffset":1900,"endOffset":1972,"count":97}],"isBlockCoverage":true},{"functionName":"validateOptional","ranges":[{"startOffset":1974,"endOffset":2062,"count":34}],"isBlockCoverage":true},{"functionName":"validateOptionalType","ranges":[{"startOffset":2064,"endOffset":2174,"count":44}],"isBlockCoverage":true},{"functionName":"arrayOf","ranges":[{"startOffset":2176,"endOffset":2276,"count":34}],"isBlockCoverage":true},{"functionName":"arrayOfType","ranges":[{"startOffset":2278,"endOffset":2348,"count":34}],"isBlockCoverage":true},{"functionName":"validateArrayOfType","ranges":[{"startOffset":2350,"endOffset":2434,"count":12}],"isBlockCoverage":true},{"functionName":"assertEach","ranges":[{"startOffset":2436,"endOffset":2836,"count":81}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":2470,"endOffset":2784,"count":1},{"startOffset":2536,"endOffset":2543,"count":0},{"startOffset":2728,"endOffset":2774,"count":0}],"isBlockCoverage":true},{"functionName":"assertOneOf","ranges":[{"startOffset":2838,"endOffset":3134,"count":28}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":2874,"endOffset":3085,"count":0}],"isBlockCoverage":false},{"functionName":"assertNodeType","ranges":[{"startOffset":3136,"endOffset":3610,"count":391}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":3174,"endOffset":3553,"count":3},{"startOffset":3240,"endOffset":3366,"count":4},{"startOffset":3281,"endOffset":3360,"count":3},{"startOffset":3366,"endOffset":3533,"count":0},{"startOffset":3534,"endOffset":3544,"count":0}],"isBlockCoverage":true},{"functionName":"assertNodeOrValueType","ranges":[{"startOffset":3612,"endOffset":4125,"count":2}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":3657,"endOffset":4061,"count":0}],"isBlockCoverage":false},{"functionName":"assertValueType","ranges":[{"startOffset":4127,"endOffset":4408,"count":169}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":4162,"endOffset":4362,"count":5},{"startOffset":4256,"endOffset":4358,"count":0}],"isBlockCoverage":true},{"functionName":"assertShape","ranges":[{"startOffset":4410,"endOffset":5020,"count":1}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":4442,"endOffset":4970,"count":0}],"isBlockCoverage":false},{"functionName":"assertOptionalChainStart","ranges":[{"startOffset":5022,"endOffset":5745,"count":0}],"isBlockCoverage":false},{"functionName":"chain","ranges":[{"startOffset":5747,"endOffset":6124,"count":90},{"startOffset":5930,"endOffset":5956,"count":85},{"startOffset":5957,"endOffset":5979,"count":80},{"startOffset":5981,"endOffset":6102,"count":0}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":5774,"endOffset":5859,"count":4},{"startOffset":5829,"endOffset":5855,"count":9}],"isBlockCoverage":true},{"functionName":"defineAliasedType","ranges":[{"startOffset":6297,"endOffset":6849,"count":5}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6347,"endOffset":6846,"count":234},{"startOffset":6421,"endOffset":6704,"count":35},{"startOffset":6492,"endOffset":6606,"count":1},{"startOffset":6565,"endOffset":6573,"count":0},{"startOffset":6642,"endOffset":6652,"count":1},{"startOffset":6653,"endOffset":6667,"count":34}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6744,"endOffset":6769,"count":234}],"isBlockCoverage":true},{"functionName":"defineType","ranges":[{"startOffset":6851,"endOffset":9092,"count":248},{"startOffset":6923,"endOffset":6946,"count":3},{"startOffset":6947,"endOffset":6952,"count":245},{"startOffset":6998,"endOffset":7584,"count":26},{"startOffset":7043,"endOffset":7580,"count":1},{"startOffset":7140,"endOffset":7574,"count":5},{"startOffset":7253,"endOffset":7269,"count":0},{"startOffset":7276,"endOffset":7302,"count":0},{"startOffset":7304,"endOffset":7409,"count":0},{"startOffset":7473,"endOffset":7477,"count":0},{"startOffset":7617,"endOffset":7636,"count":43},{"startOffset":7637,"endOffset":7642,"count":40},{"startOffset":7675,"endOffset":7694,"count":3},{"startOffset":7695,"endOffset":7700,"count":3},{"startOffset":7733,"endOffset":7752,"count":183},{"startOffset":7753,"endOffset":7768,"count":180},{"startOffset":7769,"endOffset":7774,"count":24},{"startOffset":7814,"endOffset":7932,"count":750},{"startOffset":7857,"endOffset":7928,"count":0},{"startOffset":7962,"endOffset":8017,"count":4},{"startOffset":8064,"endOffset":8106,"count":847},{"startOffset":8096,"endOffset":8101,"count":1},{"startOffset":8149,"endOffset":8662,"count":607},{"startOffset":8219,"endOffset":8249,"count":125},{"startOffset":8251,"endOffset":8287,"count":53},{"startOffset":8326,"endOffset":8361,"count":482},{"startOffset":8361,"endOffset":8484,"count":125},{"startOffset":8387,"endOffset":8411,"count":14},{"startOffset":8413,"endOffset":8484,"count":14},{"startOffset":8526,"endOffset":8658,"count":1466},{"startOffset":8572,"endOffset":8652,"count":0},{"startOffset":9011,"endOffset":9067,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8865,"endOffset":8986,"count":646},{"startOffset":8934,"endOffset":8939,"count":49}],"isBlockCoverage":true}]},{"scriptId":"345","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/flow.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16038,"count":1}],"isBlockCoverage":true},{"functionName":"defineInterfaceishType","ranges":[{"startOffset":139,"endOffset":906,"count":3}],"isBlockCoverage":true}]},{"scriptId":"346","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/jsx.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4346,"count":1}],"isBlockCoverage":true}]},{"scriptId":"347","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/misc.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":636,"count":1}],"isBlockCoverage":true}]},{"scriptId":"348","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/placeholders.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1070,"count":1},{"startOffset":567,"endOffset":682,"count":8},{"startOffset":630,"endOffset":645,"count":4},{"startOffset":647,"endOffset":680,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":828,"endOffset":1068,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":873,"endOffset":1064,"count":19},{"startOffset":956,"endOffset":1009,"count":12}],"isBlockCoverage":true}]},{"scriptId":"349","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/experimental.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3187,"count":1},{"startOffset":472,"endOffset":634,"count":0}],"isBlockCoverage":true},{"functionName":"fields.process.env.BABEL_TYPES_8_BREAKING.object.validate.Object.assign.oneOfNodeTypes","ranges":[{"startOffset":291,"endOffset":299,"count":0}],"isBlockCoverage":false},{"functionName":"fields.process.env.BABEL_TYPES_8_BREAKING.callee.validate.Object.assign.oneOfNodeTypes","ranges":[{"startOffset":402,"endOffset":410,"count":0}],"isBlockCoverage":false}]},{"scriptId":"350","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/definitions/typescript.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15311,"count":1},{"startOffset":4090,"endOffset":4191,"count":13}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8649,"endOffset":9411,"count":1}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":8949,"endOffset":9250,"count":0}],"isBlockCoverage":false}]},{"scriptId":"351","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/asserts/assertNode.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":424,"count":1}],"isBlockCoverage":true},{"functionName":"assertNode","ranges":[{"startOffset":159,"endOffset":424,"count":0}],"isBlockCoverage":false}]},{"scriptId":"352","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isNode.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":238,"count":1}],"isBlockCoverage":true},{"functionName":"isNode","ranges":[{"startOffset":154,"endOffset":238,"count":0}],"isBlockCoverage":false}]},{"scriptId":"353","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/asserts/generated/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":44622,"count":1}],"isBlockCoverage":true},{"functionName":"assert","ranges":[{"startOffset":16989,"endOffset":17197,"count":2},{"startOffset":17068,"endOffset":17195,"count":0}],"isBlockCoverage":true},{"functionName":"assertArrayExpression","ranges":[{"startOffset":17199,"endOffset":17286,"count":0}],"isBlockCoverage":false},{"functionName":"assertAssignmentExpression","ranges":[{"startOffset":17288,"endOffset":17385,"count":0}],"isBlockCoverage":false},{"functionName":"assertBinaryExpression","ranges":[{"startOffset":17387,"endOffset":17476,"count":0}],"isBlockCoverage":false},{"functionName":"assertInterpreterDirective","ranges":[{"startOffset":17478,"endOffset":17575,"count":0}],"isBlockCoverage":false},{"functionName":"assertDirective","ranges":[{"startOffset":17577,"endOffset":17652,"count":0}],"isBlockCoverage":false},{"functionName":"assertDirectiveLiteral","ranges":[{"startOffset":17654,"endOffset":17743,"count":0}],"isBlockCoverage":false},{"functionName":"assertBlockStatement","ranges":[{"startOffset":17745,"endOffset":17830,"count":0}],"isBlockCoverage":false},{"functionName":"assertBreakStatement","ranges":[{"startOffset":17832,"endOffset":17917,"count":0}],"isBlockCoverage":false},{"functionName":"assertCallExpression","ranges":[{"startOffset":17919,"endOffset":18004,"count":0}],"isBlockCoverage":false},{"functionName":"assertCatchClause","ranges":[{"startOffset":18006,"endOffset":18085,"count":0}],"isBlockCoverage":false},{"functionName":"assertConditionalExpression","ranges":[{"startOffset":18087,"endOffset":18186,"count":0}],"isBlockCoverage":false},{"functionName":"assertContinueStatement","ranges":[{"startOffset":18188,"endOffset":18279,"count":0}],"isBlockCoverage":false},{"functionName":"assertDebuggerStatement","ranges":[{"startOffset":18281,"endOffset":18372,"count":0}],"isBlockCoverage":false},{"functionName":"assertDoWhileStatement","ranges":[{"startOffset":18374,"endOffset":18463,"count":0}],"isBlockCoverage":false},{"functionName":"assertEmptyStatement","ranges":[{"startOffset":18465,"endOffset":18550,"count":0}],"isBlockCoverage":false},{"functionName":"assertExpressionStatement","ranges":[{"startOffset":18552,"endOffset":18647,"count":2}],"isBlockCoverage":true},{"functionName":"assertFile","ranges":[{"startOffset":18649,"endOffset":18714,"count":0}],"isBlockCoverage":false},{"functionName":"assertForInStatement","ranges":[{"startOffset":18716,"endOffset":18801,"count":0}],"isBlockCoverage":false},{"functionName":"assertForStatement","ranges":[{"startOffset":18803,"endOffset":18884,"count":0}],"isBlockCoverage":false},{"functionName":"assertFunctionDeclaration","ranges":[{"startOffset":18886,"endOffset":18981,"count":0}],"isBlockCoverage":false},{"functionName":"assertFunctionExpression","ranges":[{"startOffset":18983,"endOffset":19076,"count":0}],"isBlockCoverage":false},{"functionName":"assertIdentifier","ranges":[{"startOffset":19078,"endOffset":19155,"count":0}],"isBlockCoverage":false},{"functionName":"assertIfStatement","ranges":[{"startOffset":19157,"endOffset":19236,"count":0}],"isBlockCoverage":false},{"functionName":"assertLabeledStatement","ranges":[{"startOffset":19238,"endOffset":19327,"count":0}],"isBlockCoverage":false},{"functionName":"assertStringLiteral","ranges":[{"startOffset":19329,"endOffset":19412,"count":0}],"isBlockCoverage":false},{"functionName":"assertNumericLiteral","ranges":[{"startOffset":19414,"endOffset":19499,"count":0}],"isBlockCoverage":false},{"functionName":"assertNullLiteral","ranges":[{"startOffset":19501,"endOffset":19580,"count":0}],"isBlockCoverage":false},{"functionName":"assertBooleanLiteral","ranges":[{"startOffset":19582,"endOffset":19667,"count":0}],"isBlockCoverage":false},{"functionName":"assertRegExpLiteral","ranges":[{"startOffset":19669,"endOffset":19752,"count":0}],"isBlockCoverage":false},{"functionName":"assertLogicalExpression","ranges":[{"startOffset":19754,"endOffset":19845,"count":0}],"isBlockCoverage":false},{"functionName":"assertMemberExpression","ranges":[{"startOffset":19847,"endOffset":19936,"count":0}],"isBlockCoverage":false},{"functionName":"assertNewExpression","ranges":[{"startOffset":19938,"endOffset":20021,"count":0}],"isBlockCoverage":false},{"functionName":"assertProgram","ranges":[{"startOffset":20023,"endOffset":20094,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectExpression","ranges":[{"startOffset":20096,"endOffset":20185,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectMethod","ranges":[{"startOffset":20187,"endOffset":20268,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectProperty","ranges":[{"startOffset":20270,"endOffset":20355,"count":0}],"isBlockCoverage":false},{"functionName":"assertRestElement","ranges":[{"startOffset":20357,"endOffset":20436,"count":0}],"isBlockCoverage":false},{"functionName":"assertReturnStatement","ranges":[{"startOffset":20438,"endOffset":20525,"count":0}],"isBlockCoverage":false},{"functionName":"assertSequenceExpression","ranges":[{"startOffset":20527,"endOffset":20620,"count":0}],"isBlockCoverage":false},{"functionName":"assertParenthesizedExpression","ranges":[{"startOffset":20622,"endOffset":20725,"count":0}],"isBlockCoverage":false},{"functionName":"assertSwitchCase","ranges":[{"startOffset":20727,"endOffset":20804,"count":0}],"isBlockCoverage":false},{"functionName":"assertSwitchStatement","ranges":[{"startOffset":20806,"endOffset":20893,"count":0}],"isBlockCoverage":false},{"functionName":"assertThisExpression","ranges":[{"startOffset":20895,"endOffset":20980,"count":0}],"isBlockCoverage":false},{"functionName":"assertThrowStatement","ranges":[{"startOffset":20982,"endOffset":21067,"count":0}],"isBlockCoverage":false},{"functionName":"assertTryStatement","ranges":[{"startOffset":21069,"endOffset":21150,"count":0}],"isBlockCoverage":false},{"functionName":"assertUnaryExpression","ranges":[{"startOffset":21152,"endOffset":21239,"count":0}],"isBlockCoverage":false},{"functionName":"assertUpdateExpression","ranges":[{"startOffset":21241,"endOffset":21330,"count":0}],"isBlockCoverage":false},{"functionName":"assertVariableDeclaration","ranges":[{"startOffset":21332,"endOffset":21427,"count":0}],"isBlockCoverage":false},{"functionName":"assertVariableDeclarator","ranges":[{"startOffset":21429,"endOffset":21522,"count":0}],"isBlockCoverage":false},{"functionName":"assertWhileStatement","ranges":[{"startOffset":21524,"endOffset":21609,"count":0}],"isBlockCoverage":false},{"functionName":"assertWithStatement","ranges":[{"startOffset":21611,"endOffset":21694,"count":0}],"isBlockCoverage":false},{"functionName":"assertAssignmentPattern","ranges":[{"startOffset":21696,"endOffset":21787,"count":0}],"isBlockCoverage":false},{"functionName":"assertArrayPattern","ranges":[{"startOffset":21789,"endOffset":21870,"count":0}],"isBlockCoverage":false},{"functionName":"assertArrowFunctionExpression","ranges":[{"startOffset":21872,"endOffset":21975,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassBody","ranges":[{"startOffset":21977,"endOffset":22052,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassExpression","ranges":[{"startOffset":22054,"endOffset":22141,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassDeclaration","ranges":[{"startOffset":22143,"endOffset":22232,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportAllDeclaration","ranges":[{"startOffset":22234,"endOffset":22331,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportDefaultDeclaration","ranges":[{"startOffset":22333,"endOffset":22438,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportNamedDeclaration","ranges":[{"startOffset":22440,"endOffset":22541,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportSpecifier","ranges":[{"startOffset":22543,"endOffset":22630,"count":0}],"isBlockCoverage":false},{"functionName":"assertForOfStatement","ranges":[{"startOffset":22632,"endOffset":22717,"count":0}],"isBlockCoverage":false},{"functionName":"assertImportDeclaration","ranges":[{"startOffset":22719,"endOffset":22810,"count":0}],"isBlockCoverage":false},{"functionName":"assertImportDefaultSpecifier","ranges":[{"startOffset":22812,"endOffset":22913,"count":0}],"isBlockCoverage":false},{"functionName":"assertImportNamespaceSpecifier","ranges":[{"startOffset":22915,"endOffset":23020,"count":0}],"isBlockCoverage":false},{"functionName":"assertImportSpecifier","ranges":[{"startOffset":23022,"endOffset":23109,"count":0}],"isBlockCoverage":false},{"functionName":"assertMetaProperty","ranges":[{"startOffset":23111,"endOffset":23192,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassMethod","ranges":[{"startOffset":23194,"endOffset":23273,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectPattern","ranges":[{"startOffset":23275,"endOffset":23358,"count":0}],"isBlockCoverage":false},{"functionName":"assertSpreadElement","ranges":[{"startOffset":23360,"endOffset":23443,"count":0}],"isBlockCoverage":false},{"functionName":"assertSuper","ranges":[{"startOffset":23445,"endOffset":23512,"count":0}],"isBlockCoverage":false},{"functionName":"assertTaggedTemplateExpression","ranges":[{"startOffset":23514,"endOffset":23619,"count":0}],"isBlockCoverage":false},{"functionName":"assertTemplateElement","ranges":[{"startOffset":23621,"endOffset":23708,"count":0}],"isBlockCoverage":false},{"functionName":"assertTemplateLiteral","ranges":[{"startOffset":23710,"endOffset":23797,"count":0}],"isBlockCoverage":false},{"functionName":"assertYieldExpression","ranges":[{"startOffset":23799,"endOffset":23886,"count":0}],"isBlockCoverage":false},{"functionName":"assertAwaitExpression","ranges":[{"startOffset":23888,"endOffset":23975,"count":0}],"isBlockCoverage":false},{"functionName":"assertImport","ranges":[{"startOffset":23977,"endOffset":24046,"count":0}],"isBlockCoverage":false},{"functionName":"assertBigIntLiteral","ranges":[{"startOffset":24048,"endOffset":24131,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportNamespaceSpecifier","ranges":[{"startOffset":24133,"endOffset":24238,"count":0}],"isBlockCoverage":false},{"functionName":"assertOptionalMemberExpression","ranges":[{"startOffset":24240,"endOffset":24345,"count":0}],"isBlockCoverage":false},{"functionName":"assertOptionalCallExpression","ranges":[{"startOffset":24347,"endOffset":24448,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassProperty","ranges":[{"startOffset":24450,"endOffset":24533,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassAccessorProperty","ranges":[{"startOffset":24535,"endOffset":24634,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassPrivateProperty","ranges":[{"startOffset":24636,"endOffset":24733,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassPrivateMethod","ranges":[{"startOffset":24735,"endOffset":24828,"count":0}],"isBlockCoverage":false},{"functionName":"assertPrivateName","ranges":[{"startOffset":24830,"endOffset":24909,"count":0}],"isBlockCoverage":false},{"functionName":"assertStaticBlock","ranges":[{"startOffset":24911,"endOffset":24990,"count":0}],"isBlockCoverage":false},{"functionName":"assertAnyTypeAnnotation","ranges":[{"startOffset":24992,"endOffset":25083,"count":0}],"isBlockCoverage":false},{"functionName":"assertArrayTypeAnnotation","ranges":[{"startOffset":25085,"endOffset":25180,"count":0}],"isBlockCoverage":false},{"functionName":"assertBooleanTypeAnnotation","ranges":[{"startOffset":25182,"endOffset":25281,"count":0}],"isBlockCoverage":false},{"functionName":"assertBooleanLiteralTypeAnnotation","ranges":[{"startOffset":25283,"endOffset":25396,"count":0}],"isBlockCoverage":false},{"functionName":"assertNullLiteralTypeAnnotation","ranges":[{"startOffset":25398,"endOffset":25505,"count":0}],"isBlockCoverage":false},{"functionName":"assertClassImplements","ranges":[{"startOffset":25507,"endOffset":25594,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareClass","ranges":[{"startOffset":25596,"endOffset":25677,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareFunction","ranges":[{"startOffset":25679,"endOffset":25766,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareInterface","ranges":[{"startOffset":25768,"endOffset":25857,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareModule","ranges":[{"startOffset":25859,"endOffset":25942,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareModuleExports","ranges":[{"startOffset":25944,"endOffset":26041,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareTypeAlias","ranges":[{"startOffset":26043,"endOffset":26132,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareOpaqueType","ranges":[{"startOffset":26134,"endOffset":26225,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareVariable","ranges":[{"startOffset":26227,"endOffset":26314,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareExportDeclaration","ranges":[{"startOffset":26316,"endOffset":26421,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclareExportAllDeclaration","ranges":[{"startOffset":26423,"endOffset":26534,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclaredPredicate","ranges":[{"startOffset":26536,"endOffset":26627,"count":0}],"isBlockCoverage":false},{"functionName":"assertExistsTypeAnnotation","ranges":[{"startOffset":26629,"endOffset":26726,"count":0}],"isBlockCoverage":false},{"functionName":"assertFunctionTypeAnnotation","ranges":[{"startOffset":26728,"endOffset":26829,"count":0}],"isBlockCoverage":false},{"functionName":"assertFunctionTypeParam","ranges":[{"startOffset":26831,"endOffset":26922,"count":0}],"isBlockCoverage":false},{"functionName":"assertGenericTypeAnnotation","ranges":[{"startOffset":26924,"endOffset":27023,"count":0}],"isBlockCoverage":false},{"functionName":"assertInferredPredicate","ranges":[{"startOffset":27025,"endOffset":27116,"count":0}],"isBlockCoverage":false},{"functionName":"assertInterfaceExtends","ranges":[{"startOffset":27118,"endOffset":27207,"count":0}],"isBlockCoverage":false},{"functionName":"assertInterfaceDeclaration","ranges":[{"startOffset":27209,"endOffset":27306,"count":0}],"isBlockCoverage":false},{"functionName":"assertInterfaceTypeAnnotation","ranges":[{"startOffset":27308,"endOffset":27411,"count":0}],"isBlockCoverage":false},{"functionName":"assertIntersectionTypeAnnotation","ranges":[{"startOffset":27413,"endOffset":27522,"count":0}],"isBlockCoverage":false},{"functionName":"assertMixedTypeAnnotation","ranges":[{"startOffset":27524,"endOffset":27619,"count":0}],"isBlockCoverage":false},{"functionName":"assertEmptyTypeAnnotation","ranges":[{"startOffset":27621,"endOffset":27716,"count":0}],"isBlockCoverage":false},{"functionName":"assertNullableTypeAnnotation","ranges":[{"startOffset":27718,"endOffset":27819,"count":0}],"isBlockCoverage":false},{"functionName":"assertNumberLiteralTypeAnnotation","ranges":[{"startOffset":27821,"endOffset":27932,"count":0}],"isBlockCoverage":false},{"functionName":"assertNumberTypeAnnotation","ranges":[{"startOffset":27934,"endOffset":28031,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectTypeAnnotation","ranges":[{"startOffset":28033,"endOffset":28130,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectTypeInternalSlot","ranges":[{"startOffset":28132,"endOffset":28233,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectTypeCallProperty","ranges":[{"startOffset":28235,"endOffset":28336,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectTypeIndexer","ranges":[{"startOffset":28338,"endOffset":28429,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectTypeProperty","ranges":[{"startOffset":28431,"endOffset":28524,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectTypeSpreadProperty","ranges":[{"startOffset":28526,"endOffset":28631,"count":0}],"isBlockCoverage":false},{"functionName":"assertOpaqueType","ranges":[{"startOffset":28633,"endOffset":28710,"count":0}],"isBlockCoverage":false},{"functionName":"assertQualifiedTypeIdentifier","ranges":[{"startOffset":28712,"endOffset":28815,"count":0}],"isBlockCoverage":false},{"functionName":"assertStringLiteralTypeAnnotation","ranges":[{"startOffset":28817,"endOffset":28928,"count":0}],"isBlockCoverage":false},{"functionName":"assertStringTypeAnnotation","ranges":[{"startOffset":28930,"endOffset":29027,"count":0}],"isBlockCoverage":false},{"functionName":"assertSymbolTypeAnnotation","ranges":[{"startOffset":29029,"endOffset":29126,"count":0}],"isBlockCoverage":false},{"functionName":"assertThisTypeAnnotation","ranges":[{"startOffset":29128,"endOffset":29221,"count":0}],"isBlockCoverage":false},{"functionName":"assertTupleTypeAnnotation","ranges":[{"startOffset":29223,"endOffset":29318,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeofTypeAnnotation","ranges":[{"startOffset":29320,"endOffset":29417,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeAlias","ranges":[{"startOffset":29419,"endOffset":29494,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeAnnotation","ranges":[{"startOffset":29496,"endOffset":29581,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeCastExpression","ranges":[{"startOffset":29583,"endOffset":29676,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeParameter","ranges":[{"startOffset":29678,"endOffset":29761,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeParameterDeclaration","ranges":[{"startOffset":29763,"endOffset":29868,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeParameterInstantiation","ranges":[{"startOffset":29870,"endOffset":29979,"count":0}],"isBlockCoverage":false},{"functionName":"assertUnionTypeAnnotation","ranges":[{"startOffset":29981,"endOffset":30076,"count":0}],"isBlockCoverage":false},{"functionName":"assertVariance","ranges":[{"startOffset":30078,"endOffset":30151,"count":0}],"isBlockCoverage":false},{"functionName":"assertVoidTypeAnnotation","ranges":[{"startOffset":30153,"endOffset":30246,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumDeclaration","ranges":[{"startOffset":30248,"endOffset":30335,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumBooleanBody","ranges":[{"startOffset":30337,"endOffset":30424,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumNumberBody","ranges":[{"startOffset":30426,"endOffset":30511,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumStringBody","ranges":[{"startOffset":30513,"endOffset":30598,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumSymbolBody","ranges":[{"startOffset":30600,"endOffset":30685,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumBooleanMember","ranges":[{"startOffset":30687,"endOffset":30778,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumNumberMember","ranges":[{"startOffset":30780,"endOffset":30869,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumStringMember","ranges":[{"startOffset":30871,"endOffset":30960,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumDefaultedMember","ranges":[{"startOffset":30962,"endOffset":31057,"count":0}],"isBlockCoverage":false},{"functionName":"assertIndexedAccessType","ranges":[{"startOffset":31059,"endOffset":31150,"count":0}],"isBlockCoverage":false},{"functionName":"assertOptionalIndexedAccessType","ranges":[{"startOffset":31152,"endOffset":31259,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXAttribute","ranges":[{"startOffset":31261,"endOffset":31342,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXClosingElement","ranges":[{"startOffset":31344,"endOffset":31435,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXElement","ranges":[{"startOffset":31437,"endOffset":31514,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXEmptyExpression","ranges":[{"startOffset":31516,"endOffset":31609,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXExpressionContainer","ranges":[{"startOffset":31611,"endOffset":31712,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXSpreadChild","ranges":[{"startOffset":31714,"endOffset":31799,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXIdentifier","ranges":[{"startOffset":31801,"endOffset":31884,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXMemberExpression","ranges":[{"startOffset":31886,"endOffset":31981,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXNamespacedName","ranges":[{"startOffset":31983,"endOffset":32074,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXOpeningElement","ranges":[{"startOffset":32076,"endOffset":32167,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXSpreadAttribute","ranges":[{"startOffset":32169,"endOffset":32262,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXText","ranges":[{"startOffset":32264,"endOffset":32335,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXFragment","ranges":[{"startOffset":32337,"endOffset":32416,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXOpeningFragment","ranges":[{"startOffset":32418,"endOffset":32511,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSXClosingFragment","ranges":[{"startOffset":32513,"endOffset":32606,"count":0}],"isBlockCoverage":false},{"functionName":"assertNoop","ranges":[{"startOffset":32608,"endOffset":32673,"count":0}],"isBlockCoverage":false},{"functionName":"assertPlaceholder","ranges":[{"startOffset":32675,"endOffset":32754,"count":0}],"isBlockCoverage":false},{"functionName":"assertV8IntrinsicIdentifier","ranges":[{"startOffset":32756,"endOffset":32855,"count":0}],"isBlockCoverage":false},{"functionName":"assertArgumentPlaceholder","ranges":[{"startOffset":32857,"endOffset":32952,"count":0}],"isBlockCoverage":false},{"functionName":"assertBindExpression","ranges":[{"startOffset":32954,"endOffset":33039,"count":0}],"isBlockCoverage":false},{"functionName":"assertImportAttribute","ranges":[{"startOffset":33041,"endOffset":33128,"count":0}],"isBlockCoverage":false},{"functionName":"assertDecorator","ranges":[{"startOffset":33130,"endOffset":33205,"count":0}],"isBlockCoverage":false},{"functionName":"assertDoExpression","ranges":[{"startOffset":33207,"endOffset":33288,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportDefaultSpecifier","ranges":[{"startOffset":33290,"endOffset":33391,"count":0}],"isBlockCoverage":false},{"functionName":"assertRecordExpression","ranges":[{"startOffset":33393,"endOffset":33482,"count":0}],"isBlockCoverage":false},{"functionName":"assertTupleExpression","ranges":[{"startOffset":33484,"endOffset":33571,"count":0}],"isBlockCoverage":false},{"functionName":"assertDecimalLiteral","ranges":[{"startOffset":33573,"endOffset":33658,"count":0}],"isBlockCoverage":false},{"functionName":"assertModuleExpression","ranges":[{"startOffset":33660,"endOffset":33749,"count":0}],"isBlockCoverage":false},{"functionName":"assertTopicReference","ranges":[{"startOffset":33751,"endOffset":33836,"count":0}],"isBlockCoverage":false},{"functionName":"assertPipelineTopicExpression","ranges":[{"startOffset":33838,"endOffset":33941,"count":0}],"isBlockCoverage":false},{"functionName":"assertPipelineBareFunction","ranges":[{"startOffset":33943,"endOffset":34040,"count":0}],"isBlockCoverage":false},{"functionName":"assertPipelinePrimaryTopicReference","ranges":[{"startOffset":34042,"endOffset":34157,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSParameterProperty","ranges":[{"startOffset":34159,"endOffset":34254,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSDeclareFunction","ranges":[{"startOffset":34256,"endOffset":34347,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSDeclareMethod","ranges":[{"startOffset":34349,"endOffset":34436,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSQualifiedName","ranges":[{"startOffset":34438,"endOffset":34525,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSCallSignatureDeclaration","ranges":[{"startOffset":34527,"endOffset":34636,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSConstructSignatureDeclaration","ranges":[{"startOffset":34638,"endOffset":34757,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSPropertySignature","ranges":[{"startOffset":34759,"endOffset":34854,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSMethodSignature","ranges":[{"startOffset":34856,"endOffset":34947,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSIndexSignature","ranges":[{"startOffset":34949,"endOffset":35038,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSAnyKeyword","ranges":[{"startOffset":35040,"endOffset":35121,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSBooleanKeyword","ranges":[{"startOffset":35123,"endOffset":35212,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSBigIntKeyword","ranges":[{"startOffset":35214,"endOffset":35301,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSIntrinsicKeyword","ranges":[{"startOffset":35303,"endOffset":35396,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSNeverKeyword","ranges":[{"startOffset":35398,"endOffset":35483,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSNullKeyword","ranges":[{"startOffset":35485,"endOffset":35568,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSNumberKeyword","ranges":[{"startOffset":35570,"endOffset":35657,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSObjectKeyword","ranges":[{"startOffset":35659,"endOffset":35746,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSStringKeyword","ranges":[{"startOffset":35748,"endOffset":35835,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSSymbolKeyword","ranges":[{"startOffset":35837,"endOffset":35924,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSUndefinedKeyword","ranges":[{"startOffset":35926,"endOffset":36019,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSUnknownKeyword","ranges":[{"startOffset":36021,"endOffset":36110,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSVoidKeyword","ranges":[{"startOffset":36112,"endOffset":36195,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSThisType","ranges":[{"startOffset":36197,"endOffset":36274,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSFunctionType","ranges":[{"startOffset":36276,"endOffset":36361,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSConstructorType","ranges":[{"startOffset":36363,"endOffset":36454,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeReference","ranges":[{"startOffset":36456,"endOffset":36543,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypePredicate","ranges":[{"startOffset":36545,"endOffset":36632,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeQuery","ranges":[{"startOffset":36634,"endOffset":36713,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeLiteral","ranges":[{"startOffset":36715,"endOffset":36798,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSArrayType","ranges":[{"startOffset":36800,"endOffset":36879,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTupleType","ranges":[{"startOffset":36881,"endOffset":36960,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSOptionalType","ranges":[{"startOffset":36962,"endOffset":37047,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSRestType","ranges":[{"startOffset":37049,"endOffset":37126,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSNamedTupleMember","ranges":[{"startOffset":37128,"endOffset":37221,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSUnionType","ranges":[{"startOffset":37223,"endOffset":37302,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSIntersectionType","ranges":[{"startOffset":37304,"endOffset":37397,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSConditionalType","ranges":[{"startOffset":37399,"endOffset":37490,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSInferType","ranges":[{"startOffset":37492,"endOffset":37571,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSParenthesizedType","ranges":[{"startOffset":37573,"endOffset":37668,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeOperator","ranges":[{"startOffset":37670,"endOffset":37755,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSIndexedAccessType","ranges":[{"startOffset":37757,"endOffset":37852,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSMappedType","ranges":[{"startOffset":37854,"endOffset":37935,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSLiteralType","ranges":[{"startOffset":37937,"endOffset":38020,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSExpressionWithTypeArguments","ranges":[{"startOffset":38022,"endOffset":38137,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSInterfaceDeclaration","ranges":[{"startOffset":38139,"endOffset":38240,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSInterfaceBody","ranges":[{"startOffset":38242,"endOffset":38329,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeAliasDeclaration","ranges":[{"startOffset":38331,"endOffset":38432,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSInstantiationExpression","ranges":[{"startOffset":38434,"endOffset":38541,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSAsExpression","ranges":[{"startOffset":38543,"endOffset":38628,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeAssertion","ranges":[{"startOffset":38630,"endOffset":38717,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSEnumDeclaration","ranges":[{"startOffset":38719,"endOffset":38810,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSEnumMember","ranges":[{"startOffset":38812,"endOffset":38893,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSModuleDeclaration","ranges":[{"startOffset":38895,"endOffset":38990,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSModuleBlock","ranges":[{"startOffset":38992,"endOffset":39075,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSImportType","ranges":[{"startOffset":39077,"endOffset":39158,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSImportEqualsDeclaration","ranges":[{"startOffset":39160,"endOffset":39267,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSExternalModuleReference","ranges":[{"startOffset":39269,"endOffset":39376,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSNonNullExpression","ranges":[{"startOffset":39378,"endOffset":39473,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSExportAssignment","ranges":[{"startOffset":39475,"endOffset":39568,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSNamespaceExportDeclaration","ranges":[{"startOffset":39570,"endOffset":39683,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeAnnotation","ranges":[{"startOffset":39685,"endOffset":39774,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeParameterInstantiation","ranges":[{"startOffset":39776,"endOffset":39889,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeParameterDeclaration","ranges":[{"startOffset":39891,"endOffset":40000,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeParameter","ranges":[{"startOffset":40002,"endOffset":40089,"count":0}],"isBlockCoverage":false},{"functionName":"assertStandardized","ranges":[{"startOffset":40091,"endOffset":40172,"count":0}],"isBlockCoverage":false},{"functionName":"assertExpression","ranges":[{"startOffset":40174,"endOffset":40251,"count":0}],"isBlockCoverage":false},{"functionName":"assertBinary","ranges":[{"startOffset":40253,"endOffset":40322,"count":0}],"isBlockCoverage":false},{"functionName":"assertScopable","ranges":[{"startOffset":40324,"endOffset":40397,"count":0}],"isBlockCoverage":false},{"functionName":"assertBlockParent","ranges":[{"startOffset":40399,"endOffset":40478,"count":0}],"isBlockCoverage":false},{"functionName":"assertBlock","ranges":[{"startOffset":40480,"endOffset":40547,"count":0}],"isBlockCoverage":false},{"functionName":"assertStatement","ranges":[{"startOffset":40549,"endOffset":40624,"count":0}],"isBlockCoverage":false},{"functionName":"assertTerminatorless","ranges":[{"startOffset":40626,"endOffset":40711,"count":0}],"isBlockCoverage":false},{"functionName":"assertCompletionStatement","ranges":[{"startOffset":40713,"endOffset":40808,"count":0}],"isBlockCoverage":false},{"functionName":"assertConditional","ranges":[{"startOffset":40810,"endOffset":40889,"count":0}],"isBlockCoverage":false},{"functionName":"assertLoop","ranges":[{"startOffset":40891,"endOffset":40956,"count":0}],"isBlockCoverage":false},{"functionName":"assertWhile","ranges":[{"startOffset":40958,"endOffset":41025,"count":0}],"isBlockCoverage":false},{"functionName":"assertExpressionWrapper","ranges":[{"startOffset":41027,"endOffset":41118,"count":0}],"isBlockCoverage":false},{"functionName":"assertFor","ranges":[{"startOffset":41120,"endOffset":41183,"count":0}],"isBlockCoverage":false},{"functionName":"assertForXStatement","ranges":[{"startOffset":41185,"endOffset":41268,"count":0}],"isBlockCoverage":false},{"functionName":"assertFunction","ranges":[{"startOffset":41270,"endOffset":41343,"count":0}],"isBlockCoverage":false},{"functionName":"assertFunctionParent","ranges":[{"startOffset":41345,"endOffset":41430,"count":0}],"isBlockCoverage":false},{"functionName":"assertPureish","ranges":[{"startOffset":41432,"endOffset":41503,"count":0}],"isBlockCoverage":false},{"functionName":"assertDeclaration","ranges":[{"startOffset":41505,"endOffset":41584,"count":0}],"isBlockCoverage":false},{"functionName":"assertPatternLike","ranges":[{"startOffset":41586,"endOffset":41665,"count":0}],"isBlockCoverage":false},{"functionName":"assertLVal","ranges":[{"startOffset":41667,"endOffset":41732,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSEntityName","ranges":[{"startOffset":41734,"endOffset":41815,"count":0}],"isBlockCoverage":false},{"functionName":"assertLiteral","ranges":[{"startOffset":41817,"endOffset":41888,"count":0}],"isBlockCoverage":false},{"functionName":"assertImmutable","ranges":[{"startOffset":41890,"endOffset":41965,"count":0}],"isBlockCoverage":false},{"functionName":"assertUserWhitespacable","ranges":[{"startOffset":41967,"endOffset":42058,"count":0}],"isBlockCoverage":false},{"functionName":"assertMethod","ranges":[{"startOffset":42060,"endOffset":42129,"count":0}],"isBlockCoverage":false},{"functionName":"assertObjectMember","ranges":[{"startOffset":42131,"endOffset":42212,"count":0}],"isBlockCoverage":false},{"functionName":"assertProperty","ranges":[{"startOffset":42214,"endOffset":42287,"count":0}],"isBlockCoverage":false},{"functionName":"assertUnaryLike","ranges":[{"startOffset":42289,"endOffset":42364,"count":0}],"isBlockCoverage":false},{"functionName":"assertPattern","ranges":[{"startOffset":42366,"endOffset":42437,"count":0}],"isBlockCoverage":false},{"functionName":"assertClass","ranges":[{"startOffset":42439,"endOffset":42506,"count":0}],"isBlockCoverage":false},{"functionName":"assertModuleDeclaration","ranges":[{"startOffset":42508,"endOffset":42599,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportDeclaration","ranges":[{"startOffset":42601,"endOffset":42692,"count":0}],"isBlockCoverage":false},{"functionName":"assertModuleSpecifier","ranges":[{"startOffset":42694,"endOffset":42781,"count":0}],"isBlockCoverage":false},{"functionName":"assertAccessor","ranges":[{"startOffset":42783,"endOffset":42856,"count":0}],"isBlockCoverage":false},{"functionName":"assertPrivate","ranges":[{"startOffset":42858,"endOffset":42929,"count":0}],"isBlockCoverage":false},{"functionName":"assertFlow","ranges":[{"startOffset":42931,"endOffset":42996,"count":0}],"isBlockCoverage":false},{"functionName":"assertFlowType","ranges":[{"startOffset":42998,"endOffset":43071,"count":0}],"isBlockCoverage":false},{"functionName":"assertFlowBaseAnnotation","ranges":[{"startOffset":43073,"endOffset":43166,"count":0}],"isBlockCoverage":false},{"functionName":"assertFlowDeclaration","ranges":[{"startOffset":43168,"endOffset":43255,"count":0}],"isBlockCoverage":false},{"functionName":"assertFlowPredicate","ranges":[{"startOffset":43257,"endOffset":43340,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumBody","ranges":[{"startOffset":43342,"endOffset":43415,"count":0}],"isBlockCoverage":false},{"functionName":"assertEnumMember","ranges":[{"startOffset":43417,"endOffset":43494,"count":0}],"isBlockCoverage":false},{"functionName":"assertJSX","ranges":[{"startOffset":43496,"endOffset":43559,"count":0}],"isBlockCoverage":false},{"functionName":"assertMiscellaneous","ranges":[{"startOffset":43561,"endOffset":43644,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeScript","ranges":[{"startOffset":43646,"endOffset":43723,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSTypeElement","ranges":[{"startOffset":43725,"endOffset":43808,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSType","ranges":[{"startOffset":43810,"endOffset":43879,"count":0}],"isBlockCoverage":false},{"functionName":"assertTSBaseType","ranges":[{"startOffset":43881,"endOffset":43958,"count":0}],"isBlockCoverage":false},{"functionName":"assertNumberLiteral","ranges":[{"startOffset":43960,"endOffset":44126,"count":0}],"isBlockCoverage":false},{"functionName":"assertRegexLiteral","ranges":[{"startOffset":44128,"endOffset":44290,"count":0}],"isBlockCoverage":false},{"functionName":"assertRestProperty","ranges":[{"startOffset":44292,"endOffset":44452,"count":0}],"isBlockCoverage":false},{"functionName":"assertSpreadProperty","ranges":[{"startOffset":44454,"endOffset":44622,"count":0}],"isBlockCoverage":false}]},{"scriptId":"354","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1054,"count":1}],"isBlockCoverage":true},{"functionName":"createTypeAnnotationBasedOnTypeof","ranges":[{"startOffset":229,"endOffset":1054,"count":0}],"isBlockCoverage":false}]},{"scriptId":"355","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":484,"count":1}],"isBlockCoverage":true},{"functionName":"createFlowUnionType","ranges":[{"startOffset":250,"endOffset":484,"count":0}],"isBlockCoverage":false}]},{"scriptId":"356","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1762,"count":1}],"isBlockCoverage":true},{"functionName":"getQualifiedName","ranges":[{"startOffset":178,"endOffset":330,"count":0}],"isBlockCoverage":false},{"functionName":"removeTypeDuplicates","ranges":[{"startOffset":332,"endOffset":1762,"count":0}],"isBlockCoverage":false}]},{"scriptId":"357","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":554,"count":1}],"isBlockCoverage":true},{"functionName":"createTSUnionType","ranges":[{"startOffset":254,"endOffset":554,"count":0}],"isBlockCoverage":false}]},{"scriptId":"358","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1039,"count":1}],"isBlockCoverage":true},{"functionName":"removeTypeDuplicates","ranges":[{"startOffset":178,"endOffset":1039,"count":0}],"isBlockCoverage":false}]},{"scriptId":"359","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/builders/generated/uppercase.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":35187,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":161,"endOffset":215,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":303,"endOffset":359,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":443,"endOffset":495,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":576,"endOffset":625,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":713,"endOffset":769,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":861,"endOffset":921,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1010,"endOffset":1067,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1153,"endOffset":1207,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1291,"endOffset":1343,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1425,"endOffset":1475,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1560,"endOffset":1613,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1696,"endOffset":1747,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1830,"endOffset":1881,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1964,"endOffset":2015,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2112,"endOffset":2177,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2267,"endOffset":2325,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2408,"endOffset":2459,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2542,"endOffset":2593,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2673,"endOffset":2721,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2811,"endOffset":2869,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2947,"endOffset":2993,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3078,"endOffset":3131,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3215,"endOffset":3267,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3351,"endOffset":3403,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3483,"endOffset":3531,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3618,"endOffset":3673,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3762,"endOffset":3819,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3901,"endOffset":3951,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4041,"endOffset":4099,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4185,"endOffset":4239,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4325,"endOffset":4379,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4462,"endOffset":4513,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4594,"endOffset":4643,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4739,"endOffset":4803,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4896,"endOffset":4957,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5041,"endOffset":5093,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5178,"endOffset":5231,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5313,"endOffset":5363,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5452,"endOffset":5509,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5595,"endOffset":5649,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5734,"endOffset":5787,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5871,"endOffset":5923,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6009,"endOffset":6063,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6141,"endOffset":6187,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6265,"endOffset":6311,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6396,"endOffset":6449,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6530,"endOffset":6579,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6664,"endOffset":6717,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6800,"endOffset":6851,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6939,"endOffset":6995,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7079,"endOffset":7131,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7217,"endOffset":7271,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7355,"endOffset":7407,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7495,"endOffset":7551,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7634,"endOffset":7685,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7770,"endOffset":7823,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7906,"endOffset":7957,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8042,"endOffset":8095,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8178,"endOffset":8229,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8318,"endOffset":8375,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8464,"endOffset":8521,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8614,"endOffset":8675,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8766,"endOffset":8825,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":8916,"endOffset":8975,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9068,"endOffset":9129,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9213,"endOffset":9265,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9353,"endOffset":9409,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9482,"endOffset":9523,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9606,"endOffset":9657,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9740,"endOffset":9791,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9872,"endOffset":9921,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10009,"endOffset":10065,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10152,"endOffset":10207,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10298,"endOffset":10357,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10443,"endOffset":10497,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10587,"endOffset":10645,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10724,"endOffset":10771,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10851,"endOffset":10899,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10974,"endOffset":11017,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11101,"endOffset":11153,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11239,"endOffset":11293,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11384,"endOffset":11443,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11536,"endOffset":11597,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11681,"endOffset":11733,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11819,"endOffset":11873,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":11959,"endOffset":12013,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12102,"endOffset":12159,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12244,"endOffset":12297,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12389,"endOffset":12449,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12538,"endOffset":12595,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12690,"endOffset":12753,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12834,"endOffset":12883,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":12969,"endOffset":13023,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13110,"endOffset":13165,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13244,"endOffset":13291,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13378,"endOffset":13433,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13524,"endOffset":13583,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13663,"endOffset":13711,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13793,"endOffset":13843,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":13931,"endOffset":13987,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14073,"endOffset":14127,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14213,"endOffset":14267,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14354,"endOffset":14409,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14496,"endOffset":14551,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14634,"endOffset":14685,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14761,"endOffset":14805,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":14890,"endOffset":14943,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15029,"endOffset":15083,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15168,"endOffset":15221,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15302,"endOffset":15351,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15439,"endOffset":15495,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15580,"endOffset":15633,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15715,"endOffset":15765,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15838,"endOffset":15879,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":15959,"endOffset":16007,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16101,"endOffset":16163,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16254,"endOffset":16313,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16395,"endOffset":16445,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16541,"endOffset":16605,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16694,"endOffset":16751,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16834,"endOffset":16885,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":16970,"endOffset":17023,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17104,"endOffset":17153,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17235,"endOffset":17285,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17368,"endOffset":17419,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17508,"endOffset":17565,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17656,"endOffset":17715,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17801,"endOffset":17855,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":17946,"endOffset":18005,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18092,"endOffset":18147,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18240,"endOffset":18301,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18380,"endOffset":18427,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18518,"endOffset":18577,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18671,"endOffset":18733,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18826,"endOffset":18887,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":18979,"endOffset":19039,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19128,"endOffset":19185,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19283,"endOffset":19349,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19441,"endOffset":19501,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19581,"endOffset":19629,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19709,"endOffset":19757,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19833,"endOffset":19877,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":19969,"endOffset":20029,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20114,"endOffset":20167,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20249,"endOffset":20299,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20380,"endOffset":20429,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20509,"endOffset":20557,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20638,"endOffset":20687,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20771,"endOffset":20823,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20910,"endOffset":20965,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21047,"endOffset":21097,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21180,"endOffset":21231,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21311,"endOffset":21359,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21441,"endOffset":21491,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21587,"endOffset":21651,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21740,"endOffset":21797,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21871,"endOffset":21913,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":21992,"endOffset":22039,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22123,"endOffset":22175,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22264,"endOffset":22321,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22402,"endOffset":22451,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22531,"endOffset":22579,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22662,"endOffset":22713,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22797,"endOffset":22849,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":22934,"endOffset":22987,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23082,"endOffset":23145,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23231,"endOffset":23285,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23385,"endOffset":23453,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23539,"endOffset":23593,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23679,"endOffset":23733,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23817,"endOffset":23869,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":23955,"endOffset":24009,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24090,"endOffset":24139,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24226,"endOffset":24281,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24379,"endOffset":24445,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24539,"endOffset":24601,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24684,"endOffset":24735,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24829,"endOffset":24891,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":24972,"endOffset":25021,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25106,"endOffset":25159,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25247,"endOffset":25303,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25383,"endOffset":25431,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25525,"endOffset":25587,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25671,"endOffset":25723,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25814,"endOffset":25873,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":25960,"endOffset":26015,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26102,"endOffset":26157,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26239,"endOffset":26289,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26370,"endOffset":26419,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26505,"endOffset":26559,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26641,"endOffset":26691,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26779,"endOffset":26835,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":26922,"endOffset":26977,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27074,"endOffset":27139,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27222,"endOffset":27273,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27361,"endOffset":27417,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27499,"endOffset":27549,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27633,"endOffset":27685,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27769,"endOffset":27821,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27904,"endOffset":27955,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28043,"endOffset":28099,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28187,"endOffset":28243,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28331,"endOffset":28387,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28471,"endOffset":28523,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28602,"endOffset":28649,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28733,"endOffset":28785,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":28869,"endOffset":28921,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29000,"endOffset":29047,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29127,"endOffset":29175,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29266,"endOffset":29325,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29410,"endOffset":29463,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29547,"endOffset":29599,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29681,"endOffset":29731,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29814,"endOffset":29865,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":29949,"endOffset":30001,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30096,"endOffset":30159,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30256,"endOffset":30321,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30405,"endOffset":30457,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30537,"endOffset":30585,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30669,"endOffset":30721,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30808,"endOffset":30863,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":30943,"endOffset":30991,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31076,"endOffset":31129,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31211,"endOffset":31261,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31354,"endOffset":31415,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31499,"endOffset":31551,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31635,"endOffset":31687,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31770,"endOffset":31821,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":31908,"endOffset":31963,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32046,"endOffset":32097,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32180,"endOffset":32231,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32312,"endOffset":32361,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32445,"endOffset":32497,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32585,"endOffset":32641,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32719,"endOffset":32765,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32848,"endOffset":32899,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":32986,"endOffset":33041,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33123,"endOffset":33173,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33266,"endOffset":33327,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33422,"endOffset":33485,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33574,"endOffset":33631,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33715,"endOffset":33767,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33855,"endOffset":33911,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":33996,"endOffset":34049,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34139,"endOffset":34197,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34285,"endOffset":34341,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34428,"endOffset":34483,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34560,"endOffset":34605,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34692,"endOffset":34747,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34830,"endOffset":34881,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":34963,"endOffset":35013,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":35097,"endOffset":35149,"count":0}],"isBlockCoverage":false}]},{"scriptId":"360","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/clone/cloneNode.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3089,"count":1}],"isBlockCoverage":true},{"functionName":"cloneIfNode","ranges":[{"startOffset":277,"endOffset":471,"count":0}],"isBlockCoverage":false},{"functionName":"cloneIfNodeOrArray","ranges":[{"startOffset":473,"endOffset":715,"count":0}],"isBlockCoverage":false},{"functionName":"cloneNode","ranges":[{"startOffset":717,"endOffset":841,"count":0}],"isBlockCoverage":false},{"functionName":"cloneNodeInternal","ranges":[{"startOffset":843,"endOffset":2614,"count":0}],"isBlockCoverage":false},{"functionName":"maybeCloneComments","ranges":[{"startOffset":2616,"endOffset":3089,"count":0}],"isBlockCoverage":false}]},{"scriptId":"361","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/clone/clone.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":219,"count":1}],"isBlockCoverage":true},{"functionName":"clone","ranges":[{"startOffset":148,"endOffset":219,"count":0}],"isBlockCoverage":false}]},{"scriptId":"362","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/clone/cloneDeep.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":220,"count":1}],"isBlockCoverage":true},{"functionName":"cloneDeep","ranges":[{"startOffset":152,"endOffset":220,"count":0}],"isBlockCoverage":false}]},{"scriptId":"363","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":252,"count":1}],"isBlockCoverage":true},{"functionName":"cloneDeepWithoutLoc","ranges":[{"startOffset":162,"endOffset":252,"count":0}],"isBlockCoverage":false}]},{"scriptId":"364","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":245,"count":1}],"isBlockCoverage":true},{"functionName":"cloneWithoutLoc","ranges":[{"startOffset":158,"endOffset":245,"count":0}],"isBlockCoverage":false}]},{"scriptId":"365","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/addComment.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":332,"count":1}],"isBlockCoverage":true},{"functionName":"addComment","ranges":[{"startOffset":157,"endOffset":332,"count":0}],"isBlockCoverage":false}]},{"scriptId":"366","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/addComments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":437,"count":1}],"isBlockCoverage":true},{"functionName":"addComments","ranges":[{"startOffset":112,"endOffset":437,"count":0}],"isBlockCoverage":false}]},{"scriptId":"367","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/inheritInnerComments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":271,"count":1}],"isBlockCoverage":true},{"functionName":"inheritInnerComments","ranges":[{"startOffset":166,"endOffset":271,"count":0}],"isBlockCoverage":false}]},{"scriptId":"368","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/utils/inherit.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":267,"count":1}],"isBlockCoverage":true},{"functionName":"inherit","ranges":[{"startOffset":108,"endOffset":267,"count":0}],"isBlockCoverage":false}]},{"scriptId":"369","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/inheritLeadingComments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":277,"count":1}],"isBlockCoverage":true},{"functionName":"inheritLeadingComments","ranges":[{"startOffset":168,"endOffset":277,"count":0}],"isBlockCoverage":false}]},{"scriptId":"370","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/inheritsComments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":543,"count":1}],"isBlockCoverage":true},{"functionName":"inheritsComments","ranges":[{"startOffset":319,"endOffset":543,"count":0}],"isBlockCoverage":false}]},{"scriptId":"371","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/inheritTrailingComments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":280,"count":1}],"isBlockCoverage":true},{"functionName":"inheritTrailingComments","ranges":[{"startOffset":169,"endOffset":280,"count":0}],"isBlockCoverage":false}]},{"scriptId":"372","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/comments/removeComments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":278,"count":1}],"isBlockCoverage":true},{"functionName":"removeComments","ranges":[{"startOffset":158,"endOffset":278,"count":0}],"isBlockCoverage":false}]},{"scriptId":"373","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/constants/generated/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7189,"count":1}],"isBlockCoverage":true}]},{"scriptId":"374","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/ensureBlock.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":255,"count":1}],"isBlockCoverage":true},{"functionName":"ensureBlock","ranges":[{"startOffset":150,"endOffset":255,"count":0}],"isBlockCoverage":false}]},{"scriptId":"375","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toBlock.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":745,"count":1}],"isBlockCoverage":true},{"functionName":"toBlock","ranges":[{"startOffset":215,"endOffset":745,"count":0}],"isBlockCoverage":false}]},{"scriptId":"376","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":338,"count":1}],"isBlockCoverage":true},{"functionName":"toBindingIdentifierName","ranges":[{"startOffset":172,"endOffset":338,"count":0}],"isBlockCoverage":false}]},{"scriptId":"377","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toIdentifier.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":698,"count":1}],"isBlockCoverage":true},{"functionName":"toIdentifier","ranges":[{"startOffset":264,"endOffset":698,"count":0}],"isBlockCoverage":false}]},{"scriptId":"378","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toComputedKey.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":407,"count":1}],"isBlockCoverage":true},{"functionName":"toComputedKey","ranges":[{"startOffset":221,"endOffset":407,"count":0}],"isBlockCoverage":false}]},{"scriptId":"379","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toExpression.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":699,"count":1}],"isBlockCoverage":true},{"functionName":"toExpression","ranges":[{"startOffset":219,"endOffset":699,"count":0}],"isBlockCoverage":false}]},{"scriptId":"380","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toKeyAlias.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1013,"count":1}],"isBlockCoverage":true},{"functionName":"toKeyAlias","ranges":[{"startOffset":293,"endOffset":825,"count":0}],"isBlockCoverage":false},{"functionName":"toKeyAlias.increment","ranges":[{"startOffset":871,"endOffset":1012,"count":0}],"isBlockCoverage":false}]},{"scriptId":"381","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":364,"count":1}],"isBlockCoverage":true},{"functionName":"removePropertiesDeep","ranges":[{"startOffset":235,"endOffset":364,"count":6}],"isBlockCoverage":true}]},{"scriptId":"382","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/traverse/traverseFast.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":586,"count":1}],"isBlockCoverage":true},{"functionName":"traverseFast","ranges":[{"startOffset":160,"endOffset":586,"count":311},{"startOffset":216,"endOffset":223,"count":146},{"startOffset":223,"endOffset":290,"count":165},{"startOffset":290,"endOffset":297,"count":0},{"startOffset":297,"endOffset":312,"count":165},{"startOffset":312,"endOffset":317,"count":0},{"startOffset":367,"endOffset":584,"count":305},{"startOffset":433,"endOffset":525,"count":48},{"startOffset":525,"endOffset":580,"count":257},{"startOffset":584,"endOffset":585,"count":165}],"isBlockCoverage":true}]},{"scriptId":"383","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/removeProperties.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":765,"count":1}],"isBlockCoverage":true},{"functionName":"removeProperties","ranges":[{"startOffset":333,"endOffset":765,"count":165},{"startOffset":414,"endOffset":426,"count":0},{"startOffset":481,"endOffset":536,"count":1650},{"startOffset":510,"endOffset":532,"count":513},{"startOffset":577,"endOffset":650,"count":984},{"startOffset":602,"endOffset":622,"count":0},{"startOffset":624,"endOffset":646,"count":0},{"startOffset":736,"endOffset":763,"count":0}],"isBlockCoverage":true}]},{"scriptId":"384","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toSequenceExpression.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":497,"count":1}],"isBlockCoverage":true},{"functionName":"toSequenceExpression","ranges":[{"startOffset":195,"endOffset":497,"count":0}],"isBlockCoverage":false}]},{"scriptId":"385","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2352,"count":1}],"isBlockCoverage":true},{"functionName":"gatherSequenceExpressions","ranges":[{"startOffset":360,"endOffset":2352,"count":0}],"isBlockCoverage":false}]},{"scriptId":"386","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2565,"count":1}],"isBlockCoverage":true},{"functionName":"getBindingIdentifiers","ranges":[{"startOffset":176,"endOffset":1309,"count":0}],"isBlockCoverage":false}]},{"scriptId":"387","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/toStatement.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":984,"count":1}],"isBlockCoverage":true},{"functionName":"toStatement","ranges":[{"startOffset":271,"endOffset":984,"count":0}],"isBlockCoverage":false}]},{"scriptId":"388","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/converters/valueToNode.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2495,"count":1}],"isBlockCoverage":true},{"functionName":"isRegExp","ranges":[{"startOffset":356,"endOffset":438,"count":0}],"isBlockCoverage":false},{"functionName":"isPlainObject","ranges":[{"startOffset":440,"endOffset":724,"count":0}],"isBlockCoverage":false},{"functionName":"valueToNode","ranges":[{"startOffset":726,"endOffset":2495,"count":0}],"isBlockCoverage":false}]},{"scriptId":"389","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":426,"count":1}],"isBlockCoverage":true},{"functionName":"appendToMemberExpression","ranges":[{"startOffset":177,"endOffset":426,"count":0}],"isBlockCoverage":false}]},{"scriptId":"390","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/inherits.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":695,"count":1}],"isBlockCoverage":true},{"functionName":"inherits","ranges":[{"startOffset":218,"endOffset":695,"count":0}],"isBlockCoverage":false}]},{"scriptId":"391","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":326,"count":1}],"isBlockCoverage":true},{"functionName":"prependToMemberExpression","ranges":[{"startOffset":178,"endOffset":326,"count":0}],"isBlockCoverage":false}]},{"scriptId":"392","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":372,"count":1}],"isBlockCoverage":true},{"functionName":"getOuterBindingIdentifiers","ranges":[{"startOffset":245,"endOffset":372,"count":0}],"isBlockCoverage":false}]},{"scriptId":"393","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/traverse/traverse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1198,"count":1}],"isBlockCoverage":true},{"functionName":"traverse","ranges":[{"startOffset":156,"endOffset":389,"count":6}],"isBlockCoverage":true},{"functionName":"traverseSimpleImpl","ranges":[{"startOffset":391,"endOffset":1198,"count":165},{"startOffset":524,"endOffset":531,"count":0},{"startOffset":603,"endOffset":1153,"count":305},{"startOffset":669,"endOffset":975,"count":48},{"startOffset":774,"endOffset":783,"count":0},{"startOffset":975,"endOffset":1149,"count":257},{"startOffset":994,"endOffset":1149,"count":111},{"startOffset":1167,"endOffset":1196,"count":0}],"isBlockCoverage":true}]},{"scriptId":"394","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isBinding.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":743,"count":1}],"isBlockCoverage":true},{"functionName":"isBinding","ranges":[{"startOffset":188,"endOffset":743,"count":0}],"isBlockCoverage":false}]},{"scriptId":"395","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isBlockScoped.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":349,"count":1}],"isBlockCoverage":true},{"functionName":"isBlockScoped","ranges":[{"startOffset":190,"endOffset":349,"count":0}],"isBlockCoverage":false}]},{"scriptId":"396","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isLet.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":334,"count":1}],"isBlockCoverage":true},{"functionName":"isLet","ranges":[{"startOffset":191,"endOffset":334,"count":0}],"isBlockCoverage":false}]},{"scriptId":"397","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isImmutable.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":446,"count":1}],"isBlockCoverage":true},{"functionName":"isImmutable","ranges":[{"startOffset":190,"endOffset":446,"count":0}],"isBlockCoverage":false}]},{"scriptId":"398","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isNodesEquivalent.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1457,"count":1}],"isBlockCoverage":true},{"functionName":"isNodesEquivalent","ranges":[{"startOffset":165,"endOffset":1457,"count":0}],"isBlockCoverage":false}]},{"scriptId":"399","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isReferenced.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2589,"count":1}],"isBlockCoverage":true},{"functionName":"isReferenced","ranges":[{"startOffset":113,"endOffset":2589,"count":1},{"startOffset":193,"endOffset":217,"count":0},{"startOffset":222,"endOffset":372,"count":0},{"startOffset":378,"endOffset":442,"count":0},{"startOffset":448,"endOffset":509,"count":0},{"startOffset":515,"endOffset":581,"count":0},{"startOffset":587,"endOffset":626,"count":0},{"startOffset":632,"endOffset":651,"count":0},{"startOffset":656,"endOffset":682,"count":0},{"startOffset":687,"endOffset":803,"count":0},{"startOffset":863,"endOffset":906,"count":0},{"startOffset":980,"endOffset":1001,"count":0},{"startOffset":1006,"endOffset":1130,"count":0},{"startOffset":1136,"endOffset":1198,"count":0},{"startOffset":1204,"endOffset":1228,"count":0},{"startOffset":1233,"endOffset":1297,"count":0},{"startOffset":1303,"endOffset":1367,"count":0},{"startOffset":1373,"endOffset":1434,"count":0},{"startOffset":1440,"endOffset":1484,"count":0},{"startOffset":1490,"endOffset":1529,"count":0},{"startOffset":1535,"endOffset":1574,"count":0},{"startOffset":1580,"endOffset":1602,"count":0},{"startOffset":1607,"endOffset":1652,"count":0},{"startOffset":1658,"endOffset":1685,"count":0},{"startOffset":1690,"endOffset":1736,"count":0},{"startOffset":1742,"endOffset":1774,"count":0},{"startOffset":1779,"endOffset":1829,"count":0},{"startOffset":1835,"endOffset":1980,"count":0},{"startOffset":1986,"endOffset":2016,"count":0},{"startOffset":2021,"endOffset":2053,"count":0},{"startOffset":2058,"endOffset":2101,"count":0},{"startOffset":2107,"endOffset":2150,"count":0},{"startOffset":2156,"endOffset":2196,"count":0},{"startOffset":2202,"endOffset":2223,"count":0},{"startOffset":2228,"endOffset":2268,"count":0},{"startOffset":2274,"endOffset":2314,"count":0},{"startOffset":2320,"endOffset":2380,"count":0},{"startOffset":2386,"endOffset":2439,"count":0},{"startOffset":2445,"endOffset":2567,"count":0},{"startOffset":2571,"endOffset":2588,"count":0}],"isBlockCoverage":true}]},{"scriptId":"400","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isScope.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":523,"count":1}],"isBlockCoverage":true},{"functionName":"isScope","ranges":[{"startOffset":150,"endOffset":523,"count":0}],"isBlockCoverage":false}]},{"scriptId":"401","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isSpecifierDefault.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":366,"count":1}],"isBlockCoverage":true},{"functionName":"isSpecifierDefault","ranges":[{"startOffset":161,"endOffset":366,"count":0}],"isBlockCoverage":false}]},{"scriptId":"402","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isValidES3Identifier.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":598,"count":1}],"isBlockCoverage":true},{"functionName":"isValidES3Identifier","ranges":[{"startOffset":473,"endOffset":598,"count":0}],"isBlockCoverage":false}]},{"scriptId":"403","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/types/lib/validators/isVar.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":333,"count":1}],"isBlockCoverage":true},{"functionName":"isVar","ranges":[{"startOffset":191,"endOffset":333,"count":0}],"isBlockCoverage":false}]},{"scriptId":"405","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/tools/build-external-helpers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4331,"count":1}],"isBlockCoverage":true},{"functionName":"helpers","ranges":[{"startOffset":109,"endOffset":238,"count":0}],"isBlockCoverage":false},{"functionName":"_generator","ranges":[{"startOffset":240,"endOffset":377,"count":0}],"isBlockCoverage":false},{"functionName":"_template","ranges":[{"startOffset":379,"endOffset":513,"count":0}],"isBlockCoverage":false},{"functionName":"_t","ranges":[{"startOffset":515,"endOffset":632,"count":1}],"isBlockCoverage":true},{"functionName":"_t","ranges":[{"startOffset":579,"endOffset":613,"count":0}],"isBlockCoverage":false},{"functionName":"buildUmdWrapper","ranges":[{"startOffset":1102,"endOffset":1512,"count":0}],"isBlockCoverage":false},{"functionName":"buildGlobal","ranges":[{"startOffset":1515,"endOffset":2185,"count":0}],"isBlockCoverage":false},{"functionName":"buildModule","ranges":[{"startOffset":2187,"endOffset":2484,"count":0}],"isBlockCoverage":false},{"functionName":"buildUmd","ranges":[{"startOffset":2486,"endOffset":3102,"count":0}],"isBlockCoverage":false},{"functionName":"buildVar","ranges":[{"startOffset":3104,"endOffset":3433,"count":0}],"isBlockCoverage":false},{"functionName":"buildHelpers","ranges":[{"startOffset":3435,"endOffset":3970,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":3972,"endOffset":4331,"count":0}],"isBlockCoverage":false}]},{"scriptId":"406","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1877,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":165,"endOffset":231,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":317,"endOffset":379,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":463,"endOffset":517,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":604,"endOffset":667,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":750,"endOffset":809,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":888,"endOffset":943,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1022,"endOffset":1070,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1149,"endOffset":1197,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1343,"endOffset":1409,"count":106}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":1540,"endOffset":1664,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":1611,"endOffset":1645,"count":1}],"isBlockCoverage":true}]},{"scriptId":"407","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/package.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1509,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":124,"endOffset":239,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":186,"endOffset":220,"count":14}],"isBlockCoverage":true},{"functionName":"findPackageData","ranges":[{"startOffset":317,"endOffset":864,"count":2},{"startOffset":482,"endOffset":529,"count":4},{"startOffset":531,"endOffset":791,"count":4},{"startOffset":718,"endOffset":763,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":924,"endOffset":1507,"count":1},{"startOffset":1012,"endOffset":1120,"count":0},{"startOffset":1138,"endOffset":1189,"count":0},{"startOffset":1226,"endOffset":1309,"count":0},{"startOffset":1341,"endOffset":1422,"count":0}],"isBlockCoverage":true}]},{"scriptId":"408","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":856,"count":1}],"isBlockCoverage":true},{"functionName":"_fs2","ranges":[{"startOffset":216,"endOffset":327,"count":1}],"isBlockCoverage":true},{"functionName":"_fs2","ranges":[{"startOffset":274,"endOffset":308,"count":21}],"isBlockCoverage":true},{"functionName":"makeStaticFileCache","ranges":[{"startOffset":329,"endOffset":621,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":403,"endOffset":617,"count":9},{"startOffset":523,"endOffset":549,"count":7},{"startOffset":549,"endOffset":616,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":469,"endOffset":494,"count":18}],"isBlockCoverage":true},{"functionName":"fileMtime","ranges":[{"startOffset":623,"endOffset":856,"count":18},{"startOffset":690,"endOffset":702,"count":14},{"startOffset":702,"endOffset":761,"count":4},{"startOffset":761,"endOffset":855,"count":0}],"isBlockCoverage":true}]},{"scriptId":"409","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/caching.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7327,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":306,"endOffset":430,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":377,"endOffset":411,"count":16}],"isBlockCoverage":true},{"functionName":"synchronize","ranges":[{"startOffset":533,"endOffset":574,"count":17}],"isBlockCoverage":true},{"functionName":"genTrue","ranges":[{"startOffset":577,"endOffset":615,"count":38}],"isBlockCoverage":true},{"functionName":"makeWeakCache","ranges":[{"startOffset":617,"endOffset":699,"count":18}],"isBlockCoverage":true},{"functionName":"makeWeakCacheSync","ranges":[{"startOffset":701,"endOffset":786,"count":15}],"isBlockCoverage":true},{"functionName":"makeStrongCache","ranges":[{"startOffset":788,"endOffset":868,"count":6}],"isBlockCoverage":true},{"functionName":"makeStrongCacheSync","ranges":[{"startOffset":870,"endOffset":959,"count":2}],"isBlockCoverage":true},{"functionName":"makeCachedFunction","ranges":[{"startOffset":961,"endOffset":2017,"count":24}],"isBlockCoverage":true},{"functionName":"cachedFunction","ranges":[{"startOffset":1142,"endOffset":2014,"count":124},{"startOffset":1270,"endOffset":1286,"count":0},{"startOffset":1423,"endOffset":1443,"count":53},{"startOffset":1443,"endOffset":1628,"count":71},{"startOffset":1628,"endOffset":1800,"count":62},{"startOffset":1800,"endOffset":1842,"count":9},{"startOffset":1842,"endOffset":1920,"count":71},{"startOffset":1920,"endOffset":1991,"count":0},{"startOffset":1991,"endOffset":2013,"count":71}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1714,"endOffset":1792,"count":0}],"isBlockCoverage":false},{"functionName":"getCachedValue","ranges":[{"startOffset":2019,"endOffset":2335,"count":124},{"startOffset":2122,"endOffset":2282,"count":53},{"startOffset":2278,"endOffset":2282,"count":0},{"startOffset":2282,"endOffset":2334,"count":71}],"isBlockCoverage":true},{"functionName":"getCachedValueOrWait","ranges":[{"startOffset":2337,"endOffset":2832,"count":124},{"startOffset":2502,"endOffset":2526,"count":53},{"startOffset":2526,"endOffset":2548,"count":71},{"startOffset":2548,"endOffset":2779,"count":0},{"startOffset":2779,"endOffset":2831,"count":71}],"isBlockCoverage":true},{"functionName":"setupAsyncLocks","ranges":[{"startOffset":2834,"endOffset":3003,"count":0}],"isBlockCoverage":false},{"functionName":"updateFunctionCache","ranges":[{"startOffset":3005,"endOffset":3781,"count":71},{"startOffset":3091,"endOffset":3108,"count":38},{"startOffset":3200,"endOffset":3334,"count":38},{"startOffset":3340,"endOffset":3488,"count":11},{"startOffset":3494,"endOffset":3774,"count":4},{"startOffset":3531,"endOffset":3632,"count":0}],"isBlockCoverage":true},{"functionName":"CacheConfigurator","ranges":[{"startOffset":3811,"endOffset":4041,"count":71}],"isBlockCoverage":true},{"functionName":"simple","ranges":[{"startOffset":4045,"endOffset":4100,"count":18}],"isBlockCoverage":true},{"functionName":"mode","ranges":[{"startOffset":4104,"endOffset":4261,"count":71},{"startOffset":4134,"endOffset":4149,"count":18},{"startOffset":4149,"endOffset":4173,"count":53},{"startOffset":4173,"endOffset":4190,"count":38},{"startOffset":4190,"endOffset":4217,"count":15},{"startOffset":4217,"endOffset":4237,"count":11},{"startOffset":4237,"endOffset":4260,"count":4}],"isBlockCoverage":true},{"functionName":"forever","ranges":[{"startOffset":4265,"endOffset":4553,"count":38},{"startOffset":4300,"endOffset":4387,"count":0},{"startOffset":4410,"endOffset":4493,"count":0}],"isBlockCoverage":true},{"functionName":"never","ranges":[{"startOffset":4557,"endOffset":4845,"count":18},{"startOffset":4590,"endOffset":4677,"count":0},{"startOffset":4702,"endOffset":4787,"count":0}],"isBlockCoverage":true},{"functionName":"using","ranges":[{"startOffset":4849,"endOffset":5516,"count":28},{"startOffset":4889,"endOffset":4976,"count":0},{"startOffset":5016,"endOffset":5111,"count":0},{"startOffset":5355,"endOffset":5461,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5379,"endOffset":5453,"count":0}],"isBlockCoverage":false},{"functionName":"invalidate","ranges":[{"startOffset":5520,"endOffset":5606,"count":11}],"isBlockCoverage":true},{"functionName":"validator","ranges":[{"startOffset":5610,"endOffset":5815,"count":15}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5666,"endOffset":5810,"count":15},{"startOffset":5722,"endOffset":5784,"count":28},{"startOffset":5763,"endOffset":5776,"count":0}],"isBlockCoverage":true},{"functionName":"deactivate","ranges":[{"startOffset":5819,"endOffset":5863,"count":71}],"isBlockCoverage":true},{"functionName":"configured","ranges":[{"startOffset":5867,"endOffset":5914,"count":71}],"isBlockCoverage":true},{"functionName":"makeSimpleConfigurator","ranges":[{"startOffset":5919,"endOffset":6403,"count":18}],"isBlockCoverage":true},{"functionName":"cacheFn","ranges":[{"startOffset":5962,"endOffset":6152,"count":0}],"isBlockCoverage":false},{"functionName":"cacheFn.forever","ranges":[{"startOffset":6174,"endOffset":6195,"count":0}],"isBlockCoverage":false},{"functionName":"cacheFn.never","ranges":[{"startOffset":6216,"endOffset":6235,"count":0}],"isBlockCoverage":false},{"functionName":"cacheFn.using","ranges":[{"startOffset":6256,"endOffset":6303,"count":0}],"isBlockCoverage":false},{"functionName":"cacheFn.invalidate","ranges":[{"startOffset":6329,"endOffset":6381,"count":0}],"isBlockCoverage":false},{"functionName":"assertSimpleType","ranges":[{"startOffset":6405,"endOffset":7046,"count":8},{"startOffset":6477,"endOffset":6816,"count":0},{"startOffset":6897,"endOffset":6925,"count":0},{"startOffset":6927,"endOffset":7027,"count":0}],"isBlockCoverage":true},{"functionName":"Lock","ranges":[{"startOffset":7063,"endOffset":7247,"count":0}],"isBlockCoverage":false},{"functionName":"release","ranges":[{"startOffset":7251,"endOffset":7324,"count":0}],"isBlockCoverage":false}]},{"scriptId":"410","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/gensync-utils/async.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1783,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":259,"endOffset":383,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":330,"endOffset":364,"count":52}],"isBlockCoverage":true},{"functionName":"id","ranges":[{"startOffset":396,"endOffset":402,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":437,"endOffset":479,"count":62}],"isBlockCoverage":true},{"functionName":"sync","ranges":[{"startOffset":520,"endOffset":531,"count":127}],"isBlockCoverage":true},{"functionName":"errback","ranges":[{"startOffset":544,"endOffset":564,"count":0}],"isBlockCoverage":false},{"functionName":"maybeAsync","ranges":[{"startOffset":598,"endOffset":890,"count":46}],"isBlockCoverage":true},{"functionName":"sync","ranges":[{"startOffset":659,"endOffset":800,"count":46},{"startOffset":748,"endOffset":773,"count":0}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":807,"endOffset":881,"count":0}],"isBlockCoverage":false},{"functionName":"sync","ranges":[{"startOffset":930,"endOffset":946,"count":2}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":957,"endOffset":974,"count":0}],"isBlockCoverage":false},{"functionName":"forwardAsync","ranges":[{"startOffset":980,"endOffset":1137,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1067,"endOffset":1133,"count":2}],"isBlockCoverage":true},{"functionName":"sync","ranges":[{"startOffset":1217,"endOffset":1274,"count":62}],"isBlockCoverage":true},{"functionName":"errback","ranges":[{"startOffset":1287,"endOffset":1503,"count":0}],"isBlockCoverage":false},{"functionName":"isThenable","ranges":[{"startOffset":1633,"endOffset":1783,"count":100},{"startOffset":1675,"endOffset":1732,"count":48},{"startOffset":1703,"endOffset":1731,"count":8},{"startOffset":1733,"endOffset":1746,"count":40},{"startOffset":1747,"endOffset":1780,"count":0}],"isBlockCoverage":true}]},{"scriptId":"411","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/gensync/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9627,"count":1}],"isBlockCoverage":true},{"functionName":"gensync","ranges":[{"startOffset":589,"endOffset":843,"count":83},{"startOffset":684,"endOffset":729,"count":53},{"startOffset":729,"endOffset":781,"count":30}],"isBlockCoverage":true},{"functionName":"sync","ranges":[{"startOffset":922,"endOffset":1043,"count":10}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1007,"endOffset":1033,"count":44}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":1058,"endOffset":1615,"count":0}],"isBlockCoverage":false},{"functionName":"sync","ranges":[{"startOffset":1700,"endOffset":1930,"count":0}],"isBlockCoverage":false},{"functionName":"async","ranges":[{"startOffset":1945,"endOffset":2247,"count":0}],"isBlockCoverage":false},{"functionName":"makeFunctionAPI","ranges":[{"startOffset":2391,"endOffset":3159,"count":83}],"isBlockCoverage":true},{"functionName":"sync","ranges":[{"startOffset":2451,"endOffset":2528,"count":190}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":2541,"endOffset":2689,"count":0}],"isBlockCoverage":false},{"functionName":"errback","ranges":[{"startOffset":2704,"endOffset":3137,"count":0}],"isBlockCoverage":false},{"functionName":"assertTypeof","ranges":[{"startOffset":3161,"endOffset":3556,"count":265},{"startOffset":3253,"endOffset":3308,"count":157},{"startOffset":3330,"endOffset":3555,"count":0}],"isBlockCoverage":true},{"functionName":"makeError","ranges":[{"startOffset":3557,"endOffset":3640,"count":0}],"isBlockCoverage":false},{"functionName":"newGenerator","ranges":[{"startOffset":3774,"endOffset":5308,"count":53},{"startOffset":4173,"endOffset":4183,"count":49},{"startOffset":4185,"endOffset":4322,"count":0},{"startOffset":4356,"endOffset":4761,"count":52},{"startOffset":4390,"endOffset":4405,"count":3},{"startOffset":4406,"endOffset":4435,"count":3},{"startOffset":4437,"endOffset":4473,"count":2},{"startOffset":4488,"endOffset":4501,"count":49},{"startOffset":4502,"endOffset":4527,"count":49},{"startOffset":4529,"endOffset":4585,"count":1},{"startOffset":4637,"endOffset":4691,"count":3},{"startOffset":4729,"endOffset":4757,"count":3},{"startOffset":4796,"endOffset":4826,"count":52}],"isBlockCoverage":true},{"functionName":"sync","ranges":[{"startOffset":4885,"endOffset":4944,"count":242}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":4957,"endOffset":5299,"count":0}],"isBlockCoverage":false},{"functionName":"wrapGenerator","ranges":[{"startOffset":5310,"endOffset":5460,"count":30}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5397,"endOffset":5456,"count":296}],"isBlockCoverage":true},{"functionName":"buildOperation","ranges":[{"startOffset":5462,"endOffset":6390,"count":55}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5560,"endOffset":6386,"count":252},{"startOffset":5783,"endOffset":6385,"count":0}],"isBlockCoverage":true},{"functionName":"async.call.result.err.err","ranges":[{"startOffset":5865,"endOffset":5966,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5976,"endOffset":6073,"count":0}],"isBlockCoverage":false},{"functionName":"evaluateSync","ranges":[{"startOffset":6392,"endOffset":6527,"count":234},{"startOffset":6475,"endOffset":6509,"count":252}],"isBlockCoverage":true},{"functionName":"evaluateAsync","ranges":[{"startOffset":6529,"endOffset":7460,"count":0}],"isBlockCoverage":false},{"functionName":"assertStart","ranges":[{"startOffset":7462,"endOffset":7775,"count":252},{"startOffset":7535,"endOffset":7774,"count":0}],"isBlockCoverage":true},{"functionName":"assertSuspend","ranges":[{"startOffset":7776,"endOffset":8198,"count":0}],"isBlockCoverage":false},{"functionName":"throwError","ranges":[{"startOffset":8200,"endOffset":8548,"count":0}],"isBlockCoverage":false},{"functionName":"isIterable","ranges":[{"startOffset":8550,"endOffset":8705,"count":0}],"isBlockCoverage":false},{"functionName":"setFunctionMetadata","ranges":[{"startOffset":8707,"endOffset":9626,"count":85},{"startOffset":8787,"endOffset":9269,"count":36},{"startOffset":9178,"endOffset":9183,"count":0},{"startOffset":9518,"endOffset":9523,"count":0}],"isBlockCoverage":true}]},{"scriptId":"412","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/util.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":887,"count":1}],"isBlockCoverage":true},{"functionName":"mergeOptions","ranges":[{"startOffset":167,"endOffset":580,"count":8},{"startOffset":246,"endOffset":578,"count":40},{"startOffset":325,"endOffset":337,"count":2},{"startOffset":339,"endOffset":486,"count":2},{"startOffset":486,"endOffset":574,"count":38}],"isBlockCoverage":true},{"functionName":"mergeDefaultFields","ranges":[{"startOffset":582,"endOffset":745,"count":2},{"startOffset":667,"endOffset":743,"count":0}],"isBlockCoverage":true},{"functionName":"isIterableIterator","ranges":[{"startOffset":747,"endOffset":887,"count":71},{"startOffset":801,"endOffset":836,"count":68},{"startOffset":837,"endOffset":884,"count":62}],"isBlockCoverage":true}]},{"scriptId":"413","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/gensync-utils/fs.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":576,"count":1}],"isBlockCoverage":true},{"functionName":"_fs","ranges":[{"startOffset":123,"endOffset":232,"count":1}],"isBlockCoverage":true},{"functionName":"_fs","ranges":[{"startOffset":179,"endOffset":213,"count":3}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":234,"endOffset":358,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":305,"endOffset":339,"count":1}],"isBlockCoverage":true}]},{"scriptId":"414","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/configuration.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10004,"count":1}],"isBlockCoverage":true},{"functionName":"_debug","ranges":[{"startOffset":346,"endOffset":464,"count":1}],"isBlockCoverage":true},{"functionName":"_debug","ranges":[{"startOffset":411,"endOffset":445,"count":0}],"isBlockCoverage":false},{"functionName":"_fs","ranges":[{"startOffset":466,"endOffset":575,"count":1}],"isBlockCoverage":true},{"functionName":"_fs","ranges":[{"startOffset":522,"endOffset":556,"count":17}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":577,"endOffset":692,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":639,"endOffset":673,"count":62}],"isBlockCoverage":true},{"functionName":"_json","ranges":[{"startOffset":694,"endOffset":810,"count":1}],"isBlockCoverage":true},{"functionName":"_json","ranges":[{"startOffset":757,"endOffset":791,"count":0}],"isBlockCoverage":false},{"functionName":"_gensync","ranges":[{"startOffset":812,"endOffset":936,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":883,"endOffset":917,"count":5}],"isBlockCoverage":true},{"functionName":"_module","ranges":[{"startOffset":1210,"endOffset":1331,"count":0}],"isBlockCoverage":false},{"functionName":"findConfigUpwards","ranges":[{"startOffset":1727,"endOffset":2085,"count":0}],"isBlockCoverage":false},{"functionName":"findRelativeConfig","ranges":[{"startOffset":2087,"endOffset":2861,"count":2},{"startOffset":2294,"endOffset":2819,"count":4},{"startOffset":2475,"endOffset":2483,"count":0},{"startOffset":2520,"endOffset":2559,"count":2},{"startOffset":2560,"endOffset":2566,"count":2},{"startOffset":2731,"endOffset":2809,"count":0}],"isBlockCoverage":true},{"functionName":"findRootConfig","ranges":[{"startOffset":2863,"endOffset":2989,"count":2}],"isBlockCoverage":true},{"functionName":"loadOneConfig","ranges":[{"startOffset":2991,"endOffset":3660,"count":6},{"startOffset":3563,"endOffset":3640,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3123,"endOffset":3195,"count":28}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3231,"endOffset":3529,"count":28},{"startOffset":3276,"endOffset":3293,"count":2},{"startOffset":3295,"endOffset":3487,"count":0},{"startOffset":3507,"endOffset":3524,"count":26}],"isBlockCoverage":true},{"functionName":"loadConfig","ranges":[{"startOffset":3662,"endOffset":4389,"count":0}],"isBlockCoverage":false},{"functionName":"readConfig","ranges":[{"startOffset":4391,"endOffset":4627,"count":28},{"startOffset":4505,"endOffset":4522,"count":22},{"startOffset":4523,"endOffset":4540,"count":16},{"startOffset":4541,"endOffset":4596,"count":18},{"startOffset":4597,"endOffset":4624,"count":10}],"isBlockCoverage":true},{"functionName":"readConfigJS","ranges":[{"startOffset":4715,"endOffset":6339,"count":18},{"startOffset":4833,"endOffset":5691,"count":0},{"startOffset":5692,"endOffset":5717,"count":0},{"startOffset":5719,"endOffset":6234,"count":0},{"startOffset":6236,"endOffset":6338,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6403,"endOffset":6752,"count":1},{"startOffset":6500,"endOffset":6557,"count":0},{"startOffset":6558,"endOffset":6575,"count":0},{"startOffset":6577,"endOffset":6751,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6811,"endOffset":7428,"count":1},{"startOffset":6902,"endOffset":7012,"count":0},{"startOffset":7030,"endOffset":7081,"count":0},{"startOffset":7118,"endOffset":7201,"count":0},{"startOffset":7233,"endOffset":7314,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7488,"endOffset":7992,"count":0}],"isBlockCoverage":false},{"functionName":"resolveShowConfigPath","ranges":[{"startOffset":7996,"endOffset":8443,"count":106},{"startOffset":8122,"endOffset":8425,"count":0}],"isBlockCoverage":true},{"functionName":"throwConfigError","ranges":[{"startOffset":8445,"endOffset":10004,"count":0}],"isBlockCoverage":false}]},{"scriptId":"415","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/helpers/config-api.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2769,"count":1}],"isBlockCoverage":true},{"functionName":"_semver","ranges":[{"startOffset":198,"endOffset":319,"count":1}],"isBlockCoverage":true},{"functionName":"_semver","ranges":[{"startOffset":266,"endOffset":300,"count":17}],"isBlockCoverage":true},{"functionName":"makeConfigAPI","ranges":[{"startOffset":433,"endOffset":1144,"count":18}],"isBlockCoverage":true},{"functionName":"env","ranges":[{"startOffset":479,"endOffset":916,"count":0}],"isBlockCoverage":false},{"functionName":"caller","ranges":[{"startOffset":936,"endOffset":1010,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":954,"endOffset":1009,"count":8}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":1095,"endOffset":1106,"count":0}],"isBlockCoverage":false},{"functionName":"makePresetAPI","ranges":[{"startOffset":1146,"endOffset":1468,"count":18}],"isBlockCoverage":true},{"functionName":"targets","ranges":[{"startOffset":1218,"endOffset":1285,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1247,"endOffset":1283,"count":4}],"isBlockCoverage":true},{"functionName":"addExternalDependency","ranges":[{"startOffset":1320,"endOffset":1368,"count":0}],"isBlockCoverage":false},{"functionName":"makePluginAPI","ranges":[{"startOffset":1470,"endOffset":1694,"count":17}],"isBlockCoverage":true},{"functionName":"assumption","ranges":[{"startOffset":1545,"endOffset":1596,"count":11}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1565,"endOffset":1595,"count":22}],"isBlockCoverage":true},{"functionName":"assertVersion","ranges":[{"startOffset":1696,"endOffset":2769,"count":18},{"startOffset":1797,"endOffset":1864,"count":0},{"startOffset":1935,"endOffset":1998,"count":0},{"startOffset":2052,"endOffset":2138,"count":0},{"startOffset":2140,"endOffset":2768,"count":0}],"isBlockCoverage":true}]},{"scriptId":"417","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/module-types.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2828,"count":1},{"startOffset":1277,"endOffset":1295,"count":0}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":202,"endOffset":317,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":264,"endOffset":298,"count":2}],"isBlockCoverage":true},{"functionName":"_url","ranges":[{"startOffset":319,"endOffset":431,"count":0}],"isBlockCoverage":false},{"functionName":"_module","ranges":[{"startOffset":433,"endOffset":554,"count":0}],"isBlockCoverage":false},{"functionName":"asyncGeneratorStep","ranges":[{"startOffset":556,"endOffset":821,"count":0}],"isBlockCoverage":false},{"functionName":"_asyncToGenerator","ranges":[{"startOffset":823,"endOffset":1212,"count":0}],"isBlockCoverage":false},{"functionName":"loadCjsOrMjsDefault","ranges":[{"startOffset":1364,"endOffset":1936,"count":3},{"startOffset":1499,"endOffset":1577,"count":0},{"startOffset":1688,"endOffset":1758,"count":0},{"startOffset":1764,"endOffset":1930,"count":0}],"isBlockCoverage":true},{"functionName":"guessJSModuleType","ranges":[{"startOffset":1938,"endOffset":2134,"count":3},{"startOffset":2020,"endOffset":2052,"count":0},{"startOffset":2058,"endOffset":2090,"count":0}],"isBlockCoverage":true},{"functionName":"loadCjsDefault","ranges":[{"startOffset":2136,"endOffset":2363,"count":3},{"startOffset":2299,"endOffset":2351,"count":0},{"startOffset":2352,"endOffset":2360,"count":0}],"isBlockCoverage":true},{"functionName":"loadMjsDefault","ranges":[{"startOffset":2365,"endOffset":2445,"count":0}],"isBlockCoverage":false},{"functionName":"_loadMjsDefault","ranges":[{"startOffset":2447,"endOffset":2828,"count":0}],"isBlockCoverage":false}]},{"scriptId":"418","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/import.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":165,"count":1}],"isBlockCoverage":true},{"functionName":"import_","ranges":[{"startOffset":108,"endOffset":165,"count":0}],"isBlockCoverage":false}]},{"scriptId":"419","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/pattern-to-regex.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1143,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":114,"endOffset":229,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":176,"endOffset":210,"count":0}],"isBlockCoverage":false},{"functionName":"escapeRegExp","ranges":[{"startOffset":518,"endOffset":607,"count":0}],"isBlockCoverage":false},{"functionName":"pathToPattern","ranges":[{"startOffset":609,"endOffset":1143,"count":0}],"isBlockCoverage":false}]},{"scriptId":"420","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/debug/src/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":314,"count":1},{"startOffset":218,"endOffset":264,"count":0}],"isBlockCoverage":true}]},{"scriptId":"421","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/debug/src/node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4685,"count":1},{"startOffset":816,"endOffset":832,"count":0},{"startOffset":1454,"endOffset":1555,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":334,"endOffset":342,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1779,"endOffset":1819,"count":89}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1828,"endOffset":2286,"count":0}],"isBlockCoverage":false},{"functionName":"useColors","ranges":[{"startOffset":2362,"endOffset":2501,"count":5},{"startOffset":2425,"endOffset":2464,"count":0}],"isBlockCoverage":true},{"functionName":"formatArgs","ranges":[{"startOffset":2574,"endOffset":3008,"count":0}],"isBlockCoverage":false},{"functionName":"getDate","ranges":[{"startOffset":3010,"endOffset":3125,"count":0}],"isBlockCoverage":false},{"functionName":"log","ranges":[{"startOffset":3214,"endOffset":3298,"count":0}],"isBlockCoverage":false},{"functionName":"save","ranges":[{"startOffset":3379,"endOffset":3636,"count":1},{"startOffset":3424,"endOffset":3462,"count":0}],"isBlockCoverage":true},{"functionName":"load","ranges":[{"startOffset":3753,"endOffset":3799,"count":1}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":3964,"endOffset":4167,"count":5},{"startOffset":4100,"endOffset":4165,"count":0}],"isBlockCoverage":true},{"functionName":"formatters.o","ranges":[{"startOffset":4332,"endOffset":4488,"count":0}],"isBlockCoverage":false},{"functionName":"formatters.O","ranges":[{"startOffset":4581,"endOffset":4683,"count":0}],"isBlockCoverage":false}]},{"scriptId":"422","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/supports-color/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2771,"count":1},{"startOffset":197,"endOffset":221,"count":0},{"startOffset":325,"endOffset":348,"count":0},{"startOffset":375,"endOffset":461,"count":0}],"isBlockCoverage":true},{"functionName":"translateLevel","ranges":[{"startOffset":463,"endOffset":621,"count":2},{"startOffset":514,"endOffset":534,"count":0}],"isBlockCoverage":true},{"functionName":"supportsColor","ranges":[{"startOffset":623,"endOffset":2524,"count":2},{"startOffset":683,"endOffset":699,"count":0},{"startOffset":787,"endOffset":803,"count":0},{"startOffset":832,"endOffset":848,"count":0},{"startOffset":879,"endOffset":901,"count":0},{"startOffset":903,"endOffset":919,"count":0},{"startOffset":945,"endOffset":948,"count":0},{"startOffset":990,"endOffset":1664,"count":0},{"startOffset":1684,"endOffset":1833,"count":0},{"startOffset":1867,"endOffset":1948,"count":0},{"startOffset":2002,"endOffset":2523,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1745,"endOffset":1764,"count":0}],"isBlockCoverage":false},{"functionName":"getSupportLevel","ranges":[{"startOffset":2526,"endOffset":2631,"count":2}],"isBlockCoverage":true}]},{"scriptId":"423","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/has-flag/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":320,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":31,"endOffset":318,"count":15},{"startOffset":116,"endOffset":120,"count":0},{"startOffset":142,"endOffset":147,"count":0},{"startOffset":261,"endOffset":315,"count":0}],"isBlockCoverage":true}]},{"scriptId":"424","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/debug/src/common.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6289,"count":1}],"isBlockCoverage":true},{"functionName":"setup","ranges":[{"startOffset":108,"endOffset":6263,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":422,"endOffset":464,"count":9}],"isBlockCoverage":true},{"functionName":"selectColor","ranges":[{"startOffset":1012,"endOffset":1290,"count":5},{"startOffset":1108,"endOffset":1213,"count":124}],"isBlockCoverage":true},{"functionName":"createDebug","ranges":[{"startOffset":1460,"endOffset":3626,"count":5}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":1585,"endOffset":2796,"count":109},{"startOffset":1668,"endOffset":1795,"count":0},{"startOffset":1963,"endOffset":2763,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2147,"endOffset":2619,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3149,"endOffset":3415,"count":109},{"startOffset":3190,"endOffset":3225,"count":0},{"startOffset":3278,"endOffset":3384,"count":0}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":3425,"endOffset":3460,"count":0}],"isBlockCoverage":false},{"functionName":"extend","ranges":[{"startOffset":3629,"endOffset":3832,"count":0}],"isBlockCoverage":false},{"functionName":"enable","ranges":[{"startOffset":3993,"endOffset":4609,"count":1},{"startOffset":4205,"endOffset":4217,"count":0},{"startOffset":4366,"endOffset":4602,"count":0}],"isBlockCoverage":true},{"functionName":"disable","ranges":[{"startOffset":4695,"endOffset":4920,"count":0}],"isBlockCoverage":false},{"functionName":"enabled","ranges":[{"startOffset":5063,"endOffset":5450,"count":0}],"isBlockCoverage":false},{"functionName":"toNamespace","ranges":[{"startOffset":5568,"endOffset":5704,"count":0}],"isBlockCoverage":false},{"functionName":"coerce","ranges":[{"startOffset":5793,"endOffset":5902,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":6021,"endOffset":6197,"count":0}],"isBlockCoverage":false}]},{"scriptId":"425","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/ms/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3023,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":422,"endOffset":791,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":915,"endOffset":1998,"count":0}],"isBlockCoverage":false},{"functionName":"fmtShort","ranges":[{"startOffset":2096,"endOffset":2413,"count":0}],"isBlockCoverage":false},{"functionName":"fmtLong","ranges":[{"startOffset":2510,"endOffset":2846,"count":0}],"isBlockCoverage":false},{"functionName":"plural","ranges":[{"startOffset":2882,"endOffset":3022,"count":0}],"isBlockCoverage":false}]},{"scriptId":"426","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/plugins.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7876,"count":1}],"isBlockCoverage":true},{"functionName":"_debug","ranges":[{"startOffset":225,"endOffset":343,"count":1}],"isBlockCoverage":true},{"functionName":"_debug","ranges":[{"startOffset":290,"endOffset":324,"count":0}],"isBlockCoverage":false},{"functionName":"_path","ranges":[{"startOffset":345,"endOffset":460,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":407,"endOffset":441,"count":2}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":462,"endOffset":586,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":533,"endOffset":567,"count":0}],"isBlockCoverage":false},{"functionName":"_url","ranges":[{"startOffset":687,"endOffset":799,"count":0}],"isBlockCoverage":false},{"functionName":"_module","ranges":[{"startOffset":861,"endOffset":982,"count":0}],"isBlockCoverage":false},{"functionName":"asyncGeneratorStep","ranges":[{"startOffset":984,"endOffset":1249,"count":0}],"isBlockCoverage":false},{"functionName":"_asyncToGenerator","ranges":[{"startOffset":1251,"endOffset":1640,"count":0}],"isBlockCoverage":false},{"functionName":"resolvePlugin","ranges":[{"startOffset":2240,"endOffset":2348,"count":2}],"isBlockCoverage":true},{"functionName":"resolvePreset","ranges":[{"startOffset":2350,"endOffset":2458,"count":1}],"isBlockCoverage":true},{"functionName":"loadPlugin","ranges":[{"startOffset":2460,"endOffset":2706,"count":2}],"isBlockCoverage":true},{"functionName":"loadPreset","ranges":[{"startOffset":2708,"endOffset":2954,"count":1}],"isBlockCoverage":true},{"functionName":"standardizeName","ranges":[{"startOffset":2956,"endOffset":3410,"count":3},{"startOffset":3027,"endOffset":3039,"count":0},{"startOffset":3109,"endOffset":3133,"count":1},{"startOffset":3134,"endOffset":3158,"count":2},{"startOffset":3195,"endOffset":3216,"count":1},{"startOffset":3217,"endOffset":3238,"count":2},{"startOffset":3271,"endOffset":3292,"count":1},{"startOffset":3293,"endOffset":3314,"count":2}],"isBlockCoverage":true},{"functionName":"resolveAlternativesHelper","ranges":[{"startOffset":3412,"endOffset":4168,"count":3},{"startOffset":3606,"endOffset":3716,"count":0},{"startOffset":3718,"endOffset":3987,"count":0},{"startOffset":3988,"endOffset":3998,"count":0},{"startOffset":4050,"endOffset":4167,"count":0}],"isBlockCoverage":true},{"functionName":"tryRequireResolve","ranges":[{"startOffset":4170,"endOffset":4823,"count":3},{"startOffset":4427,"endOffset":4698,"count":0},{"startOffset":4751,"endOffset":4821,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4282,"endOffset":4377,"count":3},{"startOffset":4343,"endOffset":4376,"count":0}],"isBlockCoverage":true},{"functionName":"value.paths","ranges":[{"startOffset":4429,"endOffset":4698,"count":0}],"isBlockCoverage":false},{"functionName":"tryImportMetaResolve","ranges":[{"startOffset":4825,"endOffset":4922,"count":0}],"isBlockCoverage":false},{"functionName":"_tryImportMetaResolve","ranges":[{"startOffset":4924,"endOffset":5299,"count":0}],"isBlockCoverage":false},{"functionName":"resolveStandardizedNameForRequire","ranges":[{"startOffset":5301,"endOffset":5572,"count":3}],"isBlockCoverage":true},{"functionName":"resolveStandardizedNameForImport","ranges":[{"startOffset":5574,"endOffset":5701,"count":0}],"isBlockCoverage":false},{"functionName":"_resolveStandardizedNameForImport","ranges":[{"startOffset":5703,"endOffset":6257,"count":0}],"isBlockCoverage":false},{"functionName":"sync","ranges":[{"startOffset":6306,"endOffset":6420,"count":3}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":6425,"endOffset":7011,"count":0}],"isBlockCoverage":false},{"functionName":"requireModule","ranges":[{"startOffset":7058,"endOffset":7876,"count":3},{"startOffset":7170,"endOffset":7461,"count":0},{"startOffset":7707,"endOffset":7813,"count":0}],"isBlockCoverage":true}]},{"scriptId":"427","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/files/import-meta-resolve.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1612,"count":1},{"startOffset":1023,"endOffset":1041,"count":0},{"startOffset":1145,"endOffset":1298,"count":0}],"isBlockCoverage":true},{"functionName":"_module","ranges":[{"startOffset":108,"endOffset":229,"count":0}],"isBlockCoverage":false},{"functionName":"asyncGeneratorStep","ranges":[{"startOffset":302,"endOffset":567,"count":0}],"isBlockCoverage":false},{"functionName":"_asyncToGenerator","ranges":[{"startOffset":569,"endOffset":958,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1219,"endOffset":1263,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1265,"endOffset":1297,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":1347,"endOffset":1418,"count":0}],"isBlockCoverage":false},{"functionName":"_resolve","ranges":[{"startOffset":1420,"endOffset":1612,"count":0}],"isBlockCoverage":false}]},{"scriptId":"428","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/vendor/import-meta-resolve.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":94623,"count":1},{"startOffset":2681,"endOffset":2700,"count":0},{"startOffset":2965,"endOffset":3010,"count":0},{"startOffset":3011,"endOffset":3058,"count":0}],"isBlockCoverage":true},{"functionName":"_url","ranges":[{"startOffset":147,"endOffset":259,"count":0}],"isBlockCoverage":false},{"functionName":"_fs","ranges":[{"startOffset":261,"endOffset":401,"count":0}],"isBlockCoverage":false},{"functionName":"_path","ranges":[{"startOffset":403,"endOffset":518,"count":0}],"isBlockCoverage":false},{"functionName":"_assert","ranges":[{"startOffset":520,"endOffset":641,"count":0}],"isBlockCoverage":false},{"functionName":"_util","ranges":[{"startOffset":643,"endOffset":758,"count":0}],"isBlockCoverage":false},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":760,"endOffset":1071,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":1073,"endOffset":1877,"count":0}],"isBlockCoverage":false},{"functionName":"asyncGeneratorStep","ranges":[{"startOffset":1879,"endOffset":2144,"count":0}],"isBlockCoverage":false},{"functionName":"_asyncToGenerator","ranges":[{"startOffset":2146,"endOffset":2535,"count":0}],"isBlockCoverage":false},{"functionName":"debug$1","ranges":[{"startOffset":3013,"endOffset":3058,"count":0}],"isBlockCoverage":false},{"functionName":"debug$1","ranges":[{"startOffset":3061,"endOffset":3069,"count":73}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3096,"endOffset":7239,"count":1}],"isBlockCoverage":true},{"functionName":"createToken","ranges":[{"startOffset":3366,"endOffset":3554,"count":40},{"startOffset":3531,"endOffset":3536,"count":4},{"startOffset":3537,"endOffset":3548,"count":36}],"isBlockCoverage":true},{"functionName":"parseOptions$2","ranges":[{"startOffset":7339,"endOffset":7515,"count":22},{"startOffset":7364,"endOffset":7515,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7428,"endOffset":7443,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7452,"endOffset":7510,"count":0}],"isBlockCoverage":false},{"functionName":"compareIdentifiers$1","ranges":[{"startOffset":7613,"endOffset":7822,"count":11},{"startOffset":7758,"endOffset":7761,"count":0},{"startOffset":7778,"endOffset":7782,"count":0},{"startOffset":7799,"endOffset":7802,"count":0},{"startOffset":7811,"endOffset":7815,"count":0}],"isBlockCoverage":true},{"functionName":"rcompareIdentifiers","ranges":[{"startOffset":7853,"endOffset":7889,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer$c","ranges":[{"startOffset":8226,"endOffset":9918,"count":22},{"startOffset":8335,"endOffset":8532,"count":0},{"startOffset":8571,"endOffset":8636,"count":0},{"startOffset":8677,"endOffset":8764,"count":0},{"startOffset":8974,"endOffset":8991,"count":0},{"startOffset":9024,"endOffset":9089,"count":0},{"startOffset":9245,"endOffset":9304,"count":0},{"startOffset":9363,"endOffset":9422,"count":0},{"startOffset":9481,"endOffset":9540,"count":0},{"startOffset":9592,"endOffset":9848,"count":0},{"startOffset":9872,"endOffset":9889,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9644,"endOffset":9840,"count":0}],"isBlockCoverage":false},{"functionName":"format","ranges":[{"startOffset":9922,"endOffset":10122,"count":22},{"startOffset":10030,"endOffset":10092,"count":0}],"isBlockCoverage":true},{"functionName":"toString","ranges":[{"startOffset":10126,"endOffset":10167,"count":0}],"isBlockCoverage":false},{"functionName":"compare","ranges":[{"startOffset":10171,"endOffset":10571,"count":11},{"startOffset":10291,"endOffset":10439,"count":0},{"startOffset":10481,"endOffset":10504,"count":0},{"startOffset":10541,"endOffset":10566,"count":0}],"isBlockCoverage":true},{"functionName":"compareMain","ranges":[{"startOffset":10575,"endOffset":10845,"count":11},{"startOffset":10634,"endOffset":10690,"count":0},{"startOffset":10747,"endOffset":10793,"count":0},{"startOffset":10794,"endOffset":10840,"count":0}],"isBlockCoverage":true},{"functionName":"comparePre","ranges":[{"startOffset":10849,"endOffset":11672,"count":0}],"isBlockCoverage":false},{"functionName":"compareBuild","ranges":[{"startOffset":11676,"endOffset":12234,"count":0}],"isBlockCoverage":false},{"functionName":"inc","ranges":[{"startOffset":12238,"endOffset":14380,"count":0}],"isBlockCoverage":false},{"functionName":"parse$5","ranges":[{"startOffset":14574,"endOffset":15015,"count":0}],"isBlockCoverage":false},{"functionName":"valid$1","ranges":[{"startOffset":15083,"endOffset":15178,"count":0}],"isBlockCoverage":false},{"functionName":"clean","ranges":[{"startOffset":15244,"endOffset":15368,"count":0}],"isBlockCoverage":false},{"functionName":"inc","ranges":[{"startOffset":15432,"endOffset":15693,"count":0}],"isBlockCoverage":false},{"functionName":"compare$a","ranges":[{"startOffset":15759,"endOffset":15830,"count":11}],"isBlockCoverage":true},{"functionName":"eq$2","ranges":[{"startOffset":15903,"endOffset":15948,"count":0}],"isBlockCoverage":false},{"functionName":"diff","ranges":[{"startOffset":16026,"endOffset":16559,"count":0}],"isBlockCoverage":false},{"functionName":"major","ranges":[{"startOffset":16623,"endOffset":16665,"count":0}],"isBlockCoverage":false},{"functionName":"minor","ranges":[{"startOffset":16731,"endOffset":16773,"count":0}],"isBlockCoverage":false},{"functionName":"patch","ranges":[{"startOffset":16839,"endOffset":16881,"count":0}],"isBlockCoverage":false},{"functionName":"prerelease","ranges":[{"startOffset":16950,"endOffset":17091,"count":0}],"isBlockCoverage":false},{"functionName":"rcompare","ranges":[{"startOffset":17172,"endOffset":17211,"count":0}],"isBlockCoverage":false},{"functionName":"compareLoose","ranges":[{"startOffset":17292,"endOffset":17323,"count":0}],"isBlockCoverage":false},{"functionName":"compareBuild$2","ranges":[{"startOffset":17412,"endOffset":17590,"count":0}],"isBlockCoverage":false},{"functionName":"sort","ranges":[{"startOffset":17683,"endOffset":17748,"count":0}],"isBlockCoverage":false},{"functionName":"rsort","ranges":[{"startOffset":17822,"endOffset":17885,"count":0}],"isBlockCoverage":false},{"functionName":"gt$3","ranges":[{"startOffset":17952,"endOffset":17995,"count":0}],"isBlockCoverage":false},{"functionName":"lt$2","ranges":[{"startOffset":18058,"endOffset":18101,"count":1}],"isBlockCoverage":true},{"functionName":"neq$1","ranges":[{"startOffset":18165,"endOffset":18210,"count":0}],"isBlockCoverage":false},{"functionName":"gte$2","ranges":[{"startOffset":18276,"endOffset":18320,"count":10}],"isBlockCoverage":true},{"functionName":"lte$2","ranges":[{"startOffset":18386,"endOffset":18430,"count":0}],"isBlockCoverage":false},{"functionName":"cmp","ranges":[{"startOffset":18581,"endOffset":19274,"count":0}],"isBlockCoverage":false},{"functionName":"coerce","ranges":[{"startOffset":19396,"endOffset":20226,"count":0}],"isBlockCoverage":false},{"functionName":"requireIterator","ranges":[{"startOffset":20292,"endOffset":20619,"count":1},{"startOffset":20348,"endOffset":20364,"count":0}],"isBlockCoverage":true},{"functionName":"iterator","ranges":[{"startOffset":20406,"endOffset":20596,"count":1}],"isBlockCoverage":true},{"functionName":"Yallist.<computed>","ranges":[{"startOffset":20468,"endOffset":20591,"count":0}],"isBlockCoverage":false},{"functionName":"requireYallist","ranges":[{"startOffset":20659,"endOffset":29953,"count":1},{"startOffset":20713,"endOffset":20728,"count":0},{"startOffset":29919,"endOffset":29932,"count":0}],"isBlockCoverage":true},{"functionName":"Yallist","ranges":[{"startOffset":20830,"endOffset":21307,"count":1},{"startOffset":20913,"endOffset":20948,"count":0},{"startOffset":21029,"endOffset":21066,"count":0},{"startOffset":21068,"endOffset":21147,"count":0},{"startOffset":21179,"endOffset":21285,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21089,"endOffset":21139,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.removeNode","ranges":[{"startOffset":21342,"endOffset":21851,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.unshiftNode","ranges":[{"startOffset":21888,"endOffset":22235,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.pushNode","ranges":[{"startOffset":22269,"endOffset":22616,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.push","ranges":[{"startOffset":22646,"endOffset":22782,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.unshift","ranges":[{"startOffset":22815,"endOffset":22954,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.pop","ranges":[{"startOffset":22983,"endOffset":23246,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.shift","ranges":[{"startOffset":23277,"endOffset":23540,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.forEach","ranges":[{"startOffset":23573,"endOffset":23770,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.forEachReverse","ranges":[{"startOffset":23810,"endOffset":24021,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.get","ranges":[{"startOffset":24050,"endOffset":24247,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.getReverse","ranges":[{"startOffset":24283,"endOffset":24480,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.map","ranges":[{"startOffset":24509,"endOffset":24748,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.mapReverse","ranges":[{"startOffset":24784,"endOffset":25023,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.reduce","ranges":[{"startOffset":25055,"endOffset":25492,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.reduceReverse","ranges":[{"startOffset":25531,"endOffset":25982,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.toArray","ranges":[{"startOffset":26015,"endOffset":26215,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.toArrayReverse","ranges":[{"startOffset":26255,"endOffset":26455,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.slice","ranges":[{"startOffset":26486,"endOffset":27086,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.sliceReverse","ranges":[{"startOffset":27124,"endOffset":27734,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.splice","ranges":[{"startOffset":27766,"endOffset":28471,"count":0}],"isBlockCoverage":false},{"functionName":"Yallist.reverse","ranges":[{"startOffset":28504,"endOffset":28794,"count":0}],"isBlockCoverage":false},{"functionName":"insert","ranges":[{"startOffset":28799,"endOffset":29134,"count":0}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":29138,"endOffset":29302,"count":0}],"isBlockCoverage":false},{"functionName":"unshift","ranges":[{"startOffset":29306,"endOffset":29473,"count":0}],"isBlockCoverage":false},{"functionName":"Node","ranges":[{"startOffset":29477,"endOffset":29873,"count":0}],"isBlockCoverage":false},{"functionName":"requireLruCache","ranges":[{"startOffset":29995,"endOffset":37558,"count":1},{"startOffset":30051,"endOffset":30067,"count":0}],"isBlockCoverage":true},{"functionName":"naiveLength","ranges":[{"startOffset":30570,"endOffset":30577,"count":0}],"isBlockCoverage":false},{"functionName":"LRUCache","ranges":[{"startOffset":30603,"endOffset":31445,"count":1},{"startOffset":30665,"endOffset":30706,"count":0},{"startOffset":30727,"endOffset":30740,"count":0},{"startOffset":30820,"endOffset":30877,"count":0},{"startOffset":30908,"endOffset":30919,"count":0},{"startOffset":31026,"endOffset":31039,"count":0},{"startOffset":31121,"endOffset":31158,"count":0},{"startOffset":31160,"endOffset":31207,"count":0}],"isBlockCoverage":true},{"functionName":"set max","ranges":[{"startOffset":31451,"endOffset":31624,"count":0}],"isBlockCoverage":false},{"functionName":"get max","ranges":[{"startOffset":31630,"endOffset":31671,"count":0}],"isBlockCoverage":false},{"functionName":"set allowStale","ranges":[{"startOffset":31677,"endOffset":31751,"count":0}],"isBlockCoverage":false},{"functionName":"get allowStale","ranges":[{"startOffset":31757,"endOffset":31813,"count":0}],"isBlockCoverage":false},{"functionName":"set maxAge","ranges":[{"startOffset":31819,"endOffset":31980,"count":0}],"isBlockCoverage":false},{"functionName":"get maxAge","ranges":[{"startOffset":31986,"endOffset":32034,"count":0}],"isBlockCoverage":false},{"functionName":"set lengthCalculator","ranges":[{"startOffset":32040,"endOffset":32420,"count":0}],"isBlockCoverage":false},{"functionName":"get lengthCalculator","ranges":[{"startOffset":32426,"endOffset":32494,"count":0}],"isBlockCoverage":false},{"functionName":"get length","ranges":[{"startOffset":32500,"endOffset":32547,"count":0}],"isBlockCoverage":false},{"functionName":"get itemCount","ranges":[{"startOffset":32553,"endOffset":32612,"count":0}],"isBlockCoverage":false},{"functionName":"rforEach","ranges":[{"startOffset":32618,"endOffset":32851,"count":0}],"isBlockCoverage":false},{"functionName":"forEach","ranges":[{"startOffset":32857,"endOffset":33089,"count":0}],"isBlockCoverage":false},{"functionName":"keys","ranges":[{"startOffset":33095,"endOffset":33164,"count":0}],"isBlockCoverage":false},{"functionName":"values","ranges":[{"startOffset":33170,"endOffset":33243,"count":0}],"isBlockCoverage":false},{"functionName":"reset","ranges":[{"startOffset":33249,"endOffset":33510,"count":1},{"startOffset":33283,"endOffset":33300,"count":0},{"startOffset":33301,"endOffset":33325,"count":0},{"startOffset":33327,"endOffset":33410,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":33360,"endOffset":33400,"count":0}],"isBlockCoverage":false},{"functionName":"dump","ranges":[{"startOffset":33516,"endOffset":33716,"count":0}],"isBlockCoverage":false},{"functionName":"dumpLru","ranges":[{"startOffset":33722,"endOffset":33768,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":33774,"endOffset":34933,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":34939,"endOffset":35082,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":35088,"endOffset":35139,"count":0}],"isBlockCoverage":false},{"functionName":"peek","ranges":[{"startOffset":35145,"endOffset":35198,"count":0}],"isBlockCoverage":false},{"functionName":"pop","ranges":[{"startOffset":35204,"endOffset":35335,"count":0}],"isBlockCoverage":false},{"functionName":"del","ranges":[{"startOffset":35341,"endOffset":35396,"count":0}],"isBlockCoverage":false},{"functionName":"load","ranges":[{"startOffset":35402,"endOffset":35790,"count":0}],"isBlockCoverage":false},{"functionName":"prune","ranges":[{"startOffset":35796,"endOffset":35877,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":35898,"endOffset":36316,"count":0}],"isBlockCoverage":false},{"functionName":"isStale","ranges":[{"startOffset":36337,"endOffset":36540,"count":0}],"isBlockCoverage":false},{"functionName":"trim","ranges":[{"startOffset":36558,"endOffset":36798,"count":0}],"isBlockCoverage":false},{"functionName":"del","ranges":[{"startOffset":36815,"endOffset":37056,"count":0}],"isBlockCoverage":false},{"functionName":"Entry","ranges":[{"startOffset":37079,"endOffset":37262,"count":0}],"isBlockCoverage":false},{"functionName":"forEachStep","ranges":[{"startOffset":37291,"endOffset":37512,"count":0}],"isBlockCoverage":false},{"functionName":"requireRange","ranges":[{"startOffset":37594,"endOffset":48708,"count":11},{"startOffset":37644,"endOffset":37657,"count":10},{"startOffset":37657,"endOffset":48707,"count":1}],"isBlockCoverage":true},{"functionName":"Range","ranges":[{"startOffset":37703,"endOffset":38964,"count":0}],"isBlockCoverage":false},{"functionName":"format","ranges":[{"startOffset":38970,"endOffset":39121,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":39127,"endOffset":39170,"count":0}],"isBlockCoverage":false},{"functionName":"parseRange","ranges":[{"startOffset":39176,"endOffset":40663,"count":0}],"isBlockCoverage":false},{"functionName":"intersects","ranges":[{"startOffset":40669,"endOffset":41238,"count":0}],"isBlockCoverage":false},{"functionName":"test","ranges":[{"startOffset":41244,"endOffset":41665,"count":0}],"isBlockCoverage":false},{"functionName":"isNullSet","ranges":[{"startOffset":42037,"endOffset":42064,"count":0}],"isBlockCoverage":false},{"functionName":"isAny","ranges":[{"startOffset":42083,"endOffset":42102,"count":0}],"isBlockCoverage":false},{"functionName":"isSatisfiable","ranges":[{"startOffset":42129,"endOffset":42561,"count":0}],"isBlockCoverage":false},{"functionName":"parseComparator","ranges":[{"startOffset":42590,"endOffset":42935,"count":0}],"isBlockCoverage":false},{"functionName":"isX","ranges":[{"startOffset":42952,"endOffset":43003,"count":0}],"isBlockCoverage":false},{"functionName":"replaceTildes","ranges":[{"startOffset":43030,"endOffset":43142,"count":0}],"isBlockCoverage":false},{"functionName":"replaceTilde","ranges":[{"startOffset":43168,"endOffset":43810,"count":0}],"isBlockCoverage":false},{"functionName":"replaceCarets","ranges":[{"startOffset":43837,"endOffset":43949,"count":0}],"isBlockCoverage":false},{"functionName":"replaceCaret","ranges":[{"startOffset":43975,"endOffset":45323,"count":0}],"isBlockCoverage":false},{"functionName":"replaceXRanges","ranges":[{"startOffset":45351,"endOffset":45523,"count":0}],"isBlockCoverage":false},{"functionName":"replaceXRange","ranges":[{"startOffset":45550,"endOffset":46907,"count":0}],"isBlockCoverage":false},{"functionName":"replaceStars","ranges":[{"startOffset":46933,"endOffset":47047,"count":0}],"isBlockCoverage":false},{"functionName":"replaceGTE0","ranges":[{"startOffset":47072,"endOffset":47225,"count":0}],"isBlockCoverage":false},{"functionName":"hyphenReplace","ranges":[{"startOffset":47252,"endOffset":47986,"count":0}],"isBlockCoverage":false},{"functionName":"testSet","ranges":[{"startOffset":48007,"endOffset":48688,"count":0}],"isBlockCoverage":false},{"functionName":"requireComparator","ranges":[{"startOffset":48754,"endOffset":52421,"count":4},{"startOffset":48814,"endOffset":48832,"count":3},{"startOffset":48832,"endOffset":52420,"count":1}],"isBlockCoverage":true},{"functionName":"get ANY","ranges":[{"startOffset":48931,"endOffset":48966,"count":2}],"isBlockCoverage":true},{"functionName":"Comparator","ranges":[{"startOffset":48972,"endOffset":49520,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":49526,"endOffset":49997,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":50003,"endOffset":50046,"count":0}],"isBlockCoverage":false},{"functionName":"test","ranges":[{"startOffset":50052,"endOffset":50462,"count":0}],"isBlockCoverage":false},{"functionName":"intersects","ranges":[{"startOffset":50468,"endOffset":52177,"count":0}],"isBlockCoverage":false},{"functionName":"satisfies$3","ranges":[{"startOffset":52476,"endOffset":52627,"count":0}],"isBlockCoverage":false},{"functionName":"toComparators","ranges":[{"startOffset":52716,"endOffset":52831,"count":0}],"isBlockCoverage":false},{"functionName":"maxSatisfying","ranges":[{"startOffset":52953,"endOffset":53333,"count":0}],"isBlockCoverage":false},{"functionName":"minSatisfying","ranges":[{"startOffset":53455,"endOffset":53834,"count":0}],"isBlockCoverage":false},{"functionName":"minVersion","ranges":[{"startOffset":53972,"endOffset":55150,"count":0}],"isBlockCoverage":false},{"functionName":"validRange","ranges":[{"startOffset":55236,"endOffset":55358,"count":0}],"isBlockCoverage":false},{"functionName":"outside$2","ranges":[{"startOffset":55647,"endOffset":57047,"count":0}],"isBlockCoverage":false},{"functionName":"gtr","ranges":[{"startOffset":57119,"endOffset":57187,"count":0}],"isBlockCoverage":false},{"functionName":"ltr","ranges":[{"startOffset":57247,"endOffset":57313,"count":0}],"isBlockCoverage":false},{"functionName":"intersects","ranges":[{"startOffset":57385,"endOffset":57503,"count":0}],"isBlockCoverage":false},{"functionName":"simplify","ranges":[{"startOffset":57615,"endOffset":58539,"count":0}],"isBlockCoverage":false},{"functionName":"subset","ranges":[{"startOffset":58716,"endOffset":59163,"count":0}],"isBlockCoverage":false},{"functionName":"simpleSubset","ranges":[{"startOffset":59187,"endOffset":62316,"count":0}],"isBlockCoverage":false},{"functionName":"higherGT","ranges":[{"startOffset":62336,"endOffset":62521,"count":0}],"isBlockCoverage":false},{"functionName":"lowerLT","ranges":[{"startOffset":62540,"endOffset":62725,"count":0}],"isBlockCoverage":false},{"functionName":"builtins","ranges":[{"startOffset":63878,"endOffset":65059,"count":1},{"startOffset":64316,"endOffset":64345,"count":0},{"startOffset":64999,"endOffset":65034,"count":0}],"isBlockCoverage":true},{"functionName":"read","ranges":[{"startOffset":65090,"endOffset":65159,"count":0}],"isBlockCoverage":false},{"functionName":"find","ranges":[{"startOffset":65161,"endOffset":65565,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":65847,"endOffset":65978,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":66069,"endOffset":66213,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":66300,"endOffset":67002,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":67077,"endOffset":67178,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":67273,"endOffset":67461,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":67558,"endOffset":67859,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":68233,"endOffset":68538,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":68637,"endOffset":68930,"count":0}],"isBlockCoverage":false},{"functionName":"createError","ranges":[{"startOffset":68941,"endOffset":69052,"count":10}],"isBlockCoverage":true},{"functionName":"makeNodeErrorWithCode","ranges":[{"startOffset":69054,"endOffset":69859,"count":10}],"isBlockCoverage":true},{"functionName":"NodeError","ranges":[{"startOffset":69121,"endOffset":69857,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":69899,"endOffset":70237,"count":0}],"isBlockCoverage":false},{"functionName":"isErrorStackTraceLimitWritable","ranges":[{"startOffset":70241,"endOffset":70513,"count":0}],"isBlockCoverage":false},{"functionName":"hideStackFrames","ranges":[{"startOffset":70515,"endOffset":70669,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":70719,"endOffset":71081,"count":0}],"isBlockCoverage":false},{"functionName":"getMessage","ranges":[{"startOffset":71085,"endOffset":71782,"count":0}],"isBlockCoverage":false},{"functionName":"defaultGetFormat","ranges":[{"startOffset":71944,"endOffset":72815,"count":0}],"isBlockCoverage":false},{"functionName":"emitFolderMapDeprecation","ranges":[{"startOffset":73508,"endOffset":74105,"count":0}],"isBlockCoverage":false},{"functionName":"emitLegacyIndexDeprecation","ranges":[{"startOffset":74107,"endOffset":75107,"count":0}],"isBlockCoverage":false},{"functionName":"getConditionsSet","ranges":[{"startOffset":75109,"endOffset":75422,"count":0}],"isBlockCoverage":false},{"functionName":"tryStatSync","ranges":[{"startOffset":75424,"endOffset":75558,"count":0}],"isBlockCoverage":false},{"functionName":"getPackageConfig","ranges":[{"startOffset":75560,"endOffset":76793,"count":0}],"isBlockCoverage":false},{"functionName":"getPackageScopeConfig","ranges":[{"startOffset":76795,"endOffset":77734,"count":0}],"isBlockCoverage":false},{"functionName":"fileExists","ranges":[{"startOffset":77736,"endOffset":77827,"count":0}],"isBlockCoverage":false},{"functionName":"legacyMainResolve","ranges":[{"startOffset":77829,"endOffset":79079,"count":0}],"isBlockCoverage":false},{"functionName":"finalizeResolution","ranges":[{"startOffset":79081,"endOffset":79781,"count":0}],"isBlockCoverage":false},{"functionName":"throwImportNotDefined","ranges":[{"startOffset":79783,"endOffset":80022,"count":0}],"isBlockCoverage":false},{"functionName":"throwExportsNotFound","ranges":[{"startOffset":80024,"endOffset":80247,"count":0}],"isBlockCoverage":false},{"functionName":"throwInvalidSubpath","ranges":[{"startOffset":80249,"endOffset":80578,"count":0}],"isBlockCoverage":false},{"functionName":"throwInvalidPackageTarget","ranges":[{"startOffset":80580,"endOffset":80948,"count":0}],"isBlockCoverage":false},{"functionName":"resolvePackageTargetString","ranges":[{"startOffset":80950,"endOffset":82430,"count":0}],"isBlockCoverage":false},{"functionName":"isArrayIndex","ranges":[{"startOffset":82432,"endOffset":82590,"count":0}],"isBlockCoverage":false},{"functionName":"resolvePackageTarget","ranges":[{"startOffset":82592,"endOffset":84666,"count":0}],"isBlockCoverage":false},{"functionName":"isConditionalExportsMainSugar","ranges":[{"startOffset":84668,"endOffset":85588,"count":0}],"isBlockCoverage":false},{"functionName":"packageExportsResolve","ranges":[{"startOffset":85590,"endOffset":87322,"count":0}],"isBlockCoverage":false},{"functionName":"packageImportsResolve","ranges":[{"startOffset":87324,"endOffset":89259,"count":0}],"isBlockCoverage":false},{"functionName":"getPackageType","ranges":[{"startOffset":89261,"endOffset":89374,"count":0}],"isBlockCoverage":false},{"functionName":"parsePackageName","ranges":[{"startOffset":89376,"endOffset":90334,"count":0}],"isBlockCoverage":false},{"functionName":"packageResolve","ranges":[{"startOffset":90336,"endOffset":92015,"count":0}],"isBlockCoverage":false},{"functionName":"isRelativeSpecifier","ranges":[{"startOffset":92017,"endOffset":92290,"count":0}],"isBlockCoverage":false},{"functionName":"shouldBeTreatedAsRelativeOrAbsolutePath","ranges":[{"startOffset":92292,"endOffset":92475,"count":0}],"isBlockCoverage":false},{"functionName":"moduleResolve","ranges":[{"startOffset":92477,"endOffset":92989,"count":0}],"isBlockCoverage":false},{"functionName":"defaultResolve","ranges":[{"startOffset":92991,"endOffset":94084,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":94086,"endOffset":94157,"count":0}],"isBlockCoverage":false},{"functionName":"_resolve","ranges":[{"startOffset":94159,"endOffset":94623,"count":0}],"isBlockCoverage":false}]},{"scriptId":"429","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/helpers/environment.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":227,"count":1}],"isBlockCoverage":true},{"functionName":"getEnv","ranges":[{"startOffset":106,"endOffset":227,"count":109},{"startOffset":209,"endOffset":224,"count":0}],"isBlockCoverage":true}]},{"scriptId":"430","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2470,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":267,"endOffset":310,"count":0}],"isBlockCoverage":false},{"functionName":"_gensync","ranges":[{"startOffset":492,"endOffset":616,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":563,"endOffset":597,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":757,"endOffset":955,"count":106},{"startOffset":893,"endOffset":901,"count":104},{"startOffset":902,"endOffset":918,"count":2},{"startOffset":928,"endOffset":945,"count":2},{"startOffset":946,"endOffset":952,"count":104}],"isBlockCoverage":true},{"functionName":"maybeErrback","ranges":[{"startOffset":1048,"endOffset":1263,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1058,"endOffset":1263,"count":106},{"startOffset":1140,"endOffset":1188,"count":0},{"startOffset":1208,"endOffset":1240,"count":0}],"isBlockCoverage":true},{"functionName":"createConfigItem","ranges":[{"startOffset":2122,"endOffset":2470,"count":0}],"isBlockCoverage":false}]},{"scriptId":"431","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/full.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10858,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":107,"endOffset":231,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":178,"endOffset":212,"count":0}],"isBlockCoverage":false},{"functionName":"_traverse","ranges":[{"startOffset":516,"endOffset":650,"count":1}],"isBlockCoverage":true},{"functionName":"_traverse","ranges":[{"startOffset":597,"endOffset":631,"count":6}],"isBlockCoverage":true},{"functionName":"loadFullConfig","ranges":[{"startOffset":947,"endOffset":4804,"count":106},{"startOffset":1085,"endOffset":1107,"count":104},{"startOffset":1107,"endOffset":1211,"count":2},{"startOffset":1211,"endOffset":1233,"count":0},{"startOffset":1233,"endOffset":1341,"count":2},{"startOffset":1343,"endOffset":1418,"count":0},{"startOffset":1418,"endOffset":3441,"count":2},{"startOffset":3441,"endOffset":3453,"count":0},{"startOffset":3453,"endOffset":3669,"count":2},{"startOffset":3670,"endOffset":3674,"count":0},{"startOffset":4490,"endOffset":4803,"count":2}],"isBlockCoverage":true},{"functionName":"toDescriptor","ranges":[{"startOffset":1532,"endOffset":1706,"count":6},{"startOffset":1611,"endOffset":1684,"count":0}],"isBlockCoverage":true},{"functionName":"recursePresetDescriptors","ranges":[{"startOffset":1971,"endOffset":3375,"count":4},{"startOffset":2116,"endOffset":2846,"count":2},{"startOffset":2304,"endOffset":2495,"count":0},{"startOffset":2594,"endOffset":2699,"count":0},{"startOffset":2876,"endOffset":3371,"count":2},{"startOffset":3084,"endOffset":3096,"count":0},{"startOffset":3235,"endOffset":3247,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2936,"endOffset":2947,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2956,"endOffset":2988,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3279,"endOffset":3355,"count":2}],"isBlockCoverage":true},{"functionName":"loadPluginDescriptors","ranges":[{"startOffset":3712,"endOffset":4486,"count":2},{"startOffset":3964,"endOffset":4476,"count":30},{"startOffset":4157,"endOffset":4362,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4559,"endOffset":4588,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4594,"endOffset":4624,"count":0}],"isBlockCoverage":false},{"functionName":"enhanceError","ranges":[{"startOffset":4837,"endOffset":5129,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4883,"endOffset":5126,"count":4},{"startOffset":4960,"endOffset":5122,"count":0}],"isBlockCoverage":true},{"functionName":"makeDescriptorLoader","ranges":[{"startOffset":5160,"endOffset":7283,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5202,"endOffset":7282,"count":18},{"startOffset":5291,"endOffset":5328,"count":0},{"startOffset":5349,"endOffset":5354,"count":2},{"startOffset":5744,"endOffset":5874,"count":0},{"startOffset":5921,"endOffset":5990,"count":0},{"startOffset":6028,"endOffset":6388,"count":0},{"startOffset":6428,"endOffset":6482,"count":0},{"startOffset":6484,"endOffset":7136,"count":0}],"isBlockCoverage":true},{"functionName":"loadPluginDescriptor","ranges":[{"startOffset":7445,"endOffset":7807,"count":34},{"startOffset":7550,"endOffset":7708,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7863,"endOffset":9204,"count":17},{"startOffset":8084,"endOffset":8174,"count":5},{"startOffset":8199,"endOffset":9125,"count":2},{"startOffset":8788,"endOffset":8793,"count":0},{"startOffset":8810,"endOffset":8815,"count":0},{"startOffset":8870,"endOffset":9121,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8432,"endOffset":8516,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8471,"endOffset":8508,"count":4}],"isBlockCoverage":true},{"functionName":"validateIfOptionNeedsFilename","ranges":[{"startOffset":9246,"endOffset":9741,"count":0}],"isBlockCoverage":false},{"functionName":"validatePreset","ranges":[{"startOffset":9767,"endOffset":10080,"count":2},{"startOffset":9827,"endOffset":10078,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9989,"endOffset":10066,"count":0}],"isBlockCoverage":false},{"functionName":"loadPresetDescriptor","ranges":[{"startOffset":10083,"endOffset":10414,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10474,"endOffset":10657,"count":1}],"isBlockCoverage":true},{"functionName":"chain","ranges":[{"startOffset":10661,"endOffset":10858,"count":6},{"startOffset":10759,"endOffset":10857,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10769,"endOffset":10855,"count":0}],"isBlockCoverage":false}]},{"scriptId":"432","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/plugin.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":942,"count":1}],"isBlockCoverage":true},{"functionName":"Plugin","ranges":[{"startOffset":175,"endOffset":912,"count":17},{"startOffset":563,"endOffset":569,"count":0},{"startOffset":716,"endOffset":721,"count":12}],"isBlockCoverage":true}]},{"scriptId":"433","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/helpers/deep-array.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":452,"count":1}],"isBlockCoverage":true},{"functionName":"finalize","ranges":[{"startOffset":147,"endOffset":210,"count":20}],"isBlockCoverage":true},{"functionName":"flattenToSet","ranges":[{"startOffset":212,"endOffset":452,"count":0}],"isBlockCoverage":false}]},{"scriptId":"434","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/item.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1802,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":234,"endOffset":349,"count":0}],"isBlockCoverage":false},{"functionName":"createItemFromDescriptor","ranges":[{"startOffset":410,"endOffset":484,"count":6}],"isBlockCoverage":true},{"functionName":"createConfigItem","ranges":[{"startOffset":486,"endOffset":755,"count":0}],"isBlockCoverage":false},{"functionName":"getItemDescriptor","ranges":[{"startOffset":757,"endOffset":896,"count":22},{"startOffset":839,"endOffset":873,"count":6},{"startOffset":873,"endOffset":895,"count":16}],"isBlockCoverage":true},{"functionName":"ConfigItem","ranges":[{"startOffset":988,"endOffset":1761,"count":6},{"startOffset":1720,"endOffset":1731,"count":0}],"isBlockCoverage":true}]},{"scriptId":"435","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/config-descriptors.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6756,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":248,"endOffset":372,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":319,"endOffset":353,"count":3}],"isBlockCoverage":true},{"functionName":"isEqualDescriptor","ranges":[{"startOffset":531,"endOffset":846,"count":0}],"isBlockCoverage":false},{"functionName":"handlerOf","ranges":[{"startOffset":848,"endOffset":894,"count":4}],"isBlockCoverage":true},{"functionName":"optionsWithResolvedBrowserslistConfigFile","ranges":[{"startOffset":896,"endOffset":1181,"count":108},{"startOffset":1025,"endOffset":1160,"count":0}],"isBlockCoverage":true},{"functionName":"createCachedDescriptors","ranges":[{"startOffset":1183,"endOffset":1633,"count":106},{"startOffset":1418,"endOffset":1480,"count":0},{"startOffset":1525,"endOffset":1604,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1420,"endOffset":1480,"count":0}],"isBlockCoverage":false},{"functionName":"plugins","ranges":[{"startOffset":1483,"endOffset":1502,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1527,"endOffset":1604,"count":0}],"isBlockCoverage":false},{"functionName":"presets","ranges":[{"startOffset":1607,"endOffset":1626,"count":2}],"isBlockCoverage":true},{"functionName":"createUncachedDescriptors","ranges":[{"startOffset":1635,"endOffset":2177,"count":2}],"isBlockCoverage":true},{"functionName":"plugins","ranges":[{"startOffset":1817,"endOffset":1977,"count":4},{"startOffset":1850,"endOffset":1948,"count":2},{"startOffset":1917,"endOffset":1922,"count":0}],"isBlockCoverage":true},{"functionName":"presets","ranges":[{"startOffset":1984,"endOffset":2169,"count":4},{"startOffset":2017,"endOffset":2140,"count":2},{"startOffset":2084,"endOffset":2089,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2296,"endOffset":2660,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2780,"endOffset":3077,"count":0}],"isBlockCoverage":false},{"functionName":"loadCachedDescriptor","ranges":[{"startOffset":3109,"endOffset":3807,"count":0}],"isBlockCoverage":false},{"functionName":"createPresetDescriptors","ranges":[{"startOffset":3809,"endOffset":3967,"count":2}],"isBlockCoverage":true},{"functionName":"createPluginDescriptors","ranges":[{"startOffset":3969,"endOffset":4097,"count":2}],"isBlockCoverage":true},{"functionName":"createDescriptors","ranges":[{"startOffset":4099,"endOffset":4403,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4221,"endOffset":4341,"count":16}],"isBlockCoverage":true},{"functionName":"createDescriptor","ranges":[{"startOffset":4405,"endOffset":5995,"count":16},{"startOffset":4545,"endOffset":4567,"count":0},{"startOffset":4645,"endOffset":4769,"count":14},{"startOffset":4675,"endOffset":4720,"count":0},{"startOffset":4852,"endOffset":5233,"count":3},{"startOffset":4888,"endOffset":4984,"count":0},{"startOffset":5025,"endOffset":5044,"count":2},{"startOffset":5045,"endOffset":5064,"count":1},{"startOffset":5249,"endOffset":5319,"count":0},{"startOffset":5353,"endOffset":5372,"count":10},{"startOffset":5374,"endOffset":5531,"count":10},{"startOffset":5435,"endOffset":5527,"count":0},{"startOffset":5597,"endOffset":5697,"count":0},{"startOffset":5723,"endOffset":5751,"count":3},{"startOffset":5752,"endOffset":5760,"count":0},{"startOffset":5762,"endOffset":5877,"count":0},{"startOffset":5920,"endOffset":5928,"count":13}],"isBlockCoverage":true},{"functionName":"assertNoDuplicates","ranges":[{"startOffset":5997,"endOffset":6756,"count":4},{"startOffset":6088,"endOffset":6754,"count":16},{"startOffset":6132,"endOffset":6141,"count":0},{"startOffset":6304,"endOffset":6721,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6343,"endOffset":6370,"count":0}],"isBlockCoverage":false}]},{"scriptId":"436","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/resolve-targets.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1430,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":193,"endOffset":308,"count":0}],"isBlockCoverage":false},{"functionName":"_helperCompilationTargets","ranges":[{"startOffset":310,"endOffset":494,"count":1}],"isBlockCoverage":true},{"functionName":"_helperCompilationTargets","ranges":[{"startOffset":441,"endOffset":475,"count":1}],"isBlockCoverage":true},{"functionName":"resolveBrowserslistConfigFile","ranges":[{"startOffset":503,"endOffset":649,"count":0}],"isBlockCoverage":false},{"functionName":"resolveTargets","ranges":[{"startOffset":651,"endOffset":1430,"count":2},{"startOffset":787,"endOffset":839,"count":0},{"startOffset":855,"endOffset":875,"count":0},{"startOffset":877,"endOffset":962,"count":0},{"startOffset":1125,"endOffset":1171,"count":0}],"isBlockCoverage":true}]},{"scriptId":"437","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/config-chain.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":18037,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":208,"endOffset":323,"count":0}],"isBlockCoverage":false},{"functionName":"_debug","ranges":[{"startOffset":325,"endOffset":443,"count":1}],"isBlockCoverage":true},{"functionName":"_debug","ranges":[{"startOffset":390,"endOffset":424,"count":0}],"isBlockCoverage":false},{"functionName":"buildPresetChain","ranges":[{"startOffset":771,"endOffset":1090,"count":2},{"startOffset":889,"endOffset":901,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1036,"endOffset":1060,"count":2}],"isBlockCoverage":true},{"functionName":"root","ranges":[{"startOffset":1149,"endOffset":1188,"count":2}],"isBlockCoverage":true},{"functionName":"env","ranges":[{"startOffset":1197,"endOffset":1259,"count":2}],"isBlockCoverage":true},{"functionName":"overrides","ranges":[{"startOffset":1274,"endOffset":1338,"count":0}],"isBlockCoverage":false},{"functionName":"overridesEnv","ranges":[{"startOffset":1356,"endOffset":1441,"count":0}],"isBlockCoverage":false},{"functionName":"createLogger","ranges":[{"startOffset":1459,"endOffset":1473,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1465,"endOffset":1473,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1597,"endOffset":1695,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1763,"endOffset":1915,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1807,"endOffset":1914,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1989,"endOffset":2142,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2219,"endOffset":2430,"count":0}],"isBlockCoverage":false},{"functionName":"buildRootChain","ranges":[{"startOffset":2434,"endOffset":5910,"count":106},{"startOffset":2745,"endOffset":2757,"count":104},{"startOffset":2757,"endOffset":2885,"count":2},{"startOffset":2885,"endOffset":3001,"count":0},{"startOffset":3001,"endOffset":3353,"count":2},{"startOffset":3353,"endOffset":3877,"count":0},{"startOffset":3877,"endOffset":4018,"count":2},{"startOffset":4020,"endOffset":4059,"count":2},{"startOffset":4061,"endOffset":5154,"count":2},{"startOffset":4414,"endOffset":4473,"count":0},{"startOffset":4496,"endOffset":4565,"count":0},{"startOffset":4567,"endOffset":4602,"count":0},{"startOffset":4884,"endOffset":4923,"count":0},{"startOffset":5084,"endOffset":5144,"count":0},{"startOffset":5154,"endOffset":5182,"count":2},{"startOffset":5182,"endOffset":5386,"count":0},{"startOffset":5386,"endOffset":5535,"count":2},{"startOffset":5535,"endOffset":5539,"count":0},{"startOffset":5540,"endOffset":5573,"count":2},{"startOffset":5598,"endOffset":5602,"count":0},{"startOffset":5603,"endOffset":5636,"count":2},{"startOffset":5661,"endOffset":5665,"count":0},{"startOffset":5666,"endOffset":5711,"count":2},{"startOffset":5741,"endOffset":5752,"count":0},{"startOffset":5753,"endOffset":5766,"count":2},{"startOffset":5791,"endOffset":5803,"count":2},{"startOffset":5830,"endOffset":5842,"count":0},{"startOffset":5867,"endOffset":5879,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5324,"endOffset":5332,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5686,"endOffset":5710,"count":4}],"isBlockCoverage":true},{"functionName":"babelrcLoadEnabled","ranges":[{"startOffset":5912,"endOffset":6904,"count":2},{"startOffset":6038,"endOffset":6058,"count":0},{"startOffset":6197,"endOffset":6542,"count":0},{"startOffset":6544,"endOffset":6903,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6365,"endOffset":6465,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6642,"endOffset":6900,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6965,"endOffset":7092,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7155,"endOffset":7283,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7345,"endOffset":7473,"count":0}],"isBlockCoverage":false},{"functionName":"root","ranges":[{"startOffset":7532,"endOffset":7620,"count":106}],"isBlockCoverage":true},{"functionName":"env","ranges":[{"startOffset":7629,"endOffset":7736,"count":106}],"isBlockCoverage":true},{"functionName":"overrides","ranges":[{"startOffset":7751,"endOffset":7859,"count":0}],"isBlockCoverage":false},{"functionName":"overridesEnv","ranges":[{"startOffset":7877,"endOffset":8006,"count":0}],"isBlockCoverage":false},{"functionName":"createLogger","ranges":[{"startOffset":8024,"endOffset":8107,"count":2}],"isBlockCoverage":true},{"functionName":"root","ranges":[{"startOffset":8166,"endOffset":8199,"count":2}],"isBlockCoverage":true},{"functionName":"env","ranges":[{"startOffset":8208,"endOffset":8264,"count":2}],"isBlockCoverage":true},{"functionName":"overrides","ranges":[{"startOffset":8279,"endOffset":8337,"count":0}],"isBlockCoverage":false},{"functionName":"overridesEnv","ranges":[{"startOffset":8355,"endOffset":8434,"count":0}],"isBlockCoverage":false},{"functionName":"createLogger","ranges":[{"startOffset":8452,"endOffset":8534,"count":2}],"isBlockCoverage":true},{"functionName":"loadFileChain","ranges":[{"startOffset":8540,"endOffset":8755,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8817,"endOffset":8912,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8978,"endOffset":9127,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9020,"endOffset":9126,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9199,"endOffset":9349,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9424,"endOffset":9632,"count":0}],"isBlockCoverage":false},{"functionName":"buildFileLogger","ranges":[{"startOffset":9636,"endOffset":9845,"count":2},{"startOffset":9713,"endOffset":9739,"count":0}],"isBlockCoverage":true},{"functionName":"baseLogger.configure.filepath.filepath","ranges":[{"startOffset":9726,"endOffset":9734,"count":0}],"isBlockCoverage":false},{"functionName":"buildRootDescriptors","ranges":[{"startOffset":9847,"endOffset":9973,"count":108}],"isBlockCoverage":true},{"functionName":"buildProgrammaticLogger","ranges":[{"startOffset":9975,"endOffset":10293,"count":2},{"startOffset":10077,"endOffset":10103,"count":0},{"startOffset":10254,"endOffset":10262,"count":0}],"isBlockCoverage":true},{"functionName":"baseLogger.configure.callerName._context$caller","ranges":[{"startOffset":10090,"endOffset":10098,"count":0}],"isBlockCoverage":false},{"functionName":"buildEnvDescriptors","ranges":[{"startOffset":10295,"endOffset":10515,"count":108},{"startOffset":10408,"endOffset":10431,"count":0},{"startOffset":10447,"endOffset":10505,"count":0}],"isBlockCoverage":true},{"functionName":"buildOverrideDescriptors","ranges":[{"startOffset":10517,"endOffset":10808,"count":0}],"isBlockCoverage":false},{"functionName":"buildOverrideEnvDescriptors","ranges":[{"startOffset":10810,"endOffset":11207,"count":0}],"isBlockCoverage":false},{"functionName":"makeChainWalker","ranges":[{"startOffset":11209,"endOffset":13224,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11309,"endOffset":13221,"count":110},{"startOffset":11725,"endOffset":11773,"count":0},{"startOffset":11775,"endOffset":11918,"count":0},{"startOffset":12771,"endOffset":12797,"count":104},{"startOffset":12797,"endOffset":13198,"count":6},{"startOffset":13079,"endOffset":13109,"count":0},{"startOffset":13198,"endOffset":13220,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11969,"endOffset":12585,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":12625,"endOffset":12768,"count":110}],"isBlockCoverage":true},{"functionName":"mergeExtendsChain","ranges":[{"startOffset":13226,"endOffset":13900,"count":6},{"startOffset":13352,"endOffset":13899,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13634,"endOffset":13663,"count":0}],"isBlockCoverage":false},{"functionName":"mergeChain","ranges":[{"startOffset":13902,"endOffset":14155,"count":8},{"startOffset":14102,"endOffset":14135,"count":4}],"isBlockCoverage":true},{"functionName":"mergeChainOpts","ranges":[{"startOffset":14157,"endOffset":14371,"count":6}],"isBlockCoverage":true},{"functionName":"emptyChain","ranges":[{"startOffset":14373,"endOffset":14486,"count":12}],"isBlockCoverage":true},{"functionName":"normalizeOptions","ranges":[{"startOffset":14488,"endOffset":15015,"count":6},{"startOffset":14915,"endOffset":14994,"count":0}],"isBlockCoverage":true},{"functionName":"dedupDescriptors","ranges":[{"startOffset":15017,"endOffset":15767,"count":8},{"startOffset":15132,"endOffset":15667,"count":32},{"startOffset":15547,"endOffset":15589,"count":0},{"startOffset":15595,"endOffset":15663,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":15697,"endOffset":15759,"count":32}],"isBlockCoverage":true},{"functionName":"configIsApplicable","ranges":[{"startOffset":15769,"endOffset":16126,"count":110},{"startOffset":15869,"endOffset":15927,"count":0},{"startOffset":15963,"endOffset":16024,"count":0},{"startOffset":16060,"endOffset":16122,"count":0}],"isBlockCoverage":true},{"functionName":"configFieldIsApplicable","ranges":[{"startOffset":16128,"endOffset":16298,"count":0}],"isBlockCoverage":false},{"functionName":"ignoreListReplacer","ranges":[{"startOffset":16300,"endOffset":16424,"count":208},{"startOffset":16374,"endOffset":16423,"count":104}],"isBlockCoverage":true},{"functionName":"shouldIgnore","ranges":[{"startOffset":16426,"endOffset":17366,"count":110},{"startOffset":16495,"endOffset":16539,"count":106},{"startOffset":16541,"endOffset":16912,"count":104},{"startOffset":16686,"endOffset":16699,"count":0},{"startOffset":16855,"endOffset":16890,"count":0},{"startOffset":16912,"endOffset":16925,"count":6},{"startOffset":16925,"endOffset":16968,"count":2},{"startOffset":16970,"endOffset":17347,"count":0},{"startOffset":17347,"endOffset":17365,"count":6}],"isBlockCoverage":true},{"functionName":"matchesPatterns","ranges":[{"startOffset":17368,"endOffset":17518,"count":108}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17446,"endOffset":17514,"count":108}],"isBlockCoverage":true},{"functionName":"matchPattern","ranges":[{"startOffset":17520,"endOffset":18037,"count":108},{"startOffset":17620,"endOffset":17744,"count":0},{"startOffset":17784,"endOffset":17895,"count":0},{"startOffset":17932,"endOffset":17999,"count":0}],"isBlockCoverage":true}]},{"scriptId":"438","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/validation/options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7792,"count":1}],"isBlockCoverage":true},{"functionName":"getSource","ranges":[{"startOffset":3490,"endOffset":3584,"count":108},{"startOffset":3558,"endOffset":3581,"count":0}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":3586,"endOffset":3692,"count":108}],"isBlockCoverage":true},{"functionName":"validateNested","ranges":[{"startOffset":3694,"endOffset":4963,"count":108}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3826,"endOffset":4944,"count":639},{"startOffset":3947,"endOffset":3975,"count":1},{"startOffset":3977,"endOffset":4081,"count":0},{"startOffset":4112,"endOffset":4135,"count":3},{"startOffset":4137,"endOffset":4253,"count":0},{"startOffset":4284,"endOffset":4308,"count":3},{"startOffset":4309,"endOffset":4335,"count":3},{"startOffset":4337,"endOffset":4758,"count":0},{"startOffset":4805,"endOffset":4833,"count":530},{"startOffset":4834,"endOffset":4860,"count":318},{"startOffset":4861,"endOffset":4884,"count":318},{"startOffset":4885,"endOffset":4905,"count":0}],"isBlockCoverage":true},{"functionName":"throwUnknownError","ranges":[{"startOffset":4965,"endOffset":5517,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":5519,"endOffset":5602,"count":108}],"isBlockCoverage":true},{"functionName":"assertNoDuplicateSourcemap","ranges":[{"startOffset":5604,"endOffset":5792,"count":108},{"startOffset":5677,"endOffset":5703,"count":0},{"startOffset":5705,"endOffset":5790,"count":0}],"isBlockCoverage":true},{"functionName":"assertEnvSet","ranges":[{"startOffset":5794,"endOffset":6417,"count":0}],"isBlockCoverage":false},{"functionName":"assertOverridesList","ranges":[{"startOffset":6419,"endOffset":7285,"count":0}],"isBlockCoverage":false},{"functionName":"checkNoUnwrappedItemOptionPairs","ranges":[{"startOffset":7287,"endOffset":7792,"count":0}],"isBlockCoverage":false}]},{"scriptId":"439","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/validation/removed.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2374,"count":1}],"isBlockCoverage":true}]},{"scriptId":"440","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/validation/option-assertions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9985,"count":1}],"isBlockCoverage":true},{"functionName":"_helperCompilationTargets","ranges":[{"startOffset":939,"endOffset":1123,"count":0}],"isBlockCoverage":false},{"functionName":"msg","ranges":[{"startOffset":1163,"endOffset":1632,"count":0}],"isBlockCoverage":false},{"functionName":"access","ranges":[{"startOffset":1634,"endOffset":1726,"count":348}],"isBlockCoverage":true},{"functionName":"assertRootMode","ranges":[{"startOffset":1728,"endOffset":1985,"count":0}],"isBlockCoverage":false},{"functionName":"assertSourceMaps","ranges":[{"startOffset":1987,"endOffset":2236,"count":0}],"isBlockCoverage":false},{"functionName":"assertCompact","ranges":[{"startOffset":2238,"endOffset":2452,"count":0}],"isBlockCoverage":false},{"functionName":"assertSourceType","ranges":[{"startOffset":2454,"endOffset":2708,"count":0}],"isBlockCoverage":false},{"functionName":"assertCallerMetadata","ranges":[{"startOffset":2710,"endOffset":3311,"count":106},{"startOffset":2846,"endOffset":2939,"count":0},{"startOffset":3140,"endOffset":3168,"count":0},{"startOffset":3170,"endOffset":3282,"count":0}],"isBlockCoverage":true},{"functionName":"assertInputSourceMap","ranges":[{"startOffset":3313,"endOffset":3555,"count":0}],"isBlockCoverage":false},{"functionName":"assertString","ranges":[{"startOffset":3557,"endOffset":3740,"count":335},{"startOffset":3649,"endOffset":3721,"count":0}],"isBlockCoverage":true},{"functionName":"assertFunction","ranges":[{"startOffset":3742,"endOffset":3931,"count":20},{"startOffset":3806,"endOffset":3836,"count":18},{"startOffset":3838,"endOffset":3912,"count":0}],"isBlockCoverage":true},{"functionName":"assertBoolean","ranges":[{"startOffset":3933,"endOffset":4119,"count":0}],"isBlockCoverage":false},{"functionName":"assertObject","ranges":[{"startOffset":4121,"endOffset":4341,"count":111},{"startOffset":4249,"endOffset":4322,"count":0}],"isBlockCoverage":true},{"functionName":"assertArray","ranges":[{"startOffset":4343,"endOffset":4515,"count":215},{"startOffset":4424,"endOffset":4496,"count":0}],"isBlockCoverage":true},{"functionName":"assertIgnoreList","ranges":[{"startOffset":4517,"endOffset":4700,"count":212}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4626,"endOffset":4677,"count":212}],"isBlockCoverage":true},{"functionName":"assertIgnoreItem","ranges":[{"startOffset":4702,"endOffset":4960,"count":212},{"startOffset":4836,"endOffset":4941,"count":0}],"isBlockCoverage":true},{"functionName":"assertConfigApplicableTest","ranges":[{"startOffset":4962,"endOffset":5405,"count":0}],"isBlockCoverage":false},{"functionName":"checkValidTest","ranges":[{"startOffset":5407,"endOffset":5535,"count":0}],"isBlockCoverage":false},{"functionName":"assertConfigFileSearch","ranges":[{"startOffset":5537,"endOffset":5805,"count":0}],"isBlockCoverage":false},{"functionName":"assertBabelrcSearch","ranges":[{"startOffset":5807,"endOffset":6331,"count":0}],"isBlockCoverage":false},{"functionName":"assertPluginList","ranges":[{"startOffset":6333,"endOffset":6516,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6442,"endOffset":6493,"count":16}],"isBlockCoverage":true},{"functionName":"assertPluginItem","ranges":[{"startOffset":6518,"endOffset":7417,"count":16},{"startOffset":6586,"endOffset":7351,"count":14},{"startOffset":6616,"endOffset":6684,"count":0},{"startOffset":6712,"endOffset":6796,"count":0},{"startOffset":7025,"endOffset":7124,"count":0},{"startOffset":7160,"endOffset":7347,"count":0},{"startOffset":7351,"endOffset":7398,"count":2}],"isBlockCoverage":true},{"functionName":"assertPluginTarget","ranges":[{"startOffset":7419,"endOffset":7661,"count":16},{"startOffset":7494,"endOffset":7503,"count":10},{"startOffset":7505,"endOffset":7533,"count":6},{"startOffset":7534,"endOffset":7564,"count":3},{"startOffset":7566,"endOffset":7642,"count":0}],"isBlockCoverage":true},{"functionName":"assertTargets","ranges":[{"startOffset":7663,"endOffset":8712,"count":0}],"isBlockCoverage":false},{"functionName":"assertBrowsersList","ranges":[{"startOffset":8714,"endOffset":8942,"count":0}],"isBlockCoverage":false},{"functionName":"assertBrowserVersion","ranges":[{"startOffset":8944,"endOffset":9174,"count":0}],"isBlockCoverage":false},{"functionName":"assertAssumptions","ranges":[{"startOffset":9176,"endOffset":9985,"count":0}],"isBlockCoverage":false}]},{"scriptId":"441","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/printer.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2892,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":138,"endOffset":262,"count":0}],"isBlockCoverage":false},{"functionName":"title","ranges":[{"startOffset":386,"endOffset":679,"count":0}],"isBlockCoverage":false},{"functionName":"loc","ranges":[{"startOffset":684,"endOffset":882,"count":0}],"isBlockCoverage":false},{"functionName":"optionsAndDescriptors","ranges":[{"startOffset":887,"endOffset":1437,"count":0}],"isBlockCoverage":false},{"functionName":"descriptorToConfig","ranges":[{"startOffset":1443,"endOffset":1987,"count":0}],"isBlockCoverage":false},{"functionName":"ConfigPrinter","ranges":[{"startOffset":2013,"endOffset":2054,"count":110}],"isBlockCoverage":true},{"functionName":"configure","ranges":[{"startOffset":2058,"endOffset":2343,"count":4},{"startOffset":2155,"endOffset":2342,"count":0}],"isBlockCoverage":true},{"functionName":"_stack.push.type.type","ranges":[{"startOffset":2146,"endOffset":2154,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2167,"endOffset":2338,"count":0}],"isBlockCoverage":false},{"functionName":"format","ranges":[{"startOffset":2354,"endOffset":2662,"count":0}],"isBlockCoverage":false},{"functionName":"output","ranges":[{"startOffset":2666,"endOffset":2849,"count":4},{"startOffset":2722,"endOffset":2848,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2781,"endOffset":2809,"count":0}],"isBlockCoverage":false}]},{"scriptId":"442","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/validation/plugins.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1982,"count":1}],"isBlockCoverage":true},{"functionName":"assertVisitorMap","ranges":[{"startOffset":575,"endOffset":975,"count":5},{"startOffset":801,"endOffset":954,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":721,"endOffset":766,"count":14}],"isBlockCoverage":true},{"functionName":"assertVisitorHandler","ranges":[{"startOffset":977,"endOffset":1399,"count":14},{"startOffset":1063,"endOffset":1274,"count":1},{"startOffset":1274,"endOffset":1380,"count":13},{"startOffset":1313,"endOffset":1380,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1096,"endOffset":1268,"count":1},{"startOffset":1162,"endOffset":1262,"count":0}],"isBlockCoverage":true},{"functionName":"validatePluginObject","ranges":[{"startOffset":1401,"endOffset":1982,"count":17}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1530,"endOffset":1964,"count":42},{"startOffset":1740,"endOffset":1960,"count":0}],"isBlockCoverage":true}]},{"scriptId":"443","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/config/partial.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5647,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":161,"endOffset":276,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":223,"endOffset":257,"count":317}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":278,"endOffset":402,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":349,"endOffset":383,"count":0}],"isBlockCoverage":false},{"functionName":"_objectWithoutPropertiesLoose","ranges":[{"startOffset":782,"endOffset":1089,"count":0}],"isBlockCoverage":false},{"functionName":"resolveRootMode","ranges":[{"startOffset":1091,"endOffset":1989,"count":106},{"startOffset":1203,"endOffset":1377,"count":0},{"startOffset":1383,"endOffset":1899,"count":0},{"startOffset":1905,"endOffset":1983,"count":0}],"isBlockCoverage":true},{"functionName":"loadPrivatePartialConfig","ranges":[{"startOffset":1991,"endOffset":4023,"count":106},{"startOffset":2127,"endOffset":2208,"count":0},{"startOffset":2284,"endOffset":2288,"count":0},{"startOffset":2683,"endOffset":2694,"count":0},{"startOffset":3031,"endOffset":3043,"count":104},{"startOffset":3043,"endOffset":3588,"count":2},{"startOffset":3589,"endOffset":3600,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3118,"endOffset":3174,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3639,"endOffset":3700,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3740,"endOffset":3801,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4062,"endOffset":4988,"count":0}],"isBlockCoverage":false},{"functionName":"PartialConfig","ranges":[{"startOffset":5064,"endOffset":5504,"count":0}],"isBlockCoverage":false},{"functionName":"hasFilesystemConfig","ranges":[{"startOffset":5508,"endOffset":5603,"count":0}],"isBlockCoverage":false}]},{"scriptId":"444","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transform.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1059,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":158,"endOffset":282,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":229,"endOffset":263,"count":0}],"isBlockCoverage":false},{"functionName":"transform","ranges":[{"startOffset":407,"endOffset":586,"count":0}],"isBlockCoverage":false},{"functionName":"transform","ranges":[{"startOffset":608,"endOffset":856,"count":0}],"isBlockCoverage":false}]},{"scriptId":"445","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3440,"count":1}],"isBlockCoverage":true},{"functionName":"_traverse","ranges":[{"startOffset":100,"endOffset":234,"count":0}],"isBlockCoverage":false},{"functionName":"run","ranges":[{"startOffset":545,"endOffset":1769,"count":0}],"isBlockCoverage":false},{"functionName":"transformFile","ranges":[{"startOffset":1771,"endOffset":3288,"count":0}],"isBlockCoverage":false},{"functionName":"isThenable","ranges":[{"startOffset":3290,"endOffset":3440,"count":0}],"isBlockCoverage":false}]},{"scriptId":"446","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/plugin-pass.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1035,"count":1}],"isBlockCoverage":true},{"functionName":"PluginPass","ranges":[{"startOffset":128,"endOffset":457,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":461,"endOffset":509,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":513,"endOffset":558,"count":0}],"isBlockCoverage":false},{"functionName":"availableHelper","ranges":[{"startOffset":562,"endOffset":661,"count":0}],"isBlockCoverage":false},{"functionName":"addHelper","ranges":[{"startOffset":665,"endOffset":724,"count":0}],"isBlockCoverage":false},{"functionName":"addImport","ranges":[{"startOffset":728,"endOffset":779,"count":0}],"isBlockCoverage":false},{"functionName":"buildCodeFrameError","ranges":[{"startOffset":783,"endOffset":888,"count":0}],"isBlockCoverage":false},{"functionName":"getModuleName","ranges":[{"startOffset":964,"endOffset":1032,"count":0}],"isBlockCoverage":false}]},{"scriptId":"447","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1802,"count":1}],"isBlockCoverage":true},{"functionName":"_traverse","ranges":[{"startOffset":121,"endOffset":255,"count":0}],"isBlockCoverage":false},{"functionName":"loadBlockHoistPlugin","ranges":[{"startOffset":321,"endOffset":569,"count":0}],"isBlockCoverage":false},{"functionName":"priority","ranges":[{"startOffset":571,"endOffset":759,"count":0}],"isBlockCoverage":false},{"functionName":"stableSort","ranges":[{"startOffset":761,"endOffset":1232,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":1324,"endOffset":1788,"count":0}],"isBlockCoverage":false}]},{"scriptId":"448","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/normalize-opts.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1543,"count":1}],"isBlockCoverage":true},{"functionName":"_path","ranges":[{"startOffset":117,"endOffset":232,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeOptions","ranges":[{"startOffset":234,"endOffset":1543,"count":0}],"isBlockCoverage":false}]},{"scriptId":"449","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/normalize-file.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3796,"count":1}],"isBlockCoverage":true},{"functionName":"_fs","ranges":[{"startOffset":114,"endOffset":223,"count":0}],"isBlockCoverage":false},{"functionName":"_path","ranges":[{"startOffset":225,"endOffset":340,"count":0}],"isBlockCoverage":false},{"functionName":"_debug","ranges":[{"startOffset":342,"endOffset":460,"count":1}],"isBlockCoverage":true},{"functionName":"_debug","ranges":[{"startOffset":407,"endOffset":441,"count":0}],"isBlockCoverage":false},{"functionName":"_t","ranges":[{"startOffset":462,"endOffset":579,"count":1}],"isBlockCoverage":true},{"functionName":"_t","ranges":[{"startOffset":526,"endOffset":560,"count":0}],"isBlockCoverage":false},{"functionName":"_convertSourceMap","ranges":[{"startOffset":581,"endOffset":734,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeFile","ranges":[{"startOffset":999,"endOffset":2833,"count":0}],"isBlockCoverage":false},{"functionName":"extractCommentsFromList","ranges":[{"startOffset":3046,"endOffset":3345,"count":0}],"isBlockCoverage":false},{"functionName":"extractComments","ranges":[{"startOffset":3347,"endOffset":3796,"count":0}],"isBlockCoverage":false}]},{"scriptId":"450","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/parser/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2260,"count":1}],"isBlockCoverage":true},{"functionName":"_parser","ranges":[{"startOffset":107,"endOffset":235,"count":0}],"isBlockCoverage":false},{"functionName":"_codeFrame","ranges":[{"startOffset":237,"endOffset":375,"count":0}],"isBlockCoverage":false},{"functionName":"parser","ranges":[{"startOffset":446,"endOffset":2260,"count":0}],"isBlockCoverage":false}]},{"scriptId":"451","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11935,"count":1}],"isBlockCoverage":true},{"functionName":"getNameURLCombination","ranges":[{"startOffset":10770,"endOffset":10811,"count":0}],"isBlockCoverage":false},{"functionName":"generateMissingPluginMessage","ranges":[{"startOffset":10814,"endOffset":11935,"count":0}],"isBlockCoverage":false}]},{"scriptId":"452","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/util/clone-deep.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":453,"count":1}],"isBlockCoverage":true},{"functionName":"_v","ranges":[{"startOffset":109,"endOffset":216,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":276,"endOffset":453,"count":0}],"isBlockCoverage":false}]},{"scriptId":"453","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/util/clone-deep-browser.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":599,"count":1}],"isBlockCoverage":true},{"functionName":"serialize","ranges":[{"startOffset":181,"endOffset":334,"count":0}],"isBlockCoverage":false},{"functionName":"revive","ranges":[{"startOffset":336,"endOffset":506,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":508,"endOffset":599,"count":0}],"isBlockCoverage":false}]},{"scriptId":"454","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/file/generate.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2042,"count":1}],"isBlockCoverage":true},{"functionName":"_convertSourceMap","ranges":[{"startOffset":113,"endOffset":266,"count":0}],"isBlockCoverage":false},{"functionName":"_generator","ranges":[{"startOffset":268,"endOffset":405,"count":0}],"isBlockCoverage":false},{"functionName":"generateCode","ranges":[{"startOffset":448,"endOffset":2042,"count":0}],"isBlockCoverage":false}]},{"scriptId":"455","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transformation/file/merge-map.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":816,"count":1}],"isBlockCoverage":true},{"functionName":"_remapping","ranges":[{"startOffset":115,"endOffset":257,"count":0}],"isBlockCoverage":false},{"functionName":"mergeSourceMap","ranges":[{"startOffset":259,"endOffset":727,"count":0}],"isBlockCoverage":false},{"functionName":"rootless","ranges":[{"startOffset":729,"endOffset":816,"count":0}],"isBlockCoverage":false}]},{"scriptId":"456","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transform-file.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1059,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":170,"endOffset":294,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":241,"endOffset":275,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":471,"endOffset":764,"count":0}],"isBlockCoverage":false}]},{"scriptId":"457","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/transform-ast.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1257,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":179,"endOffset":303,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":250,"endOffset":284,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":435,"endOffset":660,"count":0}],"isBlockCoverage":false},{"functionName":"transformFromAst","ranges":[{"startOffset":689,"endOffset":984,"count":0}],"isBlockCoverage":false}]},{"scriptId":"458","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/core/lib/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1085,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":146,"endOffset":270,"count":1}],"isBlockCoverage":true},{"functionName":"_gensync","ranges":[{"startOffset":217,"endOffset":251,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":441,"endOffset":668,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":686,"endOffset":922,"count":0}],"isBlockCoverage":false}]},{"scriptId":"459","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/worker/transform.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3682,"count":1}],"isBlockCoverage":true},{"functionName":"asyncGeneratorStep","ranges":[{"startOffset":15,"endOffset":280,"count":0}],"isBlockCoverage":false},{"functionName":"_asyncToGenerator","ranges":[{"startOffset":282,"endOffset":671,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":322,"endOffset":668,"count":0}],"isBlockCoverage":false},{"functionName":"escapeRegExp","ranges":[{"startOffset":923,"endOffset":1012,"count":2}],"isBlockCoverage":true},{"functionName":"exports.setOptions","ranges":[{"startOffset":1066,"endOffset":1814,"count":1},{"startOffset":1111,"endOffset":1119,"count":0},{"startOffset":1121,"endOffset":1171,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1855,"endOffset":2410,"count":0}],"isBlockCoverage":false},{"functionName":"exports.transformSync","ranges":[{"startOffset":2441,"endOffset":3036,"count":106},{"startOffset":2668,"endOffset":2680,"count":104},{"startOffset":2680,"endOffset":2786,"count":2},{"startOffset":2786,"endOffset":2938,"count":0},{"startOffset":2939,"endOffset":2956,"count":0}],"isBlockCoverage":true},{"functionName":"id","ranges":[{"startOffset":3052,"endOffset":3066,"count":0}],"isBlockCoverage":false},{"functionName":"cacheLookup","ranges":[{"startOffset":3069,"endOffset":3682,"count":2},{"startOffset":3122,"endOffset":3167,"count":0},{"startOffset":3491,"endOffset":3681,"count":0}],"isBlockCoverage":true},{"functionName":"store","ranges":[{"startOffset":3527,"endOffset":3674,"count":0}],"isBlockCoverage":false}]},{"scriptId":"460","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/clone-deep/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1023,"count":1}],"isBlockCoverage":true},{"functionName":"cloneDeep","ranges":[{"startOffset":173,"endOffset":426,"count":848},{"startOffset":243,"endOffset":307,"count":212},{"startOffset":312,"endOffset":374,"count":212},{"startOffset":379,"endOffset":420,"count":424}],"isBlockCoverage":true},{"functionName":"cloneObjectDeep","ranges":[{"startOffset":428,"endOffset":760,"count":212},{"startOffset":518,"endOffset":554,"count":0},{"startOffset":664,"endOffset":724,"count":530},{"startOffset":744,"endOffset":759,"count":0}],"isBlockCoverage":true},{"functionName":"cloneArrayDeep","ranges":[{"startOffset":762,"endOffset":962,"count":212}],"isBlockCoverage":true}]},{"scriptId":"461","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/shallow-clone/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1887,"count":1}],"isBlockCoverage":true},{"functionName":"clone","ranges":[{"startOffset":253,"endOffset":1115,"count":424},{"startOffset":310,"endOffset":349,"count":0},{"startOffset":354,"endOffset":405,"count":0},{"startOffset":410,"endOffset":469,"count":0},{"startOffset":474,"endOffset":512,"count":0},{"startOffset":517,"endOffset":555,"count":0},{"startOffset":560,"endOffset":605,"count":0},{"startOffset":610,"endOffset":655,"count":0},{"startOffset":660,"endOffset":715,"count":0},{"startOffset":720,"endOffset":740,"count":0},{"startOffset":745,"endOffset":765,"count":0},{"startOffset":770,"endOffset":788,"count":0},{"startOffset":793,"endOffset":811,"count":0},{"startOffset":816,"endOffset":833,"count":0},{"startOffset":838,"endOffset":857,"count":0},{"startOffset":862,"endOffset":881,"count":0},{"startOffset":886,"endOffset":911,"count":0},{"startOffset":916,"endOffset":969,"count":0},{"startOffset":974,"endOffset":1019,"count":212},{"startOffset":1024,"endOffset":1070,"count":0},{"startOffset":1075,"endOffset":1109,"count":212}],"isBlockCoverage":true},{"functionName":"cloneRegExp","ranges":[{"startOffset":1117,"endOffset":1325,"count":212},{"startOffset":1194,"endOffset":1224,"count":0}],"isBlockCoverage":true},{"functionName":"cloneArrayBuffer","ranges":[{"startOffset":1327,"endOffset":1474,"count":0}],"isBlockCoverage":false},{"functionName":"cloneTypedArray","ranges":[{"startOffset":1476,"endOffset":1585,"count":0}],"isBlockCoverage":false},{"functionName":"cloneBuffer","ranges":[{"startOffset":1587,"endOffset":1752,"count":0}],"isBlockCoverage":false},{"functionName":"cloneSymbol","ranges":[{"startOffset":1754,"endOffset":1834,"count":0}],"isBlockCoverage":false}]},{"scriptId":"462","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/kind-of/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3562,"count":1}],"isBlockCoverage":true},{"functionName":"kindOf","ranges":[{"startOffset":60,"endOffset":1965,"count":1272},{"startOffset":105,"endOffset":124,"count":0},{"startOffset":145,"endOffset":159,"count":0},{"startOffset":212,"endOffset":229,"count":0},{"startOffset":255,"endOffset":271,"count":424},{"startOffset":271,"endOffset":297,"count":848},{"startOffset":297,"endOffset":313,"count":0},{"startOffset":313,"endOffset":339,"count":848},{"startOffset":339,"endOffset":355,"count":0},{"startOffset":355,"endOffset":383,"count":848},{"startOffset":383,"endOffset":454,"count":0},{"startOffset":454,"endOffset":476,"count":848},{"startOffset":476,"endOffset":491,"count":212},{"startOffset":491,"endOffset":513,"count":636},{"startOffset":513,"endOffset":529,"count":0},{"startOffset":529,"endOffset":554,"count":636},{"startOffset":554,"endOffset":573,"count":0},{"startOffset":573,"endOffset":593,"count":636},{"startOffset":593,"endOffset":607,"count":0},{"startOffset":607,"endOffset":628,"count":636},{"startOffset":628,"endOffset":643,"count":0},{"startOffset":643,"endOffset":665,"count":636},{"startOffset":665,"endOffset":681,"count":424},{"startOffset":681,"endOffset":714,"count":212},{"startOffset":714,"endOffset":745,"count":0},{"startOffset":750,"endOffset":783,"count":0},{"startOffset":823,"endOffset":856,"count":0},{"startOffset":861,"endOffset":894,"count":0},{"startOffset":899,"endOffset":924,"count":0},{"startOffset":929,"endOffset":954,"count":0},{"startOffset":986,"endOffset":1023,"count":0},{"startOffset":1028,"endOffset":1067,"count":0},{"startOffset":1072,"endOffset":1125,"count":0},{"startOffset":1158,"endOffset":1197,"count":0},{"startOffset":1202,"endOffset":1243,"count":0},{"startOffset":1276,"endOffset":1315,"count":0},{"startOffset":1320,"endOffset":1361,"count":0},{"startOffset":1366,"endOffset":1409,"count":0},{"startOffset":1414,"endOffset":1457,"count":0},{"startOffset":1461,"endOffset":1490,"count":212},{"startOffset":1490,"endOffset":1519,"count":0},{"startOffset":1519,"endOffset":1635,"count":212},{"startOffset":1657,"endOffset":1708,"count":0},{"startOffset":1713,"endOffset":1764,"count":0},{"startOffset":1769,"endOffset":1826,"count":0},{"startOffset":1831,"endOffset":1886,"count":0},{"startOffset":1890,"endOffset":1964,"count":0}],"isBlockCoverage":true},{"functionName":"ctorName","ranges":[{"startOffset":1968,"endOffset":2072,"count":212},{"startOffset":2063,"endOffset":2069,"count":0}],"isBlockCoverage":true},{"functionName":"isArray","ranges":[{"startOffset":2074,"endOffset":2178,"count":848},{"startOffset":2145,"endOffset":2177,"count":0}],"isBlockCoverage":true},{"functionName":"isError","ranges":[{"startOffset":2180,"endOffset":2347,"count":636},{"startOffset":2270,"endOffset":2288,"count":0},{"startOffset":2289,"endOffset":2343,"count":0}],"isBlockCoverage":true},{"functionName":"isDate","ranges":[{"startOffset":2349,"endOffset":2544,"count":636},{"startOffset":2399,"endOffset":2411,"count":0},{"startOffset":2464,"endOffset":2500,"count":0},{"startOffset":2505,"endOffset":2541,"count":0}],"isBlockCoverage":true},{"functionName":"isRegexp","ranges":[{"startOffset":2546,"endOffset":2778,"count":636},{"startOffset":2600,"endOffset":2612,"count":424},{"startOffset":2612,"endOffset":2656,"count":212},{"startOffset":2656,"endOffset":2694,"count":0},{"startOffset":2699,"endOffset":2736,"count":0},{"startOffset":2741,"endOffset":2775,"count":0}],"isBlockCoverage":true},{"functionName":"isGeneratorFn","ranges":[{"startOffset":2780,"endOffset":2866,"count":0}],"isBlockCoverage":false},{"functionName":"isGeneratorObj","ranges":[{"startOffset":2868,"endOffset":3020,"count":212},{"startOffset":2944,"endOffset":2979,"count":0},{"startOffset":2984,"endOffset":3017,"count":0}],"isBlockCoverage":true},{"functionName":"isArguments","ranges":[{"startOffset":3022,"endOffset":3273,"count":636},{"startOffset":3097,"endOffset":3132,"count":0},{"startOffset":3134,"endOffset":3160,"count":0},{"startOffset":3165,"endOffset":3255,"count":0}],"isBlockCoverage":true},{"functionName":"isBuffer","ranges":[{"startOffset":3398,"endOffset":3561,"count":636},{"startOffset":3496,"endOffset":3543,"count":0}],"isBlockCoverage":true}]},{"scriptId":"463","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-plain-object/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":856,"count":1}],"isBlockCoverage":true},{"functionName":"isObjectObject","ranges":[{"startOffset":213,"endOffset":337,"count":424}],"isBlockCoverage":true},{"functionName":"isPlainObject","ranges":[{"startOffset":356,"endOffset":854,"count":212},{"startOffset":437,"endOffset":450,"count":0},{"startOffset":543,"endOffset":556,"count":0},{"startOffset":652,"endOffset":665,"count":0},{"startOffset":781,"endOffset":804,"count":0}],"isBlockCoverage":true}]},{"scriptId":"464","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/isobject/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":288,"count":1}],"isBlockCoverage":true},{"functionName":"isObject","ranges":[{"startOffset":179,"endOffset":286,"count":424}],"isBlockCoverage":true}]},{"scriptId":"465","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/cache.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":43,"count":1}],"isBlockCoverage":true}]},{"scriptId":"466","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/register/lib/worker/cache.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2601,"count":1},{"startOffset":258,"endOffset":273,"count":0},{"startOffset":274,"endOffset":288,"count":0}],"isBlockCoverage":true},{"functionName":"isCacheDisabled","ranges":[{"startOffset":529,"endOffset":705,"count":3},{"startOffset":663,"endOffset":686,"count":0}],"isBlockCoverage":true},{"functionName":"save","ranges":[{"startOffset":729,"endOffset":1892,"count":2},{"startOffset":794,"endOffset":1250,"count":0},{"startOffset":1251,"endOffset":1277,"count":0},{"startOffset":1383,"endOffset":1890,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1107,"endOffset":1202,"count":0}],"isBlockCoverage":true},{"functionName":"load","ranges":[{"startOffset":1909,"endOffset":2432,"count":1},{"startOffset":1952,"endOffset":1984,"count":0},{"startOffset":2119,"endOffset":2361,"count":0},{"startOffset":2412,"endOffset":2430,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2449,"endOffset":2482,"count":1}],"isBlockCoverage":true},{"functionName":"setDirty","ranges":[{"startOffset":2504,"endOffset":2548,"count":0}],"isBlockCoverage":false},{"functionName":"clear","ranges":[{"startOffset":2567,"endOffset":2600,"count":0}],"isBlockCoverage":false}]},{"scriptId":"467","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/find-cache-dir/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":693,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":174,"endOffset":691,"count":1},{"startOffset":270,"endOffset":325,"count":0},{"startOffset":539,"endOffset":572,"count":0},{"startOffset":595,"endOffset":666,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":607,"endOffset":661,"count":0}],"isBlockCoverage":false}]},{"scriptId":"468","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/commondir/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":802,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":46,"endOffset":800,"count":0}],"isBlockCoverage":false}]},{"scriptId":"469","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pkg-dir/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":297,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":97,"endOffset":174,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":199,"endOffset":295,"count":1},{"startOffset":286,"endOffset":292,"count":0}],"isBlockCoverage":true}]},{"scriptId":"470","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pkg-dir/node_modules/find-up/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":968,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":105,"endOffset":550,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":575,"endOffset":966,"count":1},{"startOffset":635,"endOffset":640,"count":0},{"startOffset":890,"endOffset":964,"count":0}],"isBlockCoverage":true}]},{"scriptId":"471","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pkg-dir/node_modules/locate-path/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":539,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":142,"endOffset":316,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":341,"endOffset":537,"count":1},{"startOffset":535,"endOffset":536,"count":0}],"isBlockCoverage":true}]},{"scriptId":"472","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pkg-dir/node_modules/path-exists/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":252,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":58,"endOffset":137,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":162,"endOffset":250,"count":1},{"startOffset":216,"endOffset":248,"count":0}],"isBlockCoverage":true}]},{"scriptId":"473","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pkg-dir/node_modules/p-locate/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1042,"count":1}],"isBlockCoverage":true},{"functionName":"EndError","ranges":[{"startOffset":82,"endOffset":138,"count":0}],"isBlockCoverage":false},{"functionName":"testElement","ranges":[{"startOffset":227,"endOffset":275,"count":0}],"isBlockCoverage":false},{"functionName":"finder","ranges":[{"startOffset":361,"endOffset":451,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports","ranges":[{"startOffset":471,"endOffset":1040,"count":0}],"isBlockCoverage":false}]},{"scriptId":"474","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pkg-dir/node_modules/p-limit/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1114,"count":1}],"isBlockCoverage":true},{"functionName":"pLimit","ranges":[{"startOffset":61,"endOffset":1053,"count":0}],"isBlockCoverage":false}]},{"scriptId":"475","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/p-try/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":211,"count":1}],"isBlockCoverage":true},{"functionName":"pTry","ranges":[{"startOffset":28,"endOffset":107,"count":0}],"isBlockCoverage":false}]},{"scriptId":"476","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/make-dir/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3077,"count":1}],"isBlockCoverage":true},{"functionName":"checkPath","ranges":[{"startOffset":387,"endOffset":688,"count":0}],"isBlockCoverage":false},{"functionName":"permissionError","ranges":[{"startOffset":715,"endOffset":1029,"count":0}],"isBlockCoverage":false},{"functionName":"makeDir","ranges":[{"startOffset":1048,"endOffset":2089,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports.sync","ranges":[{"startOffset":2175,"endOffset":3075,"count":0}],"isBlockCoverage":false}]},{"scriptId":"477","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pify/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1676,"count":1}],"isBlockCoverage":true},{"functionName":"processFn","ranges":[{"startOffset":33,"endOffset":611,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports","ranges":[{"startOffset":631,"endOffset":1674,"count":0}],"isBlockCoverage":false}]},{"scriptId":"478","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/make-dir/node_modules/semver/semver.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":38803,"count":1},{"startOffset":153,"endOffset":202,"count":0},{"startOffset":204,"endOffset":355,"count":0},{"startOffset":622,"endOffset":670,"count":0},{"startOffset":7960,"endOffset":8033,"count":35},{"startOffset":7995,"endOffset":8031,"count":32}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":216,"endOffset":353,"count":0}],"isBlockCoverage":false},{"functionName":"debug","ranges":[{"startOffset":373,"endOffset":387,"count":53}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":8057,"endOffset":8579,"count":0}],"isBlockCoverage":false},{"functionName":"valid","ranges":[{"startOffset":8603,"endOffset":8704,"count":0}],"isBlockCoverage":false},{"functionName":"clean","ranges":[{"startOffset":8728,"endOffset":8858,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer","ranges":[{"startOffset":8885,"endOffset":10577,"count":4},{"startOffset":8937,"endOffset":8967,"count":3},{"startOffset":8969,"endOffset":9051,"count":1},{"startOffset":9085,"endOffset":9205,"count":2},{"startOffset":9156,"endOffset":9201,"count":0},{"startOffset":9205,"endOffset":9304,"count":2},{"startOffset":9244,"endOffset":9304,"count":0},{"startOffset":9304,"endOffset":9341,"count":2},{"startOffset":9341,"endOffset":9426,"count":0},{"startOffset":9426,"endOffset":9461,"count":2},{"startOffset":9461,"endOffset":9506,"count":0},{"startOffset":9506,"endOffset":9646,"count":2},{"startOffset":9646,"endOffset":9657,"count":0},{"startOffset":9658,"endOffset":9668,"count":2},{"startOffset":9681,"endOffset":9741,"count":0},{"startOffset":9741,"endOffset":9914,"count":2},{"startOffset":9916,"endOffset":9970,"count":0},{"startOffset":9970,"endOffset":10025,"count":2},{"startOffset":10027,"endOffset":10081,"count":0},{"startOffset":10081,"endOffset":10136,"count":2},{"startOffset":10138,"endOffset":10192,"count":0},{"startOffset":10192,"endOffset":10279,"count":2},{"startOffset":10279,"endOffset":10515,"count":0},{"startOffset":10515,"endOffset":10537,"count":2},{"startOffset":10537,"endOffset":10554,"count":0},{"startOffset":10555,"endOffset":10559,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10329,"endOffset":10510,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer.format","ranges":[{"startOffset":10605,"endOffset":10796,"count":2},{"startOffset":10715,"endOffset":10772,"count":0}],"isBlockCoverage":true},{"functionName":"SemVer.toString","ranges":[{"startOffset":10826,"endOffset":10863,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer.compare","ranges":[{"startOffset":10892,"endOffset":11117,"count":1},{"startOffset":11006,"endOffset":11055,"count":0},{"startOffset":11090,"endOffset":11115,"count":0}],"isBlockCoverage":true},{"functionName":"SemVer.compareMain","ranges":[{"startOffset":11150,"endOffset":11420,"count":1},{"startOffset":11203,"endOffset":11252,"count":0},{"startOffset":11307,"endOffset":11362,"count":0},{"startOffset":11363,"endOffset":11418,"count":0}],"isBlockCoverage":true},{"functionName":"SemVer.comparePre","ranges":[{"startOffset":11452,"endOffset":12239,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer.inc","ranges":[{"startOffset":12409,"endOffset":15470,"count":0}],"isBlockCoverage":false},{"functionName":"inc","ranges":[{"startOffset":15490,"endOffset":15747,"count":0}],"isBlockCoverage":false},{"functionName":"diff","ranges":[{"startOffset":15769,"endOffset":16297,"count":0}],"isBlockCoverage":false},{"functionName":"compareIdentifiers","ranges":[{"startOffset":16373,"endOffset":16618,"count":1},{"startOffset":16535,"endOffset":16538,"count":0},{"startOffset":16561,"endOffset":16565,"count":0},{"startOffset":16588,"endOffset":16591,"count":0},{"startOffset":16604,"endOffset":16608,"count":0}],"isBlockCoverage":true},{"functionName":"rcompareIdentifiers","ranges":[{"startOffset":16670,"endOffset":16743,"count":0}],"isBlockCoverage":false},{"functionName":"major","ranges":[{"startOffset":16767,"endOffset":16832,"count":0}],"isBlockCoverage":false},{"functionName":"minor","ranges":[{"startOffset":16856,"endOffset":16921,"count":0}],"isBlockCoverage":false},{"functionName":"patch","ranges":[{"startOffset":16945,"endOffset":17010,"count":0}],"isBlockCoverage":false},{"functionName":"compare","ranges":[{"startOffset":17038,"endOffset":17132,"count":1}],"isBlockCoverage":true},{"functionName":"compareLoose","ranges":[{"startOffset":17170,"endOffset":17231,"count":0}],"isBlockCoverage":false},{"functionName":"rcompare","ranges":[{"startOffset":17261,"endOffset":17326,"count":0}],"isBlockCoverage":false},{"functionName":"sort","ranges":[{"startOffset":17348,"endOffset":17461,"count":0}],"isBlockCoverage":false},{"functionName":"rsort","ranges":[{"startOffset":17485,"endOffset":17600,"count":0}],"isBlockCoverage":false},{"functionName":"gt","ranges":[{"startOffset":17618,"endOffset":17681,"count":0}],"isBlockCoverage":false},{"functionName":"lt","ranges":[{"startOffset":17699,"endOffset":17762,"count":0}],"isBlockCoverage":false},{"functionName":"eq","ranges":[{"startOffset":17780,"endOffset":17845,"count":0}],"isBlockCoverage":false},{"functionName":"neq","ranges":[{"startOffset":17865,"endOffset":17931,"count":0}],"isBlockCoverage":false},{"functionName":"gte","ranges":[{"startOffset":17951,"endOffset":18016,"count":1}],"isBlockCoverage":true},{"functionName":"lte","ranges":[{"startOffset":18036,"endOffset":18101,"count":0}],"isBlockCoverage":false},{"functionName":"cmp","ranges":[{"startOffset":18121,"endOffset":18835,"count":1},{"startOffset":18174,"endOffset":18316,"count":0},{"startOffset":18322,"endOffset":18464,"count":0},{"startOffset":18470,"endOffset":18478,"count":0},{"startOffset":18483,"endOffset":18492,"count":0},{"startOffset":18497,"endOffset":18536,"count":0},{"startOffset":18542,"endOffset":18582,"count":0},{"startOffset":18588,"endOffset":18626,"count":0},{"startOffset":18678,"endOffset":18716,"count":0},{"startOffset":18722,"endOffset":18762,"count":0},{"startOffset":18768,"endOffset":18829,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator","ranges":[{"startOffset":18869,"endOffset":19521,"count":1},{"startOffset":18954,"endOffset":19036,"count":0},{"startOffset":19072,"endOffset":19180,"count":0},{"startOffset":19219,"endOffset":19265,"count":0},{"startOffset":19407,"endOffset":19432,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator.parse","ranges":[{"startOffset":19565,"endOffset":19998,"count":1},{"startOffset":19612,"endOffset":19633,"count":0},{"startOffset":19686,"endOffset":19746,"count":0},{"startOffset":19800,"endOffset":19828,"count":0},{"startOffset":19903,"endOffset":19930,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator.toString","ranges":[{"startOffset":20032,"endOffset":20067,"count":1}],"isBlockCoverage":true},{"functionName":"Comparator.test","ranges":[{"startOffset":20097,"endOffset":20380,"count":1},{"startOffset":20202,"endOffset":20223,"count":0},{"startOffset":20260,"endOffset":20313,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator.intersects","ranges":[{"startOffset":20416,"endOffset":22036,"count":0}],"isBlockCoverage":false},{"functionName":"Range","ranges":[{"startOffset":22060,"endOffset":23117,"count":1},{"startOffset":22109,"endOffset":22139,"count":0},{"startOffset":22255,"endOffset":22451,"count":0},{"startOffset":22488,"endOffset":22536,"count":0},{"startOffset":22570,"endOffset":22612,"count":0},{"startOffset":23035,"endOffset":23098,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":22829,"endOffset":22892,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":22907,"endOffset":23008,"count":1}],"isBlockCoverage":true},{"functionName":"Range.format","ranges":[{"startOffset":23144,"endOffset":23283,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":23186,"endOffset":23242,"count":1}],"isBlockCoverage":true},{"functionName":"Range.toString","ranges":[{"startOffset":23312,"endOffset":23347,"count":0}],"isBlockCoverage":false},{"functionName":"Range.parseRange","ranges":[{"startOffset":23378,"endOffset":24600,"count":1},{"startOffset":23512,"endOffset":23534,"count":0},{"startOffset":24144,"endOffset":24165,"count":0},{"startOffset":24341,"endOffset":24493,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24216,"endOffset":24284,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24431,"endOffset":24488,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":24510,"endOffset":24577,"count":1}],"isBlockCoverage":true},{"functionName":"Range.intersects","ranges":[{"startOffset":24631,"endOffset":25086,"count":0}],"isBlockCoverage":false},{"functionName":"toComparators","ranges":[{"startOffset":25176,"endOffset":25376,"count":0}],"isBlockCoverage":false},{"functionName":"parseComparator","ranges":[{"startOffset":25522,"endOffset":25857,"count":1}],"isBlockCoverage":true},{"functionName":"isX","ranges":[{"startOffset":25859,"endOffset":25935,"count":3}],"isBlockCoverage":true},{"functionName":"replaceTildes","ranges":[{"startOffset":26208,"endOffset":26360,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":26287,"endOffset":26347,"count":1}],"isBlockCoverage":true},{"functionName":"replaceTilde","ranges":[{"startOffset":26362,"endOffset":27146,"count":1},{"startOffset":26426,"endOffset":26442,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":26480,"endOffset":27143,"count":0}],"isBlockCoverage":false},{"functionName":"replaceCarets","ranges":[{"startOffset":27345,"endOffset":27497,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27424,"endOffset":27484,"count":1}],"isBlockCoverage":true},{"functionName":"replaceCaret","ranges":[{"startOffset":27499,"endOffset":28980,"count":1},{"startOffset":27595,"endOffset":27611,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":27649,"endOffset":28977,"count":0}],"isBlockCoverage":false},{"functionName":"replaceXRanges","ranges":[{"startOffset":28982,"endOffset":29170,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29096,"endOffset":29157,"count":1}],"isBlockCoverage":true},{"functionName":"replaceXRange","ranges":[{"startOffset":29172,"endOffset":30696,"count":1},{"startOffset":29258,"endOffset":29275,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29314,"endOffset":30693,"count":1},{"startOffset":29512,"endOffset":29519,"count":0},{"startOffset":29521,"endOffset":29544,"count":0},{"startOffset":29558,"endOffset":29733,"count":0},{"startOffset":29757,"endOffset":30478,"count":0},{"startOffset":30492,"endOffset":30551,"count":0},{"startOffset":30565,"endOffset":30640,"count":0}],"isBlockCoverage":true},{"functionName":"replaceStars","ranges":[{"startOffset":30821,"endOffset":31013,"count":1}],"isBlockCoverage":true},{"functionName":"hyphenReplace","ranges":[{"startOffset":31227,"endOffset":31797,"count":0}],"isBlockCoverage":false},{"functionName":"Range.test","ranges":[{"startOffset":31884,"endOffset":32180,"count":1},{"startOffset":31921,"endOffset":31943,"count":0},{"startOffset":32163,"endOffset":32179,"count":0}],"isBlockCoverage":true},{"functionName":"testSet","ranges":[{"startOffset":32182,"endOffset":33203,"count":1},{"startOffset":32297,"endOffset":32323,"count":0},{"startOffset":32361,"endOffset":32390,"count":0},{"startOffset":32392,"endOffset":33186,"count":0}],"isBlockCoverage":true},{"functionName":"satisfies","ranges":[{"startOffset":33235,"endOffset":33396,"count":1},{"startOffset":33332,"endOffset":33365,"count":0}],"isBlockCoverage":true},{"functionName":"maxSatisfying","ranges":[{"startOffset":33436,"endOffset":33882,"count":0}],"isBlockCoverage":false},{"functionName":"minSatisfying","ranges":[{"startOffset":33922,"endOffset":34367,"count":0}],"isBlockCoverage":false},{"functionName":"minVersion","ranges":[{"startOffset":34401,"endOffset":35644,"count":0}],"isBlockCoverage":false},{"functionName":"validRange","ranges":[{"startOffset":35678,"endOffset":35917,"count":0}],"isBlockCoverage":false},{"functionName":"ltr","ranges":[{"startOffset":36013,"endOffset":36102,"count":0}],"isBlockCoverage":false},{"functionName":"gtr","ranges":[{"startOffset":36202,"endOffset":36291,"count":0}],"isBlockCoverage":false},{"functionName":"outside","ranges":[{"startOffset":36319,"endOffset":38110,"count":0}],"isBlockCoverage":false},{"functionName":"prerelease","ranges":[{"startOffset":38144,"endOffset":38298,"count":0}],"isBlockCoverage":false},{"functionName":"intersects","ranges":[{"startOffset":38332,"endOffset":38460,"count":0}],"isBlockCoverage":false},{"functionName":"coerce","ranges":[{"startOffset":38486,"endOffset":38802,"count":0}],"isBlockCoverage":false}]},{"scriptId":"479","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mocha/lib/interfaces/common.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4803,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":551,"endOffset":4801,"count":2}],"isBlockCoverage":true},{"functionName":"shouldBeTested","ranges":[{"startOffset":729,"endOffset":928,"count":0}],"isBlockCoverage":false},{"functionName":"runWithSuite","ranges":[{"startOffset":1196,"endOffset":1292,"count":0}],"isBlockCoverage":false},{"functionName":"before","ranges":[{"startOffset":1423,"endOffset":1487,"count":0}],"isBlockCoverage":false},{"functionName":"after","ranges":[{"startOffset":1616,"endOffset":1679,"count":0}],"isBlockCoverage":false},{"functionName":"beforeEach","ranges":[{"startOffset":1815,"endOffset":1880,"count":0}],"isBlockCoverage":false},{"functionName":"afterEach","ranges":[{"startOffset":2014,"endOffset":2078,"count":0}],"isBlockCoverage":false},{"functionName":"only","ranges":[{"startOffset":2291,"endOffset":2488,"count":0}],"isBlockCoverage":false},{"functionName":"skip","ranges":[{"startOffset":2690,"endOffset":2782,"count":0}],"isBlockCoverage":false},{"functionName":"create","ranges":[{"startOffset":3235,"endOffset":4269,"count":3},{"startOffset":3451,"endOffset":3490,"count":0},{"startOffset":3528,"endOffset":3568,"count":0},{"startOffset":3569,"endOffset":3603,"count":0},{"startOffset":3614,"endOffset":3691,"count":0},{"startOffset":3803,"endOffset":4238,"count":0}],"isBlockCoverage":true},{"functionName":"only","ranges":[{"startOffset":4446,"endOffset":4630,"count":0}],"isBlockCoverage":false},{"functionName":"skip","ranges":[{"startOffset":4733,"endOffset":4788,"count":0}],"isBlockCoverage":false}]},{"scriptId":"480","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/json5/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":143,"count":1}],"isBlockCoverage":true}]},{"scriptId":"481","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/json5/lib/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":21393,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":141,"endOffset":698,"count":1},{"startOffset":351,"endOffset":550,"count":28},{"startOffset":620,"endOffset":679,"count":0}],"isBlockCoverage":true},{"functionName":"internalize","ranges":[{"startOffset":700,"endOffset":1150,"count":0}],"isBlockCoverage":false},{"functionName":"lex","ranges":[{"startOffset":1208,"endOffset":1584,"count":28},{"startOffset":1318,"endOffset":1582,"count":229},{"startOffset":1540,"endOffset":1576,"count":28}],"isBlockCoverage":true},{"functionName":"peek","ranges":[{"startOffset":1586,"endOffset":1696,"count":449},{"startOffset":1626,"endOffset":1694,"count":447}],"isBlockCoverage":true},{"functionName":"read","ranges":[{"startOffset":1698,"endOffset":1937,"count":220},{"startOffset":1759,"endOffset":1800,"count":13},{"startOffset":1800,"endOffset":1877,"count":207},{"startOffset":1813,"endOffset":1847,"count":206},{"startOffset":1847,"endOffset":1877,"count":1},{"startOffset":1890,"endOffset":1921,"count":219}],"isBlockCoverage":true},{"functionName":"default","ranges":[{"startOffset":1963,"endOffset":2694,"count":90},{"startOffset":2005,"endOffset":2015,"count":0},{"startOffset":2024,"endOffset":2034,"count":0},{"startOffset":2043,"endOffset":2053,"count":0},{"startOffset":2062,"endOffset":2071,"count":49},{"startOffset":2080,"endOffset":2094,"count":49},{"startOffset":2103,"endOffset":2117,"count":49},{"startOffset":2126,"endOffset":2136,"count":62},{"startOffset":2145,"endOffset":2155,"count":62},{"startOffset":2164,"endOffset":2178,"count":62},{"startOffset":2187,"endOffset":2239,"count":62},{"startOffset":2249,"endOffset":2329,"count":0},{"startOffset":2339,"endOffset":2408,"count":1},{"startOffset":2418,"endOffset":2458,"count":27},{"startOffset":2458,"endOffset":2507,"count":0},{"startOffset":2507,"endOffset":2693,"count":27}],"isBlockCoverage":true},{"functionName":"comment","ranges":[{"startOffset":2701,"endOffset":2983,"count":0}],"isBlockCoverage":false},{"functionName":"multiLineComment","ranges":[{"startOffset":2990,"endOffset":3233,"count":0}],"isBlockCoverage":false},{"functionName":"multiLineCommentAsterisk","ranges":[{"startOffset":3240,"endOffset":3569,"count":0}],"isBlockCoverage":false},{"functionName":"singleLineComment","ranges":[{"startOffset":3576,"endOffset":3885,"count":0}],"isBlockCoverage":false},{"functionName":"value","ranges":[{"startOffset":3892,"endOffset":5388,"count":9},{"startOffset":3932,"endOffset":3941,"count":2},{"startOffset":3950,"endOffset":4009,"count":5},{"startOffset":4019,"endOffset":4116,"count":0},{"startOffset":4126,"endOffset":4226,"count":0},{"startOffset":4236,"endOffset":4338,"count":0},{"startOffset":4348,"endOffset":4357,"count":0},{"startOffset":4366,"endOffset":4499,"count":0},{"startOffset":4509,"endOffset":4610,"count":0},{"startOffset":4620,"endOffset":4706,"count":0},{"startOffset":4716,"endOffset":4725,"count":0},{"startOffset":4734,"endOffset":4743,"count":0},{"startOffset":4752,"endOffset":4761,"count":0},{"startOffset":4770,"endOffset":4779,"count":0},{"startOffset":4788,"endOffset":4797,"count":0},{"startOffset":4806,"endOffset":4815,"count":0},{"startOffset":4824,"endOffset":4833,"count":0},{"startOffset":4842,"endOffset":4851,"count":0},{"startOffset":4860,"endOffset":4956,"count":0},{"startOffset":4966,"endOffset":5074,"count":0},{"startOffset":5084,"endOffset":5182,"count":0},{"startOffset":5192,"endOffset":5201,"count":4},{"startOffset":5210,"endOffset":5337,"count":4},{"startOffset":5347,"endOffset":5387,"count":0}],"isBlockCoverage":true},{"functionName":"identifierNameStartEscape","ranges":[{"startOffset":5395,"endOffset":5831,"count":0}],"isBlockCoverage":false},{"functionName":"identifierName","ranges":[{"startOffset":5838,"endOffset":6274,"count":0}],"isBlockCoverage":false},{"functionName":"identifierNameEscape","ranges":[{"startOffset":6281,"endOffset":6761,"count":0}],"isBlockCoverage":false},{"functionName":"sign","ranges":[{"startOffset":6768,"endOffset":7538,"count":0}],"isBlockCoverage":false},{"functionName":"zero","ranges":[{"startOffset":7545,"endOffset":7989,"count":0}],"isBlockCoverage":false},{"functionName":"decimalInteger","ranges":[{"startOffset":7996,"endOffset":8431,"count":0}],"isBlockCoverage":false},{"functionName":"decimalPointLeading","ranges":[{"startOffset":8438,"endOffset":8633,"count":0}],"isBlockCoverage":false},{"functionName":"decimalPoint","ranges":[{"startOffset":8640,"endOffset":9009,"count":0}],"isBlockCoverage":false},{"functionName":"decimalFraction","ranges":[{"startOffset":9016,"endOffset":9347,"count":0}],"isBlockCoverage":false},{"functionName":"decimalExponent","ranges":[{"startOffset":9354,"endOffset":9713,"count":0}],"isBlockCoverage":false},{"functionName":"decimalExponentSign","ranges":[{"startOffset":9720,"endOffset":9922,"count":0}],"isBlockCoverage":false},{"functionName":"decimalExponentInteger","ranges":[{"startOffset":9929,"endOffset":10110,"count":0}],"isBlockCoverage":false},{"functionName":"hexadecimal","ranges":[{"startOffset":10117,"endOffset":10310,"count":0}],"isBlockCoverage":false},{"functionName":"hexadecimalInteger","ranges":[{"startOffset":10317,"endOffset":10497,"count":0}],"isBlockCoverage":false},{"functionName":"string","ranges":[{"startOffset":10504,"endOffset":11273,"count":130},{"startOffset":10545,"endOffset":10624,"count":0},{"startOffset":10634,"endOffset":10810,"count":8},{"startOffset":10761,"endOffset":10810,"count":0},{"startOffset":10820,"endOffset":10997,"count":0},{"startOffset":11007,"endOffset":11017,"count":0},{"startOffset":11026,"endOffset":11074,"count":0},{"startOffset":11084,"endOffset":11098,"count":0},{"startOffset":11107,"endOffset":11168,"count":0},{"startOffset":11178,"endOffset":11231,"count":0},{"startOffset":11241,"endOffset":11272,"count":122}],"isBlockCoverage":true},{"functionName":"start","ranges":[{"startOffset":11280,"endOffset":11583,"count":1},{"startOffset":11549,"endOffset":11582,"count":0}],"isBlockCoverage":true},{"functionName":"beforePropertyName","ranges":[{"startOffset":11590,"endOffset":12253,"count":4},{"startOffset":11643,"endOffset":11652,"count":0},{"startOffset":11661,"endOffset":11757,"count":0},{"startOffset":11767,"endOffset":11866,"count":0},{"startOffset":11876,"endOffset":11935,"count":0},{"startOffset":12076,"endOffset":12252,"count":0}],"isBlockCoverage":true},{"functionName":"afterPropertyName","ranges":[{"startOffset":12260,"endOffset":12408,"count":4},{"startOffset":12367,"endOffset":12407,"count":0}],"isBlockCoverage":true},{"functionName":"beforePropertyValue","ranges":[{"startOffset":12415,"endOffset":12472,"count":4}],"isBlockCoverage":true},{"functionName":"afterPropertyValue","ranges":[{"startOffset":12479,"endOffset":12660,"count":4},{"startOffset":12532,"endOffset":12541,"count":1},{"startOffset":12619,"endOffset":12659,"count":0}],"isBlockCoverage":true},{"functionName":"beforeArrayValue","ranges":[{"startOffset":12667,"endOffset":12807,"count":5},{"startOffset":12712,"endOffset":12773,"count":0}],"isBlockCoverage":true},{"functionName":"afterArrayValue","ranges":[{"startOffset":12814,"endOffset":12992,"count":5},{"startOffset":12864,"endOffset":12873,"count":2},{"startOffset":12951,"endOffset":12991,"count":0}],"isBlockCoverage":true},{"functionName":"end","ranges":[{"startOffset":12999,"endOffset":13235,"count":0}],"isBlockCoverage":false},{"functionName":"newToken","ranges":[{"startOffset":13240,"endOffset":13353,"count":28}],"isBlockCoverage":true},{"functionName":"literal","ranges":[{"startOffset":13355,"endOffset":13523,"count":0}],"isBlockCoverage":false},{"functionName":"escape","ranges":[{"startOffset":13525,"endOffset":14575,"count":0}],"isBlockCoverage":false},{"functionName":"hexEscape","ranges":[{"startOffset":14577,"endOffset":14899,"count":0}],"isBlockCoverage":false},{"functionName":"unicodeEscape","ranges":[{"startOffset":14901,"endOffset":15190,"count":0}],"isBlockCoverage":false},{"functionName":"start","ranges":[{"startOffset":15218,"endOffset":15327,"count":1},{"startOffset":15263,"endOffset":15305,"count":0}],"isBlockCoverage":true},{"functionName":"beforePropertyName","ranges":[{"startOffset":15334,"endOffset":15945,"count":4},{"startOffset":15396,"endOffset":15414,"count":0},{"startOffset":15541,"endOffset":15772,"count":0},{"startOffset":15782,"endOffset":15824,"count":0}],"isBlockCoverage":true},{"functionName":"afterPropertyName","ranges":[{"startOffset":15952,"endOffset":16292,"count":4},{"startOffset":16200,"endOffset":16242,"count":0}],"isBlockCoverage":true},{"functionName":"beforePropertyValue","ranges":[{"startOffset":16299,"endOffset":16422,"count":4},{"startOffset":16358,"endOffset":16400,"count":0}],"isBlockCoverage":true},{"functionName":"beforeArrayValue","ranges":[{"startOffset":16429,"endOffset":16663,"count":5},{"startOffset":16485,"endOffset":16527,"count":0},{"startOffset":16569,"endOffset":16591,"count":2},{"startOffset":16593,"endOffset":16641,"count":0}],"isBlockCoverage":true},{"functionName":"afterPropertyValue","ranges":[{"startOffset":16670,"endOffset":17211,"count":4},{"startOffset":16896,"endOffset":16938,"count":0},{"startOffset":16979,"endOffset":17053,"count":1},{"startOffset":17063,"endOffset":17090,"count":3}],"isBlockCoverage":true},{"functionName":"afterArrayValue","ranges":[{"startOffset":17218,"endOffset":17754,"count":5},{"startOffset":17441,"endOffset":17483,"count":0},{"startOffset":17524,"endOffset":17596,"count":2},{"startOffset":17606,"endOffset":17633,"count":3}],"isBlockCoverage":true},{"functionName":"end","ranges":[{"startOffset":17761,"endOffset":17935,"count":1}],"isBlockCoverage":true},{"functionName":"push","ranges":[{"startOffset":17940,"endOffset":19177,"count":10},{"startOffset":18004,"endOffset":18197,"count":6},{"startOffset":18062,"endOffset":18112,"count":3},{"startOffset":18122,"endOffset":18172,"count":3},{"startOffset":18203,"endOffset":18215,"count":0},{"startOffset":18220,"endOffset":18235,"count":0},{"startOffset":18240,"endOffset":18255,"count":0},{"startOffset":18260,"endOffset":18316,"count":4},{"startOffset":18434,"endOffset":18462,"count":1},{"startOffset":18462,"endOffset":18649,"count":9},{"startOffset":18552,"endOffset":18594,"count":5},{"startOffset":18594,"endOffset":18643,"count":4},{"startOffset":18704,"endOffset":18891,"count":6},{"startOffset":18767,"endOffset":18885,"count":3},{"startOffset":18891,"endOffset":19175,"count":4},{"startOffset":18976,"endOffset":19018,"count":0},{"startOffset":19052,"endOffset":19106,"count":3},{"startOffset":19106,"endOffset":19169,"count":1}],"isBlockCoverage":true},{"functionName":"pop","ranges":[{"startOffset":19179,"endOffset":19454,"count":6},{"startOffset":19283,"endOffset":19317,"count":1},{"startOffset":19317,"endOffset":19452,"count":5},{"startOffset":19351,"endOffset":19397,"count":2},{"startOffset":19397,"endOffset":19452,"count":3}],"isBlockCoverage":true},{"functionName":"invalidChar","ranges":[{"startOffset":19732,"endOffset":19964,"count":0}],"isBlockCoverage":false},{"functionName":"invalidEOF","ranges":[{"startOffset":19966,"endOffset":20067,"count":0}],"isBlockCoverage":false},{"functionName":"invalidIdentifier","ranges":[{"startOffset":20421,"endOffset":20553,"count":0}],"isBlockCoverage":false},{"functionName":"separatorChar","ranges":[{"startOffset":20555,"endOffset":20685,"count":0}],"isBlockCoverage":false},{"functionName":"formatChar","ranges":[{"startOffset":20687,"endOffset":21244,"count":0}],"isBlockCoverage":false},{"functionName":"syntaxError","ranges":[{"startOffset":21246,"endOffset":21392,"count":0}],"isBlockCoverage":false}]},{"scriptId":"482","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/json5/lib/util.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":885,"count":1}],"isBlockCoverage":true},{"functionName":"isSpaceSeparator","ranges":[{"startOffset":66,"endOffset":166,"count":27}],"isBlockCoverage":true},{"functionName":"isIdStartChar","ranges":[{"startOffset":173,"endOffset":393,"count":0}],"isBlockCoverage":false},{"functionName":"isIdContinueChar","ranges":[{"startOffset":400,"endOffset":708,"count":0}],"isBlockCoverage":false},{"functionName":"isDigit","ranges":[{"startOffset":715,"endOffset":790,"count":0}],"isBlockCoverage":false},{"functionName":"isHexDigit","ranges":[{"startOffset":797,"endOffset":881,"count":0}],"isBlockCoverage":false}]},{"scriptId":"483","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/json5/lib/unicode.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15815,"count":1}],"isBlockCoverage":true}]},{"scriptId":"484","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/json5/lib/stringify.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6983,"count":1}],"isBlockCoverage":true},{"functionName":"stringify","ranges":[{"startOffset":49,"endOffset":6982,"count":0}],"isBlockCoverage":false}]},{"scriptId":"485","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-class-properties/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":733,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":314,"endOffset":702,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":574,"endOffset":693,"count":0}],"isBlockCoverage":false}]},{"scriptId":"486","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-plugin-utils/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2532,"count":1}],"isBlockCoverage":true},{"functionName":"declare","ranges":[{"startOffset":140,"endOffset":607,"count":68}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":177,"endOffset":604,"count":18},{"startOffset":298,"endOffset":500,"count":54},{"startOffset":344,"endOffset":353,"count":53},{"startOffset":353,"endOffset":405,"count":1},{"startOffset":405,"endOffset":417,"count":0},{"startOffset":418,"endOffset":438,"count":1},{"startOffset":555,"endOffset":568,"count":1},{"startOffset":569,"endOffset":574,"count":17},{"startOffset":584,"endOffset":589,"count":0}],"isBlockCoverage":true},{"functionName":"assertVersion","ranges":[{"startOffset":719,"endOffset":783,"count":0}],"isBlockCoverage":false},{"functionName":"targets","ranges":[{"startOffset":796,"endOffset":828,"count":0}],"isBlockCoverage":false},{"functionName":"assumption","ranges":[{"startOffset":844,"endOffset":858,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":850,"endOffset":858,"count":0}],"isBlockCoverage":false},{"functionName":"copyApiObject","ranges":[{"startOffset":863,"endOffset":1220,"count":1},{"startOffset":1065,"endOffset":1092,"count":0},{"startOffset":1093,"endOffset":1119,"count":0},{"startOffset":1120,"endOffset":1143,"count":0}],"isBlockCoverage":true},{"functionName":"has","ranges":[{"startOffset":1222,"endOffset":1305,"count":1}],"isBlockCoverage":true},{"functionName":"throwVersionError","ranges":[{"startOffset":1307,"endOffset":2532,"count":0}],"isBlockCoverage":false}]},{"scriptId":"487","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-class-features-plugin/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7861,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":152,"endOffset":200,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":343,"endOffset":396,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":485,"endOffset":541,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":978,"endOffset":1000,"count":3}],"isBlockCoverage":true},{"functionName":"createClassFeaturePlugin","ranges":[{"startOffset":1066,"endOffset":7861,"count":1},{"startOffset":1500,"endOffset":2278,"count":0}],"isBlockCoverage":true},{"functionName":"assumption","ranges":[{"startOffset":1177,"endOffset":1189,"count":0}],"isBlockCoverage":false},{"functionName":"pre","ranges":[{"startOffset":2343,"endOffset":2535,"count":0}],"isBlockCoverage":false},{"functionName":"Class","ranges":[{"startOffset":2559,"endOffset":7406,"count":0}],"isBlockCoverage":false},{"functionName":"ExportDefaultDeclaration","ranges":[{"startOffset":7415,"endOffset":7847,"count":0}],"isBlockCoverage":false}]},{"scriptId":"488","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-function-name/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4537,"count":1}],"isBlockCoverage":true},{"functionName":"getFunctionArity","ranges":[{"startOffset":508,"endOffset":695,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier|BindingIdentifier","ranges":[{"startOffset":1363,"endOffset":1638,"count":0}],"isBlockCoverage":false},{"functionName":"getNameFromLiteralId","ranges":[{"startOffset":1644,"endOffset":1980,"count":0}],"isBlockCoverage":false},{"functionName":"wrap","ranges":[{"startOffset":1982,"endOffset":2822,"count":0}],"isBlockCoverage":false},{"functionName":"visit","ranges":[{"startOffset":2824,"endOffset":3292,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":3294,"endOffset":4537,"count":0}],"isBlockCoverage":false}]},{"scriptId":"489","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":903,"count":1}],"isBlockCoverage":true}]},{"scriptId":"490","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/formatters.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1579,"count":1}],"isBlockCoverage":true},{"functionName":"makeStatementFormatter","ranges":[{"startOffset":265,"endOffset":466,"count":3}],"isBlockCoverage":true},{"functionName":"code","ranges":[{"startOffset":324,"endOffset":363,"count":29}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":379,"endOffset":387,"count":4}],"isBlockCoverage":true},{"functionName":"unwrap","ranges":[{"startOffset":401,"endOffset":459,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":505,"endOffset":593,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":661,"endOffset":673,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":750,"endOffset":955,"count":0}],"isBlockCoverage":false},{"functionName":"code","ranges":[{"startOffset":1018,"endOffset":1039,"count":4}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":1053,"endOffset":1286,"count":2},{"startOffset":1099,"endOffset":1173,"count":0},{"startOffset":1219,"endOffset":1282,"count":0}],"isBlockCoverage":true},{"functionName":"unwrap","ranges":[{"startOffset":1298,"endOffset":1424,"count":2}],"isBlockCoverage":true},{"functionName":"code","ranges":[{"startOffset":1487,"endOffset":1497,"count":0}],"isBlockCoverage":false},{"functionName":"validate","ranges":[{"startOffset":1511,"endOffset":1519,"count":0}],"isBlockCoverage":false},{"functionName":"unwrap","ranges":[{"startOffset":1531,"endOffset":1549,"count":0}],"isBlockCoverage":false}]},{"scriptId":"491","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/builder.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2434,"count":1}],"isBlockCoverage":true},{"functionName":"createTemplateBuilder","ranges":[{"startOffset":315,"endOffset":2077,"count":5}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":544,"endOffset":1377,"count":33},{"startOffset":597,"endOffset":808,"count":27},{"startOffset":626,"endOffset":670,"count":0},{"startOffset":808,"endOffset":1308,"count":6},{"startOffset":1078,"endOffset":1308,"count":0},{"startOffset":1308,"endOffset":1376,"count":0}],"isBlockCoverage":true},{"functionName":"ast","ranges":[{"startOffset":1390,"endOffset":2069,"count":0}],"isBlockCoverage":false},{"functionName":"extendedTrace","ranges":[{"startOffset":2079,"endOffset":2434,"count":33}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2288,"endOffset":2431,"count":0}],"isBlockCoverage":false}]},{"scriptId":"492","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3070,"count":1}],"isBlockCoverage":true},{"functionName":"_objectWithoutPropertiesLoose","ranges":[{"startOffset":299,"endOffset":606,"count":33},{"startOffset":378,"endOffset":388,"count":0},{"startOffset":496,"endOffset":589,"count":1},{"startOffset":560,"endOffset":589,"count":0}],"isBlockCoverage":true},{"functionName":"merge","ranges":[{"startOffset":608,"endOffset":1009,"count":27}],"isBlockCoverage":true},{"functionName":"validate","ranges":[{"startOffset":1011,"endOffset":2656,"count":33},{"startOffset":1056,"endOffset":1083,"count":1},{"startOffset":1085,"endOffset":1140,"count":0},{"startOffset":1162,"endOffset":1167,"count":32},{"startOffset":1390,"endOffset":1431,"count":0},{"startOffset":1433,"endOffset":1520,"count":0},{"startOffset":1555,"endOffset":1597,"count":1},{"startOffset":1598,"endOffset":1629,"count":1},{"startOffset":1631,"endOffset":1726,"count":0},{"startOffset":1759,"endOffset":1799,"count":0},{"startOffset":1801,"endOffset":1888,"count":0},{"startOffset":1926,"endOffset":1971,"count":0},{"startOffset":1973,"endOffset":2065,"count":0},{"startOffset":2104,"endOffset":2167,"count":0},{"startOffset":2169,"endOffset":2307,"count":0},{"startOffset":2444,"endOffset":2455,"count":32},{"startOffset":2456,"endOffset":2476,"count":1},{"startOffset":2537,"endOffset":2555,"count":0},{"startOffset":2626,"endOffset":2649,"count":0}],"isBlockCoverage":true},{"functionName":"normalizeReplacements","ranges":[{"startOffset":2658,"endOffset":3070,"count":0}],"isBlockCoverage":false}]},{"scriptId":"493","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/string.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":565,"count":1}],"isBlockCoverage":true},{"functionName":"stringTemplate","ranges":[{"startOffset":227,"endOffset":565,"count":27}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":332,"endOffset":562,"count":0}],"isBlockCoverage":false}]},{"scriptId":"494","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4530,"count":1}],"isBlockCoverage":true},{"functionName":"parseAndBuildMetadata","ranges":[{"startOffset":495,"endOffset":1291,"count":6},{"startOffset":1276,"endOffset":1287,"count":0}],"isBlockCoverage":true},{"functionName":"placeholderVisitorHandler","ranges":[{"startOffset":1293,"endOffset":3457,"count":165},{"startOffset":1424,"endOffset":1677,"count":0},{"startOffset":1753,"endOffset":1770,"count":0},{"startOffset":1799,"endOffset":1823,"count":111},{"startOffset":1825,"endOffset":1888,"count":54},{"startOffset":1888,"endOffset":2008,"count":111},{"startOffset":1921,"endOffset":1985,"count":5},{"startOffset":1985,"endOffset":2008,"count":106},{"startOffset":2008,"endOffset":2041,"count":59},{"startOffset":2041,"endOffset":2116,"count":0},{"startOffset":2118,"endOffset":2256,"count":0},{"startOffset":2256,"endOffset":2380,"count":59},{"startOffset":2381,"endOffset":2482,"count":40},{"startOffset":2484,"endOffset":2501,"count":40},{"startOffset":2501,"endOffset":2652,"count":19},{"startOffset":2652,"endOffset":2715,"count":16},{"startOffset":2717,"endOffset":2743,"count":3},{"startOffset":2743,"endOffset":3165,"count":16},{"startOffset":2777,"endOffset":2799,"count":0},{"startOffset":2828,"endOffset":2850,"count":4},{"startOffset":2851,"endOffset":2892,"count":15},{"startOffset":2873,"endOffset":2892,"count":1},{"startOffset":2894,"endOffset":2919,"count":1},{"startOffset":2919,"endOffset":3165,"count":15},{"startOffset":2959,"endOffset":2982,"count":0},{"startOffset":2984,"endOffset":3053,"count":0},{"startOffset":3081,"endOffset":3103,"count":0},{"startOffset":3105,"endOffset":3134,"count":0},{"startOffset":3165,"endOffset":3260,"count":19},{"startOffset":3261,"endOffset":3278,"count":0}],"isBlockCoverage":true},{"functionName":"resolve","ranges":[{"startOffset":3335,"endOffset":3374,"count":0}],"isBlockCoverage":false},{"functionName":"resolveAncestors","ranges":[{"startOffset":3459,"endOffset":3867,"count":0}],"isBlockCoverage":false},{"functionName":"parseWithCodeFrame","ranges":[{"startOffset":3869,"endOffset":4530,"count":6},{"startOffset":4303,"endOffset":4528,"count":0}],"isBlockCoverage":true}]},{"scriptId":"495","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":473144,"count":1}],"isBlockCoverage":true},{"functionName":"_objectWithoutPropertiesLoose","ranges":[{"startOffset":79,"endOffset":414,"count":275},{"startOffset":160,"endOffset":170,"count":0},{"startOffset":287,"endOffset":394,"count":953},{"startOffset":350,"endOffset":359,"count":275},{"startOffset":359,"endOffset":394,"count":678}],"isBlockCoverage":true},{"functionName":"Position","ranges":[{"startOffset":435,"endOffset":614,"count":494}],"isBlockCoverage":true},{"functionName":"SourceLocation","ranges":[{"startOffset":643,"endOffset":826,"count":237}],"isBlockCoverage":true},{"functionName":"createPositionWithColumnOffset","ranges":[{"startOffset":830,"endOffset":1029,"count":0}],"isBlockCoverage":false},{"functionName":"reflect","ranges":[{"startOffset":1203,"endOffset":1423,"count":0}],"isBlockCoverage":false},{"functionName":"instantiate","ranges":[{"startOffset":1446,"endOffset":2007,"count":0}],"isBlockCoverage":false},{"functionName":"ModuleErrors","ranges":[{"startOffset":2030,"endOffset":2333,"count":1}],"isBlockCoverage":true},{"functionName":"toNodeDescription","ranges":[{"startOffset":3129,"endOffset":3259,"count":0}],"isBlockCoverage":false},{"functionName":"StandardErrors","ranges":[{"startOffset":3284,"endOffset":16883,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3317,"endOffset":3374,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4737,"endOffset":4802,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5771,"endOffset":5880,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6156,"endOffset":6356,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6489,"endOffset":6618,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6914,"endOffset":7000,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7196,"endOffset":7334,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7458,"endOffset":7590,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8085,"endOffset":8142,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8315,"endOffset":8388,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8414,"endOffset":8483,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8502,"endOffset":8585,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8611,"endOffset":8702,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8871,"endOffset":8936,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9056,"endOffset":9135,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9402,"endOffset":9470,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9921,"endOffset":10076,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10104,"endOffset":10279,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10699,"endOffset":10779,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10820,"endOffset":10948,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10978,"endOffset":11042,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":12011,"endOffset":12181,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":12214,"endOffset":12288,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":14460,"endOffset":14517,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":14989,"endOffset":15062,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15166,"endOffset":15309,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15822,"endOffset":15954,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16538,"endOffset":16627,"count":0}],"isBlockCoverage":false},{"functionName":"StrictModeErrors","ranges":[{"startOffset":16911,"endOffset":17509,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17006,"endOffset":17084,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":17119,"endOffset":17188,"count":0}],"isBlockCoverage":false},{"functionName":"PipelineOperatorErrors","ranges":[{"startOffset":17693,"endOffset":19333,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18143,"endOffset":18344,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18505,"endOffset":18645,"count":0}],"isBlockCoverage":false},{"functionName":"toParseErrorConstructor","ranges":[{"startOffset":19373,"endOffset":20571,"count":275}],"isBlockCoverage":true},{"functionName":"constructor","ranges":[{"startOffset":19527,"endOffset":20568,"count":0}],"isBlockCoverage":false},{"functionName":"toParseErrorCredentials","ranges":[{"startOffset":20573,"endOffset":20788,"count":275},{"startOffset":20720,"endOffset":20746,"count":211},{"startOffset":20747,"endOffset":20767,"count":64}],"isBlockCoverage":true},{"functionName":"Object.assign.toMessage","ranges":[{"startOffset":20722,"endOffset":20746,"count":0}],"isBlockCoverage":false},{"functionName":"ParseErrorEnum","ranges":[{"startOffset":20789,"endOffset":21406,"count":13},{"startOffset":20870,"endOffset":20973,"count":5},{"startOffset":20973,"endOffset":21137,"count":8},{"startOffset":21137,"endOffset":21370,"count":275},{"startOffset":21298,"endOffset":21326,"count":128},{"startOffset":21327,"endOffset":21331,"count":147},{"startOffset":21370,"endOffset":21405,"count":8}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20883,"endOffset":20968,"count":5}],"isBlockCoverage":true},{"functionName":"toUnenumerable","ranges":[{"startOffset":21657,"endOffset":21748,"count":0}],"isBlockCoverage":false},{"functionName":"toESTreeLocation","ranges":[{"startOffset":21751,"endOffset":21885,"count":0}],"isBlockCoverage":false},{"functionName":"estree","ranges":[{"startOffset":21901,"endOffset":31542,"count":0}],"isBlockCoverage":false},{"functionName":"TokContext","ranges":[{"startOffset":31567,"endOffset":31730,"count":5}],"isBlockCoverage":true},{"functionName":"ExportedTokenType","ranges":[{"startOffset":32117,"endOffset":32864,"count":141},{"startOffset":32795,"endOffset":32807,"count":21},{"startOffset":32808,"endOffset":32814,"count":120}],"isBlockCoverage":true},{"functionName":"createKeyword","ranges":[{"startOffset":32899,"endOffset":33062,"count":35}],"isBlockCoverage":true},{"functionName":"createBinop","ranges":[{"startOffset":33064,"endOffset":33162,"count":15}],"isBlockCoverage":true},{"functionName":"createToken","ranges":[{"startOffset":33347,"endOffset":33995,"count":106},{"startOffset":33580,"endOffset":33596,"count":21},{"startOffset":33597,"endOffset":33601,"count":85},{"startOffset":33679,"endOffset":33700,"count":54},{"startOffset":33701,"endOffset":33708,"count":52},{"startOffset":33786,"endOffset":33807,"count":41},{"startOffset":33808,"endOffset":33815,"count":65},{"startOffset":33882,"endOffset":33899,"count":8},{"startOffset":33900,"endOffset":33907,"count":98}],"isBlockCoverage":true},{"functionName":"createKeywordLike","ranges":[{"startOffset":33997,"endOffset":34707,"count":35},{"startOffset":34283,"endOffset":34300,"count":0},{"startOffset":34384,"endOffset":34406,"count":0},{"startOffset":34516,"endOffset":34523,"count":0},{"startOffset":34591,"endOffset":34609,"count":0}],"isBlockCoverage":true},{"functionName":"tokenIsIdentifier","ranges":[{"startOffset":42418,"endOffset":42493,"count":91},{"startOffset":42475,"endOffset":42490,"count":70}],"isBlockCoverage":true},{"functionName":"tokenKeywordOrIdentifierIsKeyword","ranges":[{"startOffset":42494,"endOffset":42569,"count":54}],"isBlockCoverage":true},{"functionName":"tokenIsKeywordOrIdentifier","ranges":[{"startOffset":42570,"endOffset":42654,"count":56}],"isBlockCoverage":true},{"functionName":"tokenIsLiteralPropertyName","ranges":[{"startOffset":42655,"endOffset":42739,"count":2},{"startOffset":42721,"endOffset":42736,"count":0}],"isBlockCoverage":true},{"functionName":"tokenComesBeforeExpression","ranges":[{"startOffset":42740,"endOffset":42820,"count":0}],"isBlockCoverage":false},{"functionName":"tokenCanStartExpression","ranges":[{"startOffset":42821,"endOffset":42898,"count":0}],"isBlockCoverage":false},{"functionName":"tokenIsAssignment","ranges":[{"startOffset":42899,"endOffset":42973,"count":50},{"startOffset":42956,"endOffset":42970,"count":8}],"isBlockCoverage":true},{"functionName":"tokenIsFlowInterfaceOrTypeOrOpaque","ranges":[{"startOffset":42974,"endOffset":43067,"count":0}],"isBlockCoverage":false},{"functionName":"tokenIsLoop","ranges":[{"startOffset":43068,"endOffset":43136,"count":0}],"isBlockCoverage":false},{"functionName":"tokenIsKeyword","ranges":[{"startOffset":43137,"endOffset":43208,"count":223},{"startOffset":43191,"endOffset":43205,"count":98}],"isBlockCoverage":true},{"functionName":"tokenIsOperator","ranges":[{"startOffset":43209,"endOffset":43281,"count":56},{"startOffset":43264,"endOffset":43278,"count":6}],"isBlockCoverage":true},{"functionName":"tokenIsPostfix","ranges":[{"startOffset":43282,"endOffset":43339,"count":53}],"isBlockCoverage":true},{"functionName":"tokenIsPrefix","ranges":[{"startOffset":43340,"endOffset":43404,"count":56}],"isBlockCoverage":true},{"functionName":"tokenIsTSTypeOperator","ranges":[{"startOffset":43405,"endOffset":43485,"count":0}],"isBlockCoverage":false},{"functionName":"tokenIsTSDeclarationStart","ranges":[{"startOffset":43486,"endOffset":43570,"count":0}],"isBlockCoverage":false},{"functionName":"tokenLabelName","ranges":[{"startOffset":43571,"endOffset":43634,"count":34}],"isBlockCoverage":true},{"functionName":"tokenOperatorPrecedence","ranges":[{"startOffset":43635,"endOffset":43707,"count":4}],"isBlockCoverage":true},{"functionName":"tokenIsBinaryOperator","ranges":[{"startOffset":43708,"endOffset":43785,"count":0}],"isBlockCoverage":false},{"functionName":"tokenIsRightAssociative","ranges":[{"startOffset":43786,"endOffset":43852,"count":3}],"isBlockCoverage":true},{"functionName":"tokenIsTemplate","ranges":[{"startOffset":43853,"endOffset":43925,"count":77},{"startOffset":43908,"endOffset":43922,"count":11}],"isBlockCoverage":true},{"functionName":"getExportedToken","ranges":[{"startOffset":43926,"endOffset":43990,"count":141}],"isBlockCoverage":true},{"functionName":"tokenTypes.<computed>.updateContext","ranges":[{"startOffset":44025,"endOffset":44060,"count":0}],"isBlockCoverage":false},{"functionName":"tokenTypes.<computed>.updateContext.tokenTypes.<computed>.updateContext.tokenTypes.<computed>.updateContext","ranges":[{"startOffset":44156,"endOffset":44203,"count":0}],"isBlockCoverage":false},{"functionName":"tokenTypes.<computed>.updateContext","ranges":[{"startOffset":44239,"endOffset":44389,"count":0}],"isBlockCoverage":false},{"functionName":"tokenTypes.<computed>.updateContext","ranges":[{"startOffset":44426,"endOffset":44488,"count":0}],"isBlockCoverage":false},{"functionName":"isInAstralSet","ranges":[{"startOffset":54677,"endOffset":54928,"count":0}],"isBlockCoverage":false},{"functionName":"isIdentifierStart","ranges":[{"startOffset":54930,"endOffset":55275,"count":87},{"startOffset":54982,"endOffset":55001,"count":0},{"startOffset":55020,"endOffset":55032,"count":32},{"startOffset":55032,"endOffset":55050,"count":55},{"startOffset":55050,"endOffset":55069,"count":0},{"startOffset":55069,"endOffset":55101,"count":55},{"startOffset":55101,"endOffset":55274,"count":0}],"isBlockCoverage":true},{"functionName":"isIdentifierChar","ranges":[{"startOffset":55276,"endOffset":55722,"count":640},{"startOffset":55327,"endOffset":55346,"count":73},{"startOffset":55346,"endOffset":55364,"count":567},{"startOffset":55364,"endOffset":55376,"count":0},{"startOffset":55376,"endOffset":55394,"count":567},{"startOffset":55394,"endOffset":55407,"count":12},{"startOffset":55407,"endOffset":55426,"count":555},{"startOffset":55426,"endOffset":55438,"count":162},{"startOffset":55438,"endOffset":55456,"count":393},{"startOffset":55456,"endOffset":55475,"count":13},{"startOffset":55475,"endOffset":55507,"count":380},{"startOffset":55507,"endOffset":55719,"count":0}],"isBlockCoverage":true},{"functionName":"isReservedWord","ranges":[{"startOffset":56408,"endOffset":56509,"count":2}],"isBlockCoverage":true},{"functionName":"isStrictReservedWord","ranges":[{"startOffset":56510,"endOffset":56636,"count":2}],"isBlockCoverage":true},{"functionName":"isStrictBindOnlyReservedWord","ranges":[{"startOffset":56637,"endOffset":56731,"count":9}],"isBlockCoverage":true},{"functionName":"isStrictBindReservedWord","ranges":[{"startOffset":56732,"endOffset":56870,"count":0}],"isBlockCoverage":false},{"functionName":"isKeyword","ranges":[{"startOffset":56871,"endOffset":56928,"count":0}],"isBlockCoverage":false},{"functionName":"isIteratorStart","ranges":[{"startOffset":56930,"endOffset":57048,"count":0}],"isBlockCoverage":false},{"functionName":"canBeReservedWord","ranges":[{"startOffset":57541,"endOffset":57617,"count":30}],"isBlockCoverage":true},{"functionName":"BaseParser","ranges":[{"startOffset":59972,"endOffset":60073,"count":6}],"isBlockCoverage":true},{"functionName":"hasPlugin","ranges":[{"startOffset":60077,"endOffset":60610,"count":27},{"startOffset":60145,"endOffset":60197,"count":21},{"startOffset":60197,"endOffset":60606,"count":6},{"startOffset":60332,"endOffset":60606,"count":0}],"isBlockCoverage":true},{"functionName":"getPluginOption","ranges":[{"startOffset":60614,"endOffset":60779,"count":0}],"isBlockCoverage":false},{"functionName":"setTrailingComments","ranges":[{"startOffset":60784,"endOffset":60978,"count":3},{"startOffset":60917,"endOffset":60976,"count":0}],"isBlockCoverage":true},{"functionName":"setLeadingComments","ranges":[{"startOffset":60980,"endOffset":61170,"count":9},{"startOffset":61110,"endOffset":61168,"count":0}],"isBlockCoverage":true},{"functionName":"setInnerComments","ranges":[{"startOffset":61172,"endOffset":61354,"count":0}],"isBlockCoverage":false},{"functionName":"adjustInnerComments","ranges":[{"startOffset":61356,"endOffset":61739,"count":0}],"isBlockCoverage":false},{"functionName":"addComment","ranges":[{"startOffset":61785,"endOffset":61910,"count":15},{"startOffset":61830,"endOffset":61867,"count":0}],"isBlockCoverage":true},{"functionName":"processComment","ranges":[{"startOffset":61914,"endOffset":62714,"count":165},{"startOffset":62074,"endOffset":62081,"count":20},{"startOffset":62081,"endOffset":62204,"count":145},{"startOffset":62204,"endOffset":62262,"count":6},{"startOffset":62262,"endOffset":62338,"count":145},{"startOffset":62338,"endOffset":62710,"count":150},{"startOffset":62456,"endOffset":62582,"count":9},{"startOffset":62582,"endOffset":62704,"count":141},{"startOffset":62628,"endOffset":62680,"count":14}],"isBlockCoverage":true},{"functionName":"finalizeComment","ranges":[{"startOffset":62718,"endOffset":64471,"count":9},{"startOffset":62833,"endOffset":62867,"count":6},{"startOffset":62913,"endOffset":62984,"count":3},{"startOffset":63106,"endOffset":64467,"count":0}],"isBlockCoverage":true},{"functionName":"finalizeRemainingComments","ranges":[{"startOffset":64475,"endOffset":64703,"count":0}],"isBlockCoverage":false},{"functionName":"resetPreviousNodeTrailingComments","ranges":[{"startOffset":64707,"endOffset":65013,"count":0}],"isBlockCoverage":false},{"functionName":"takeSurroundingComments","ranges":[{"startOffset":65017,"endOffset":65618,"count":2},{"startOffset":65205,"endOffset":65614,"count":0}],"isBlockCoverage":true},{"functionName":"isNewLine","ranges":[{"startOffset":65721,"endOffset":65880,"count":646},{"startOffset":65770,"endOffset":65778,"count":11},{"startOffset":65783,"endOffset":65791,"count":11},{"startOffset":65796,"endOffset":65806,"count":11},{"startOffset":65811,"endOffset":65840,"count":11},{"startOffset":65846,"endOffset":65874,"count":635}],"isBlockCoverage":true},{"functionName":"isWhitespace","ranges":[{"startOffset":66167,"endOffset":66621,"count":217},{"startOffset":66219,"endOffset":66231,"count":0},{"startOffset":66236,"endOffset":66248,"count":0},{"startOffset":66253,"endOffset":66265,"count":0},{"startOffset":66270,"endOffset":66278,"count":0},{"startOffset":66283,"endOffset":66292,"count":0},{"startOffset":66297,"endOffset":66307,"count":0},{"startOffset":66312,"endOffset":66324,"count":0},{"startOffset":66329,"endOffset":66341,"count":0},{"startOffset":66346,"endOffset":66358,"count":0},{"startOffset":66363,"endOffset":66375,"count":0},{"startOffset":66380,"endOffset":66392,"count":0},{"startOffset":66397,"endOffset":66409,"count":0},{"startOffset":66414,"endOffset":66426,"count":0},{"startOffset":66431,"endOffset":66443,"count":0},{"startOffset":66448,"endOffset":66460,"count":0},{"startOffset":66465,"endOffset":66477,"count":0},{"startOffset":66482,"endOffset":66494,"count":0},{"startOffset":66499,"endOffset":66511,"count":0},{"startOffset":66516,"endOffset":66528,"count":0},{"startOffset":66533,"endOffset":66545,"count":0},{"startOffset":66550,"endOffset":66581,"count":0}],"isBlockCoverage":true},{"functionName":"State","ranges":[{"startOffset":66639,"endOffset":67797,"count":6}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":67801,"endOffset":68124,"count":6},{"startOffset":67917,"endOffset":67924,"count":0},{"startOffset":67947,"endOffset":67953,"count":0}],"isBlockCoverage":true},{"functionName":"curPosition","ranges":[{"startOffset":68128,"endOffset":68223,"count":488}],"isBlockCoverage":true},{"functionName":"clone","ranges":[{"startOffset":68227,"endOffset":68566,"count":0}],"isBlockCoverage":false},{"functionName":"isDigit","ranges":[{"startOffset":68640,"endOffset":68701,"count":0}],"isBlockCoverage":false},{"functionName":"bin","ranges":[{"startOffset":68969,"endOffset":68997,"count":0}],"isBlockCoverage":false},{"functionName":"oct","ranges":[{"startOffset":69006,"endOffset":69032,"count":0}],"isBlockCoverage":false},{"functionName":"dec","ranges":[{"startOffset":69041,"endOffset":69067,"count":0}],"isBlockCoverage":false},{"functionName":"hex","ranges":[{"startOffset":69076,"endOffset":69151,"count":0}],"isBlockCoverage":false},{"functionName":"Token","ranges":[{"startOffset":69171,"endOffset":69374,"count":0}],"isBlockCoverage":false},{"functionName":"Tokenizer","ranges":[{"startOffset":69421,"endOffset":69666,"count":6}],"isBlockCoverage":true},{"functionName":"pushToken","ranges":[{"startOffset":69670,"endOffset":69802,"count":0}],"isBlockCoverage":false},{"functionName":"next","ranges":[{"startOffset":69806,"endOffset":70108,"count":223},{"startOffset":69877,"endOffset":69929,"count":0}],"isBlockCoverage":true},{"functionName":"eat","ranges":[{"startOffset":70112,"endOffset":70232,"count":305},{"startOffset":70150,"endOffset":70195,"count":89},{"startOffset":70195,"endOffset":70228,"count":216}],"isBlockCoverage":true},{"functionName":"match","ranges":[{"startOffset":70236,"endOffset":70290,"count":883}],"isBlockCoverage":true},{"functionName":"createLookaheadState","ranges":[{"startOffset":70294,"endOffset":70699,"count":0}],"isBlockCoverage":false},{"functionName":"lookahead","ranges":[{"startOffset":70703,"endOffset":70946,"count":0}],"isBlockCoverage":false},{"functionName":"nextTokenStart","ranges":[{"startOffset":70950,"endOffset":71025,"count":2}],"isBlockCoverage":true},{"functionName":"nextTokenStartSince","ranges":[{"startOffset":71029,"endOffset":71172,"count":2},{"startOffset":71162,"endOffset":71167,"count":0}],"isBlockCoverage":true},{"functionName":"lookaheadCharCode","ranges":[{"startOffset":71176,"endOffset":71258,"count":2}],"isBlockCoverage":true},{"functionName":"codePointAtPos","ranges":[{"startOffset":71262,"endOffset":71577,"count":857},{"startOffset":71359,"endOffset":71387,"count":0},{"startOffset":71389,"endOffset":71557,"count":0}],"isBlockCoverage":true},{"functionName":"setStrict","ranges":[{"startOffset":71581,"endOffset":71811,"count":0}],"isBlockCoverage":false},{"functionName":"curContext","ranges":[{"startOffset":71815,"endOffset":71895,"count":0}],"isBlockCoverage":false},{"functionName":"nextToken","ranges":[{"startOffset":71899,"endOffset":72208,"count":229},{"startOffset":72089,"endOffset":72139,"count":12},{"startOffset":72139,"endOffset":72207,"count":217}],"isBlockCoverage":true},{"functionName":"skipBlockComment","ranges":[{"startOffset":72212,"endOffset":73074,"count":4},{"startOffset":72423,"endOffset":72530,"count":0},{"startOffset":72672,"endOffset":72758,"count":0},{"startOffset":72786,"endOffset":72793,"count":0},{"startOffset":73026,"endOffset":73050,"count":0}],"isBlockCoverage":true},{"functionName":"skipLineComment","ranges":[{"startOffset":73078,"endOffset":73823,"count":11},{"startOffset":73357,"endOffset":73390,"count":592},{"startOffset":73392,"endOffset":73453,"count":592},{"startOffset":73487,"endOffset":73494,"count":0},{"startOffset":73775,"endOffset":73799,"count":0}],"isBlockCoverage":true},{"functionName":"skipSpace","ranges":[{"startOffset":73827,"endOffset":76757,"count":229},{"startOffset":73953,"endOffset":76441,"count":597},{"startOffset":74040,"endOffset":74048,"count":311},{"startOffset":74057,"endOffset":74066,"count":311},{"startOffset":74075,"endOffset":74127,"count":311},{"startOffset":74137,"endOffset":74253,"count":0},{"startOffset":74263,"endOffset":74271,"count":54},{"startOffset":74280,"endOffset":74290,"count":54},{"startOffset":74299,"endOffset":74435,"count":54},{"startOffset":74445,"endOffset":75227,"count":15},{"startOffset":74529,"endOffset":74832,"count":4},{"startOffset":74846,"endOffset":75149,"count":11},{"startOffset":75163,"endOffset":75197,"count":0},{"startOffset":75237,"endOffset":76426,"count":217},{"startOffset":75278,"endOffset":75321,"count":0},{"startOffset":75341,"endOffset":75358,"count":0},{"startOffset":75360,"endOffset":75861,"count":0},{"startOffset":75881,"endOffset":75898,"count":0},{"startOffset":75900,"endOffset":76383,"count":0},{"startOffset":76472,"endOffset":76753,"count":9}],"isBlockCoverage":true},{"functionName":"finishToken","ranges":[{"startOffset":76761,"endOffset":77042,"count":229}],"isBlockCoverage":true},{"functionName":"replaceToken","ranges":[{"startOffset":77046,"endOffset":77124,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_numberSign","ranges":[{"startOffset":77128,"endOffset":78281,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_dot","ranges":[{"startOffset":78285,"endOffset":78654,"count":13},{"startOffset":78398,"endOffset":78448,"count":0},{"startOffset":78470,"endOffset":78521,"count":0},{"startOffset":78523,"endOffset":78585,"count":0}],"isBlockCoverage":true},{"functionName":"readToken_slash","ranges":[{"startOffset":78658,"endOffset":78840,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_interpreter","ranges":[{"startOffset":78844,"endOffset":79318,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_mult_modulo","ranges":[{"startOffset":79322,"endOffset":79739,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_pipe_amp","ranges":[{"startOffset":79743,"endOffset":81008,"count":1},{"startOffset":79916,"endOffset":79955,"count":0},{"startOffset":80003,"endOffset":80007,"count":0},{"startOffset":80041,"endOffset":80994,"count":0},{"startOffset":80995,"endOffset":80999,"count":0}],"isBlockCoverage":true},{"functionName":"readToken_caret","ranges":[{"startOffset":81012,"endOffset":81510,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_atSign","ranges":[{"startOffset":81514,"endOffset":81793,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_plus_min","ranges":[{"startOffset":81797,"endOffset":82060,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_lt","ranges":[{"startOffset":82064,"endOffset":82452,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_gt","ranges":[{"startOffset":82456,"endOffset":82924,"count":0}],"isBlockCoverage":false},{"functionName":"readToken_eq_excl","ranges":[{"startOffset":82928,"endOffset":83304,"count":11},{"startOffset":83036,"endOffset":83140,"count":2},{"startOffset":83115,"endOffset":83118,"count":0},{"startOffset":83140,"endOffset":83162,"count":9},{"startOffset":83162,"endOffset":83176,"count":8},{"startOffset":83178,"endOffset":83254,"count":0},{"startOffset":83254,"endOffset":83286,"count":9},{"startOffset":83286,"endOffset":83290,"count":8},{"startOffset":83291,"endOffset":83295,"count":1}],"isBlockCoverage":true},{"functionName":"readToken_question","ranges":[{"startOffset":83308,"endOffset":83777,"count":0}],"isBlockCoverage":false},{"functionName":"getTokenFromCode","ranges":[{"startOffset":83781,"endOffset":87661,"count":217},{"startOffset":83832,"endOffset":83886,"count":13},{"startOffset":83894,"endOffset":83974,"count":21},{"startOffset":83982,"endOffset":84062,"count":21},{"startOffset":84070,"endOffset":84150,"count":19},{"startOffset":84158,"endOffset":84238,"count":11},{"startOffset":84246,"endOffset":84754,"count":3},{"startOffset":84300,"endOffset":84352,"count":0},{"startOffset":84354,"endOffset":84661,"count":0},{"startOffset":84762,"endOffset":84841,"count":3},{"startOffset":84849,"endOffset":85359,"count":10},{"startOffset":84904,"endOffset":84956,"count":0},{"startOffset":84958,"endOffset":85266,"count":0},{"startOffset":85367,"endOffset":85447,"count":10},{"startOffset":85455,"endOffset":85697,"count":2},{"startOffset":85507,"endOffset":85558,"count":0},{"startOffset":85560,"endOffset":85603,"count":0},{"startOffset":85705,"endOffset":85764,"count":0},{"startOffset":85772,"endOffset":85830,"count":0},{"startOffset":85838,"endOffset":86277,"count":0},{"startOffset":86285,"endOffset":86293,"count":0},{"startOffset":86300,"endOffset":86308,"count":0},{"startOffset":86315,"endOffset":86323,"count":0},{"startOffset":86330,"endOffset":86338,"count":0},{"startOffset":86345,"endOffset":86353,"count":0},{"startOffset":86360,"endOffset":86368,"count":0},{"startOffset":86375,"endOffset":86383,"count":0},{"startOffset":86390,"endOffset":86398,"count":0},{"startOffset":86405,"endOffset":86461,"count":0},{"startOffset":86469,"endOffset":86477,"count":5},{"startOffset":86484,"endOffset":86539,"count":5},{"startOffset":86547,"endOffset":86603,"count":0},{"startOffset":86611,"endOffset":86619,"count":0},{"startOffset":86626,"endOffset":86692,"count":0},{"startOffset":86700,"endOffset":86709,"count":1},{"startOffset":86716,"endOffset":86779,"count":1},{"startOffset":86787,"endOffset":86843,"count":0},{"startOffset":86851,"endOffset":86859,"count":0},{"startOffset":86866,"endOffset":86929,"count":0},{"startOffset":86937,"endOffset":86990,"count":0},{"startOffset":86998,"endOffset":87051,"count":0},{"startOffset":87059,"endOffset":87067,"count":10},{"startOffset":87074,"endOffset":87136,"count":11},{"startOffset":87144,"endOffset":87199,"count":0},{"startOffset":87207,"endOffset":87264,"count":0},{"startOffset":87272,"endOffset":87333,"count":0},{"startOffset":87341,"endOffset":87390,"count":0},{"startOffset":87398,"endOffset":87504,"count":87},{"startOffset":87511,"endOffset":87660,"count":0}],"isBlockCoverage":true},{"functionName":"finishOp","ranges":[{"startOffset":87665,"endOffset":87825,"count":12}],"isBlockCoverage":true},{"functionName":"readRegexp","ranges":[{"startOffset":87829,"endOffset":89906,"count":0}],"isBlockCoverage":false},{"functionName":"readInt","ranges":[{"startOffset":89910,"endOffset":91971,"count":0}],"isBlockCoverage":false},{"functionName":"readRadixNumber","ranges":[{"startOffset":91975,"endOffset":92901,"count":0}],"isBlockCoverage":false},{"functionName":"readNumber","ranges":[{"startOffset":92905,"endOffset":95549,"count":0}],"isBlockCoverage":false},{"functionName":"readCodePoint","ranges":[{"startOffset":95553,"endOffset":96170,"count":0}],"isBlockCoverage":false},{"functionName":"readString","ranges":[{"startOffset":96174,"endOffset":97106,"count":5},{"startOffset":96265,"endOffset":97010,"count":48},{"startOffset":96308,"endOffset":96417,"count":0},{"startOffset":96499,"endOffset":96505,"count":5},{"startOffset":96505,"endOffset":96528,"count":43},{"startOffset":96528,"endOffset":96679,"count":0},{"startOffset":96679,"endOffset":97004,"count":43},{"startOffset":96717,"endOffset":96829,"count":0},{"startOffset":96854,"endOffset":96963,"count":0}],"isBlockCoverage":true},{"functionName":"readTemplateContinuation","ranges":[{"startOffset":97110,"endOffset":97259,"count":0}],"isBlockCoverage":false},{"functionName":"readTemplateToken","ranges":[{"startOffset":97263,"endOffset":99000,"count":0}],"isBlockCoverage":false},{"functionName":"recordStrictModeErrors","ranges":[{"startOffset":99004,"endOffset":99292,"count":0}],"isBlockCoverage":false},{"functionName":"readEscapedChar","ranges":[{"startOffset":99296,"endOffset":101510,"count":0}],"isBlockCoverage":false},{"functionName":"readHexChar","ranges":[{"startOffset":101514,"endOffset":101886,"count":0}],"isBlockCoverage":false},{"functionName":"readWord1","ranges":[{"startOffset":101890,"endOffset":103300,"count":87},{"startOffset":102123,"endOffset":102126,"count":0},{"startOffset":102176,"endOffset":103231,"count":640},{"startOffset":102265,"endOffset":102322,"count":553},{"startOffset":102310,"endOffset":102313,"count":0},{"startOffset":102322,"endOffset":103225,"count":87},{"startOffset":102343,"endOffset":103195,"count":0}],"isBlockCoverage":true},{"functionName":"readWord","ranges":[{"startOffset":103304,"endOffset":103549,"count":87},{"startOffset":103438,"endOffset":103497,"count":34},{"startOffset":103497,"endOffset":103545,"count":53}],"isBlockCoverage":true},{"functionName":"checkKeywordEscapes","ranges":[{"startOffset":103553,"endOffset":103828,"count":223},{"startOffset":103650,"endOffset":103675,"count":33},{"startOffset":103677,"endOffset":103824,"count":0}],"isBlockCoverage":true},{"functionName":"raise","ranges":[{"startOffset":103832,"endOffset":104252,"count":0}],"isBlockCoverage":false},{"functionName":"raiseOverwrite","ranges":[{"startOffset":104256,"endOffset":104877,"count":0}],"isBlockCoverage":false},{"functionName":"updateContext","ranges":[{"startOffset":104881,"endOffset":104907,"count":229}],"isBlockCoverage":true},{"functionName":"unexpected","ranges":[{"startOffset":104911,"endOffset":105095,"count":0}],"isBlockCoverage":false},{"functionName":"expectPlugin","ranges":[{"startOffset":105099,"endOffset":105336,"count":0}],"isBlockCoverage":false},{"functionName":"expectOnePlugin","ranges":[{"startOffset":105340,"endOffset":105570,"count":0}],"isBlockCoverage":false},{"functionName":"Scope","ranges":[{"startOffset":105591,"endOffset":105727,"count":15}],"isBlockCoverage":true},{"functionName":"ScopeHandler","ranges":[{"startOffset":105754,"endOffset":105964,"count":6}],"isBlockCoverage":true},{"functionName":"get inFunction","ranges":[{"startOffset":105968,"endOffset":106053,"count":0}],"isBlockCoverage":false},{"functionName":"get allowSuper","ranges":[{"startOffset":106057,"endOffset":106140,"count":0}],"isBlockCoverage":false},{"functionName":"get allowDirectSuper","ranges":[{"startOffset":106144,"endOffset":106240,"count":0}],"isBlockCoverage":false},{"functionName":"get inClass","ranges":[{"startOffset":106244,"endOffset":106324,"count":0}],"isBlockCoverage":false},{"functionName":"get inClassAndNotInNonArrowFunction","ranges":[{"startOffset":106328,"endOffset":106491,"count":2},{"startOffset":106453,"endOffset":106486,"count":0}],"isBlockCoverage":true},{"functionName":"get inStaticBlock","ranges":[{"startOffset":106495,"endOffset":106785,"count":0}],"isBlockCoverage":false},{"functionName":"get inNonArrowFunction","ranges":[{"startOffset":106789,"endOffset":106883,"count":0}],"isBlockCoverage":false},{"functionName":"get treatFunctionsAsVar","ranges":[{"startOffset":106887,"endOffset":106983,"count":2}],"isBlockCoverage":true},{"functionName":"createScope","ranges":[{"startOffset":106987,"endOffset":107040,"count":15}],"isBlockCoverage":true},{"functionName":"enter","ranges":[{"startOffset":107044,"endOffset":107113,"count":15}],"isBlockCoverage":true},{"functionName":"exit","ranges":[{"startOffset":107117,"endOffset":107156,"count":9}],"isBlockCoverage":true},{"functionName":"treatFunctionsAsVarInScope","ranges":[{"startOffset":107160,"endOffset":107323,"count":8},{"startOffset":107262,"endOffset":107317,"count":2},{"startOffset":107287,"endOffset":107317,"count":0}],"isBlockCoverage":true},{"functionName":"declareName","ranges":[{"startOffset":107327,"endOffset":108257,"count":7},{"startOffset":107444,"endOffset":107480,"count":5},{"startOffset":107482,"endOffset":107798,"count":2},{"startOffset":107599,"endOffset":107643,"count":0},{"startOffset":107798,"endOffset":108141,"count":5},{"startOffset":107900,"endOffset":108135,"count":6},{"startOffset":108121,"endOffset":108127,"count":5},{"startOffset":108204,"endOffset":108253,"count":1}],"isBlockCoverage":true},{"functionName":"maybeExportDefined","ranges":[{"startOffset":108261,"endOffset":108409,"count":8},{"startOffset":108356,"endOffset":108405,"count":1}],"isBlockCoverage":true},{"functionName":"checkRedeclarationInScope","ranges":[{"startOffset":108413,"endOffset":108650,"count":8},{"startOffset":108532,"endOffset":108646,"count":0}],"isBlockCoverage":true},{"functionName":"isRedeclaredInScope","ranges":[{"startOffset":108654,"endOffset":109254,"count":8},{"startOffset":108744,"endOffset":108757,"count":0},{"startOffset":108801,"endOffset":108898,"count":2},{"startOffset":108898,"endOffset":108943,"count":6},{"startOffset":108943,"endOffset":109054,"count":0},{"startOffset":109054,"endOffset":109091,"count":6},{"startOffset":109091,"endOffset":109177,"count":0},{"startOffset":109178,"endOffset":109249,"count":6},{"startOffset":109221,"endOffset":109249,"count":1}],"isBlockCoverage":true},{"functionName":"checkLocalExport","ranges":[{"startOffset":109258,"endOffset":109539,"count":0}],"isBlockCoverage":false},{"functionName":"currentScope","ranges":[{"startOffset":109543,"endOffset":109619,"count":9}],"isBlockCoverage":true},{"functionName":"currentVarScopeFlags","ranges":[{"startOffset":109623,"endOffset":109830,"count":0}],"isBlockCoverage":false},{"functionName":"currentThisScopeFlags","ranges":[{"startOffset":109834,"endOffset":110084,"count":2},{"startOffset":109911,"endOffset":110080,"count":4},{"startOffset":110016,"endOffset":110041,"count":2},{"startOffset":110043,"endOffset":110074,"count":2},{"startOffset":110080,"endOffset":110083,"count":0}],"isBlockCoverage":true},{"functionName":"FlowScope","ranges":[{"startOffset":110123,"endOffset":110208,"count":0}],"isBlockCoverage":false},{"functionName":"createScope","ranges":[{"startOffset":110261,"endOffset":110318,"count":0}],"isBlockCoverage":false},{"functionName":"declareName","ranges":[{"startOffset":110322,"endOffset":110666,"count":0}],"isBlockCoverage":false},{"functionName":"isRedeclaredInScope","ranges":[{"startOffset":110670,"endOffset":110967,"count":0}],"isBlockCoverage":false},{"functionName":"checkLocalExport","ranges":[{"startOffset":110971,"endOffset":111098,"count":0}],"isBlockCoverage":false},{"functionName":"ClassScope","ranges":[{"startOffset":111124,"endOffset":111258,"count":0}],"isBlockCoverage":false},{"functionName":"ClassScopeHandler","ranges":[{"startOffset":111290,"endOffset":111432,"count":6}],"isBlockCoverage":true},{"functionName":"current","ranges":[{"startOffset":111436,"endOffset":111497,"count":0}],"isBlockCoverage":false},{"functionName":"enter","ranges":[{"startOffset":111501,"endOffset":111553,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":111557,"endOffset":112031,"count":0}],"isBlockCoverage":false},{"functionName":"declarePrivateName","ranges":[{"startOffset":112035,"endOffset":113055,"count":0}],"isBlockCoverage":false},{"functionName":"usePrivateName","ranges":[{"startOffset":113059,"endOffset":113424,"count":0}],"isBlockCoverage":false},{"functionName":"ExpressionScope","ranges":[{"startOffset":113603,"endOffset":113686,"count":18}],"isBlockCoverage":true},{"functionName":"canBeArrowParameterDeclaration","ranges":[{"startOffset":113690,"endOffset":113840,"count":0}],"isBlockCoverage":false},{"functionName":"isCertainlyParameterDeclaration","ranges":[{"startOffset":113844,"endOffset":113931,"count":0}],"isBlockCoverage":false},{"functionName":"ArrowHeadParsingScope","ranges":[{"startOffset":113992,"endOffset":114072,"count":2}],"isBlockCoverage":true},{"functionName":"recordDeclarationError","ranges":[{"startOffset":114076,"endOffset":114229,"count":0}],"isBlockCoverage":false},{"functionName":"clearDeclarationError","ranges":[{"startOffset":114233,"endOffset":114309,"count":0}],"isBlockCoverage":false},{"functionName":"iterateErrors","ranges":[{"startOffset":114313,"endOffset":114388,"count":0}],"isBlockCoverage":false},{"functionName":"ExpressionScopeHandler","ranges":[{"startOffset":114426,"endOffset":114545,"count":6}],"isBlockCoverage":true},{"functionName":"enter","ranges":[{"startOffset":114549,"endOffset":114595,"count":12}],"isBlockCoverage":true},{"functionName":"exit","ranges":[{"startOffset":114599,"endOffset":114633,"count":12}],"isBlockCoverage":true},{"functionName":"recordParameterInitializerError","ranges":[{"startOffset":114637,"endOffset":115141,"count":0}],"isBlockCoverage":false},{"functionName":"recordArrowParemeterBindingError","ranges":[{"startOffset":115145,"endOffset":115577,"count":0}],"isBlockCoverage":false},{"functionName":"recordAsyncArrowParametersError","ranges":[{"startOffset":115581,"endOffset":115981,"count":0}],"isBlockCoverage":false},{"functionName":"validateAsPattern","ranges":[{"startOffset":115985,"endOffset":116494,"count":0}],"isBlockCoverage":false},{"functionName":"newParameterDeclarationScope","ranges":[{"startOffset":116498,"endOffset":116594,"count":5}],"isBlockCoverage":true},{"functionName":"newArrowHeadScope","ranges":[{"startOffset":116595,"endOffset":116696,"count":2}],"isBlockCoverage":true},{"functionName":"newAsyncArrowScope","ranges":[{"startOffset":116697,"endOffset":116804,"count":0}],"isBlockCoverage":false},{"functionName":"newExpressionScope","ranges":[{"startOffset":116805,"endOffset":116870,"count":5}],"isBlockCoverage":true},{"functionName":"ProductionParameterHandler","ranges":[{"startOffset":117041,"endOffset":117082,"count":6}],"isBlockCoverage":true},{"functionName":"enter","ranges":[{"startOffset":117086,"endOffset":117133,"count":38}],"isBlockCoverage":true},{"functionName":"exit","ranges":[{"startOffset":117137,"endOffset":117172,"count":32}],"isBlockCoverage":true},{"functionName":"currentFlags","ranges":[{"startOffset":117176,"endOffset":117244,"count":64}],"isBlockCoverage":true},{"functionName":"get hasAwait","ranges":[{"startOffset":117248,"endOffset":117320,"count":0}],"isBlockCoverage":false},{"functionName":"get hasYield","ranges":[{"startOffset":117324,"endOffset":117396,"count":3}],"isBlockCoverage":true},{"functionName":"get hasReturn","ranges":[{"startOffset":117400,"endOffset":117474,"count":8}],"isBlockCoverage":true},{"functionName":"get hasIn","ranges":[{"startOffset":117478,"endOffset":117544,"count":4}],"isBlockCoverage":true},{"functionName":"functionFlags","ranges":[{"startOffset":117548,"endOffset":117668,"count":5},{"startOffset":117613,"endOffset":117626,"count":0},{"startOffset":117647,"endOffset":117660,"count":0}],"isBlockCoverage":true},{"functionName":"addExtra","ranges":[{"startOffset":117709,"endOffset":117986,"count":16},{"startOffset":117772,"endOffset":117779,"count":0},{"startOffset":117822,"endOffset":117827,"count":8},{"startOffset":117850,"endOffset":117883,"count":15},{"startOffset":117883,"endOffset":117982,"count":1}],"isBlockCoverage":true},{"functionName":"isContextual","ranges":[{"startOffset":117990,"endOffset":118080,"count":208},{"startOffset":118049,"endOffset":118075,"count":0}],"isBlockCoverage":true},{"functionName":"isUnparsedContextual","ranges":[{"startOffset":118084,"endOffset":118382,"count":0}],"isBlockCoverage":false},{"functionName":"isLookaheadContextual","ranges":[{"startOffset":118386,"endOffset":118509,"count":0}],"isBlockCoverage":false},{"functionName":"eatContextual","ranges":[{"startOffset":118513,"endOffset":118638,"count":0}],"isBlockCoverage":false},{"functionName":"expectContextual","ranges":[{"startOffset":118642,"endOffset":118901,"count":0}],"isBlockCoverage":false},{"functionName":"canInsertSemicolon","ranges":[{"startOffset":118905,"endOffset":119008,"count":13},{"startOffset":118955,"endOffset":118971,"count":9},{"startOffset":118972,"endOffset":119003,"count":8}],"isBlockCoverage":true},{"functionName":"hasPrecedingLineBreak","ranges":[{"startOffset":119012,"endOffset":119136,"count":8}],"isBlockCoverage":true},{"functionName":"hasFollowingLineBreak","ranges":[{"startOffset":119140,"endOffset":119282,"count":0}],"isBlockCoverage":false},{"functionName":"isLineTerminator","ranges":[{"startOffset":119286,"endOffset":119364,"count":26},{"startOffset":119331,"endOffset":119359,"count":11}],"isBlockCoverage":true},{"functionName":"semicolon","ranges":[{"startOffset":119368,"endOffset":119552,"count":18},{"startOffset":119440,"endOffset":119454,"count":0},{"startOffset":119463,"endOffset":119551,"count":0}],"isBlockCoverage":true},{"functionName":"expect","ranges":[{"startOffset":119556,"endOffset":119629,"count":38},{"startOffset":119595,"endOffset":119624,"count":0}],"isBlockCoverage":true},{"functionName":"tryParse","ranges":[{"startOffset":119633,"endOffset":120858,"count":0}],"isBlockCoverage":false},{"functionName":"checkExpressionErrors","ranges":[{"startOffset":120862,"endOffset":121745,"count":100},{"startOffset":120947,"endOffset":120960,"count":6},{"startOffset":120960,"endOffset":121161,"count":94},{"startOffset":121162,"endOffset":121188,"count":94},{"startOffset":121189,"endOffset":121207,"count":94},{"startOffset":121229,"endOffset":121260,"count":48},{"startOffset":121260,"endOffset":121298,"count":46},{"startOffset":121298,"endOffset":121401,"count":0},{"startOffset":121401,"endOffset":121435,"count":46},{"startOffset":121435,"endOffset":121521,"count":0},{"startOffset":121521,"endOffset":121554,"count":46},{"startOffset":121554,"endOffset":121647,"count":0},{"startOffset":121647,"endOffset":121688,"count":46},{"startOffset":121688,"endOffset":121741,"count":0}],"isBlockCoverage":true},{"functionName":"isLiteralPropertyName","ranges":[{"startOffset":121749,"endOffset":121834,"count":2}],"isBlockCoverage":true},{"functionName":"isPrivateName","ranges":[{"startOffset":121838,"endOffset":121903,"count":56}],"isBlockCoverage":true},{"functionName":"getPrivateNameSV","ranges":[{"startOffset":121907,"endOffset":121960,"count":0}],"isBlockCoverage":false},{"functionName":"hasPropertyAsPrivateName","ranges":[{"startOffset":121964,"endOffset":122128,"count":0}],"isBlockCoverage":false},{"functionName":"isOptionalChain","ranges":[{"startOffset":122132,"endOffset":122254,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectProperty","ranges":[{"startOffset":122258,"endOffset":122329,"count":0}],"isBlockCoverage":false},{"functionName":"isObjectMethod","ranges":[{"startOffset":122333,"endOffset":122400,"count":13}],"isBlockCoverage":true},{"functionName":"initializeScopes","ranges":[{"startOffset":122404,"endOffset":123462,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":123161,"endOffset":123457,"count":0}],"isBlockCoverage":false},{"functionName":"enterInitialScopes","ranges":[{"startOffset":123466,"endOffset":123661,"count":6}],"isBlockCoverage":true},{"functionName":"checkDestructuringPrivate","ranges":[{"startOffset":123665,"endOffset":123883,"count":0}],"isBlockCoverage":false},{"functionName":"ExpressionErrors","ranges":[{"startOffset":123914,"endOffset":124071,"count":48}],"isBlockCoverage":true},{"functionName":"Node","ranges":[{"startOffset":124091,"endOffset":124378,"count":222},{"startOffset":124272,"endOffset":124294,"count":0},{"startOffset":124338,"endOffset":124374,"count":0}],"isBlockCoverage":true},{"functionName":"NodePrototype.__clone","ranges":[{"startOffset":124449,"endOffset":124789,"count":0}],"isBlockCoverage":false},{"functionName":"clonePlaceholder","ranges":[{"startOffset":124794,"endOffset":124861,"count":0}],"isBlockCoverage":false},{"functionName":"cloneIdentifier","ranges":[{"startOffset":124863,"endOffset":125292,"count":0}],"isBlockCoverage":false},{"functionName":"cloneStringLiteral","ranges":[{"startOffset":125293,"endOffset":125790,"count":0}],"isBlockCoverage":false},{"functionName":"startNode","ranges":[{"startOffset":125830,"endOffset":125913,"count":187}],"isBlockCoverage":true},{"functionName":"startNodeAt","ranges":[{"startOffset":125917,"endOffset":125981,"count":35}],"isBlockCoverage":true},{"functionName":"startNodeAtNode","ranges":[{"startOffset":125985,"endOffset":126069,"count":0}],"isBlockCoverage":false},{"functionName":"finishNode","ranges":[{"startOffset":126073,"endOffset":126169,"count":165}],"isBlockCoverage":true},{"functionName":"finishNodeAt","ranges":[{"startOffset":126173,"endOffset":126429,"count":165},{"startOffset":126316,"endOffset":126345,"count":0}],"isBlockCoverage":true},{"functionName":"resetStartLocation","ranges":[{"startOffset":126433,"endOffset":126587,"count":0}],"isBlockCoverage":false},{"functionName":"resetEndLocation","ranges":[{"startOffset":126591,"endOffset":126769,"count":0}],"isBlockCoverage":false},{"functionName":"resetStartLocationFromNode","ranges":[{"startOffset":126773,"endOffset":126904,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":127128,"endOffset":133397,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":127477,"endOffset":127554,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":127870,"endOffset":128048,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":128080,"endOffset":128243,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":128280,"endOffset":128489,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":128521,"endOffset":128701,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":128748,"endOffset":128893,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":128941,"endOffset":129130,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":129177,"endOffset":129309,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":129357,"endOffset":129533,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":129563,"endOffset":129778,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":129817,"endOffset":129954,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":130004,"endOffset":130148,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":132314,"endOffset":132385,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":133075,"endOffset":133222,"count":0}],"isBlockCoverage":false},{"functionName":"isEsModuleType","ranges":[{"startOffset":133401,"endOffset":133690,"count":0}],"isBlockCoverage":false},{"functionName":"hasTypeImportKind","ranges":[{"startOffset":133692,"endOffset":133797,"count":0}],"isBlockCoverage":false},{"functionName":"isMaybeDefaultImport","ranges":[{"startOffset":133799,"endOffset":133896,"count":0}],"isBlockCoverage":false},{"functionName":"partition","ranges":[{"startOffset":134045,"endOffset":134252,"count":0}],"isBlockCoverage":false},{"functionName":"flow","ranges":[{"startOffset":134318,"endOffset":213577,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":218355,"endOffset":219250,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":218480,"endOffset":218575,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":218824,"endOffset":218960,"count":0}],"isBlockCoverage":false},{"functionName":"isFragment","ranges":[{"startOffset":219254,"endOffset":219389,"count":0}],"isBlockCoverage":false},{"functionName":"getQualifiedJSXName","ranges":[{"startOffset":219391,"endOffset":219817,"count":0}],"isBlockCoverage":false},{"functionName":"jsx","ranges":[{"startOffset":219830,"endOffset":232748,"count":0}],"isBlockCoverage":false},{"functionName":"TypeScriptScope","ranges":[{"startOffset":232792,"endOffset":232998,"count":0}],"isBlockCoverage":false},{"functionName":"createScope","ranges":[{"startOffset":233057,"endOffset":233120,"count":0}],"isBlockCoverage":false},{"functionName":"declareName","ranges":[{"startOffset":233124,"endOffset":233855,"count":0}],"isBlockCoverage":false},{"functionName":"isRedeclaredInScope","ranges":[{"startOffset":233859,"endOffset":234533,"count":0}],"isBlockCoverage":false},{"functionName":"checkLocalExport","ranges":[{"startOffset":234537,"endOffset":234774,"count":0}],"isBlockCoverage":false},{"functionName":"getOwn$1","ranges":[{"startOffset":234796,"endOffset":234867,"count":0}],"isBlockCoverage":false},{"functionName":"nonNull","ranges":[{"startOffset":234870,"endOffset":234976,"count":0}],"isBlockCoverage":false},{"functionName":"assert","ranges":[{"startOffset":234978,"endOffset":235052,"count":0}],"isBlockCoverage":false},{"functionName":"tsTokenCanStartExpression","ranges":[{"startOffset":235054,"endOffset":235172,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":235218,"endOffset":241682,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":235263,"endOffset":235374,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":235413,"endOffset":235527,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":235735,"endOffset":235784,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":236254,"endOffset":236316,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":236546,"endOffset":236608,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":236634,"endOffset":236694,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":236726,"endOffset":236781,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":237122,"endOffset":237223,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":237351,"endOffset":237448,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":237845,"endOffset":237925,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":237964,"endOffset":238047,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":238095,"endOffset":238216,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":238246,"endOffset":238361,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":239334,"endOffset":239431,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":240151,"endOffset":240298,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":241562,"endOffset":241678,"count":0}],"isBlockCoverage":false},{"functionName":"keywordTypeFromName","ranges":[{"startOffset":241686,"endOffset":242307,"count":0}],"isBlockCoverage":false},{"functionName":"tsIsAccessModifier","ranges":[{"startOffset":242309,"endOffset":242436,"count":0}],"isBlockCoverage":false},{"functionName":"tsIsVarianceAnnotations","ranges":[{"startOffset":242438,"endOffset":242534,"count":0}],"isBlockCoverage":false},{"functionName":"typescript","ranges":[{"startOffset":242554,"endOffset":322842,"count":0}],"isBlockCoverage":false},{"functionName":"isPossiblyLiteralEnum","ranges":[{"startOffset":322846,"endOffset":323225,"count":0}],"isBlockCoverage":false},{"functionName":"isUncomputedMemberExpressionChain","ranges":[{"startOffset":323227,"endOffset":323502,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":323559,"endOffset":323681,"count":1}],"isBlockCoverage":true},{"functionName":"placeholders","ranges":[{"startOffset":323704,"endOffset":330080,"count":1}],"isBlockCoverage":true},{"functionName":"parsePlaceholder","ranges":[{"startOffset":323747,"endOffset":324056,"count":126},{"startOffset":323805,"endOffset":324052,"count":0}],"isBlockCoverage":true},{"functionName":"finishPlaceholder","ranges":[{"startOffset":324060,"endOffset":324287,"count":0}],"isBlockCoverage":false},{"functionName":"getTokenFromCode","ranges":[{"startOffset":324291,"endOffset":324486,"count":217},{"startOffset":324336,"endOffset":324387,"count":0},{"startOffset":324389,"endOffset":324432,"count":0}],"isBlockCoverage":true},{"functionName":"parseExprAtom","ranges":[{"startOffset":324490,"endOffset":324596,"count":53}],"isBlockCoverage":true},{"functionName":"parseIdentifier","ranges":[{"startOffset":324600,"endOffset":324710,"count":54}],"isBlockCoverage":true},{"functionName":"checkReservedWord","ranges":[{"startOffset":324714,"endOffset":324810,"count":39}],"isBlockCoverage":true},{"functionName":"parseBindingAtom","ranges":[{"startOffset":324814,"endOffset":324923,"count":5}],"isBlockCoverage":true},{"functionName":"isValidLVal","ranges":[{"startOffset":324927,"endOffset":325030,"count":0}],"isBlockCoverage":false},{"functionName":"toAssignable","ranges":[{"startOffset":325034,"endOffset":325239,"count":6},{"startOffset":325099,"endOffset":325136,"count":0},{"startOffset":325138,"endOffset":325182,"count":0}],"isBlockCoverage":true},{"functionName":"isLet","ranges":[{"startOffset":325243,"endOffset":325532,"count":31},{"startOffset":325290,"endOffset":325316,"count":0},{"startOffset":325377,"endOffset":325531,"count":0}],"isBlockCoverage":true},{"functionName":"verifyBreakContinue","ranges":[{"startOffset":325536,"endOffset":325677,"count":0}],"isBlockCoverage":false},{"functionName":"parseExpressionStatement","ranges":[{"startOffset":325681,"endOffset":326217,"count":8},{"startOffset":325756,"endOffset":325797,"count":0},{"startOffset":325865,"endOffset":326216,"count":0}],"isBlockCoverage":true},{"functionName":"parseBlock","ranges":[{"startOffset":326221,"endOffset":326325,"count":9}],"isBlockCoverage":true},{"functionName":"parseFunctionId","ranges":[{"startOffset":326329,"endOffset":326439,"count":5}],"isBlockCoverage":true},{"functionName":"parseClass","ranges":[{"startOffset":326443,"endOffset":327403,"count":0}],"isBlockCoverage":false},{"functionName":"parseExport","ranges":[{"startOffset":327407,"endOffset":328043,"count":0}],"isBlockCoverage":false},{"functionName":"isExportDefaultSpecifier","ranges":[{"startOffset":328047,"endOffset":328388,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseExportDefaultSpecifier","ranges":[{"startOffset":328392,"endOffset":328584,"count":0}],"isBlockCoverage":false},{"functionName":"checkExport","ranges":[{"startOffset":328588,"endOffset":328865,"count":0}],"isBlockCoverage":false},{"functionName":"parseImport","ranges":[{"startOffset":328869,"endOffset":329763,"count":0}],"isBlockCoverage":false},{"functionName":"parseImportSource","ranges":[{"startOffset":329767,"endOffset":329884,"count":0}],"isBlockCoverage":false},{"functionName":"assertNoSpace","ranges":[{"startOffset":329888,"endOffset":330077,"count":0}],"isBlockCoverage":false},{"functionName":"v8intrinsic","ranges":[{"startOffset":330103,"endOffset":330764,"count":0}],"isBlockCoverage":false},{"functionName":"hasPlugin","ranges":[{"startOffset":330768,"endOffset":331471,"count":84},{"startOffset":330914,"endOffset":330930,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":331067,"endOffset":331467,"count":84},{"startOffset":331171,"endOffset":331463,"count":0}],"isBlockCoverage":true},{"functionName":"getPluginOption","ranges":[{"startOffset":331472,"endOffset":331778,"count":0}],"isBlockCoverage":false},{"functionName":"validatePlugins","ranges":[{"startOffset":331951,"endOffset":335850,"count":6},{"startOffset":332027,"endOffset":332759,"count":0},{"startOffset":332794,"endOffset":332829,"count":0},{"startOffset":332831,"endOffset":332904,"count":0},{"startOffset":332985,"endOffset":333067,"count":0},{"startOffset":333115,"endOffset":334669,"count":0},{"startOffset":334717,"endOffset":335252,"count":0},{"startOffset":335297,"endOffset":335397,"count":0},{"startOffset":335399,"endOffset":335567,"count":0},{"startOffset":335616,"endOffset":335655,"count":0},{"startOffset":335657,"endOffset":335848,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":333297,"endOffset":333310,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":334043,"endOffset":334056,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":335536,"endOffset":335549,"count":0}],"isBlockCoverage":false},{"functionName":"getOptions","ranges":[{"startOffset":336448,"endOffset":336654,"count":6},{"startOffset":336548,"endOffset":336633,"count":96},{"startOffset":336595,"endOffset":336606,"count":24},{"startOffset":336607,"endOffset":336628,"count":72}],"isBlockCoverage":true},{"functionName":"getOwn","ranges":[{"startOffset":336671,"endOffset":336742,"count":0}],"isBlockCoverage":false},{"functionName":"unwrapParenthesizedExpression","ranges":[{"startOffset":336783,"endOffset":336900,"count":0}],"isBlockCoverage":false},{"functionName":"toAssignable","ranges":[{"startOffset":336942,"endOffset":339706,"count":6},{"startOffset":337136,"endOffset":337164,"count":0},{"startOffset":337166,"endOffset":337728,"count":0},{"startOffset":337761,"endOffset":337779,"count":2},{"startOffset":337786,"endOffset":337807,"count":2},{"startOffset":337814,"endOffset":337834,"count":2},{"startOffset":337841,"endOffset":337866,"count":2},{"startOffset":337873,"endOffset":337907,"count":2},{"startOffset":337915,"endOffset":338530,"count":0},{"startOffset":338538,"endOffset":338855,"count":0},{"startOffset":338863,"endOffset":339064,"count":0},{"startOffset":339072,"endOffset":339277,"count":0},{"startOffset":339285,"endOffset":339593,"count":0},{"startOffset":339601,"endOffset":339696,"count":0}],"isBlockCoverage":true},{"functionName":"toAssignableObjectExpressionProp","ranges":[{"startOffset":339710,"endOffset":340319,"count":0}],"isBlockCoverage":false},{"functionName":"toAssignableList","ranges":[{"startOffset":340323,"endOffset":341077,"count":0}],"isBlockCoverage":false},{"functionName":"isAssignable","ranges":[{"startOffset":341081,"endOffset":342182,"count":0}],"isBlockCoverage":false},{"functionName":"toReferencedList","ranges":[{"startOffset":342186,"endOffset":342260,"count":12}],"isBlockCoverage":true},{"functionName":"toReferencedListDeep","ranges":[{"startOffset":342264,"endOffset":342550,"count":12},{"startOffset":342410,"endOffset":342546,"count":18},{"startOffset":342436,"endOffset":342444,"count":0},{"startOffset":342481,"endOffset":342540,"count":1}],"isBlockCoverage":true},{"functionName":"parseSpread","ranges":[{"startOffset":342554,"endOffset":342813,"count":0}],"isBlockCoverage":false},{"functionName":"parseRestBinding","ranges":[{"startOffset":342817,"endOffset":342987,"count":0}],"isBlockCoverage":false},{"functionName":"parseBindingAtom","ranges":[{"startOffset":342991,"endOffset":343365,"count":5},{"startOffset":343049,"endOffset":343258,"count":0},{"startOffset":343266,"endOffset":343319,"count":0}],"isBlockCoverage":true},{"functionName":"parseBindingList","ranges":[{"startOffset":343369,"endOffset":344387,"count":5},{"startOffset":343511,"endOffset":344365,"count":1},{"startOffset":343562,"endOffset":343602,"count":0},{"startOffset":343625,"endOffset":343642,"count":0},{"startOffset":343644,"endOffset":343678,"count":0},{"startOffset":343705,"endOffset":343729,"count":0},{"startOffset":343755,"endOffset":343957,"count":0},{"startOffset":344024,"endOffset":344055,"count":0},{"startOffset":344057,"endOffset":344179,"count":0},{"startOffset":344212,"endOffset":344273,"count":0}],"isBlockCoverage":true},{"functionName":"parseBindingRestProperty","ranges":[{"startOffset":344391,"endOffset":344572,"count":0}],"isBlockCoverage":false},{"functionName":"parseBindingProperty","ranges":[{"startOffset":344576,"endOffset":345172,"count":0}],"isBlockCoverage":false},{"functionName":"parseAssignableListItem","ranges":[{"startOffset":345176,"endOffset":345484,"count":1},{"startOffset":345420,"endOffset":345463,"count":0}],"isBlockCoverage":true},{"functionName":"parseAssignableListItemTypes","ranges":[{"startOffset":345488,"endOffset":345547,"count":1}],"isBlockCoverage":true},{"functionName":"parseMaybeDefault","ranges":[{"startOffset":345551,"endOffset":346083,"count":2},{"startOffset":345681,"endOffset":345692,"count":1},{"startOffset":345693,"endOffset":345714,"count":1},{"startOffset":345762,"endOffset":345773,"count":1},{"startOffset":345774,"endOffset":345792,"count":1},{"startOffset":345828,"endOffset":345835,"count":1},{"startOffset":345836,"endOffset":345861,"count":1},{"startOffset":345898,"endOffset":346082,"count":0}],"isBlockCoverage":true},{"functionName":"isValidLVal","ranges":[{"startOffset":346087,"endOffset":346386,"count":0}],"isBlockCoverage":false},{"functionName":"checkLVal","ranges":[{"startOffset":346390,"endOffset":348658,"count":11},{"startOffset":346725,"endOffset":346732,"count":0},{"startOffset":346771,"endOffset":346932,"count":4},{"startOffset":346806,"endOffset":346911,"count":0},{"startOffset":346932,"endOffset":347357,"count":7},{"startOffset":347146,"endOffset":347336,"count":1},{"startOffset":347184,"endOffset":347277,"count":0},{"startOffset":347357,"endOffset":347525,"count":0},{"startOffset":347527,"endOffset":347570,"count":0},{"startOffset":347609,"endOffset":348101,"count":0},{"startOffset":348102,"endOffset":348150,"count":0},{"startOffset":348212,"endOffset":348250,"count":0},{"startOffset":348251,"endOffset":348299,"count":0},{"startOffset":348300,"endOffset":348312,"count":0},{"startOffset":348313,"endOffset":348323,"count":0},{"startOffset":348378,"endOffset":348657,"count":0}],"isBlockCoverage":true},{"functionName":"checkIdentifier","ranges":[{"startOffset":348662,"endOffset":349438,"count":9},{"startOffset":348827,"endOffset":348877,"count":0},{"startOffset":348920,"endOffset":349210,"count":0},{"startOffset":349237,"endOffset":349257,"count":0},{"startOffset":349259,"endOffset":349334,"count":0},{"startOffset":349372,"endOffset":349434,"count":5}],"isBlockCoverage":true},{"functionName":"declareNameFromIdentifier","ranges":[{"startOffset":349442,"endOffset":349570,"count":5}],"isBlockCoverage":true},{"functionName":"checkToRestConversion","ranges":[{"startOffset":349574,"endOffset":350044,"count":0}],"isBlockCoverage":false},{"functionName":"checkCommaAfterRest","ranges":[{"startOffset":350048,"endOffset":350295,"count":0}],"isBlockCoverage":false},{"functionName":"checkProto","ranges":[{"startOffset":350346,"endOffset":351130,"count":2},{"startOffset":350509,"endOffset":350530,"count":0},{"startOffset":350612,"endOffset":350623,"count":0},{"startOffset":350656,"endOffset":351126,"count":0}],"isBlockCoverage":true},{"functionName":"shouldExitDescending","ranges":[{"startOffset":351134,"endOffset":351271,"count":153},{"startOffset":351232,"endOffset":351266,"count":0}],"isBlockCoverage":true},{"functionName":"getExpression","ranges":[{"startOffset":351275,"endOffset":351656,"count":0}],"isBlockCoverage":false},{"functionName":"parseExpression","ranges":[{"startOffset":351660,"endOffset":351910,"count":22},{"startOffset":351731,"endOffset":351824,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":351765,"endOffset":351816,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":351853,"endOffset":351904,"count":22}],"isBlockCoverage":true},{"functionName":"parseExpressionBase","ranges":[{"startOffset":351914,"endOffset":352462,"count":22},{"startOffset":352124,"endOffset":352440,"count":0}],"isBlockCoverage":true},{"functionName":"parseMaybeAssignDisallowIn","ranges":[{"startOffset":352466,"endOffset":352632,"count":0}],"isBlockCoverage":false},{"functionName":"parseMaybeAssignAllowIn","ranges":[{"startOffset":352636,"endOffset":352796,"count":22}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":352726,"endOffset":352790,"count":22}],"isBlockCoverage":true},{"functionName":"setOptionalParametersError","ranges":[{"startOffset":352800,"endOffset":353059,"count":0}],"isBlockCoverage":false},{"functionName":"parseMaybeAssign","ranges":[{"startOffset":353063,"endOffset":355210,"count":50},{"startOffset":353233,"endOffset":353456,"count":0},{"startOffset":353517,"endOffset":353559,"count":4},{"startOffset":353559,"endOffset":353658,"count":46},{"startOffset":353724,"endOffset":353750,"count":48},{"startOffset":353752,"endOffset":353813,"count":31},{"startOffset":353904,"endOffset":353977,"count":18},{"startOffset":354023,"endOffset":355089,"count":6},{"startOffset":354305,"endOffset":354360,"count":0},{"startOffset":354362,"endOffset":354426,"count":0},{"startOffset":354487,"endOffset":354546,"count":0},{"startOffset":354548,"endOffset":354616,"count":0},{"startOffset":354672,"endOffset":354726,"count":0},{"startOffset":354728,"endOffset":354854,"count":0},{"startOffset":354862,"endOffset":354903,"count":0},{"startOffset":355089,"endOffset":355188,"count":44},{"startOffset":355120,"endOffset":355188,"count":42},{"startOffset":355188,"endOffset":355209,"count":44}],"isBlockCoverage":true},{"functionName":"parseMaybeConditional","ranges":[{"startOffset":355214,"endOffset":355627,"count":50},{"startOffset":355515,"endOffset":355541,"count":0}],"isBlockCoverage":true},{"functionName":"parseConditional","ranges":[{"startOffset":355631,"endOffset":356017,"count":50},{"startOffset":355719,"endOffset":355995,"count":0}],"isBlockCoverage":true},{"functionName":"parseMaybeUnaryOrPrivate","ranges":[{"startOffset":356021,"endOffset":356170,"count":53},{"startOffset":356096,"endOffset":356121,"count":0}],"isBlockCoverage":true},{"functionName":"parseExprOps","ranges":[{"startOffset":356174,"endOffset":356568,"count":50},{"startOffset":356478,"endOffset":356504,"count":0}],"isBlockCoverage":true},{"functionName":"parseExprOp","ranges":[{"startOffset":356572,"endOffset":358593,"count":56},{"startOffset":356663,"endOffset":356999,"count":0},{"startOffset":357062,"endOffset":357106,"count":4},{"startOffset":357087,"endOffset":357105,"count":0},{"startOffset":357108,"endOffset":358571,"count":4},{"startOffset":357183,"endOffset":358565,"count":3},{"startOffset":357208,"endOffset":357427,"count":0},{"startOffset":357598,"endOffset":357610,"count":2},{"startOffset":357671,"endOffset":357728,"count":0},{"startOffset":357774,"endOffset":357856,"count":0},{"startOffset":357858,"endOffset":358074,"count":0},{"startOffset":358172,"endOffset":358183,"count":2},{"startOffset":358184,"endOffset":358205,"count":1},{"startOffset":358206,"endOffset":358226,"count":2},{"startOffset":358291,"endOffset":358326,"count":0},{"startOffset":358338,"endOffset":358354,"count":1},{"startOffset":358356,"endOffset":358480,"count":0},{"startOffset":358571,"endOffset":358592,"count":53}],"isBlockCoverage":true},{"functionName":"parseExprOpRightExpr","ranges":[{"startOffset":358597,"endOffset":359638,"count":3},{"startOffset":358736,"endOffset":359556,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":358888,"endOffset":358956,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":359032,"endOffset":359382,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":359466,"endOffset":359544,"count":0}],"isBlockCoverage":false},{"functionName":"parseExprOpBaseRightExpr","ranges":[{"startOffset":359642,"endOffset":359892,"count":3},{"startOffset":359869,"endOffset":359879,"count":0}],"isBlockCoverage":true},{"functionName":"parseHackPipeBody","ranges":[{"startOffset":359896,"endOffset":360487,"count":0}],"isBlockCoverage":false},{"functionName":"checkExponentialAfterUnary","ranges":[{"startOffset":360491,"endOffset":360659,"count":3},{"startOffset":360550,"endOffset":360655,"count":0}],"isBlockCoverage":true},{"functionName":"parseMaybeUnary","ranges":[{"startOffset":360663,"endOffset":362511,"count":56},{"startOffset":360853,"endOffset":360877,"count":0},{"startOffset":360879,"endOffset":361040,"count":0},{"startOffset":361153,"endOffset":361995,"count":3},{"startOffset":361248,"endOffset":361304,"count":0},{"startOffset":361523,"endOffset":361840,"count":0},{"startOffset":361995,"endOffset":362085,"count":53},{"startOffset":362085,"endOffset":362489,"count":0},{"startOffset":362489,"endOffset":362510,"count":53}],"isBlockCoverage":true},{"functionName":"parseUpdate","ranges":[{"startOffset":362515,"endOffset":363305,"count":53},{"startOffset":362580,"endOffset":362708,"count":0},{"startOffset":362917,"endOffset":362929,"count":0},{"startOffset":362974,"endOffset":363003,"count":0},{"startOffset":363005,"endOffset":363283,"count":0}],"isBlockCoverage":true},{"functionName":"parseExprSubscripts","ranges":[{"startOffset":363309,"endOffset":363699,"count":53},{"startOffset":363609,"endOffset":363635,"count":0}],"isBlockCoverage":true},{"functionName":"parseSubscripts","ranges":[{"startOffset":363703,"endOffset":364062,"count":53},{"startOffset":363899,"endOffset":364019,"count":77}],"isBlockCoverage":true},{"functionName":"parseSubscript","ranges":[{"startOffset":364066,"endOffset":365042,"count":77},{"startOffset":364202,"endOffset":364280,"count":0},{"startOffset":364313,"endOffset":364402,"count":0},{"startOffset":364452,"endOffset":364642,"count":0},{"startOffset":364680,"endOffset":364781,"count":9},{"startOffset":364781,"endOffset":365038,"count":68},{"startOffset":364845,"endOffset":364856,"count":66},{"startOffset":364857,"endOffset":364872,"count":66},{"startOffset":364874,"endOffset":364969,"count":15},{"startOffset":364969,"endOffset":365032,"count":53}],"isBlockCoverage":true},{"functionName":"parseMember","ranges":[{"startOffset":365046,"endOffset":365876,"count":15},{"startOffset":365241,"endOffset":365316,"count":2},{"startOffset":365316,"endOffset":365663,"count":13},{"startOffset":365343,"endOffset":365600,"count":0},{"startOffset":365700,"endOffset":365803,"count":0}],"isBlockCoverage":true},{"functionName":"parseBind","ranges":[{"startOffset":365880,"endOffset":366201,"count":0}],"isBlockCoverage":false},{"functionName":"parseCoverCallAndAsyncArrowHead","ranges":[{"startOffset":366205,"endOffset":367738,"count":9},{"startOffset":366633,"endOffset":366748,"count":0},{"startOffset":366779,"endOffset":366818,"count":0},{"startOffset":366838,"endOffset":366907,"count":0},{"startOffset":367141,"endOffset":367172,"count":0},{"startOffset":367173,"endOffset":367185,"count":0},{"startOffset":367187,"endOffset":367458,"count":0},{"startOffset":367493,"endOffset":367602,"count":0}],"isBlockCoverage":true},{"functionName":"toReferencedArguments","ranges":[{"startOffset":367742,"endOffset":367864,"count":9}],"isBlockCoverage":true},{"functionName":"parseTaggedTemplateExpression","ranges":[{"startOffset":367868,"endOffset":368247,"count":0}],"isBlockCoverage":false},{"functionName":"atPossibleAsyncArrow","ranges":[{"startOffset":368251,"endOffset":368501,"count":53},{"startOffset":368318,"endOffset":368342,"count":32},{"startOffset":368343,"endOffset":368389,"count":0},{"startOffset":368390,"endOffset":368419,"count":0},{"startOffset":368420,"endOffset":368450,"count":0},{"startOffset":368451,"endOffset":368496,"count":0}],"isBlockCoverage":true},{"functionName":"finishCallExpression","ranges":[{"startOffset":368505,"endOffset":369358,"count":9},{"startOffset":368583,"endOffset":369263,"count":0},{"startOffset":369307,"endOffset":369333,"count":0}],"isBlockCoverage":true},{"functionName":"parseCallExpressionArguments","ranges":[{"startOffset":369362,"endOffset":370390,"count":9},{"startOffset":369673,"endOffset":370293,"count":16},{"startOffset":369692,"endOffset":370199,"count":8},{"startOffset":369789,"endOffset":370191,"count":0}],"isBlockCoverage":true},{"functionName":"shouldParseAsyncArrow","ranges":[{"startOffset":370394,"endOffset":370480,"count":0}],"isBlockCoverage":false},{"functionName":"parseAsyncArrowFromCallExpression","ranges":[{"startOffset":370484,"endOffset":370975,"count":0}],"isBlockCoverage":false},{"functionName":"parseNoCallExpr","ranges":[{"startOffset":370979,"endOffset":371164,"count":0}],"isBlockCoverage":false},{"functionName":"parseExprAtom","ranges":[{"startOffset":371168,"endOffset":376677,"count":53},{"startOffset":371289,"endOffset":371331,"count":0},{"startOffset":371339,"endOffset":371692,"count":0},{"startOffset":371700,"endOffset":371818,"count":3},{"startOffset":371826,"endOffset":371910,"count":0},{"startOffset":371918,"endOffset":371926,"count":0},{"startOffset":371933,"endOffset":372050,"count":0},{"startOffset":372058,"endOffset":372126,"count":0},{"startOffset":372134,"endOffset":372201,"count":0},{"startOffset":372209,"endOffset":372277,"count":0},{"startOffset":372285,"endOffset":372352,"count":5},{"startOffset":372360,"endOffset":372408,"count":0},{"startOffset":372416,"endOffset":372471,"count":3},{"startOffset":372479,"endOffset":372535,"count":3},{"startOffset":372543,"endOffset":372720,"count":2},{"startOffset":372728,"endOffset":372735,"count":0},{"startOffset":372742,"endOffset":372851,"count":0},{"startOffset":372859,"endOffset":372961,"count":1},{"startOffset":372969,"endOffset":372976,"count":0},{"startOffset":372983,"endOffset":373093,"count":0},{"startOffset":373101,"endOffset":373205,"count":1},{"startOffset":373213,"endOffset":373272,"count":3},{"startOffset":373280,"endOffset":373320,"count":0},{"startOffset":373328,"endOffset":373449,"count":0},{"startOffset":373457,"endOffset":373508,"count":0},{"startOffset":373516,"endOffset":373524,"count":0},{"startOffset":373531,"endOffset":373581,"count":0},{"startOffset":373589,"endOffset":374008,"count":0},{"startOffset":374016,"endOffset":374234,"count":0},{"startOffset":374242,"endOffset":374336,"count":0},{"startOffset":374344,"endOffset":374438,"count":0},{"startOffset":374446,"endOffset":374454,"count":0},{"startOffset":374461,"endOffset":374540,"count":0},{"startOffset":374548,"endOffset":374556,"count":0},{"startOffset":374563,"endOffset":374571,"count":0},{"startOffset":374578,"endOffset":374849,"count":0},{"startOffset":374857,"endOffset":375185,"count":0},{"startOffset":375193,"endOffset":376666,"count":32},{"startOffset":375278,"endOffset":375313,"count":0},{"startOffset":375314,"endOffset":375346,"count":0},{"startOffset":375348,"endOffset":375410,"count":0},{"startOffset":375641,"endOffset":375670,"count":0},{"startOffset":375672,"endOffset":376383,"count":0},{"startOffset":376410,"endOffset":376427,"count":29},{"startOffset":376428,"endOffset":376457,"count":0},{"startOffset":376459,"endOffset":376582,"count":0},{"startOffset":376614,"endOffset":376666,"count":0}],"isBlockCoverage":true},{"functionName":"parseTopicReferenceThenEqualsSign","ranges":[{"startOffset":376681,"endOffset":377171,"count":0}],"isBlockCoverage":false},{"functionName":"parseTopicReference","ranges":[{"startOffset":377175,"endOffset":377426,"count":0}],"isBlockCoverage":false},{"functionName":"finishTopicReference","ranges":[{"startOffset":377430,"endOffset":378128,"count":0}],"isBlockCoverage":false},{"functionName":"testTopicReferenceConfiguration","ranges":[{"startOffset":378132,"endOffset":378564,"count":0}],"isBlockCoverage":false},{"functionName":"parseAsyncArrowUnaryFunction","ranges":[{"startOffset":378568,"endOffset":378989,"count":0}],"isBlockCoverage":false},{"functionName":"parseDo","ranges":[{"startOffset":378993,"endOffset":379516,"count":0}],"isBlockCoverage":false},{"functionName":"parseSuper","ranges":[{"startOffset":379520,"endOffset":380104,"count":0}],"isBlockCoverage":false},{"functionName":"parsePrivateName","ranges":[{"startOffset":380108,"endOffset":380471,"count":0}],"isBlockCoverage":false},{"functionName":"parseFunctionOrFunctionSent","ranges":[{"startOffset":380475,"endOffset":380979,"count":3},{"startOffset":380592,"endOffset":380609,"count":0},{"startOffset":380611,"endOffset":380937,"count":0}],"isBlockCoverage":true},{"functionName":"parseMetaProperty","ranges":[{"startOffset":380983,"endOffset":381429,"count":0}],"isBlockCoverage":false},{"functionName":"parseImportMetaProperty","ranges":[{"startOffset":381433,"endOffset":381812,"count":0}],"isBlockCoverage":false},{"functionName":"parseLiteralAtNode","ranges":[{"startOffset":381816,"endOffset":382062,"count":5}],"isBlockCoverage":true},{"functionName":"parseLiteral","ranges":[{"startOffset":382066,"endOffset":382187,"count":5}],"isBlockCoverage":true},{"functionName":"parseStringLiteral","ranges":[{"startOffset":382191,"endOffset":382276,"count":5}],"isBlockCoverage":true},{"functionName":"parseNumericLiteral","ranges":[{"startOffset":382280,"endOffset":382367,"count":0}],"isBlockCoverage":false},{"functionName":"parseBigIntLiteral","ranges":[{"startOffset":382371,"endOffset":382456,"count":0}],"isBlockCoverage":false},{"functionName":"parseDecimalLiteral","ranges":[{"startOffset":382460,"endOffset":382547,"count":0}],"isBlockCoverage":false},{"functionName":"parseRegExpLiteral","ranges":[{"startOffset":382551,"endOffset":382729,"count":0}],"isBlockCoverage":false},{"functionName":"parseBooleanLiteral","ranges":[{"startOffset":382733,"endOffset":382893,"count":6}],"isBlockCoverage":true},{"functionName":"parseNullLiteral","ranges":[{"startOffset":382897,"endOffset":383022,"count":0}],"isBlockCoverage":false},{"functionName":"parseParenAndDistinguishExpression","ranges":[{"startOffset":383026,"endOffset":385857,"count":2},{"startOffset":383819,"endOffset":384075,"count":0},{"startOffset":384103,"endOffset":384449,"count":0},{"startOffset":384893,"endOffset":384936,"count":0},{"startOffset":384938,"endOffset":385172,"count":0},{"startOffset":385234,"endOffset":385292,"count":0},{"startOffset":385325,"endOffset":385364,"count":0},{"startOffset":385389,"endOffset":385421,"count":0},{"startOffset":385558,"endOffset":385756,"count":0}],"isBlockCoverage":true},{"functionName":"wrapParenthesis","ranges":[{"startOffset":385861,"endOffset":386409,"count":2},{"startOffset":386200,"endOffset":386408,"count":0}],"isBlockCoverage":true},{"functionName":"shouldParseArrow","ranges":[{"startOffset":386413,"endOffset":386482,"count":2}],"isBlockCoverage":true},{"functionName":"parseArrow","ranges":[{"startOffset":386486,"endOffset":386557,"count":0}],"isBlockCoverage":false},{"functionName":"parseParenItem","ranges":[{"startOffset":386561,"endOffset":386624,"count":18}],"isBlockCoverage":true},{"functionName":"parseNewOrNewTarget","ranges":[{"startOffset":386628,"endOffset":387122,"count":0}],"isBlockCoverage":false},{"functionName":"parseNew","ranges":[{"startOffset":387126,"endOffset":387407,"count":0}],"isBlockCoverage":false},{"functionName":"parseNewCallee","ranges":[{"startOffset":387411,"endOffset":387885,"count":0}],"isBlockCoverage":false},{"functionName":"parseTemplateElement","ranges":[{"startOffset":387889,"endOffset":388808,"count":0}],"isBlockCoverage":false},{"functionName":"parseTemplate","ranges":[{"startOffset":388812,"endOffset":389245,"count":0}],"isBlockCoverage":false},{"functionName":"parseTemplateSubstitution","ranges":[{"startOffset":389249,"endOffset":389317,"count":0}],"isBlockCoverage":false},{"functionName":"parseObjectLike","ranges":[{"startOffset":389321,"endOffset":390807,"count":1},{"startOffset":389406,"endOffset":389456,"count":0},{"startOffset":389764,"endOffset":390516,"count":3},{"startOffset":389783,"endOffset":389815,"count":1},{"startOffset":389815,"endOffset":389966,"count":2},{"startOffset":389880,"endOffset":389958,"count":1},{"startOffset":389966,"endOffset":390006,"count":2},{"startOffset":390006,"endOffset":390059,"count":0},{"startOffset":390059,"endOffset":390233,"count":2},{"startOffset":390233,"endOffset":390264,"count":0},{"startOffset":390265,"endOffset":390297,"count":0},{"startOffset":390299,"endOffset":390390,"count":0},{"startOffset":390390,"endOffset":390418,"count":2},{"startOffset":390418,"endOffset":390475,"count":0},{"startOffset":390475,"endOffset":390516,"count":2},{"startOffset":390665,"endOffset":390702,"count":0},{"startOffset":390722,"endOffset":390762,"count":0}],"isBlockCoverage":true},{"functionName":"addTrailingCommaExtraToNode","ranges":[{"startOffset":390811,"endOffset":390997,"count":1}],"isBlockCoverage":true},{"functionName":"maybeAsyncOrAccessorProp","ranges":[{"startOffset":391001,"endOffset":391167,"count":2}],"isBlockCoverage":true},{"functionName":"parsePropertyDefinition","ranges":[{"startOffset":391171,"endOffset":393106,"count":2},{"startOffset":391268,"endOffset":391517,"count":0},{"startOffset":391668,"endOffset":391756,"count":0},{"startOffset":391785,"endOffset":391851,"count":0},{"startOffset":392267,"endOffset":392968,"count":0}],"isBlockCoverage":true},{"functionName":"getGetterSetterExpectedParamCount","ranges":[{"startOffset":393110,"endOffset":393199,"count":0}],"isBlockCoverage":false},{"functionName":"getObjectOrClassMethodParams","ranges":[{"startOffset":393203,"endOffset":393271,"count":0}],"isBlockCoverage":false},{"functionName":"checkGetterSetterParams","ranges":[{"startOffset":393275,"endOffset":393841,"count":0}],"isBlockCoverage":false},{"functionName":"parseObjectMethod","ranges":[{"startOffset":393845,"endOffset":394330,"count":2},{"startOffset":393936,"endOffset":394084,"count":0},{"startOffset":394136,"endOffset":394326,"count":0}],"isBlockCoverage":true},{"functionName":"parseObjectProperty","ranges":[{"startOffset":394334,"endOffset":395605,"count":2},{"startOffset":394496,"endOffset":394559,"count":0},{"startOffset":394672,"endOffset":394730,"count":0},{"startOffset":394732,"endOffset":395601,"count":0}],"isBlockCoverage":true},{"functionName":"parseObjPropValue","ranges":[{"startOffset":395609,"endOffset":395953,"count":2},{"startOffset":395914,"endOffset":395932,"count":0}],"isBlockCoverage":true},{"functionName":"parsePropertyName","ranges":[{"startOffset":395957,"endOffset":397433,"count":2},{"startOffset":396025,"endOffset":396131,"count":0},{"startOffset":396314,"endOffset":397312,"count":0}],"isBlockCoverage":true},{"functionName":"initFunction","ranges":[{"startOffset":397437,"endOffset":397546,"count":5}],"isBlockCoverage":true},{"functionName":"parseMethod","ranges":[{"startOffset":397550,"endOffset":398145,"count":0}],"isBlockCoverage":false},{"functionName":"parseArrayLike","ranges":[{"startOffset":398149,"endOffset":398715,"count":1},{"startOffset":398234,"endOffset":398284,"count":0},{"startOffset":398670,"endOffset":398689,"count":0}],"isBlockCoverage":true},{"functionName":"parseArrowExpression","ranges":[{"startOffset":398719,"endOffset":399522,"count":0}],"isBlockCoverage":false},{"functionName":"setArrowFunctionParameters","ranges":[{"startOffset":399526,"endOffset":399676,"count":0}],"isBlockCoverage":false},{"functionName":"parseFunctionBodyAndFinish","ranges":[{"startOffset":399680,"endOffset":399826,"count":5}],"isBlockCoverage":true},{"functionName":"parseFunctionBody","ranges":[{"startOffset":399830,"endOffset":401175,"count":5},{"startOffset":399932,"endOffset":399949,"count":0},{"startOffset":400028,"endOffset":400139,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":400384,"endOffset":401063,"count":5},{"startOffset":400512,"endOffset":400524,"count":0},{"startOffset":400526,"endOffset":400723,"count":0},{"startOffset":400770,"endOffset":400790,"count":0},{"startOffset":400842,"endOffset":400861,"count":0},{"startOffset":400862,"endOffset":400874,"count":0},{"startOffset":400875,"endOffset":400888,"count":0},{"startOffset":400970,"endOffset":401055,"count":2}],"isBlockCoverage":true},{"functionName":"isSimpleParameter","ranges":[{"startOffset":401179,"endOffset":401247,"count":1}],"isBlockCoverage":true},{"functionName":"isSimpleParamList","ranges":[{"startOffset":401251,"endOffset":401423,"count":5},{"startOffset":401334,"endOffset":401401,"count":1},{"startOffset":401382,"endOffset":401395,"count":0}],"isBlockCoverage":true},{"functionName":"checkParams","ranges":[{"startOffset":401427,"endOffset":401826,"count":5},{"startOffset":401670,"endOffset":401822,"count":1}],"isBlockCoverage":true},{"functionName":"parseExprList","ranges":[{"startOffset":401830,"endOffset":402354,"count":1},{"startOffset":401973,"endOffset":402332,"count":0}],"isBlockCoverage":true},{"functionName":"parseExprListItem","ranges":[{"startOffset":402358,"endOffset":403357,"count":16},{"startOffset":402467,"endOffset":402649,"count":0},{"startOffset":402675,"endOffset":402899,"count":0},{"startOffset":402925,"endOffset":403239,"count":0}],"isBlockCoverage":true},{"functionName":"parseIdentifier","ranges":[{"startOffset":403361,"endOffset":403536,"count":54}],"isBlockCoverage":true},{"functionName":"createIdentifier","ranges":[{"startOffset":403540,"endOffset":403680,"count":54}],"isBlockCoverage":true},{"functionName":"parseIdentifierName","ranges":[{"startOffset":403684,"endOffset":404202,"count":54},{"startOffset":403874,"endOffset":403918,"count":0},{"startOffset":404006,"endOffset":404081,"count":15},{"startOffset":404034,"endOffset":404075,"count":0},{"startOffset":404081,"endOffset":404163,"count":39}],"isBlockCoverage":true},{"functionName":"checkReservedWord","ranges":[{"startOffset":404206,"endOffset":405648,"count":39},{"startOffset":404294,"endOffset":404315,"count":9},{"startOffset":404315,"endOffset":404351,"count":30},{"startOffset":404351,"endOffset":404372,"count":28},{"startOffset":404372,"endOffset":404400,"count":2},{"startOffset":404400,"endOffset":404555,"count":0},{"startOffset":404555,"endOffset":405194,"count":2},{"startOffset":404583,"endOffset":404994,"count":0},{"startOffset":405082,"endOffset":405188,"count":0},{"startOffset":405194,"endOffset":405218,"count":2},{"startOffset":405218,"endOffset":405236,"count":0},{"startOffset":405238,"endOffset":405358,"count":0},{"startOffset":405358,"endOffset":405404,"count":2},{"startOffset":405404,"endOffset":405420,"count":0},{"startOffset":405421,"endOffset":405482,"count":2},{"startOffset":405433,"endOffset":405459,"count":0},{"startOffset":405528,"endOffset":405644,"count":0}],"isBlockCoverage":true},{"functionName":"isAwaitAllowed","ranges":[{"startOffset":405652,"endOffset":405841,"count":0}],"isBlockCoverage":false},{"functionName":"parseAwait","ranges":[{"startOffset":405845,"endOffset":406542,"count":0}],"isBlockCoverage":false},{"functionName":"isAmbiguousAwait","ranges":[{"startOffset":406546,"endOffset":406821,"count":0}],"isBlockCoverage":false},{"functionName":"parseYield","ranges":[{"startOffset":406825,"endOffset":407526,"count":0}],"isBlockCoverage":false},{"functionName":"checkPipelineAtInfixOperator","ranges":[{"startOffset":407530,"endOffset":407826,"count":0}],"isBlockCoverage":false},{"functionName":"parseSmartPipelineBodyInStyle","ranges":[{"startOffset":407830,"endOffset":408282,"count":0}],"isBlockCoverage":false},{"functionName":"isSimpleReference","ranges":[{"startOffset":408286,"endOffset":408556,"count":0}],"isBlockCoverage":false},{"functionName":"checkSmartPipeTopicBodyEarlyErrors","ranges":[{"startOffset":408560,"endOffset":408879,"count":0}],"isBlockCoverage":false},{"functionName":"withTopicBindingContext","ranges":[{"startOffset":408883,"endOffset":409196,"count":0}],"isBlockCoverage":false},{"functionName":"withSmartMixTopicForbiddingContext","ranges":[{"startOffset":409200,"endOffset":409669,"count":6},{"startOffset":409326,"endOffset":409627,"count":0}],"isBlockCoverage":true},{"functionName":"withSoloAwaitPermittingContext","ranges":[{"startOffset":409673,"endOffset":409928,"count":0}],"isBlockCoverage":false},{"functionName":"allowInAnd","ranges":[{"startOffset":409932,"endOffset":410253,"count":44},{"startOffset":410075,"endOffset":410252,"count":22}],"isBlockCoverage":true},{"functionName":"disallowInAnd","ranges":[{"startOffset":410257,"endOffset":410585,"count":0}],"isBlockCoverage":false},{"functionName":"registerTopicReference","ranges":[{"startOffset":410589,"endOffset":410666,"count":0}],"isBlockCoverage":false},{"functionName":"topicReferenceIsAllowedInCurrentContext","ranges":[{"startOffset":410670,"endOffset":410783,"count":0}],"isBlockCoverage":false},{"functionName":"topicReferenceWasUsedInCurrentContext","ranges":[{"startOffset":410787,"endOffset":410936,"count":0}],"isBlockCoverage":false},{"functionName":"parseFSharpPipelineBody","ranges":[{"startOffset":410940,"endOffset":411423,"count":0}],"isBlockCoverage":false},{"functionName":"parseModuleExpression","ranges":[{"startOffset":411427,"endOffset":411873,"count":0}],"isBlockCoverage":false},{"functionName":"parsePropertyNamePrefixOperator","ranges":[{"startOffset":411877,"endOffset":411917,"count":2}],"isBlockCoverage":true},{"functionName":"babel7CompatTokens","ranges":[{"startOffset":412228,"endOffset":415550,"count":0}],"isBlockCoverage":false},{"functionName":"parseTopLevel","ranges":[{"startOffset":415603,"endOffset":415871,"count":6},{"startOffset":415752,"endOffset":415824,"count":0}],"isBlockCoverage":true},{"functionName":"parseProgram","ranges":[{"startOffset":415875,"endOffset":416444,"count":6},{"startOffset":416200,"endOffset":416391,"count":0}],"isBlockCoverage":true},{"functionName":"stmtToDirective","ranges":[{"startOffset":416448,"endOffset":417097,"count":0}],"isBlockCoverage":false},{"functionName":"parseInterpreterDirective","ranges":[{"startOffset":417101,"endOffset":417332,"count":6},{"startOffset":417182,"endOffset":417331,"count":0}],"isBlockCoverage":true},{"functionName":"isLet","ranges":[{"startOffset":417336,"endOffset":417456,"count":31},{"startOffset":417412,"endOffset":417455,"count":0}],"isBlockCoverage":true},{"functionName":"isLetKeyword","ranges":[{"startOffset":417460,"endOffset":418079,"count":0}],"isBlockCoverage":false},{"functionName":"parseStatement","ranges":[{"startOffset":418083,"endOffset":418247,"count":31},{"startOffset":418143,"endOffset":418184,"count":0}],"isBlockCoverage":true},{"functionName":"parseStatementContent","ranges":[{"startOffset":418251,"endOffset":422127,"count":31},{"startOffset":418410,"endOffset":418459,"count":0},{"startOffset":418492,"endOffset":418561,"count":0},{"startOffset":418569,"endOffset":418639,"count":0},{"startOffset":418647,"endOffset":418705,"count":0},{"startOffset":418713,"endOffset":418765,"count":0},{"startOffset":418773,"endOffset":418826,"count":0},{"startOffset":418834,"endOffset":419311,"count":2},{"startOffset":418888,"endOffset":418894,"count":0},{"startOffset":418917,"endOffset":419243,"count":0},{"startOffset":419319,"endOffset":419411,"count":0},{"startOffset":419419,"endOffset":419471,"count":4},{"startOffset":419479,"endOffset":419535,"count":8},{"startOffset":419543,"endOffset":419599,"count":0},{"startOffset":419607,"endOffset":419662,"count":0},{"startOffset":419670,"endOffset":419723,"count":1},{"startOffset":419731,"endOffset":419739,"count":0},{"startOffset":419746,"endOffset":420009,"count":2},{"startOffset":419817,"endOffset":419834,"count":0},{"startOffset":419836,"endOffset":419957,"count":0},{"startOffset":420017,"endOffset":420072,"count":0},{"startOffset":420080,"endOffset":420134,"count":0},{"startOffset":420142,"endOffset":420183,"count":2},{"startOffset":420191,"endOffset":420246,"count":4},{"startOffset":420254,"endOffset":420446,"count":0},{"startOffset":420454,"endOffset":421444,"count":0},{"startOffset":421452,"endOffset":421800,"count":8},{"startOffset":421509,"endOffset":421790,"count":0},{"startOffset":421806,"endOffset":421927,"count":8},{"startOffset":421927,"endOffset":421956,"count":6},{"startOffset":421957,"endOffset":421972,"count":0},{"startOffset":421974,"endOffset":422054,"count":0},{"startOffset":422054,"endOffset":422123,"count":8}],"isBlockCoverage":true},{"functionName":"assertModuleNodeAllowed","ranges":[{"startOffset":422131,"endOffset":422317,"count":0}],"isBlockCoverage":false},{"functionName":"takeDecorators","ranges":[{"startOffset":422321,"endOffset":422643,"count":0}],"isBlockCoverage":false},{"functionName":"canHaveLeadingDecorator","ranges":[{"startOffset":422647,"endOffset":422705,"count":0}],"isBlockCoverage":false},{"functionName":"parseDecorators","ranges":[{"startOffset":422709,"endOffset":423434,"count":0}],"isBlockCoverage":false},{"functionName":"parseDecorator","ranges":[{"startOffset":423438,"endOffset":424596,"count":0}],"isBlockCoverage":false},{"functionName":"parseMaybeDecoratorArguments","ranges":[{"startOffset":424600,"endOffset":424929,"count":0}],"isBlockCoverage":false},{"functionName":"parseBreakContinueStatement","ranges":[{"startOffset":424933,"endOffset":425275,"count":0}],"isBlockCoverage":false},{"functionName":"verifyBreakContinue","ranges":[{"startOffset":425279,"endOffset":425825,"count":0}],"isBlockCoverage":false},{"functionName":"parseDebuggerStatement","ranges":[{"startOffset":425829,"endOffset":425957,"count":0}],"isBlockCoverage":false},{"functionName":"parseHeaderExpression","ranges":[{"startOffset":425961,"endOffset":426088,"count":4}],"isBlockCoverage":true},{"functionName":"parseDoStatement","ranges":[{"startOffset":426092,"endOffset":426434,"count":0}],"isBlockCoverage":false},{"functionName":"parseForStatement","ranges":[{"startOffset":426438,"endOffset":428514,"count":0}],"isBlockCoverage":false},{"functionName":"parseFunctionStatement","ranges":[{"startOffset":428518,"endOffset":428714,"count":2},{"startOffset":428674,"endOffset":428698,"count":0}],"isBlockCoverage":true},{"functionName":"parseIfStatement","ranges":[{"startOffset":428718,"endOffset":428977,"count":4},{"startOffset":428889,"endOffset":428916,"count":1},{"startOffset":428917,"endOffset":428923,"count":3}],"isBlockCoverage":true},{"functionName":"parseReturnStatement","ranges":[{"startOffset":428981,"endOffset":429408,"count":8},{"startOffset":429044,"endOffset":429087,"count":0},{"startOffset":429089,"endOffset":429179,"count":0},{"startOffset":429232,"endOffset":429267,"count":0}],"isBlockCoverage":true},{"functionName":"parseSwitchStatement","ranges":[{"startOffset":429412,"endOffset":430607,"count":0}],"isBlockCoverage":false},{"functionName":"parseThrowStatement","ranges":[{"startOffset":430611,"endOffset":430917,"count":0}],"isBlockCoverage":false},{"functionName":"parseCatchClauseParam","ranges":[{"startOffset":430921,"endOffset":431265,"count":1},{"startOffset":431087,"endOffset":431090,"count":0}],"isBlockCoverage":true},{"functionName":"parseTryStatement","ranges":[{"startOffset":431269,"endOffset":432111,"count":1},{"startOffset":431597,"endOffset":431680,"count":0},{"startOffset":431907,"endOffset":431926,"count":0},{"startOffset":431958,"endOffset":431976,"count":0},{"startOffset":431978,"endOffset":432056,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":431742,"endOffset":431777,"count":1}],"isBlockCoverage":true},{"functionName":"parseVarStatement","ranges":[{"startOffset":432115,"endOffset":432342,"count":2}],"isBlockCoverage":true},{"functionName":"parseWhileStatement","ranges":[{"startOffset":432346,"endOffset":432653,"count":0}],"isBlockCoverage":false},{"functionName":"parseWithStatement","ranges":[{"startOffset":432657,"endOffset":433011,"count":0}],"isBlockCoverage":false},{"functionName":"parseEmptyStatement","ranges":[{"startOffset":433015,"endOffset":433115,"count":4}],"isBlockCoverage":true},{"functionName":"parseLabeledStatement","ranges":[{"startOffset":433119,"endOffset":434097,"count":0}],"isBlockCoverage":false},{"functionName":"parseExpressionStatement","ranges":[{"startOffset":434101,"endOffset":434250,"count":8}],"isBlockCoverage":true},{"functionName":"parseBlock","ranges":[{"startOffset":434254,"endOffset":434742,"count":9},{"startOffset":434400,"endOffset":434446,"count":5},{"startOffset":434500,"endOffset":434544,"count":3},{"startOffset":434653,"endOffset":434685,"count":3}],"isBlockCoverage":true},{"functionName":"isValidDirective","ranges":[{"startOffset":434746,"endOffset":434906,"count":10},{"startOffset":434818,"endOffset":434861,"count":2},{"startOffset":434862,"endOffset":434901,"count":0}],"isBlockCoverage":true},{"functionName":"parseBlockBody","ranges":[{"startOffset":434910,"endOffset":435181,"count":15},{"startOffset":435119,"endOffset":435131,"count":11},{"startOffset":435132,"endOffset":435143,"count":4}],"isBlockCoverage":true},{"functionName":"parseBlockOrModuleBlockBody","ranges":[{"startOffset":435185,"endOffset":436145,"count":15},{"startOffset":435412,"endOffset":435973,"count":26},{"startOffset":435492,"endOffset":435514,"count":20},{"startOffset":435516,"endOffset":435943,"count":10},{"startOffset":435559,"endOffset":435858,"count":0},{"startOffset":436000,"endOffset":436065,"count":5},{"startOffset":436087,"endOffset":436123,"count":0}],"isBlockCoverage":true},{"functionName":"parseFor","ranges":[{"startOffset":436149,"endOffset":436595,"count":0}],"isBlockCoverage":false},{"functionName":"parseForIn","ranges":[{"startOffset":436599,"endOffset":437686,"count":0}],"isBlockCoverage":false},{"functionName":"parseVar","ranges":[{"startOffset":437690,"endOffset":438721,"count":2},{"startOffset":437838,"endOffset":438699,"count":3},{"startOffset":437944,"endOffset":437950,"count":1},{"startOffset":437951,"endOffset":438027,"count":2},{"startOffset":437959,"endOffset":437994,"count":0},{"startOffset":438059,"endOffset":438086,"count":1},{"startOffset":438088,"endOffset":438590,"count":1},{"startOffset":438132,"endOffset":438189,"count":0},{"startOffset":438191,"endOffset":438353,"count":0},{"startOffset":438380,"endOffset":438426,"count":0},{"startOffset":438428,"endOffset":438582,"count":0},{"startOffset":438687,"endOffset":438693,"count":2}],"isBlockCoverage":true},{"functionName":"parseVarId","ranges":[{"startOffset":438725,"endOffset":438942,"count":3},{"startOffset":438916,"endOffset":438930,"count":0}],"isBlockCoverage":true},{"functionName":"parseFunction","ranges":[{"startOffset":438946,"endOffset":440256,"count":5},{"startOffset":439167,"endOffset":439201,"count":2},{"startOffset":439265,"endOffset":439286,"count":0},{"startOffset":439288,"endOffset":439398,"count":0},{"startOffset":439457,"endOffset":439513,"count":2},{"startOffset":439762,"endOffset":439809,"count":3},{"startOffset":440090,"endOffset":440112,"count":2},{"startOffset":440114,"endOffset":440167,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":439898,"endOffset":440016,"count":5},{"startOffset":439962,"endOffset":439985,"count":2},{"startOffset":439986,"endOffset":440008,"count":3}],"isBlockCoverage":true},{"functionName":"parseFunctionId","ranges":[{"startOffset":440260,"endOffset":440384,"count":5},{"startOffset":440310,"endOffset":440347,"count":3},{"startOffset":440348,"endOffset":440372,"count":2},{"startOffset":440373,"endOffset":440379,"count":3}],"isBlockCoverage":true},{"functionName":"parseFunctionParams","ranges":[{"startOffset":440388,"endOffset":440625,"count":5}],"isBlockCoverage":true},{"functionName":"registerFunctionStatementId","ranges":[{"startOffset":440629,"endOffset":440881,"count":2},{"startOffset":440683,"endOffset":440690,"count":0},{"startOffset":440750,"endOffset":440767,"count":0},{"startOffset":440768,"endOffset":440781,"count":0},{"startOffset":440815,"endOffset":440825,"count":1},{"startOffset":440826,"endOffset":440840,"count":1},{"startOffset":440841,"endOffset":440856,"count":0}],"isBlockCoverage":true},{"functionName":"parseClass","ranges":[{"startOffset":440885,"endOffset":441292,"count":0}],"isBlockCoverage":false},{"functionName":"isClassProperty","ranges":[{"startOffset":441296,"endOffset":441381,"count":0}],"isBlockCoverage":false},{"functionName":"isClassMethod","ranges":[{"startOffset":441385,"endOffset":441433,"count":0}],"isBlockCoverage":false},{"functionName":"isNonstaticConstructor","ranges":[{"startOffset":441437,"endOffset":441597,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassBody","ranges":[{"startOffset":441601,"endOffset":443038,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassMemberFromModifier","ranges":[{"startOffset":443042,"endOffset":443706,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassMember","ranges":[{"startOffset":443710,"endOffset":444101,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassMemberWithIsStatic","ranges":[{"startOffset":444105,"endOffset":448569,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassElementName","ranges":[{"startOffset":448573,"endOffset":449150,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassStaticBlock","ranges":[{"startOffset":449154,"endOffset":449824,"count":0}],"isBlockCoverage":false},{"functionName":"pushClassProperty","ranges":[{"startOffset":449828,"endOffset":450110,"count":0}],"isBlockCoverage":false},{"functionName":"pushClassPrivateProperty","ranges":[{"startOffset":450114,"endOffset":450361,"count":0}],"isBlockCoverage":false},{"functionName":"pushClassAccessorProperty","ranges":[{"startOffset":450365,"endOffset":450891,"count":0}],"isBlockCoverage":false},{"functionName":"pushClassMethod","ranges":[{"startOffset":450895,"endOffset":451119,"count":0}],"isBlockCoverage":false},{"functionName":"pushClassPrivateMethod","ranges":[{"startOffset":451123,"endOffset":451619,"count":0}],"isBlockCoverage":false},{"functionName":"declareClassPrivateMethodInScope","ranges":[{"startOffset":451623,"endOffset":451772,"count":0}],"isBlockCoverage":false},{"functionName":"parsePostMemberNameModifiers","ranges":[{"startOffset":451776,"endOffset":451821,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassPrivateProperty","ranges":[{"startOffset":451825,"endOffset":451975,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassProperty","ranges":[{"startOffset":451979,"endOffset":452115,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassAccessorProperty","ranges":[{"startOffset":452119,"endOffset":452271,"count":0}],"isBlockCoverage":false},{"functionName":"parseInitializer","ranges":[{"startOffset":452275,"endOffset":452593,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassId","ranges":[{"startOffset":452597,"endOffset":453058,"count":0}],"isBlockCoverage":false},{"functionName":"parseClassSuper","ranges":[{"startOffset":453062,"endOffset":453161,"count":0}],"isBlockCoverage":false},{"functionName":"parseExport","ranges":[{"startOffset":453165,"endOffset":454686,"count":0}],"isBlockCoverage":false},{"functionName":"eatExportStar","ranges":[{"startOffset":454690,"endOffset":454740,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseExportDefaultSpecifier","ranges":[{"startOffset":454744,"endOffset":455098,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseExportNamespaceSpecifier","ranges":[{"startOffset":455102,"endOffset":455530,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseExportNamedSpecifiers","ranges":[{"startOffset":455534,"endOffset":455969,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseExportDeclaration","ranges":[{"startOffset":455973,"endOffset":456305,"count":0}],"isBlockCoverage":false},{"functionName":"isAsyncFunction","ranges":[{"startOffset":456309,"endOffset":456533,"count":8},{"startOffset":456374,"endOffset":456528,"count":0}],"isBlockCoverage":true},{"functionName":"parseExportDefaultExpression","ranges":[{"startOffset":456537,"endOffset":457513,"count":0}],"isBlockCoverage":false},{"functionName":"parseExportDeclaration","ranges":[{"startOffset":457517,"endOffset":457589,"count":0}],"isBlockCoverage":false},{"functionName":"isExportDefaultSpecifier","ranges":[{"startOffset":457593,"endOffset":458615,"count":0}],"isBlockCoverage":false},{"functionName":"parseExportFrom","ranges":[{"startOffset":458619,"endOffset":458974,"count":0}],"isBlockCoverage":false},{"functionName":"shouldParseExportDeclaration","ranges":[{"startOffset":458978,"endOffset":459532,"count":0}],"isBlockCoverage":false},{"functionName":"checkExport","ranges":[{"startOffset":459536,"endOffset":461791,"count":0}],"isBlockCoverage":false},{"functionName":"checkDeclaration","ranges":[{"startOffset":461795,"endOffset":462493,"count":0}],"isBlockCoverage":false},{"functionName":"checkDuplicateExports","ranges":[{"startOffset":462497,"endOffset":462889,"count":0}],"isBlockCoverage":false},{"functionName":"parseExportSpecifiers","ranges":[{"startOffset":462893,"endOffset":463450,"count":0}],"isBlockCoverage":false},{"functionName":"parseExportSpecifier","ranges":[{"startOffset":463454,"endOffset":463840,"count":0}],"isBlockCoverage":false},{"functionName":"parseModuleExportName","ranges":[{"startOffset":463844,"endOffset":464275,"count":0}],"isBlockCoverage":false},{"functionName":"parseImport","ranges":[{"startOffset":464279,"endOffset":465058,"count":0}],"isBlockCoverage":false},{"functionName":"parseImportSource","ranges":[{"startOffset":465062,"endOffset":465165,"count":0}],"isBlockCoverage":false},{"functionName":"shouldParseDefaultImport","ranges":[{"startOffset":465169,"endOffset":465252,"count":0}],"isBlockCoverage":false},{"functionName":"parseImportSpecifierLocal","ranges":[{"startOffset":465256,"endOffset":465427,"count":0}],"isBlockCoverage":false},{"functionName":"finishImportSpecifier","ranges":[{"startOffset":465431,"endOffset":465615,"count":0}],"isBlockCoverage":false},{"functionName":"parseAssertEntries","ranges":[{"startOffset":465619,"endOffset":466554,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseModuleAttributes","ranges":[{"startOffset":466558,"endOffset":467674,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseImportAssertions","ranges":[{"startOffset":467678,"endOffset":468035,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseDefaultImportSpecifier","ranges":[{"startOffset":468039,"endOffset":468262,"count":0}],"isBlockCoverage":false},{"functionName":"maybeParseStarImportSpecifier","ranges":[{"startOffset":468266,"endOffset":468554,"count":0}],"isBlockCoverage":false},{"functionName":"parseNamedImportSpecifiers","ranges":[{"startOffset":468558,"endOffset":469353,"count":0}],"isBlockCoverage":false},{"functionName":"parseImportSpecifier","ranges":[{"startOffset":469357,"endOffset":470013,"count":0}],"isBlockCoverage":false},{"functionName":"isThisParam","ranges":[{"startOffset":470017,"endOffset":470106,"count":0}],"isBlockCoverage":false},{"functionName":"Parser","ranges":[{"startOffset":470152,"endOffset":470401,"count":6}],"isBlockCoverage":true},{"functionName":"getScopeHandler","ranges":[{"startOffset":470405,"endOffset":470453,"count":6}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":470457,"endOffset":470713,"count":6}],"isBlockCoverage":true},{"functionName":"pluginsMap","ranges":[{"startOffset":470718,"endOffset":470982,"count":6},{"startOffset":470865,"endOffset":470873,"count":0},{"startOffset":470948,"endOffset":470953,"count":0}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":470984,"endOffset":471883,"count":6},{"startOffset":471070,"endOffset":471078,"count":0},{"startOffset":471121,"endOffset":471824,"count":0}],"isBlockCoverage":true},{"functionName":"parseExpression","ranges":[{"startOffset":471884,"endOffset":472078,"count":0}],"isBlockCoverage":false},{"functionName":"generateExportedTokenTypes","ranges":[{"startOffset":472080,"endOffset":472326,"count":1},{"startOffset":472222,"endOffset":472302,"count":141}],"isBlockCoverage":true},{"functionName":"getParser","ranges":[{"startOffset":472378,"endOffset":472601,"count":6}],"isBlockCoverage":true},{"functionName":"getParserClass","ranges":[{"startOffset":472633,"endOffset":473013,"count":6},{"startOffset":472854,"endOffset":472996,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":472724,"endOffset":472767,"count":36}],"isBlockCoverage":true}]},{"scriptId":"496","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/code-frame/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4713,"count":1}],"isBlockCoverage":true},{"functionName":"getDefs","ranges":[{"startOffset":239,"endOffset":362,"count":0}],"isBlockCoverage":false},{"functionName":"getMarkerLines","ranges":[{"startOffset":408,"endOffset":1976,"count":0}],"isBlockCoverage":false},{"functionName":"codeFrameColumns","ranges":[{"startOffset":1978,"endOffset":4012,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":4014,"endOffset":4713,"count":0}],"isBlockCoverage":false}]},{"scriptId":"497","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/highlight/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2719,"count":1}],"isBlockCoverage":true},{"functionName":"getDefs","ranges":[{"startOffset":415,"endOffset":716,"count":0}],"isBlockCoverage":false},{"functionName":"getTokenType","ranges":[{"startOffset":868,"endOffset":1651,"count":0}],"isBlockCoverage":false},{"functionName":"tokenize","ranges":[{"startOffset":1667,"endOffset":1918,"count":0}],"isBlockCoverage":false},{"functionName":"highlightTokens","ranges":[{"startOffset":1923,"endOffset":2256,"count":0}],"isBlockCoverage":false},{"functionName":"shouldHighlight","ranges":[{"startOffset":2258,"endOffset":2350,"count":0}],"isBlockCoverage":false},{"functionName":"getChalk","ranges":[{"startOffset":2352,"endOffset":2484,"count":0}],"isBlockCoverage":false},{"functionName":"highlight","ranges":[{"startOffset":2486,"endOffset":2719,"count":0}],"isBlockCoverage":false}]},{"scriptId":"498","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/js-tokens/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1448,"count":1}],"isBlockCoverage":true},{"functionName":"exports.matchToToken","ranges":[{"startOffset":917,"endOffset":1447,"count":0}],"isBlockCoverage":false}]},{"scriptId":"499","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chalk/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6437,"count":1},{"startOffset":274,"endOffset":336,"count":0},{"startOffset":1637,"endOffset":1678,"count":0},{"startOffset":1723,"endOffset":1982,"count":41},{"startOffset":2227,"endOffset":2673,"count":15},{"startOffset":2257,"endOffset":2273,"count":1},{"startOffset":2273,"endOffset":2673,"count":14},{"startOffset":2825,"endOffset":3344,"count":15},{"startOffset":2855,"endOffset":2871,"count":1},{"startOffset":2871,"endOffset":3344,"count":14}],"isBlockCoverage":true},{"functionName":"applyOptions","ranges":[{"startOffset":619,"endOffset":915,"count":1},{"startOffset":770,"endOffset":773,"count":0},{"startOffset":826,"endOffset":841,"count":0},{"startOffset":879,"endOffset":896,"count":0}],"isBlockCoverage":true},{"functionName":"Chalk","ranges":[{"startOffset":917,"endOffset":1542,"count":1},{"startOffset":1100,"endOffset":1127,"count":0},{"startOffset":1128,"endOffset":1144,"count":0},{"startOffset":1509,"endOffset":1541,"count":0}],"isBlockCoverage":true},{"functionName":"Chalk.chalk.template","ranges":[{"startOffset":1220,"endOffset":1342,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1832,"endOffset":1976,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2004,"endOffset":2078,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2296,"endOffset":2667,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2961,"endOffset":3338,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3384,"endOffset":3392,"count":0}],"isBlockCoverage":false},{"functionName":"build","ranges":[{"startOffset":3404,"endOffset":4262,"count":0}],"isBlockCoverage":false},{"functionName":"applyStyle","ranges":[{"startOffset":4264,"endOffset":5737,"count":0}],"isBlockCoverage":false},{"functionName":"chalkTag","ranges":[{"startOffset":5739,"endOffset":6224,"count":0}],"isBlockCoverage":false}]},{"scriptId":"500","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/escape-string-regexp/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":226,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":79,"endOffset":224,"count":43},{"startOffset":126,"endOffset":174,"count":0}],"isBlockCoverage":true}]},{"scriptId":"501","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/ansi-styles/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3574,"count":1}],"isBlockCoverage":true},{"functionName":"wrapAnsi16","ranges":[{"startOffset":81,"endOffset":197,"count":150}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":97,"endOffset":197,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsi256","ranges":[{"startOffset":220,"endOffset":344,"count":150}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":236,"endOffset":344,"count":0}],"isBlockCoverage":false},{"functionName":"wrapAnsi16m","ranges":[{"startOffset":367,"endOffset":512,"count":150}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":383,"endOffset":512,"count":0}],"isBlockCoverage":false},{"functionName":"assembleStyles","ranges":[{"startOffset":515,"endOffset":3456,"count":5},{"startOffset":1771,"endOffset":2251,"count":15},{"startOffset":1855,"endOffset":2070,"count":205},{"startOffset":2828,"endOffset":3437,"count":75},{"startOffset":2875,"endOffset":2893,"count":0},{"startOffset":2955,"endOffset":2977,"count":5},{"startOffset":3004,"endOffset":3126,"count":70},{"startOffset":3154,"endOffset":3286,"count":70},{"startOffset":3310,"endOffset":3434,"count":70}],"isBlockCoverage":true},{"functionName":"ansi2ansi","ranges":[{"startOffset":2272,"endOffset":2278,"count":0}],"isBlockCoverage":false},{"functionName":"rgb2rgb","ranges":[{"startOffset":2297,"endOffset":2319,"count":0}],"isBlockCoverage":false}]},{"scriptId":"502","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/color-convert/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1725,"count":1}],"isBlockCoverage":true},{"functionName":"wrapRaw","ranges":[{"startOffset":136,"endOffset":509,"count":210}],"isBlockCoverage":true},{"functionName":"wrappedFn","ranges":[{"startOffset":176,"endOffset":365,"count":0}],"isBlockCoverage":false},{"functionName":"wrapRounded","ranges":[{"startOffset":511,"endOffset":1187,"count":210}],"isBlockCoverage":true},{"functionName":"wrappedFn","ranges":[{"startOffset":555,"endOffset":1043,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1204,"endOffset":1695,"count":15}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1541,"endOffset":1691,"count":210}],"isBlockCoverage":true}]},{"scriptId":"503","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/color-convert/conversions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16850,"count":1},{"startOffset":312,"endOffset":401,"count":148},{"startOffset":1111,"endOffset":1793,"count":15},{"startOffset":1190,"endOffset":1254,"count":0},{"startOffset":1293,"endOffset":1363,"count":0},{"startOffset":1429,"endOffset":1501,"count":0}],"isBlockCoverage":true},{"functionName":"convert.rgb.hsl","ranges":[{"startOffset":1813,"endOffset":2432,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.hsv","ranges":[{"startOffset":2453,"endOffset":3101,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.hwb","ranges":[{"startOffset":3122,"endOffset":3354,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.cmyk","ranges":[{"startOffset":3376,"endOffset":3678,"count":0}],"isBlockCoverage":false},{"functionName":"comparativeDistance","ranges":[{"startOffset":3776,"endOffset":3913,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.keyword","ranges":[{"startOffset":3937,"endOffset":4518,"count":0}],"isBlockCoverage":false},{"functionName":"convert.keyword.rgb","ranges":[{"startOffset":4543,"endOffset":4595,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.xyz","ranges":[{"startOffset":4616,"endOffset":5131,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.lab","ranges":[{"startOffset":5152,"endOffset":5603,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsl.rgb","ranges":[{"startOffset":5624,"endOffset":6283,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsl.hsv","ranges":[{"startOffset":6304,"endOffset":6639,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsv.rgb","ranges":[{"startOffset":6660,"endOffset":7122,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsv.hsl","ranges":[{"startOffset":7143,"endOffset":7437,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hwb.rgb","ranges":[{"startOffset":7507,"endOffset":8206,"count":0}],"isBlockCoverage":false},{"functionName":"convert.cmyk.rgb","ranges":[{"startOffset":8228,"endOffset":8523,"count":0}],"isBlockCoverage":false},{"functionName":"convert.xyz.rgb","ranges":[{"startOffset":8544,"endOffset":9210,"count":0}],"isBlockCoverage":false},{"functionName":"convert.xyz.lab","ranges":[{"startOffset":9231,"endOffset":9649,"count":0}],"isBlockCoverage":false},{"functionName":"convert.lab.xyz","ranges":[{"startOffset":9670,"endOffset":10111,"count":0}],"isBlockCoverage":false},{"functionName":"convert.lab.lch","ranges":[{"startOffset":10132,"endOffset":10362,"count":0}],"isBlockCoverage":false},{"functionName":"convert.lch.lab","ranges":[{"startOffset":10383,"endOffset":10573,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.ansi16","ranges":[{"startOffset":10597,"endOffset":11000,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsv.ansi16","ranges":[{"startOffset":11024,"endOffset":11199,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.ansi256","ranges":[{"startOffset":11224,"endOffset":11712,"count":0}],"isBlockCoverage":false},{"functionName":"convert.ansi16.rgb","ranges":[{"startOffset":11736,"endOffset":12128,"count":0}],"isBlockCoverage":false},{"functionName":"convert.ansi256.rgb","ranges":[{"startOffset":12153,"endOffset":12440,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.hex","ranges":[{"startOffset":12461,"endOffset":12709,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hex.rgb","ranges":[{"startOffset":12730,"endOffset":13168,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.hcg","ranges":[{"startOffset":13189,"endOffset":13762,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsl.hcg","ranges":[{"startOffset":13783,"endOffset":14037,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hsv.hcg","ranges":[{"startOffset":14058,"endOffset":14233,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hcg.rgb","ranges":[{"startOffset":14254,"endOffset":14993,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hcg.hsv","ranges":[{"startOffset":15014,"endOffset":15189,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hcg.hsl","ranges":[{"startOffset":15210,"endOffset":15469,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hcg.hwb","ranges":[{"startOffset":15490,"endOffset":15630,"count":0}],"isBlockCoverage":false},{"functionName":"convert.hwb.hcg","ranges":[{"startOffset":15651,"endOffset":15839,"count":0}],"isBlockCoverage":false},{"functionName":"convert.apple.rgb","ranges":[{"startOffset":15862,"endOffset":15970,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.apple","ranges":[{"startOffset":15993,"endOffset":16093,"count":0}],"isBlockCoverage":false},{"functionName":"convert.gray.rgb","ranges":[{"startOffset":16115,"endOffset":16207,"count":0}],"isBlockCoverage":false},{"functionName":"convert.gray.hsl.convert.gray.hsv","ranges":[{"startOffset":16248,"endOffset":16292,"count":0}],"isBlockCoverage":false},{"functionName":"convert.gray.hwb","ranges":[{"startOffset":16314,"endOffset":16360,"count":0}],"isBlockCoverage":false},{"functionName":"convert.gray.cmyk","ranges":[{"startOffset":16383,"endOffset":16430,"count":0}],"isBlockCoverage":false},{"functionName":"convert.gray.lab","ranges":[{"startOffset":16452,"endOffset":16496,"count":0}],"isBlockCoverage":false},{"functionName":"convert.gray.hex","ranges":[{"startOffset":16518,"endOffset":16738,"count":0}],"isBlockCoverage":false},{"functionName":"convert.rgb.gray","ranges":[{"startOffset":16760,"endOffset":16848,"count":0}],"isBlockCoverage":false}]},{"scriptId":"504","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/color-name/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4617,"count":1}],"isBlockCoverage":true}]},{"scriptId":"505","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/color-convert/route.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2227,"count":1}],"isBlockCoverage":true},{"functionName":"buildGraph","ranges":[{"startOffset":389,"endOffset":741,"count":15},{"startOffset":583,"endOffset":723,"count":225}],"isBlockCoverage":true},{"functionName":"deriveBFS","ranges":[{"startOffset":797,"endOffset":1337,"count":15},{"startOffset":965,"endOffset":1319,"count":225},{"startOffset":1106,"endOffset":1316,"count":660},{"startOffset":1201,"endOffset":1312,"count":210}],"isBlockCoverage":true},{"functionName":"link","ranges":[{"startOffset":1339,"endOffset":1421,"count":210}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1373,"endOffset":1418,"count":0}],"isBlockCoverage":false},{"functionName":"wrapConversion","ranges":[{"startOffset":1423,"endOffset":1786,"count":210}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":1805,"endOffset":2224,"count":15},{"startOffset":1972,"endOffset":2201,"count":225},{"startOffset":2059,"endOffset":2141,"count":15},{"startOffset":2141,"endOffset":2201,"count":210}],"isBlockCoverage":true}]},{"scriptId":"506","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chalk/templates.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3133,"count":1}],"isBlockCoverage":true},{"functionName":"unescape","ranges":[{"startOffset":528,"endOffset":718,"count":0}],"isBlockCoverage":false},{"functionName":"parseArguments","ranges":[{"startOffset":720,"endOffset":1214,"count":0}],"isBlockCoverage":false},{"functionName":"parseStyle","ranges":[{"startOffset":1216,"endOffset":1564,"count":0}],"isBlockCoverage":false},{"functionName":"buildStyle","ranges":[{"startOffset":1566,"endOffset":2162,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports","ranges":[{"startOffset":2181,"endOffset":3131,"count":0}],"isBlockCoverage":false}]},{"scriptId":"507","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/populate.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3919,"count":1}],"isBlockCoverage":true},{"functionName":"populatePlaceholders","ranges":[{"startOffset":321,"endOffset":1517,"count":0}],"isBlockCoverage":false},{"functionName":"applyReplacement","ranges":[{"startOffset":1519,"endOffset":3919,"count":0}],"isBlockCoverage":false}]},{"scriptId":"508","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/template/lib/literal.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2076,"count":1}],"isBlockCoverage":true},{"functionName":"literalTemplate","ranges":[{"startOffset":228,"endOffset":1017,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":366,"endOffset":1014,"count":6}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":427,"endOffset":505,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":519,"endOffset":1009,"count":0}],"isBlockCoverage":false},{"functionName":"buildLiteralData","ranges":[{"startOffset":1019,"endOffset":1817,"count":6},{"startOffset":1452,"endOffset":1491,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1700,"endOffset":1771,"count":19},{"startOffset":1739,"endOffset":1771,"count":1}],"isBlockCoverage":true},{"functionName":"buildTemplateCode","ranges":[{"startOffset":1819,"endOffset":2076,"count":6},{"startOffset":1942,"endOffset":2037,"count":0}],"isBlockCoverage":true}]},{"scriptId":"509","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-split-export-declaration/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2260,"count":1}],"isBlockCoverage":true},{"functionName":"splitExportDeclaration","ranges":[{"startOffset":291,"endOffset":2260,"count":0}],"isBlockCoverage":false}]},{"scriptId":"510","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":27801,"count":1}],"isBlockCoverage":true},{"functionName":"buildPrivateNamesMap","ranges":[{"startOffset":788,"endOffset":1680,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateNamesNodes","ranges":[{"startOffset":1682,"endOffset":2525,"count":0}],"isBlockCoverage":false},{"functionName":"privateNameVisitorFactory","ranges":[{"startOffset":2527,"endOffset":3527,"count":2}],"isBlockCoverage":true},{"functionName":"Class","ranges":[{"startOffset":2635,"endOffset":3367,"count":0}],"isBlockCoverage":false},{"functionName":"PrivateName","ranges":[{"startOffset":3586,"endOffset":4106,"count":0}],"isBlockCoverage":false},{"functionName":"unshadow","ranges":[{"startOffset":4113,"endOffset":4350,"count":0}],"isBlockCoverage":false},{"functionName":"BinaryExpression","ranges":[{"startOffset":4407,"endOffset":5471,"count":0}],"isBlockCoverage":false},{"functionName":"memoise","ranges":[{"startOffset":5512,"endOffset":5763,"count":0}],"isBlockCoverage":false},{"functionName":"receiver","ranges":[{"startOffset":5768,"endOffset":5986,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5991,"endOffset":7576,"count":0}],"isBlockCoverage":false},{"functionName":"boundGet","ranges":[{"startOffset":7581,"endOffset":7776,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":7781,"endOffset":8926,"count":0}],"isBlockCoverage":false},{"functionName":"destructureSet","ranges":[{"startOffset":8931,"endOffset":9883,"count":0}],"isBlockCoverage":false},{"functionName":"call","ranges":[{"startOffset":9888,"endOffset":10050,"count":0}],"isBlockCoverage":false},{"functionName":"optionalCall","ranges":[{"startOffset":10055,"endOffset":10224,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":10265,"endOffset":10678,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":10683,"endOffset":10774,"count":0}],"isBlockCoverage":false},{"functionName":"boundGet","ranges":[{"startOffset":10779,"endOffset":10965,"count":0}],"isBlockCoverage":false},{"functionName":"simpleSet","ranges":[{"startOffset":10970,"endOffset":11022,"count":0}],"isBlockCoverage":false},{"functionName":"destructureSet","ranges":[{"startOffset":11027,"endOffset":11084,"count":0}],"isBlockCoverage":false},{"functionName":"call","ranges":[{"startOffset":11089,"endOffset":11176,"count":0}],"isBlockCoverage":false},{"functionName":"optionalCall","ranges":[{"startOffset":11181,"endOffset":11290,"count":0}],"isBlockCoverage":false},{"functionName":"transformPrivateNamesUsage","ranges":[{"startOffset":11296,"endOffset":11956,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateFieldInitLoose","ranges":[{"startOffset":11958,"endOffset":12404,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateInstanceFieldInitSpec","ranges":[{"startOffset":12406,"endOffset":13210,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateStaticFieldInitSpec","ranges":[{"startOffset":13212,"endOffset":14306,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateMethodInitLoose","ranges":[{"startOffset":14308,"endOffset":15394,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateInstanceMethodInitSpec","ranges":[{"startOffset":15396,"endOffset":15864,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateAccessorInitialization","ranges":[{"startOffset":15866,"endOffset":16816,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateInstanceMethodInitalization","ranges":[{"startOffset":16818,"endOffset":17336,"count":0}],"isBlockCoverage":false},{"functionName":"buildPublicFieldInitLoose","ranges":[{"startOffset":17338,"endOffset":17672,"count":0}],"isBlockCoverage":false},{"functionName":"buildPublicFieldInitSpec","ranges":[{"startOffset":17674,"endOffset":18049,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateStaticMethodInitLoose","ranges":[{"startOffset":18051,"endOffset":19096,"count":0}],"isBlockCoverage":false},{"functionName":"buildPrivateMethodDeclaration","ranges":[{"startOffset":19098,"endOffset":20129,"count":0}],"isBlockCoverage":false},{"functionName":"ThisExpression","ranges":[{"startOffset":20193,"endOffset":20319,"count":0}],"isBlockCoverage":false},{"functionName":"MetaProperty","ranges":[{"startOffset":20324,"endOffset":20634,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":20712,"endOffset":20917,"count":0}],"isBlockCoverage":false},{"functionName":"replaceThisContext","ranges":[{"startOffset":20923,"endOffset":21950,"count":0}],"isBlockCoverage":false},{"functionName":"isNameOrLength","ranges":[{"startOffset":21952,"endOffset":22232,"count":0}],"isBlockCoverage":false},{"functionName":"buildFieldsInitNodes","ranges":[{"startOffset":22234,"endOffset":27801,"count":0}],"isBlockCoverage":false}]},{"scriptId":"511","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-replace-supers/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7361,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":188,"endOffset":251,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":341,"endOffset":418,"count":0}],"isBlockCoverage":false},{"functionName":"getPrototypeOfExpression","ranges":[{"startOffset":950,"endOffset":1255,"count":0}],"isBlockCoverage":false},{"functionName":"Super","ranges":[{"startOffset":1346,"endOffset":1531,"count":0}],"isBlockCoverage":false},{"functionName":"Scopable","ranges":[{"startOffset":1648,"endOffset":1841,"count":0}],"isBlockCoverage":false},{"functionName":"memoise","ranges":[{"startOffset":1874,"endOffset":2205,"count":0}],"isBlockCoverage":false},{"functionName":"prop","ranges":[{"startOffset":2210,"endOffset":2504,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2509,"endOffset":2587,"count":0}],"isBlockCoverage":false},{"functionName":"_get","ranges":[{"startOffset":2592,"endOffset":2902,"count":0}],"isBlockCoverage":false},{"functionName":"_getThisRefs","ranges":[{"startOffset":2907,"endOffset":3219,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":3224,"endOffset":3626,"count":0}],"isBlockCoverage":false},{"functionName":"destructureSet","ranges":[{"startOffset":3631,"endOffset":3763,"count":0}],"isBlockCoverage":false},{"functionName":"call","ranges":[{"startOffset":3768,"endOffset":3968,"count":0}],"isBlockCoverage":false},{"functionName":"optionalCall","ranges":[{"startOffset":3973,"endOffset":4180,"count":0}],"isBlockCoverage":false},{"functionName":"prop","ranges":[{"startOffset":4243,"endOffset":4451,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4456,"endOffset":5069,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":5074,"endOffset":5294,"count":0}],"isBlockCoverage":false},{"functionName":"destructureSet","ranges":[{"startOffset":5299,"endOffset":5489,"count":0}],"isBlockCoverage":false},{"functionName":"call","ranges":[{"startOffset":5494,"endOffset":5632,"count":0}],"isBlockCoverage":false},{"functionName":"optionalCall","ranges":[{"startOffset":5637,"endOffset":5782,"count":0}],"isBlockCoverage":false},{"functionName":"ReplaceSupers","ranges":[{"startOffset":5813,"endOffset":6388,"count":0}],"isBlockCoverage":false},{"functionName":"getObjectRef","ranges":[{"startOffset":6392,"endOffset":6483,"count":0}],"isBlockCoverage":false},{"functionName":"getSuperRef","ranges":[{"startOffset":6487,"endOffset":6646,"count":0}],"isBlockCoverage":false},{"functionName":"replace","ranges":[{"startOffset":6650,"endOffset":7324,"count":0}],"isBlockCoverage":false}]},{"scriptId":"512","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2522,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":147,"endOffset":189,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":266,"endOffset":309,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":383,"endOffset":427,"count":0}],"isBlockCoverage":false},{"functionName":"traverse","ranges":[{"startOffset":828,"endOffset":1384,"count":0}],"isBlockCoverage":false},{"functionName":"traverse.cheap","ranges":[{"startOffset":1559,"endOffset":1621,"count":0}],"isBlockCoverage":false},{"functionName":"traverse.node","ranges":[{"startOffset":1640,"endOffset":1772,"count":0}],"isBlockCoverage":false},{"functionName":"traverse.clearNode","ranges":[{"startOffset":1796,"endOffset":1880,"count":0}],"isBlockCoverage":false},{"functionName":"traverse.removeProperties","ranges":[{"startOffset":1911,"endOffset":1999,"count":0}],"isBlockCoverage":false},{"functionName":"hasDenylistedType","ranges":[{"startOffset":2002,"endOffset":2127,"count":0}],"isBlockCoverage":false},{"functionName":"traverse.hasType","ranges":[{"startOffset":2148,"endOffset":2496,"count":0}],"isBlockCoverage":false}]},{"scriptId":"513","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/visitors.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5864,"count":1}],"isBlockCoverage":true},{"functionName":"explode","ranges":[{"startOffset":314,"endOffset":2257,"count":33},{"startOffset":367,"endOffset":382,"count":12},{"startOffset":382,"endOffset":459,"count":21},{"startOffset":459,"endOffset":717,"count":58},{"startOffset":496,"endOffset":505,"count":21},{"startOffset":505,"endOffset":582,"count":37},{"startOffset":582,"endOffset":717,"count":0},{"startOffset":717,"endOffset":882,"count":21},{"startOffset":882,"endOffset":1423,"count":79},{"startOffset":919,"endOffset":928,"count":42},{"startOffset":928,"endOffset":991,"count":37},{"startOffset":991,"endOffset":1000,"count":35},{"startOffset":1000,"endOffset":1375,"count":2},{"startOffset":1232,"endOffset":1369,"count":4},{"startOffset":1261,"endOffset":1313,"count":0},{"startOffset":1375,"endOffset":1419,"count":0},{"startOffset":1423,"endOffset":1472,"count":21},{"startOffset":1472,"endOffset":2092,"count":81},{"startOffset":1509,"endOffset":1518,"count":42},{"startOffset":1518,"endOffset":1679,"count":39},{"startOffset":1679,"endOffset":1819,"count":0},{"startOffset":1819,"endOffset":1839,"count":39},{"startOffset":1839,"endOffset":1848,"count":31},{"startOffset":1848,"endOffset":1913,"count":8},{"startOffset":1913,"endOffset":2088,"count":52},{"startOffset":1975,"endOffset":2018,"count":0},{"startOffset":2088,"endOffset":2092,"count":8},{"startOffset":2092,"endOffset":2141,"count":21},{"startOffset":2141,"endOffset":2236,"count":125},{"startOffset":2178,"endOffset":2187,"count":42},{"startOffset":2187,"endOffset":2236,"count":83},{"startOffset":2236,"endOffset":2256,"count":21}],"isBlockCoverage":true},{"functionName":"verify","ranges":[{"startOffset":2259,"endOffset":3391,"count":21},{"startOffset":2311,"endOffset":2318,"count":0},{"startOffset":2357,"endOffset":2513,"count":0},{"startOffset":2562,"endOffset":3360,"count":58},{"startOffset":2617,"endOffset":2683,"count":0},{"startOffset":2720,"endOffset":2729,"count":21},{"startOffset":2729,"endOffset":2768,"count":37},{"startOffset":2768,"endOffset":2879,"count":0},{"startOffset":2879,"endOffset":2960,"count":37},{"startOffset":2960,"endOffset":3356,"count":3},{"startOffset":3016,"endOffset":3350,"count":4},{"startOffset":3053,"endOffset":3077,"count":3},{"startOffset":3175,"endOffset":3342,"count":0}],"isBlockCoverage":true},{"functionName":"validateVisitorMethods","ranges":[{"startOffset":3393,"endOffset":3633,"count":4},{"startOffset":3529,"endOffset":3627,"count":0}],"isBlockCoverage":true},{"functionName":"merge","ranges":[{"startOffset":3635,"endOffset":4191,"count":14},{"startOffset":3755,"endOffset":4166,"count":28},{"startOffset":3887,"endOffset":4162,"count":222},{"startOffset":3957,"endOffset":4041,"count":0},{"startOffset":4107,"endOffset":4112,"count":185}],"isBlockCoverage":true},{"functionName":"wrapWithStateOrWrapper","ranges":[{"startOffset":4193,"endOffset":4815,"count":0}],"isBlockCoverage":false},{"functionName":"ensureEntranceObjects","ranges":[{"startOffset":4817,"endOffset":5057,"count":21},{"startOffset":4893,"endOffset":5055,"count":79},{"startOffset":4925,"endOffset":4934,"count":42},{"startOffset":4934,"endOffset":4997,"count":37},{"startOffset":4997,"endOffset":5051,"count":34}],"isBlockCoverage":true},{"functionName":"ensureCallbackArrays","ranges":[{"startOffset":5059,"endOffset":5235,"count":104},{"startOffset":5112,"endOffset":5140,"count":81},{"startOffset":5142,"endOffset":5166,"count":79},{"startOffset":5182,"endOffset":5209,"count":7},{"startOffset":5211,"endOffset":5233,"count":7}],"isBlockCoverage":true},{"functionName":"wrapCheck","ranges":[{"startOffset":5237,"endOffset":5450,"count":2}],"isBlockCoverage":true},{"functionName":"newFn","ranges":[{"startOffset":5287,"endOffset":5389,"count":0}],"isBlockCoverage":false},{"functionName":"newFn.toString","ranges":[{"startOffset":5411,"endOffset":5430,"count":0}],"isBlockCoverage":false},{"functionName":"shouldIgnoreKey","ranges":[{"startOffset":5452,"endOffset":5731,"count":480},{"startOffset":5506,"endOffset":5518,"count":210},{"startOffset":5518,"endOffset":5558,"count":270},{"startOffset":5559,"endOffset":5582,"count":270},{"startOffset":5584,"endOffset":5596,"count":0},{"startOffset":5596,"endOffset":5643,"count":270},{"startOffset":5644,"endOffset":5665,"count":270},{"startOffset":5666,"endOffset":5688,"count":270},{"startOffset":5690,"endOffset":5712,"count":0},{"startOffset":5712,"endOffset":5730,"count":270}],"isBlockCoverage":true},{"functionName":"mergePair","ranges":[{"startOffset":5733,"endOffset":5864,"count":222},{"startOffset":5803,"endOffset":5862,"count":171},{"startOffset":5841,"endOffset":5846,"count":162}],"isBlockCoverage":true}]},{"scriptId":"514","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/lib/virtual-types.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4878,"count":1}],"isBlockCoverage":true},{"functionName":"checkPath","ranges":[{"startOffset":996,"endOffset":1358,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":1487,"endOffset":1597,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":1723,"endOffset":1914,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":2013,"endOffset":2362,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":2447,"endOffset":2600,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":2691,"endOffset":2756,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":2807,"endOffset":2877,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":2939,"endOffset":2997,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":3088,"endOffset":3138,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":3179,"endOffset":3241,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":3289,"endOffset":3337,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":3390,"endOffset":3482,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":3606,"endOffset":4036,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":4114,"endOffset":4200,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":4296,"endOffset":4385,"count":0}],"isBlockCoverage":false},{"functionName":"checkPath","ranges":[{"startOffset":4764,"endOffset":4827,"count":0}],"isBlockCoverage":false}]},{"scriptId":"515","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/cache.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":488,"count":1}],"isBlockCoverage":true},{"functionName":"clear","ranges":[{"startOffset":304,"endOffset":355,"count":0}],"isBlockCoverage":false},{"functionName":"clearPath","ranges":[{"startOffset":357,"endOffset":420,"count":0}],"isBlockCoverage":false},{"functionName":"clearScope","ranges":[{"startOffset":422,"endOffset":488,"count":0}],"isBlockCoverage":false}]},{"scriptId":"516","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/traverse-node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":580,"count":1}],"isBlockCoverage":true},{"functionName":"traverseNode","ranges":[{"startOffset":223,"endOffset":580,"count":0}],"isBlockCoverage":false}]},{"scriptId":"517","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/context.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2799,"count":1}],"isBlockCoverage":true},{"functionName":"TraversalContext","ranges":[{"startOffset":233,"endOffset":440,"count":0}],"isBlockCoverage":false},{"functionName":"shouldVisit","ranges":[{"startOffset":444,"endOffset":765,"count":0}],"isBlockCoverage":false},{"functionName":"create","ranges":[{"startOffset":769,"endOffset":952,"count":0}],"isBlockCoverage":false},{"functionName":"maybeQueue","ranges":[{"startOffset":956,"endOffset":1137,"count":0}],"isBlockCoverage":false},{"functionName":"visitMultiple","ranges":[{"startOffset":1141,"endOffset":1508,"count":0}],"isBlockCoverage":false},{"functionName":"visitSingle","ranges":[{"startOffset":1512,"endOffset":1680,"count":0}],"isBlockCoverage":false},{"functionName":"visitQueue","ranges":[{"startOffset":1684,"endOffset":2529,"count":0}],"isBlockCoverage":false},{"functionName":"visit","ranges":[{"startOffset":2533,"endOffset":2759,"count":0}],"isBlockCoverage":false}]},{"scriptId":"518","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5357,"count":1},{"startOffset":4704,"endOffset":5018,"count":301},{"startOffset":5066,"endOffset":5303,"count":18},{"startOffset":5091,"endOffset":5100,"count":0},{"startOffset":5134,"endOffset":5153,"count":13}],"isBlockCoverage":true},{"functionName":"NodePath","ranges":[{"startOffset":1264,"endOffset":1679,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1690,"endOffset":2336,"count":0}],"isBlockCoverage":false},{"functionName":"getScope","ranges":[{"startOffset":2340,"endOffset":2423,"count":0}],"isBlockCoverage":false},{"functionName":"setData","ranges":[{"startOffset":2427,"endOffset":2558,"count":0}],"isBlockCoverage":false},{"functionName":"getData","ranges":[{"startOffset":2562,"endOffset":2782,"count":0}],"isBlockCoverage":false},{"functionName":"hasNode","ranges":[{"startOffset":2786,"endOffset":2831,"count":0}],"isBlockCoverage":false},{"functionName":"buildCodeFrameError","ranges":[{"startOffset":2835,"endOffset":2941,"count":0}],"isBlockCoverage":false},{"functionName":"traverse","ranges":[{"startOffset":2945,"endOffset":3045,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":3049,"endOffset":3132,"count":0}],"isBlockCoverage":false},{"functionName":"getPathLocation","ranges":[{"startOffset":3136,"endOffset":3387,"count":0}],"isBlockCoverage":false},{"functionName":"debug","ranges":[{"startOffset":3391,"endOffset":3508,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":3512,"endOffset":3580,"count":0}],"isBlockCoverage":false},{"functionName":"get inList","ranges":[{"startOffset":3584,"endOffset":3629,"count":0}],"isBlockCoverage":false},{"functionName":"set inList","ranges":[{"startOffset":3633,"endOffset":3709,"count":0}],"isBlockCoverage":false},{"functionName":"get parentKey","ranges":[{"startOffset":3713,"endOffset":3771,"count":0}],"isBlockCoverage":false},{"functionName":"get shouldSkip","ranges":[{"startOffset":3775,"endOffset":3847,"count":0}],"isBlockCoverage":false},{"functionName":"set shouldSkip","ranges":[{"startOffset":3851,"endOffset":3991,"count":0}],"isBlockCoverage":false},{"functionName":"get shouldStop","ranges":[{"startOffset":3995,"endOffset":4067,"count":0}],"isBlockCoverage":false},{"functionName":"set shouldStop","ranges":[{"startOffset":4071,"endOffset":4211,"count":0}],"isBlockCoverage":false},{"functionName":"get removed","ranges":[{"startOffset":4215,"endOffset":4280,"count":0}],"isBlockCoverage":false},{"functionName":"set removed","ranges":[{"startOffset":4284,"endOffset":4413,"count":0}],"isBlockCoverage":false},{"functionName":"NodePath.<computed>","ranges":[{"startOffset":4795,"endOffset":4848,"count":0}],"isBlockCoverage":false},{"functionName":"NodePath.<computed>","ranges":[{"startOffset":4891,"endOffset":5015,"count":0}],"isBlockCoverage":false},{"functionName":"NodePath.<computed>","ranges":[{"startOffset":5233,"endOffset":5300,"count":0}],"isBlockCoverage":false}]},{"scriptId":"519","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/scope/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":26221,"count":1}],"isBlockCoverage":true},{"functionName":"gatherNodeParts","ranges":[{"startOffset":1164,"endOffset":4644,"count":0}],"isBlockCoverage":false},{"functionName":"ForStatement","ranges":[{"startOffset":4675,"endOffset":4944,"count":0}],"isBlockCoverage":false},{"functionName":"Declaration","ranges":[{"startOffset":4949,"endOffset":5220,"count":0}],"isBlockCoverage":false},{"functionName":"ImportDeclaration","ranges":[{"startOffset":5225,"endOffset":5340,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":5345,"endOffset":5417,"count":0}],"isBlockCoverage":false},{"functionName":"ForXStatement","ranges":[{"startOffset":5422,"endOffset":5794,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":5824,"endOffset":6546,"count":0}],"isBlockCoverage":false},{"functionName":"LabeledStatement","ranges":[{"startOffset":6556,"endOffset":6643,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":6648,"endOffset":6721,"count":0}],"isBlockCoverage":false},{"functionName":"UpdateExpression","ranges":[{"startOffset":6726,"endOffset":6802,"count":0}],"isBlockCoverage":false},{"functionName":"UnaryExpression","ranges":[{"startOffset":6807,"endOffset":6933,"count":0}],"isBlockCoverage":false},{"functionName":"BlockScoped","ranges":[{"startOffset":6938,"endOffset":7310,"count":0}],"isBlockCoverage":false},{"functionName":"CatchClause","ranges":[{"startOffset":7315,"endOffset":7383,"count":0}],"isBlockCoverage":false},{"functionName":"Function","ranges":[{"startOffset":7388,"endOffset":7710,"count":0}],"isBlockCoverage":false},{"functionName":"ClassExpression","ranges":[{"startOffset":7715,"endOffset":7866,"count":0}],"isBlockCoverage":false},{"functionName":"Scope","ranges":[{"startOffset":7901,"endOffset":8535,"count":0}],"isBlockCoverage":false},{"functionName":"get parent","ranges":[{"startOffset":8539,"endOffset":8945,"count":0}],"isBlockCoverage":false},{"functionName":"get parentBlock","ranges":[{"startOffset":8949,"endOffset":9001,"count":0}],"isBlockCoverage":false},{"functionName":"get hub","ranges":[{"startOffset":9005,"endOffset":9046,"count":0}],"isBlockCoverage":false},{"functionName":"traverse","ranges":[{"startOffset":9050,"endOffset":9144,"count":0}],"isBlockCoverage":false},{"functionName":"generateDeclaredUidIdentifier","ranges":[{"startOffset":9148,"endOffset":9297,"count":0}],"isBlockCoverage":false},{"functionName":"generateUidIdentifier","ranges":[{"startOffset":9301,"endOffset":9381,"count":0}],"isBlockCoverage":false},{"functionName":"generateUid","ranges":[{"startOffset":9385,"endOffset":9815,"count":0}],"isBlockCoverage":false},{"functionName":"_generateUid","ranges":[{"startOffset":9819,"endOffset":9910,"count":0}],"isBlockCoverage":false},{"functionName":"generateUidBasedOnNode","ranges":[{"startOffset":9914,"endOffset":10148,"count":0}],"isBlockCoverage":false},{"functionName":"generateUidIdentifierBasedOnNode","ranges":[{"startOffset":10152,"endOffset":10280,"count":0}],"isBlockCoverage":false},{"functionName":"isStatic","ranges":[{"startOffset":10284,"endOffset":10633,"count":0}],"isBlockCoverage":false},{"functionName":"maybeGenerateMemoised","ranges":[{"startOffset":10637,"endOffset":10936,"count":0}],"isBlockCoverage":false},{"functionName":"checkBlockScopedCollisions","ranges":[{"startOffset":10940,"endOffset":11341,"count":0}],"isBlockCoverage":false},{"functionName":"rename","ranges":[{"startOffset":11345,"endOffset":11599,"count":0}],"isBlockCoverage":false},{"functionName":"_renameFromMap","ranges":[{"startOffset":11603,"endOffset":11738,"count":0}],"isBlockCoverage":false},{"functionName":"dump","ranges":[{"startOffset":11742,"endOffset":12264,"count":0}],"isBlockCoverage":false},{"functionName":"toArray","ranges":[{"startOffset":12268,"endOffset":13267,"count":0}],"isBlockCoverage":false},{"functionName":"hasLabel","ranges":[{"startOffset":13271,"endOffset":13325,"count":0}],"isBlockCoverage":false},{"functionName":"getLabel","ranges":[{"startOffset":13329,"endOffset":13383,"count":0}],"isBlockCoverage":false},{"functionName":"registerLabel","ranges":[{"startOffset":13387,"endOffset":13461,"count":0}],"isBlockCoverage":false},{"functionName":"registerDeclaration","ranges":[{"startOffset":13465,"endOffset":14514,"count":0}],"isBlockCoverage":false},{"functionName":"buildUndefinedNode","ranges":[{"startOffset":14518,"endOffset":14605,"count":0}],"isBlockCoverage":false},{"functionName":"registerConstantViolation","ranges":[{"startOffset":14609,"endOffset":14830,"count":0}],"isBlockCoverage":false},{"functionName":"registerBinding","ranges":[{"startOffset":14834,"endOffset":15858,"count":0}],"isBlockCoverage":false},{"functionName":"addGlobal","ranges":[{"startOffset":15862,"endOffset":15919,"count":0}],"isBlockCoverage":false},{"functionName":"hasUid","ranges":[{"startOffset":15923,"endOffset":16069,"count":0}],"isBlockCoverage":false},{"functionName":"hasGlobal","ranges":[{"startOffset":16073,"endOffset":16225,"count":0}],"isBlockCoverage":false},{"functionName":"hasReference","ranges":[{"startOffset":16229,"endOffset":16308,"count":0}],"isBlockCoverage":false},{"functionName":"isPure","ranges":[{"startOffset":16312,"endOffset":19008,"count":0}],"isBlockCoverage":false},{"functionName":"setData","ranges":[{"startOffset":19012,"endOffset":19068,"count":0}],"isBlockCoverage":false},{"functionName":"getData","ranges":[{"startOffset":19072,"endOffset":19231,"count":0}],"isBlockCoverage":false},{"functionName":"removeData","ranges":[{"startOffset":19235,"endOffset":19408,"count":0}],"isBlockCoverage":false},{"functionName":"init","ranges":[{"startOffset":19412,"endOffset":19500,"count":0}],"isBlockCoverage":false},{"functionName":"crawl","ranges":[{"startOffset":19504,"endOffset":21010,"count":0}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":21014,"endOffset":22186,"count":0}],"isBlockCoverage":false},{"functionName":"getProgramParent","ranges":[{"startOffset":22190,"endOffset":22397,"count":0}],"isBlockCoverage":false},{"functionName":"getFunctionParent","ranges":[{"startOffset":22401,"endOffset":22585,"count":0}],"isBlockCoverage":false},{"functionName":"getBlockParent","ranges":[{"startOffset":22589,"endOffset":22851,"count":0}],"isBlockCoverage":false},{"functionName":"getPatternParent","ranges":[{"startOffset":22855,"endOffset":23140,"count":0}],"isBlockCoverage":false},{"functionName":"getAllBindings","ranges":[{"startOffset":23144,"endOffset":23453,"count":0}],"isBlockCoverage":false},{"functionName":"getAllBindingsOfKind","ranges":[{"startOffset":23457,"endOffset":23850,"count":0}],"isBlockCoverage":false},{"functionName":"bindingIdentifierEquals","ranges":[{"startOffset":23854,"endOffset":23948,"count":0}],"isBlockCoverage":false},{"functionName":"getBinding","ranges":[{"startOffset":23952,"endOffset":24526,"count":0}],"isBlockCoverage":false},{"functionName":"getOwnBinding","ranges":[{"startOffset":24530,"endOffset":24587,"count":0}],"isBlockCoverage":false},{"functionName":"getBindingIdentifier","ranges":[{"startOffset":24591,"endOffset":24752,"count":0}],"isBlockCoverage":false},{"functionName":"getOwnBindingIdentifier","ranges":[{"startOffset":24756,"endOffset":24890,"count":0}],"isBlockCoverage":false},{"functionName":"hasOwnBinding","ranges":[{"startOffset":24894,"endOffset":24958,"count":0}],"isBlockCoverage":false},{"functionName":"hasBinding","ranges":[{"startOffset":24962,"endOffset":25329,"count":0}],"isBlockCoverage":false},{"functionName":"parentHasBinding","ranges":[{"startOffset":25333,"endOffset":25496,"count":0}],"isBlockCoverage":false},{"functionName":"moveBindingTo","ranges":[{"startOffset":25500,"endOffset":25697,"count":0}],"isBlockCoverage":false},{"functionName":"removeOwnBinding","ranges":[{"startOffset":25701,"endOffset":25761,"count":0}],"isBlockCoverage":false},{"functionName":"removeBinding","ranges":[{"startOffset":25765,"endOffset":26073,"count":0}],"isBlockCoverage":false}]},{"scriptId":"520","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/scope/lib/renamer.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3642,"count":1}],"isBlockCoverage":true},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":488,"endOffset":615,"count":0}],"isBlockCoverage":false},{"functionName":"Scope","ranges":[{"startOffset":620,"endOffset":873,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression|Declaration|VariableDeclarator","ranges":[{"startOffset":878,"endOffset":1150,"count":0}],"isBlockCoverage":false},{"functionName":"Renamer","ranges":[{"startOffset":1174,"endOffset":1302,"count":0}],"isBlockCoverage":false},{"functionName":"maybeConvertFromExportDeclaration","ranges":[{"startOffset":1306,"endOffset":1683,"count":0}],"isBlockCoverage":false},{"functionName":"maybeConvertFromClassFunctionDeclaration","ranges":[{"startOffset":1687,"endOffset":2076,"count":0}],"isBlockCoverage":false},{"functionName":"maybeConvertFromClassFunctionExpression","ranges":[{"startOffset":2080,"endOffset":2476,"count":0}],"isBlockCoverage":false},{"functionName":"rename","ranges":[{"startOffset":2480,"endOffset":3611,"count":0}],"isBlockCoverage":false}]},{"scriptId":"521","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/scope/binding.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1336,"count":1}],"isBlockCoverage":true},{"functionName":"Binding","ranges":[{"startOffset":125,"endOffset":567,"count":0}],"isBlockCoverage":false},{"functionName":"deoptValue","ranges":[{"startOffset":571,"endOffset":645,"count":0}],"isBlockCoverage":false},{"functionName":"setValue","ranges":[{"startOffset":649,"endOffset":758,"count":0}],"isBlockCoverage":false},{"functionName":"clearValue","ranges":[{"startOffset":762,"endOffset":864,"count":0}],"isBlockCoverage":false},{"functionName":"reassign","ranges":[{"startOffset":868,"endOffset":1033,"count":0}],"isBlockCoverage":false},{"functionName":"reference","ranges":[{"startOffset":1037,"endOffset":1218,"count":0}],"isBlockCoverage":false},{"functionName":"dereference","ranges":[{"startOffset":1222,"endOffset":1305,"count":0}],"isBlockCoverage":false}]},{"scriptId":"522","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-environment-visitor/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1089,"count":1}],"isBlockCoverage":true},{"functionName":"skipAllButComputedKey","ranges":[{"startOffset":237,"endOffset":371,"count":0}],"isBlockCoverage":false},{"functionName":"requeueComputedKeyAndDecorators","ranges":[{"startOffset":373,"endOffset":663,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionParent","ranges":[{"startOffset":685,"endOffset":892,"count":0}],"isBlockCoverage":false},{"functionName":"Property","ranges":[{"startOffset":897,"endOffset":1033,"count":0}],"isBlockCoverage":false}]},{"scriptId":"523","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/globals/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":58,"count":1}],"isBlockCoverage":true}]},{"scriptId":"524","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2477,"count":1}],"isBlockCoverage":true},{"functionName":"Generator","ranges":[{"startOffset":267,"endOffset":499,"count":0}],"isBlockCoverage":false},{"functionName":"generate","ranges":[{"startOffset":503,"endOffset":556,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeOptions","ranges":[{"startOffset":561,"endOffset":2120,"count":0}],"isBlockCoverage":false},{"functionName":"CodeGenerator","ranges":[{"startOffset":2146,"endOffset":2264,"count":0}],"isBlockCoverage":false},{"functionName":"generate","ranges":[{"startOffset":2268,"endOffset":2323,"count":0}],"isBlockCoverage":false},{"functionName":"generate","ranges":[{"startOffset":2368,"endOffset":2477,"count":0}],"isBlockCoverage":false}]},{"scriptId":"525","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/source-map.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1738,"count":1}],"isBlockCoverage":true},{"functionName":"SourceMap","ranges":[{"startOffset":182,"endOffset":1017,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1021,"endOffset":1085,"count":0}],"isBlockCoverage":false},{"functionName":"getDecoded","ranges":[{"startOffset":1089,"endOffset":1160,"count":0}],"isBlockCoverage":false},{"functionName":"getRawMappings","ranges":[{"startOffset":1164,"endOffset":1281,"count":0}],"isBlockCoverage":false},{"functionName":"mark","ranges":[{"startOffset":1285,"endOffset":1705,"count":0}],"isBlockCoverage":false}]},{"scriptId":"526","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10824,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":568,"count":1},{"startOffset":226,"endOffset":565,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":577,"endOffset":10776,"count":1}],"isBlockCoverage":true},{"functionName":"GenMapping","ranges":[{"startOffset":3013,"endOffset":3311,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3323,"endOffset":7743,"count":1}],"isBlockCoverage":true},{"functionName":"exports.addSegment","ranges":[{"startOffset":3360,"endOffset":3569,"count":0}],"isBlockCoverage":false},{"functionName":"exports.maybeAddSegment","ranges":[{"startOffset":3605,"endOffset":3813,"count":0}],"isBlockCoverage":false},{"functionName":"exports.addMapping","ranges":[{"startOffset":3844,"endOffset":3933,"count":0}],"isBlockCoverage":false},{"functionName":"exports.maybeAddMapping","ranges":[{"startOffset":3969,"endOffset":4057,"count":0}],"isBlockCoverage":false},{"functionName":"exports.setSourceContent","ranges":[{"startOffset":4094,"endOffset":4280,"count":0}],"isBlockCoverage":false},{"functionName":"exports.toDecodedMap","ranges":[{"startOffset":4313,"endOffset":4805,"count":0}],"isBlockCoverage":false},{"functionName":"exports.toEncodedMap","ranges":[{"startOffset":4838,"endOffset":5030,"count":0}],"isBlockCoverage":false},{"functionName":"exports.allMappings","ranges":[{"startOffset":5062,"endOffset":6062,"count":0}],"isBlockCoverage":false},{"functionName":"exports.fromMap","ranges":[{"startOffset":6090,"endOffset":6520,"count":0}],"isBlockCoverage":false},{"functionName":"addSegmentInternal","ranges":[{"startOffset":6579,"endOffset":7736,"count":0}],"isBlockCoverage":false},{"functionName":"getLine","ranges":[{"startOffset":7752,"endOffset":7922,"count":0}],"isBlockCoverage":false},{"functionName":"getColumnIndex","ranges":[{"startOffset":7927,"endOffset":8201,"count":0}],"isBlockCoverage":false},{"functionName":"insert","ranges":[{"startOffset":8206,"endOffset":8380,"count":0}],"isBlockCoverage":false},{"functionName":"removeEmptyFinalLines","ranges":[{"startOffset":8385,"endOffset":8684,"count":0}],"isBlockCoverage":false},{"functionName":"putAll","ranges":[{"startOffset":8689,"endOffset":8818,"count":0}],"isBlockCoverage":false},{"functionName":"skipSourceless","ranges":[{"startOffset":8823,"endOffset":9402,"count":0}],"isBlockCoverage":false},{"functionName":"skipSource","ranges":[{"startOffset":9407,"endOffset":10208,"count":0}],"isBlockCoverage":false},{"functionName":"addMappingInternal","ranges":[{"startOffset":10213,"endOffset":10667,"count":0}],"isBlockCoverage":false}]},{"scriptId":"527","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/set-array/dist/set-array.umd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2153,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":308,"count":1},{"startOffset":114,"endOffset":305,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":317,"endOffset":2107,"count":1}],"isBlockCoverage":true},{"functionName":"SetArray","ranges":[{"startOffset":1200,"endOffset":1303,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1315,"endOffset":1998,"count":1}],"isBlockCoverage":true},{"functionName":"exports.get","ranges":[{"startOffset":1345,"endOffset":1382,"count":0}],"isBlockCoverage":false},{"functionName":"exports.put","ranges":[{"startOffset":1406,"endOffset":1750,"count":0}],"isBlockCoverage":false},{"functionName":"exports.pop","ranges":[{"startOffset":1774,"endOffset":1991,"count":0}],"isBlockCoverage":false}]},{"scriptId":"528","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6390,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":314,"count":1},{"startOffset":114,"endOffset":311,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":323,"endOffset":6338,"count":1},{"startOffset":694,"endOffset":792,"count":64},{"startOffset":945,"endOffset":1473,"count":0}],"isBlockCoverage":true},{"functionName":"decode","ranges":[{"startOffset":1009,"endOffset":1172,"count":0}],"isBlockCoverage":false},{"functionName":"decode","ranges":[{"startOffset":1220,"endOffset":1458,"count":0}],"isBlockCoverage":false},{"functionName":"decode","ranges":[{"startOffset":1479,"endOffset":3026,"count":0}],"isBlockCoverage":false},{"functionName":"indexOf","ranges":[{"startOffset":3031,"endOffset":3173,"count":0}],"isBlockCoverage":false},{"functionName":"decodeInteger","ranges":[{"startOffset":3178,"endOffset":3694,"count":0}],"isBlockCoverage":false},{"functionName":"hasMoreVlq","ranges":[{"startOffset":3699,"endOffset":3847,"count":0}],"isBlockCoverage":false},{"functionName":"sort","ranges":[{"startOffset":3852,"endOffset":3914,"count":0}],"isBlockCoverage":false},{"functionName":"sortComparator","ranges":[{"startOffset":3919,"endOffset":3984,"count":0}],"isBlockCoverage":false},{"functionName":"encode","ranges":[{"startOffset":3989,"endOffset":5766,"count":0}],"isBlockCoverage":false},{"functionName":"encodeInteger","ranges":[{"startOffset":5771,"endOffset":6208,"count":0}],"isBlockCoverage":false}]},{"scriptId":"529","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":22826,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":488,"count":1},{"startOffset":190,"endOffset":485,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":497,"endOffset":22776,"count":1}],"isBlockCoverage":true},{"functionName":"_interopDefaultLegacy","ranges":[{"startOffset":565,"endOffset":679,"count":1},{"startOffset":636,"endOffset":653,"count":0},{"startOffset":654,"endOffset":657,"count":0}],"isBlockCoverage":true},{"functionName":"resolve","ranges":[{"startOffset":764,"endOffset":1215,"count":0}],"isBlockCoverage":false},{"functionName":"stripFilename","ranges":[{"startOffset":1305,"endOffset":1469,"count":0}],"isBlockCoverage":false},{"functionName":"maybeSort","ranges":[{"startOffset":1680,"endOffset":2304,"count":0}],"isBlockCoverage":false},{"functionName":"nextUnsortedSegmentLine","ranges":[{"startOffset":2309,"endOffset":2530,"count":0}],"isBlockCoverage":false},{"functionName":"isSorted","ranges":[{"startOffset":2535,"endOffset":2746,"count":0}],"isBlockCoverage":false},{"functionName":"sortSegments","ranges":[{"startOffset":2751,"endOffset":2888,"count":0}],"isBlockCoverage":false},{"functionName":"sortComparator","ranges":[{"startOffset":2893,"endOffset":2968,"count":0}],"isBlockCoverage":false},{"functionName":"binarySearch","ranges":[{"startOffset":3613,"endOffset":4103,"count":0}],"isBlockCoverage":false},{"functionName":"upperBound","ranges":[{"startOffset":4108,"endOffset":4331,"count":0}],"isBlockCoverage":false},{"functionName":"lowerBound","ranges":[{"startOffset":4336,"endOffset":4546,"count":0}],"isBlockCoverage":false},{"functionName":"memoizedState","ranges":[{"startOffset":4551,"endOffset":4691,"count":0}],"isBlockCoverage":false},{"functionName":"memoizedBinarySearch","ranges":[{"startOffset":4901,"endOffset":5697,"count":0}],"isBlockCoverage":false},{"functionName":"buildBySources","ranges":[{"startOffset":5840,"endOffset":7240,"count":0}],"isBlockCoverage":false},{"functionName":"insert","ranges":[{"startOffset":7245,"endOffset":7419,"count":0}],"isBlockCoverage":false},{"functionName":"buildNullArray","ranges":[{"startOffset":7877,"endOffset":7946,"count":0}],"isBlockCoverage":false},{"functionName":"AnyMap","ranges":[{"startOffset":7967,"endOffset":8607,"count":0}],"isBlockCoverage":false},{"functionName":"recurse","ranges":[{"startOffset":8613,"endOffset":9540,"count":0}],"isBlockCoverage":false},{"functionName":"addSection","ranges":[{"startOffset":9545,"endOffset":12245,"count":0}],"isBlockCoverage":false},{"functionName":"append","ranges":[{"startOffset":12250,"endOffset":12364,"count":0}],"isBlockCoverage":false},{"functionName":"getLine","ranges":[{"startOffset":12369,"endOffset":12507,"count":0}],"isBlockCoverage":false},{"functionName":"TraceMap","ranges":[{"startOffset":14881,"endOffset":16041,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":16053,"endOffset":21888,"count":1}],"isBlockCoverage":true},{"functionName":"exports.encodedMappings","ranges":[{"startOffset":16095,"endOffset":16263,"count":0}],"isBlockCoverage":false},{"functionName":"exports.decodedMappings","ranges":[{"startOffset":16299,"endOffset":16410,"count":0}],"isBlockCoverage":false},{"functionName":"exports.traceSegment","ranges":[{"startOffset":16443,"endOffset":16889,"count":0}],"isBlockCoverage":false},{"functionName":"exports.originalPositionFor","ranges":[{"startOffset":16929,"endOffset":18017,"count":0}],"isBlockCoverage":false},{"functionName":"exports.generatedPositionFor","ranges":[{"startOffset":18058,"endOffset":19216,"count":0}],"isBlockCoverage":false},{"functionName":"exports.eachMapping","ranges":[{"startOffset":19248,"endOffset":20457,"count":0}],"isBlockCoverage":false},{"functionName":"exports.sourceContentFor","ranges":[{"startOffset":20494,"endOffset":20861,"count":0}],"isBlockCoverage":false},{"functionName":"exports.presortedDecodedMap","ranges":[{"startOffset":20901,"endOffset":21139,"count":0}],"isBlockCoverage":false},{"functionName":"exports.decodedMap","ranges":[{"startOffset":21170,"endOffset":21510,"count":0}],"isBlockCoverage":false},{"functionName":"exports.encodedMap","ranges":[{"startOffset":21541,"endOffset":21881,"count":0}],"isBlockCoverage":false},{"functionName":"OMapping","ranges":[{"startOffset":21897,"endOffset":21997,"count":0}],"isBlockCoverage":false},{"functionName":"GMapping","ranges":[{"startOffset":22002,"endOffset":22074,"count":0}],"isBlockCoverage":false},{"functionName":"traceSegmentInternal","ranges":[{"startOffset":22079,"endOffset":22534,"count":0}],"isBlockCoverage":false}]},{"scriptId":"530","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8588,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":305,"count":1},{"startOffset":124,"endOffset":302,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":314,"endOffset":8540,"count":1}],"isBlockCoverage":true},{"functionName":"isAbsoluteUrl","ranges":[{"startOffset":1146,"endOffset":1223,"count":0}],"isBlockCoverage":false},{"functionName":"isSchemeRelativeUrl","ranges":[{"startOffset":1228,"endOffset":1310,"count":0}],"isBlockCoverage":false},{"functionName":"isAbsolutePath","ranges":[{"startOffset":1315,"endOffset":1391,"count":0}],"isBlockCoverage":false},{"functionName":"isFileUrl","ranges":[{"startOffset":1396,"endOffset":1471,"count":0}],"isBlockCoverage":false},{"functionName":"parseAbsoluteUrl","ranges":[{"startOffset":1476,"endOffset":1653,"count":0}],"isBlockCoverage":false},{"functionName":"parseFileUrl","ranges":[{"startOffset":1658,"endOffset":1869,"count":0}],"isBlockCoverage":false},{"functionName":"makeUrl","ranges":[{"startOffset":1874,"endOffset":2083,"count":0}],"isBlockCoverage":false},{"functionName":"parseUrl","ranges":[{"startOffset":2088,"endOffset":2793,"count":0}],"isBlockCoverage":false},{"functionName":"stripPathFilename","ranges":[{"startOffset":2798,"endOffset":3141,"count":0}],"isBlockCoverage":false},{"functionName":"mergePaths","ranges":[{"startOffset":3146,"endOffset":3868,"count":0}],"isBlockCoverage":false},{"functionName":"normalizePath","ranges":[{"startOffset":4053,"endOffset":6652,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":6737,"endOffset":8516,"count":0}],"isBlockCoverage":false}]},{"scriptId":"531","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/printer.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12725,"count":1}],"isBlockCoverage":true},{"functionName":"Printer","ranges":[{"startOffset":574,"endOffset":1023,"count":0}],"isBlockCoverage":false},{"functionName":"generate","ranges":[{"startOffset":1027,"endOffset":1129,"count":0}],"isBlockCoverage":false},{"functionName":"indent","ranges":[{"startOffset":1133,"endOffset":1227,"count":0}],"isBlockCoverage":false},{"functionName":"dedent","ranges":[{"startOffset":1231,"endOffset":1325,"count":0}],"isBlockCoverage":false},{"functionName":"semicolon","ranges":[{"startOffset":1329,"endOffset":1423,"count":0}],"isBlockCoverage":false},{"functionName":"rightBrace","ranges":[{"startOffset":1427,"endOffset":1544,"count":0}],"isBlockCoverage":false},{"functionName":"space","ranges":[{"startOffset":1548,"endOffset":1814,"count":0}],"isBlockCoverage":false},{"functionName":"word","ranges":[{"startOffset":1818,"endOffset":2028,"count":0}],"isBlockCoverage":false},{"functionName":"number","ranges":[{"startOffset":2032,"endOffset":2265,"count":0}],"isBlockCoverage":false},{"functionName":"token","ranges":[{"startOffset":2269,"endOffset":2614,"count":0}],"isBlockCoverage":false},{"functionName":"newline","ranges":[{"startOffset":2618,"endOffset":3050,"count":0}],"isBlockCoverage":false},{"functionName":"endsWith","ranges":[{"startOffset":3054,"endOffset":3114,"count":0}],"isBlockCoverage":false},{"functionName":"getLastChar","ranges":[{"startOffset":3118,"endOffset":3173,"count":0}],"isBlockCoverage":false},{"functionName":"endsWithCharAndNewline","ranges":[{"startOffset":3177,"endOffset":3254,"count":0}],"isBlockCoverage":false},{"functionName":"removeTrailingNewline","ranges":[{"startOffset":3258,"endOffset":3326,"count":0}],"isBlockCoverage":false},{"functionName":"exactSource","ranges":[{"startOffset":3330,"endOffset":3426,"count":0}],"isBlockCoverage":false},{"functionName":"source","ranges":[{"startOffset":3430,"endOffset":3517,"count":0}],"isBlockCoverage":false},{"functionName":"withSource","ranges":[{"startOffset":3521,"endOffset":3624,"count":0}],"isBlockCoverage":false},{"functionName":"_space","ranges":[{"startOffset":3628,"endOffset":3671,"count":0}],"isBlockCoverage":false},{"functionName":"_newline","ranges":[{"startOffset":3675,"endOffset":3721,"count":0}],"isBlockCoverage":false},{"functionName":"_append","ranges":[{"startOffset":3725,"endOffset":3949,"count":0}],"isBlockCoverage":false},{"functionName":"_maybeIndent","ranges":[{"startOffset":3953,"endOffset":4108,"count":0}],"isBlockCoverage":false},{"functionName":"_maybeAddParen","ranges":[{"startOffset":4112,"endOffset":4892,"count":0}],"isBlockCoverage":false},{"functionName":"_catchUp","ranges":[{"startOffset":4896,"endOffset":5196,"count":0}],"isBlockCoverage":false},{"functionName":"_getIndent","ranges":[{"startOffset":5200,"endOffset":5276,"count":0}],"isBlockCoverage":false},{"functionName":"startTerminatorless","ranges":[{"startOffset":5280,"endOffset":5493,"count":0}],"isBlockCoverage":false},{"functionName":"endTerminatorless","ranges":[{"startOffset":5497,"endOffset":5678,"count":0}],"isBlockCoverage":false},{"functionName":"print","ranges":[{"startOffset":5682,"endOffset":6915,"count":0}],"isBlockCoverage":false},{"functionName":"_maybeAddAuxComment","ranges":[{"startOffset":6919,"endOffset":7089,"count":0}],"isBlockCoverage":false},{"functionName":"_printAuxBeforeComment","ranges":[{"startOffset":7093,"endOffset":7392,"count":0}],"isBlockCoverage":false},{"functionName":"_printAuxAfterComment","ranges":[{"startOffset":7396,"endOffset":7695,"count":0}],"isBlockCoverage":false},{"functionName":"getPossibleRaw","ranges":[{"startOffset":7699,"endOffset":7883,"count":0}],"isBlockCoverage":false},{"functionName":"printJoin","ranges":[{"startOffset":7887,"endOffset":8584,"count":0}],"isBlockCoverage":false},{"functionName":"printAndIndentOnComments","ranges":[{"startOffset":8588,"endOffset":8800,"count":0}],"isBlockCoverage":false},{"functionName":"printBlock","ranges":[{"startOffset":8804,"endOffset":8951,"count":0}],"isBlockCoverage":false},{"functionName":"_printTrailingComments","ranges":[{"startOffset":8955,"endOffset":9046,"count":0}],"isBlockCoverage":false},{"functionName":"_printLeadingComments","ranges":[{"startOffset":9050,"endOffset":9145,"count":0}],"isBlockCoverage":false},{"functionName":"printInnerComments","ranges":[{"startOffset":9149,"endOffset":9434,"count":0}],"isBlockCoverage":false},{"functionName":"printSequence","ranges":[{"startOffset":9438,"endOffset":9558,"count":0}],"isBlockCoverage":false},{"functionName":"printList","ranges":[{"startOffset":9562,"endOffset":9731,"count":0}],"isBlockCoverage":false},{"functionName":"_printNewline","ranges":[{"startOffset":9735,"endOffset":10239,"count":0}],"isBlockCoverage":false},{"functionName":"_getComments","ranges":[{"startOffset":10243,"endOffset":10359,"count":0}],"isBlockCoverage":false},{"functionName":"_printComment","ranges":[{"startOffset":10363,"endOffset":11748,"count":0}],"isBlockCoverage":false},{"functionName":"_printComments","ranges":[{"startOffset":11752,"endOffset":12153,"count":0}],"isBlockCoverage":false},{"functionName":"printAssertions","ranges":[{"startOffset":12157,"endOffset":12498,"count":0}],"isBlockCoverage":false},{"functionName":"Noop","ranges":[{"startOffset":12586,"endOffset":12604,"count":0}],"isBlockCoverage":false},{"functionName":"commaSeparator","ranges":[{"startOffset":12661,"endOffset":12725,"count":0}],"isBlockCoverage":false}]},{"scriptId":"532","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/buffer.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5771,"count":1}],"isBlockCoverage":true},{"functionName":"SourcePos","ranges":[{"startOffset":107,"endOffset":246,"count":0}],"isBlockCoverage":false},{"functionName":"Buffer","ranges":[{"startOffset":296,"endOffset":556,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":560,"endOffset":1240,"count":0}],"isBlockCoverage":false},{"functionName":"append","ranges":[{"startOffset":1244,"endOffset":1450,"count":0}],"isBlockCoverage":false},{"functionName":"queue","ranges":[{"startOffset":1454,"endOffset":1792,"count":0}],"isBlockCoverage":false},{"functionName":"queueIndentation","ranges":[{"startOffset":1796,"endOffset":1899,"count":0}],"isBlockCoverage":false},{"functionName":"_flush","ranges":[{"startOffset":1903,"endOffset":2006,"count":0}],"isBlockCoverage":false},{"functionName":"_append","ranges":[{"startOffset":2010,"endOffset":2566,"count":0}],"isBlockCoverage":false},{"functionName":"_mark","ranges":[{"startOffset":2570,"endOffset":2763,"count":0}],"isBlockCoverage":false},{"functionName":"removeTrailingNewline","ranges":[{"startOffset":2767,"endOffset":2893,"count":0}],"isBlockCoverage":false},{"functionName":"removeLastSemicolon","ranges":[{"startOffset":2897,"endOffset":3020,"count":0}],"isBlockCoverage":false},{"functionName":"getLastChar","ranges":[{"startOffset":3024,"endOffset":3223,"count":0}],"isBlockCoverage":false},{"functionName":"endsWithCharAndNewline","ranges":[{"startOffset":3227,"endOffset":3591,"count":0}],"isBlockCoverage":false},{"functionName":"hasContent","ranges":[{"startOffset":3595,"endOffset":3664,"count":0}],"isBlockCoverage":false},{"functionName":"exactSource","ranges":[{"startOffset":3668,"endOffset":3802,"count":0}],"isBlockCoverage":false},{"functionName":"source","ranges":[{"startOffset":3806,"endOffset":3922,"count":0}],"isBlockCoverage":false},{"functionName":"withSource","ranges":[{"startOffset":3926,"endOffset":4712,"count":0}],"isBlockCoverage":false},{"functionName":"_disallowPop","ranges":[{"startOffset":4716,"endOffset":4850,"count":0}],"isBlockCoverage":false},{"functionName":"_normalizePosition","ranges":[{"startOffset":4854,"endOffset":5245,"count":0}],"isBlockCoverage":false},{"functionName":"getCurrentColumn","ranges":[{"startOffset":5249,"endOffset":5492,"count":0}],"isBlockCoverage":false},{"functionName":"getCurrentLine","ranges":[{"startOffset":5496,"endOffset":5741,"count":0}],"isBlockCoverage":false}]},{"scriptId":"533","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/node/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2559,"count":1}],"isBlockCoverage":true},{"functionName":"expandAliases","ranges":[{"startOffset":509,"endOffset":1060,"count":3},{"startOffset":846,"endOffset":1040,"count":64},{"startOffset":912,"endOffset":995,"count":6},{"startOffset":949,"endOffset":989,"count":25},{"startOffset":995,"endOffset":1036,"count":58}],"isBlockCoverage":true},{"functionName":"add","ranges":[{"startOffset":563,"endOffset":805,"count":83},{"startOffset":641,"endOffset":793,"count":15},{"startOffset":794,"endOffset":800,"count":68}],"isBlockCoverage":true},{"functionName":"newObj.<computed>","ranges":[{"startOffset":643,"endOffset":793,"count":0}],"isBlockCoverage":false},{"functionName":"find","ranges":[{"startOffset":1237,"endOffset":1365,"count":0}],"isBlockCoverage":false},{"functionName":"isOrHasCallExpression","ranges":[{"startOffset":1367,"endOffset":1534,"count":0}],"isBlockCoverage":false},{"functionName":"needsWhitespace","ranges":[{"startOffset":1536,"endOffset":2108,"count":0}],"isBlockCoverage":false},{"functionName":"needsWhitespaceBefore","ranges":[{"startOffset":2110,"endOffset":2208,"count":0}],"isBlockCoverage":false},{"functionName":"needsWhitespaceAfter","ranges":[{"startOffset":2210,"endOffset":2306,"count":0}],"isBlockCoverage":false},{"functionName":"needsParens","ranges":[{"startOffset":2308,"endOffset":2559,"count":0}],"isBlockCoverage":false}]},{"scriptId":"534","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/node/whitespace.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5333,"count":1}],"isBlockCoverage":true},{"functionName":"crawl","ranges":[{"startOffset":456,"endOffset":1080,"count":0}],"isBlockCoverage":false},{"functionName":"isHelper","ranges":[{"startOffset":1082,"endOffset":1551,"count":0}],"isBlockCoverage":false},{"functionName":"isType","ranges":[{"startOffset":1553,"endOffset":1709,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":1729,"endOffset":1949,"count":0}],"isBlockCoverage":false},{"functionName":"SwitchCase","ranges":[{"startOffset":1954,"endOffset":2159,"count":0}],"isBlockCoverage":false},{"functionName":"LogicalExpression","ranges":[{"startOffset":2164,"endOffset":2302,"count":0}],"isBlockCoverage":false},{"functionName":"Literal","ranges":[{"startOffset":2307,"endOffset":2440,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":2445,"endOffset":2596,"count":0}],"isBlockCoverage":false},{"functionName":"OptionalCallExpression","ranges":[{"startOffset":2601,"endOffset":2742,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclaration","ranges":[{"startOffset":2747,"endOffset":3205,"count":0}],"isBlockCoverage":false},{"functionName":"IfStatement","ranges":[{"startOffset":3210,"endOffset":3350,"count":0}],"isBlockCoverage":false},{"functionName":"nodes.ObjectProperty.nodes.ObjectTypeProperty.nodes.ObjectMethod","ranges":[{"startOffset":3450,"endOffset":3559,"count":0}],"isBlockCoverage":false},{"functionName":"nodes.ObjectTypeCallProperty","ranges":[{"startOffset":3593,"endOffset":3817,"count":0}],"isBlockCoverage":false},{"functionName":"nodes.ObjectTypeIndexer","ranges":[{"startOffset":3846,"endOffset":4184,"count":0}],"isBlockCoverage":false},{"functionName":"nodes.ObjectTypeInternalSlot","ranges":[{"startOffset":4218,"endOffset":4660,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclaration","ranges":[{"startOffset":4680,"endOffset":4764,"count":0}],"isBlockCoverage":false},{"functionName":"ArrayExpression","ranges":[{"startOffset":4769,"endOffset":4822,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectExpression","ranges":[{"startOffset":4827,"endOffset":4883,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5050,"endOffset":5331,"count":6},{"startOffset":5230,"endOffset":5235,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5245,"endOffset":5327,"count":19}],"isBlockCoverage":true},{"functionName":"nodes.<computed>","ranges":[{"startOffset":5281,"endOffset":5322,"count":0}],"isBlockCoverage":false}]},{"scriptId":"535","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/node/parentheses.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10279,"count":1}],"isBlockCoverage":true},{"functionName":"isClassExtendsClause","ranges":[{"startOffset":2853,"endOffset":2958,"count":0}],"isBlockCoverage":false},{"functionName":"hasPostfixPart","ranges":[{"startOffset":2984,"endOffset":3307,"count":0}],"isBlockCoverage":false},{"functionName":"NullableTypeAnnotation","ranges":[{"startOffset":3310,"endOffset":3399,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionTypeAnnotation","ranges":[{"startOffset":3401,"endOffset":3667,"count":0}],"isBlockCoverage":false},{"functionName":"UpdateExpression","ranges":[{"startOffset":3669,"endOffset":3789,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectExpression","ranges":[{"startOffset":3791,"endOffset":3943,"count":0}],"isBlockCoverage":false},{"functionName":"DoExpression","ranges":[{"startOffset":3945,"endOffset":4087,"count":0}],"isBlockCoverage":false},{"functionName":"Binary","ranges":[{"startOffset":4089,"endOffset":4751,"count":0}],"isBlockCoverage":false},{"functionName":"UnionTypeAnnotation","ranges":[{"startOffset":4753,"endOffset":4948,"count":0}],"isBlockCoverage":false},{"functionName":"OptionalIndexedAccessType","ranges":[{"startOffset":4950,"endOffset":5068,"count":0}],"isBlockCoverage":false},{"functionName":"TSAsExpression","ranges":[{"startOffset":5070,"endOffset":5114,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeAssertion","ranges":[{"startOffset":5116,"endOffset":5161,"count":0}],"isBlockCoverage":false},{"functionName":"TSUnionType","ranges":[{"startOffset":5163,"endOffset":5342,"count":0}],"isBlockCoverage":false},{"functionName":"TSInferType","ranges":[{"startOffset":5344,"endOffset":5442,"count":0}],"isBlockCoverage":false},{"functionName":"TSInstantiationExpression","ranges":[{"startOffset":5444,"endOffset":5662,"count":0}],"isBlockCoverage":false},{"functionName":"BinaryExpression","ranges":[{"startOffset":5664,"endOffset":5791,"count":0}],"isBlockCoverage":false},{"functionName":"SequenceExpression","ranges":[{"startOffset":5793,"endOffset":6243,"count":0}],"isBlockCoverage":false},{"functionName":"YieldExpression","ranges":[{"startOffset":6245,"endOffset":6522,"count":0}],"isBlockCoverage":false},{"functionName":"ClassExpression","ranges":[{"startOffset":6524,"endOffset":6679,"count":0}],"isBlockCoverage":false},{"functionName":"UnaryLike","ranges":[{"startOffset":6681,"endOffset":6866,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionExpression","ranges":[{"startOffset":6868,"endOffset":7026,"count":0}],"isBlockCoverage":false},{"functionName":"ArrowFunctionExpression","ranges":[{"startOffset":7028,"endOffset":7155,"count":0}],"isBlockCoverage":false},{"functionName":"ConditionalExpression","ranges":[{"startOffset":7157,"endOffset":7453,"count":0}],"isBlockCoverage":false},{"functionName":"OptionalMemberExpression","ranges":[{"startOffset":7455,"endOffset":7619,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":7621,"endOffset":7784,"count":0}],"isBlockCoverage":false},{"functionName":"LogicalExpression","ranges":[{"startOffset":7786,"endOffset":8175,"count":0}],"isBlockCoverage":false},{"functionName":"Identifier","ranges":[{"startOffset":8177,"endOffset":9032,"count":0}],"isBlockCoverage":false},{"functionName":"isFirstInContext","ranges":[{"startOffset":9034,"endOffset":10279,"count":0}],"isBlockCoverage":false}]},{"scriptId":"536","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3811,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":177,"endOffset":459,"count":3},{"startOffset":243,"endOffset":250,"count":0},{"startOffset":272,"endOffset":314,"count":0},{"startOffset":316,"endOffset":323,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":395,"endOffset":451,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":543,"endOffset":815,"count":28},{"startOffset":609,"endOffset":616,"count":0},{"startOffset":638,"endOffset":675,"count":0},{"startOffset":677,"endOffset":684,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":756,"endOffset":807,"count":28}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":896,"endOffset":1166,"count":19},{"startOffset":962,"endOffset":969,"count":0},{"startOffset":991,"endOffset":1027,"count":0},{"startOffset":1029,"endOffset":1036,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1108,"endOffset":1158,"count":19}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1238,"endOffset":1502,"count":10},{"startOffset":1304,"endOffset":1311,"count":0},{"startOffset":1333,"endOffset":1366,"count":0},{"startOffset":1368,"endOffset":1375,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1447,"endOffset":1494,"count":10}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1574,"endOffset":1838,"count":9},{"startOffset":1640,"endOffset":1647,"count":0},{"startOffset":1669,"endOffset":1702,"count":0},{"startOffset":1704,"endOffset":1711,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1783,"endOffset":1830,"count":9}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1910,"endOffset":2174,"count":11},{"startOffset":1976,"endOffset":1983,"count":0},{"startOffset":2005,"endOffset":2038,"count":0},{"startOffset":2040,"endOffset":2047,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2119,"endOffset":2166,"count":11}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2240,"endOffset":2500,"count":23},{"startOffset":2306,"endOffset":2313,"count":0},{"startOffset":2335,"endOffset":2366,"count":0},{"startOffset":2368,"endOffset":2375,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2447,"endOffset":2492,"count":23}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2563,"endOffset":2821,"count":67},{"startOffset":2629,"endOffset":2636,"count":0},{"startOffset":2658,"endOffset":2688,"count":0},{"startOffset":2690,"endOffset":2697,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2769,"endOffset":2813,"count":67}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2884,"endOffset":3142,"count":7},{"startOffset":2950,"endOffset":2957,"count":0},{"startOffset":2979,"endOffset":3009,"count":0},{"startOffset":3011,"endOffset":3018,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3090,"endOffset":3134,"count":7}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3202,"endOffset":3458,"count":15},{"startOffset":3268,"endOffset":3275,"count":0},{"startOffset":3297,"endOffset":3326,"count":0},{"startOffset":3328,"endOffset":3335,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3407,"endOffset":3450,"count":15}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3539,"endOffset":3809,"count":71},{"startOffset":3605,"endOffset":3612,"count":0},{"startOffset":3634,"endOffset":3670,"count":0},{"startOffset":3672,"endOffset":3679,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3751,"endOffset":3801,"count":71}],"isBlockCoverage":true}]},{"scriptId":"537","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/template-literals.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":864,"count":1}],"isBlockCoverage":true},{"functionName":"TaggedTemplateExpression","ranges":[{"startOffset":228,"endOffset":374,"count":0}],"isBlockCoverage":false},{"functionName":"TemplateElement","ranges":[{"startOffset":376,"endOffset":631,"count":0}],"isBlockCoverage":false},{"functionName":"TemplateLiteral","ranges":[{"startOffset":633,"endOffset":864,"count":0}],"isBlockCoverage":false}]},{"scriptId":"538","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/expressions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7839,"count":1}],"isBlockCoverage":true},{"functionName":"UnaryExpression","ranges":[{"startOffset":1414,"endOffset":1701,"count":0}],"isBlockCoverage":false},{"functionName":"DoExpression","ranges":[{"startOffset":1703,"endOffset":1867,"count":0}],"isBlockCoverage":false},{"functionName":"ParenthesizedExpression","ranges":[{"startOffset":1869,"endOffset":1986,"count":0}],"isBlockCoverage":false},{"functionName":"UpdateExpression","ranges":[{"startOffset":1988,"endOffset":2261,"count":0}],"isBlockCoverage":false},{"functionName":"ConditionalExpression","ranges":[{"startOffset":2263,"endOffset":2509,"count":0}],"isBlockCoverage":false},{"functionName":"NewExpression","ranges":[{"startOffset":2511,"endOffset":3039,"count":0}],"isBlockCoverage":false},{"functionName":"SequenceExpression","ranges":[{"startOffset":3041,"endOffset":3120,"count":0}],"isBlockCoverage":false},{"functionName":"ThisExpression","ranges":[{"startOffset":3122,"endOffset":3172,"count":0}],"isBlockCoverage":false},{"functionName":"Super","ranges":[{"startOffset":3174,"endOffset":3216,"count":0}],"isBlockCoverage":false},{"functionName":"isDecoratorMemberExpression","ranges":[{"startOffset":3218,"endOffset":3509,"count":0}],"isBlockCoverage":false},{"functionName":"shouldParenthesizeDecoratorExpression","ranges":[{"startOffset":3511,"endOffset":3753,"count":0}],"isBlockCoverage":false},{"functionName":"Decorator","ranges":[{"startOffset":3755,"endOffset":4043,"count":0}],"isBlockCoverage":false},{"functionName":"OptionalMemberExpression","ranges":[{"startOffset":4045,"endOffset":4660,"count":0}],"isBlockCoverage":false},{"functionName":"OptionalCallExpression","ranges":[{"startOffset":4662,"endOffset":4946,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":4948,"endOffset":5173,"count":0}],"isBlockCoverage":false},{"functionName":"Import","ranges":[{"startOffset":5175,"endOffset":5219,"count":0}],"isBlockCoverage":false},{"functionName":"buildYieldAwait","ranges":[{"startOffset":5221,"endOffset":5565,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5266,"endOffset":5562,"count":0}],"isBlockCoverage":false},{"functionName":"EmptyStatement","ranges":[{"startOffset":5754,"endOffset":5807,"count":0}],"isBlockCoverage":false},{"functionName":"ExpressionStatement","ranges":[{"startOffset":5809,"endOffset":5904,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentPattern","ranges":[{"startOffset":5906,"endOffset":6145,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":6147,"endOffset":6625,"count":0}],"isBlockCoverage":false},{"functionName":"BindExpression","ranges":[{"startOffset":6627,"endOffset":6746,"count":0}],"isBlockCoverage":false},{"functionName":"MemberExpression","ranges":[{"startOffset":6748,"endOffset":7270,"count":0}],"isBlockCoverage":false},{"functionName":"MetaProperty","ranges":[{"startOffset":7272,"endOffset":7388,"count":0}],"isBlockCoverage":false},{"functionName":"PrivateName","ranges":[{"startOffset":7390,"endOffset":7468,"count":0}],"isBlockCoverage":false},{"functionName":"V8IntrinsicIdentifier","ranges":[{"startOffset":7470,"endOffset":7553,"count":0}],"isBlockCoverage":false},{"functionName":"ModuleExpression","ranges":[{"startOffset":7555,"endOffset":7839,"count":0}],"isBlockCoverage":false}]},{"scriptId":"539","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/statements.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6949,"count":1}],"isBlockCoverage":true},{"functionName":"WithStatement","ranges":[{"startOffset":922,"endOffset":1087,"count":0}],"isBlockCoverage":false},{"functionName":"IfStatement","ranges":[{"startOffset":1089,"endOffset":1724,"count":0}],"isBlockCoverage":false},{"functionName":"getLastStatement","ranges":[{"startOffset":1726,"endOffset":1863,"count":0}],"isBlockCoverage":false},{"functionName":"ForStatement","ranges":[{"startOffset":1865,"endOffset":2292,"count":0}],"isBlockCoverage":false},{"functionName":"WhileStatement","ranges":[{"startOffset":2294,"endOffset":2459,"count":0}],"isBlockCoverage":false},{"functionName":"buildForXStatement","ranges":[{"startOffset":2488,"endOffset":2859,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2513,"endOffset":2856,"count":0}],"isBlockCoverage":false},{"functionName":"DoWhileStatement","ranges":[{"startOffset":3043,"endOffset":3287,"count":0}],"isBlockCoverage":false},{"functionName":"buildLabelStatement","ranges":[{"startOffset":3289,"endOffset":3676,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3352,"endOffset":3673,"count":0}],"isBlockCoverage":false},{"functionName":"LabeledStatement","ranges":[{"startOffset":4095,"endOffset":4228,"count":0}],"isBlockCoverage":false},{"functionName":"TryStatement","ranges":[{"startOffset":4230,"endOffset":4589,"count":0}],"isBlockCoverage":false},{"functionName":"CatchClause","ranges":[{"startOffset":4591,"endOffset":4859,"count":0}],"isBlockCoverage":false},{"functionName":"SwitchStatement","ranges":[{"startOffset":4861,"endOffset":5246,"count":0}],"isBlockCoverage":false},{"functionName":"SwitchCase","ranges":[{"startOffset":5248,"endOffset":5585,"count":0}],"isBlockCoverage":false},{"functionName":"DebuggerStatement","ranges":[{"startOffset":5587,"endOffset":5664,"count":0}],"isBlockCoverage":false},{"functionName":"variableDeclarationIndent","ranges":[{"startOffset":5666,"endOffset":5825,"count":0}],"isBlockCoverage":false},{"functionName":"constDeclarationIndent","ranges":[{"startOffset":5827,"endOffset":5983,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclaration","ranges":[{"startOffset":5985,"endOffset":6685,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclarator","ranges":[{"startOffset":6687,"endOffset":6949,"count":0}],"isBlockCoverage":false}]},{"scriptId":"540","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/classes.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4157,"count":1}],"isBlockCoverage":true},{"functionName":"ClassDeclaration","ranges":[{"startOffset":603,"endOffset":1492,"count":0}],"isBlockCoverage":false},{"functionName":"ClassBody","ranges":[{"startOffset":1494,"endOffset":1809,"count":0}],"isBlockCoverage":false},{"functionName":"ClassProperty","ranges":[{"startOffset":1811,"endOffset":2417,"count":0}],"isBlockCoverage":false},{"functionName":"ClassAccessorProperty","ranges":[{"startOffset":2419,"endOffset":3107,"count":0}],"isBlockCoverage":false},{"functionName":"ClassPrivateProperty","ranges":[{"startOffset":3109,"endOffset":3467,"count":0}],"isBlockCoverage":false},{"functionName":"ClassMethod","ranges":[{"startOffset":3469,"endOffset":3578,"count":0}],"isBlockCoverage":false},{"functionName":"ClassPrivateMethod","ranges":[{"startOffset":3580,"endOffset":3696,"count":0}],"isBlockCoverage":false},{"functionName":"_classMethodHead","ranges":[{"startOffset":3698,"endOffset":3886,"count":0}],"isBlockCoverage":false},{"functionName":"StaticBlock","ranges":[{"startOffset":3888,"endOffset":4157,"count":0}],"isBlockCoverage":false}]},{"scriptId":"541","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/methods.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3231,"count":1}],"isBlockCoverage":true},{"functionName":"_params","ranges":[{"startOffset":480,"endOffset":663,"count":0}],"isBlockCoverage":false},{"functionName":"_parameters","ranges":[{"startOffset":665,"endOffset":888,"count":0}],"isBlockCoverage":false},{"functionName":"_param","ranges":[{"startOffset":890,"endOffset":1106,"count":0}],"isBlockCoverage":false},{"functionName":"_methodHead","ranges":[{"startOffset":1108,"endOffset":1692,"count":0}],"isBlockCoverage":false},{"functionName":"_predicate","ranges":[{"startOffset":1694,"endOffset":1865,"count":0}],"isBlockCoverage":false},{"functionName":"_functionHead","ranges":[{"startOffset":1867,"endOffset":2181,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionExpression","ranges":[{"startOffset":2183,"endOffset":2296,"count":0}],"isBlockCoverage":false},{"functionName":"ArrowFunctionExpression","ranges":[{"startOffset":2298,"endOffset":2836,"count":0}],"isBlockCoverage":false},{"functionName":"hasTypesOrComments","ranges":[{"startOffset":2838,"endOffset":3231,"count":0}],"isBlockCoverage":false}]},{"scriptId":"542","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/modules.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5433,"count":1}],"isBlockCoverage":true},{"functionName":"ImportSpecifier","ranges":[{"startOffset":868,"endOffset":1218,"count":0}],"isBlockCoverage":false},{"functionName":"ImportDefaultSpecifier","ranges":[{"startOffset":1220,"endOffset":1293,"count":0}],"isBlockCoverage":false},{"functionName":"ExportDefaultSpecifier","ranges":[{"startOffset":1295,"endOffset":1371,"count":0}],"isBlockCoverage":false},{"functionName":"ExportSpecifier","ranges":[{"startOffset":1373,"endOffset":1685,"count":0}],"isBlockCoverage":false},{"functionName":"ExportNamespaceSpecifier","ranges":[{"startOffset":1687,"endOffset":1835,"count":0}],"isBlockCoverage":false},{"functionName":"ExportAllDeclaration","ranges":[{"startOffset":1837,"endOffset":2153,"count":0}],"isBlockCoverage":false},{"functionName":"ExportNamedDeclaration","ranges":[{"startOffset":2155,"endOffset":2423,"count":0}],"isBlockCoverage":false},{"functionName":"ExportDefaultDeclaration","ranges":[{"startOffset":2425,"endOffset":2735,"count":0}],"isBlockCoverage":false},{"functionName":"ExportDeclaration","ranges":[{"startOffset":2737,"endOffset":3877,"count":0}],"isBlockCoverage":false},{"functionName":"ImportDeclaration","ranges":[{"startOffset":3879,"endOffset":5165,"count":0}],"isBlockCoverage":false},{"functionName":"ImportAttribute","ranges":[{"startOffset":5167,"endOffset":5286,"count":0}],"isBlockCoverage":false},{"functionName":"ImportNamespaceSpecifier","ranges":[{"startOffset":5288,"endOffset":5433,"count":0}],"isBlockCoverage":false}]},{"scriptId":"543","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/types.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6332,"count":1}],"isBlockCoverage":true},{"functionName":"Identifier","ranges":[{"startOffset":1146,"endOffset":1244,"count":0}],"isBlockCoverage":false},{"functionName":"ArgumentPlaceholder","ranges":[{"startOffset":1246,"endOffset":1299,"count":0}],"isBlockCoverage":false},{"functionName":"RestElement","ranges":[{"startOffset":1301,"endOffset":1387,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectExpression","ranges":[{"startOffset":1389,"endOffset":1676,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectMethod","ranges":[{"startOffset":1678,"endOffset":1825,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectProperty","ranges":[{"startOffset":1827,"endOffset":2420,"count":0}],"isBlockCoverage":false},{"functionName":"ArrayExpression","ranges":[{"startOffset":2422,"endOffset":2822,"count":0}],"isBlockCoverage":false},{"functionName":"RecordExpression","ranges":[{"startOffset":2824,"endOffset":3545,"count":0}],"isBlockCoverage":false},{"functionName":"TupleExpression","ranges":[{"startOffset":3547,"endOffset":4287,"count":0}],"isBlockCoverage":false},{"functionName":"RegExpLiteral","ranges":[{"startOffset":4289,"endOffset":4368,"count":0}],"isBlockCoverage":false},{"functionName":"BooleanLiteral","ranges":[{"startOffset":4370,"endOffset":4447,"count":0}],"isBlockCoverage":false},{"functionName":"NullLiteral","ranges":[{"startOffset":4449,"endOffset":4496,"count":0}],"isBlockCoverage":false},{"functionName":"NumericLiteral","ranges":[{"startOffset":4498,"endOffset":4895,"count":0}],"isBlockCoverage":false},{"functionName":"StringLiteral","ranges":[{"startOffset":4897,"endOffset":5215,"count":0}],"isBlockCoverage":false},{"functionName":"BigIntLiteral","ranges":[{"startOffset":5217,"endOffset":5405,"count":0}],"isBlockCoverage":false},{"functionName":"DecimalLiteral","ranges":[{"startOffset":5407,"endOffset":5596,"count":0}],"isBlockCoverage":false},{"functionName":"TopicReference","ranges":[{"startOffset":5664,"endOffset":6112,"count":0}],"isBlockCoverage":false},{"functionName":"PipelineTopicExpression","ranges":[{"startOffset":6114,"endOffset":6193,"count":0}],"isBlockCoverage":false},{"functionName":"PipelineBareFunction","ranges":[{"startOffset":6195,"endOffset":6267,"count":0}],"isBlockCoverage":false},{"functionName":"PipelinePrimaryTopicReference","ranges":[{"startOffset":6269,"endOffset":6332,"count":0}],"isBlockCoverage":false}]},{"scriptId":"544","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/jsesc/jsesc.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8389,"count":1}],"isBlockCoverage":true},{"functionName":"forOwn","ranges":[{"startOffset":95,"endOffset":229,"count":0}],"isBlockCoverage":false},{"functionName":"extend","ranges":[{"startOffset":247,"endOffset":404,"count":0}],"isBlockCoverage":false},{"functionName":"forEach","ranges":[{"startOffset":423,"endOffset":551,"count":0}],"isBlockCoverage":false},{"functionName":"isObject","ranges":[{"startOffset":670,"endOffset":807,"count":0}],"isBlockCoverage":false},{"functionName":"isString","ranges":[{"startOffset":826,"endOffset":921,"count":0}],"isBlockCoverage":false},{"functionName":"isNumber","ranges":[{"startOffset":940,"endOffset":1035,"count":0}],"isBlockCoverage":false},{"functionName":"isFunction","ranges":[{"startOffset":1056,"endOffset":1106,"count":0}],"isBlockCoverage":false},{"functionName":"isMap","ranges":[{"startOffset":1122,"endOffset":1184,"count":0}],"isBlockCoverage":false},{"functionName":"isSet","ranges":[{"startOffset":1200,"endOffset":1262,"count":0}],"isBlockCoverage":false},{"functionName":"jsesc","ranges":[{"startOffset":1765,"endOffset":8336,"count":0}],"isBlockCoverage":false}]},{"scriptId":"545","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/flow.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16466,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2070,"endOffset":2122,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2750,"endOffset":2801,"count":1}],"isBlockCoverage":true},{"functionName":"AnyTypeAnnotation","ranges":[{"startOffset":3694,"endOffset":3746,"count":0}],"isBlockCoverage":false},{"functionName":"ArrayTypeAnnotation","ranges":[{"startOffset":3748,"endOffset":3862,"count":0}],"isBlockCoverage":false},{"functionName":"BooleanTypeAnnotation","ranges":[{"startOffset":3864,"endOffset":3924,"count":0}],"isBlockCoverage":false},{"functionName":"BooleanLiteralTypeAnnotation","ranges":[{"startOffset":3926,"endOffset":4017,"count":0}],"isBlockCoverage":false},{"functionName":"NullLiteralTypeAnnotation","ranges":[{"startOffset":4019,"endOffset":4080,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareClass","ranges":[{"startOffset":4082,"endOffset":4282,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareFunction","ranges":[{"startOffset":4284,"endOffset":4655,"count":0}],"isBlockCoverage":false},{"functionName":"InferredPredicate","ranges":[{"startOffset":4657,"endOffset":4731,"count":0}],"isBlockCoverage":false},{"functionName":"DeclaredPredicate","ranges":[{"startOffset":4733,"endOffset":4881,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareInterface","ranges":[{"startOffset":4883,"endOffset":4993,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareModule","ranges":[{"startOffset":4995,"endOffset":5182,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareModuleExports","ranges":[{"startOffset":5184,"endOffset":5370,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareTypeAlias","ranges":[{"startOffset":5372,"endOffset":5471,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareOpaqueType","ranges":[{"startOffset":5473,"endOffset":5636,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareVariable","ranges":[{"startOffset":5638,"endOffset":5903,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareExportDeclaration","ranges":[{"startOffset":5905,"endOffset":6147,"count":0}],"isBlockCoverage":false},{"functionName":"DeclareExportAllDeclaration","ranges":[{"startOffset":6149,"endOffset":6288,"count":0}],"isBlockCoverage":false},{"functionName":"EnumDeclaration","ranges":[{"startOffset":6290,"endOffset":6450,"count":0}],"isBlockCoverage":false},{"functionName":"enumExplicitType","ranges":[{"startOffset":6452,"endOffset":6652,"count":0}],"isBlockCoverage":false},{"functionName":"enumBody","ranges":[{"startOffset":6654,"endOffset":7011,"count":0}],"isBlockCoverage":false},{"functionName":"EnumBooleanBody","ranges":[{"startOffset":7013,"endOffset":7161,"count":0}],"isBlockCoverage":false},{"functionName":"EnumNumberBody","ranges":[{"startOffset":7163,"endOffset":7309,"count":0}],"isBlockCoverage":false},{"functionName":"EnumStringBody","ranges":[{"startOffset":7311,"endOffset":7457,"count":0}],"isBlockCoverage":false},{"functionName":"EnumSymbolBody","ranges":[{"startOffset":7459,"endOffset":7558,"count":0}],"isBlockCoverage":false},{"functionName":"EnumDefaultedMember","ranges":[{"startOffset":7560,"endOffset":7670,"count":0}],"isBlockCoverage":false},{"functionName":"enumInitializedMember","ranges":[{"startOffset":7672,"endOffset":7898,"count":0}],"isBlockCoverage":false},{"functionName":"EnumBooleanMember","ranges":[{"startOffset":7900,"endOffset":7973,"count":0}],"isBlockCoverage":false},{"functionName":"EnumNumberMember","ranges":[{"startOffset":7975,"endOffset":8047,"count":0}],"isBlockCoverage":false},{"functionName":"EnumStringMember","ranges":[{"startOffset":8049,"endOffset":8121,"count":0}],"isBlockCoverage":false},{"functionName":"FlowExportDeclaration","ranges":[{"startOffset":8123,"endOffset":8643,"count":0}],"isBlockCoverage":false},{"functionName":"ExistsTypeAnnotation","ranges":[{"startOffset":8645,"endOffset":8699,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionTypeAnnotation","ranges":[{"startOffset":8701,"endOffset":9542,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionTypeParam","ranges":[{"startOffset":9544,"endOffset":9754,"count":0}],"isBlockCoverage":false},{"functionName":"InterfaceExtends","ranges":[{"startOffset":9756,"endOffset":9861,"count":0}],"isBlockCoverage":false},{"functionName":"_interfaceish","ranges":[{"startOffset":9863,"endOffset":10526,"count":0}],"isBlockCoverage":false},{"functionName":"_variance","ranges":[{"startOffset":10528,"endOffset":10725,"count":0}],"isBlockCoverage":false},{"functionName":"InterfaceDeclaration","ranges":[{"startOffset":10727,"endOffset":10837,"count":0}],"isBlockCoverage":false},{"functionName":"andSeparator","ranges":[{"startOffset":10839,"endOffset":10917,"count":0}],"isBlockCoverage":false},{"functionName":"InterfaceTypeAnnotation","ranges":[{"startOffset":10919,"endOffset":11187,"count":0}],"isBlockCoverage":false},{"functionName":"IntersectionTypeAnnotation","ranges":[{"startOffset":11189,"endOffset":11305,"count":0}],"isBlockCoverage":false},{"functionName":"MixedTypeAnnotation","ranges":[{"startOffset":11307,"endOffset":11363,"count":0}],"isBlockCoverage":false},{"functionName":"EmptyTypeAnnotation","ranges":[{"startOffset":11365,"endOffset":11421,"count":0}],"isBlockCoverage":false},{"functionName":"NullableTypeAnnotation","ranges":[{"startOffset":11423,"endOffset":11524,"count":0}],"isBlockCoverage":false},{"functionName":"NumberTypeAnnotation","ranges":[{"startOffset":11526,"endOffset":11584,"count":0}],"isBlockCoverage":false},{"functionName":"StringTypeAnnotation","ranges":[{"startOffset":11586,"endOffset":11644,"count":0}],"isBlockCoverage":false},{"functionName":"ThisTypeAnnotation","ranges":[{"startOffset":11646,"endOffset":11700,"count":0}],"isBlockCoverage":false},{"functionName":"TupleTypeAnnotation","ranges":[{"startOffset":11702,"endOffset":11814,"count":0}],"isBlockCoverage":false},{"functionName":"TypeofTypeAnnotation","ranges":[{"startOffset":11816,"endOffset":11929,"count":0}],"isBlockCoverage":false},{"functionName":"TypeAlias","ranges":[{"startOffset":11931,"endOffset":12169,"count":0}],"isBlockCoverage":false},{"functionName":"TypeAnnotation","ranges":[{"startOffset":12171,"endOffset":12318,"count":0}],"isBlockCoverage":false},{"functionName":"TypeParameterInstantiation","ranges":[{"startOffset":12320,"endOffset":12444,"count":0}],"isBlockCoverage":false},{"functionName":"TypeParameter","ranges":[{"startOffset":12446,"endOffset":12706,"count":0}],"isBlockCoverage":false},{"functionName":"OpaqueType","ranges":[{"startOffset":12708,"endOffset":13132,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectTypeAnnotation","ranges":[{"startOffset":13134,"endOffset":13974,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectTypeInternalSlot","ranges":[{"startOffset":13976,"endOffset":14328,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectTypeCallProperty","ranges":[{"startOffset":14330,"endOffset":14472,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectTypeIndexer","ranges":[{"startOffset":14474,"endOffset":14832,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectTypeProperty","ranges":[{"startOffset":14834,"endOffset":15300,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectTypeSpreadProperty","ranges":[{"startOffset":15302,"endOffset":15401,"count":0}],"isBlockCoverage":false},{"functionName":"QualifiedTypeIdentifier","ranges":[{"startOffset":15403,"endOffset":15533,"count":0}],"isBlockCoverage":false},{"functionName":"SymbolTypeAnnotation","ranges":[{"startOffset":15535,"endOffset":15593,"count":0}],"isBlockCoverage":false},{"functionName":"orSeparator","ranges":[{"startOffset":15595,"endOffset":15672,"count":0}],"isBlockCoverage":false},{"functionName":"UnionTypeAnnotation","ranges":[{"startOffset":15674,"endOffset":15782,"count":0}],"isBlockCoverage":false},{"functionName":"TypeCastExpression","ranges":[{"startOffset":15784,"endOffset":15937,"count":0}],"isBlockCoverage":false},{"functionName":"Variance","ranges":[{"startOffset":15939,"endOffset":16053,"count":0}],"isBlockCoverage":false},{"functionName":"VoidTypeAnnotation","ranges":[{"startOffset":16055,"endOffset":16109,"count":0}],"isBlockCoverage":false},{"functionName":"IndexedAccessType","ranges":[{"startOffset":16111,"endOffset":16258,"count":0}],"isBlockCoverage":false},{"functionName":"OptionalIndexedAccessType","ranges":[{"startOffset":16260,"endOffset":16466,"count":0}],"isBlockCoverage":false}]},{"scriptId":"546","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/base.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2294,"count":1}],"isBlockCoverage":true},{"functionName":"File","ranges":[{"startOffset":334,"endOffset":466,"count":0}],"isBlockCoverage":false},{"functionName":"Program","ranges":[{"startOffset":468,"endOffset":683,"count":0}],"isBlockCoverage":false},{"functionName":"BlockStatement","ranges":[{"startOffset":685,"endOffset":1352,"count":0}],"isBlockCoverage":false},{"functionName":"Directive","ranges":[{"startOffset":1354,"endOffset":1434,"count":0}],"isBlockCoverage":false},{"functionName":"DirectiveLiteral","ranges":[{"startOffset":1549,"endOffset":2051,"count":0}],"isBlockCoverage":false},{"functionName":"InterpreterDirective","ranges":[{"startOffset":2053,"endOffset":2127,"count":0}],"isBlockCoverage":false},{"functionName":"Placeholder","ranges":[{"startOffset":2129,"endOffset":2294,"count":0}],"isBlockCoverage":false}]},{"scriptId":"547","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/jsx.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2973,"count":1}],"isBlockCoverage":true},{"functionName":"JSXAttribute","ranges":[{"startOffset":738,"endOffset":880,"count":0}],"isBlockCoverage":false},{"functionName":"JSXIdentifier","ranges":[{"startOffset":882,"endOffset":938,"count":0}],"isBlockCoverage":false},{"functionName":"JSXNamespacedName","ranges":[{"startOffset":940,"endOffset":1062,"count":0}],"isBlockCoverage":false},{"functionName":"JSXMemberExpression","ranges":[{"startOffset":1064,"endOffset":1189,"count":0}],"isBlockCoverage":false},{"functionName":"JSXSpreadAttribute","ranges":[{"startOffset":1191,"endOffset":1322,"count":0}],"isBlockCoverage":false},{"functionName":"JSXExpressionContainer","ranges":[{"startOffset":1324,"endOffset":1440,"count":0}],"isBlockCoverage":false},{"functionName":"JSXSpreadChild","ranges":[{"startOffset":1442,"endOffset":1571,"count":0}],"isBlockCoverage":false},{"functionName":"JSXText","ranges":[{"startOffset":1573,"endOffset":1726,"count":0}],"isBlockCoverage":false},{"functionName":"JSXElement","ranges":[{"startOffset":1728,"endOffset":2000,"count":0}],"isBlockCoverage":false},{"functionName":"spaceSeparator","ranges":[{"startOffset":2002,"endOffset":2047,"count":0}],"isBlockCoverage":false},{"functionName":"JSXOpeningElement","ranges":[{"startOffset":2049,"endOffset":2422,"count":0}],"isBlockCoverage":false},{"functionName":"JSXClosingElement","ranges":[{"startOffset":2424,"endOffset":2530,"count":0}],"isBlockCoverage":false},{"functionName":"JSXEmptyExpression","ranges":[{"startOffset":2532,"endOffset":2602,"count":0}],"isBlockCoverage":false},{"functionName":"JSXFragment","ranges":[{"startOffset":2604,"endOffset":2826,"count":0}],"isBlockCoverage":false},{"functionName":"JSXOpeningFragment","ranges":[{"startOffset":2828,"endOffset":2899,"count":0}],"isBlockCoverage":false},{"functionName":"JSXClosingFragment","ranges":[{"startOffset":2901,"endOffset":2973,"count":0}],"isBlockCoverage":false}]},{"scriptId":"548","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/lib/generators/typescript.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16567,"count":1}],"isBlockCoverage":true},{"functionName":"TSTypeAnnotation","ranges":[{"startOffset":3518,"endOffset":3667,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeParameterInstantiation","ranges":[{"startOffset":3669,"endOffset":3909,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeParameter","ranges":[{"startOffset":3911,"endOffset":4344,"count":0}],"isBlockCoverage":false},{"functionName":"TSParameterProperty","ranges":[{"startOffset":4346,"endOffset":4574,"count":0}],"isBlockCoverage":false},{"functionName":"TSDeclareFunction","ranges":[{"startOffset":4576,"endOffset":4731,"count":0}],"isBlockCoverage":false},{"functionName":"TSDeclareMethod","ranges":[{"startOffset":4733,"endOffset":4818,"count":0}],"isBlockCoverage":false},{"functionName":"TSQualifiedName","ranges":[{"startOffset":4820,"endOffset":4936,"count":0}],"isBlockCoverage":false},{"functionName":"TSCallSignatureDeclaration","ranges":[{"startOffset":4938,"endOffset":5048,"count":0}],"isBlockCoverage":false},{"functionName":"TSConstructSignatureDeclaration","ranges":[{"startOffset":5050,"endOffset":5201,"count":0}],"isBlockCoverage":false},{"functionName":"TSPropertySignature","ranges":[{"startOffset":5203,"endOffset":5583,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintPropertyOrMethodName","ranges":[{"startOffset":5585,"endOffset":5808,"count":0}],"isBlockCoverage":false},{"functionName":"TSMethodSignature","ranges":[{"startOffset":5810,"endOffset":6071,"count":0}],"isBlockCoverage":false},{"functionName":"TSIndexSignature","ranges":[{"startOffset":6073,"endOffset":6443,"count":0}],"isBlockCoverage":false},{"functionName":"TSAnyKeyword","ranges":[{"startOffset":6445,"endOffset":6492,"count":0}],"isBlockCoverage":false},{"functionName":"TSBigIntKeyword","ranges":[{"startOffset":6494,"endOffset":6547,"count":0}],"isBlockCoverage":false},{"functionName":"TSUnknownKeyword","ranges":[{"startOffset":6549,"endOffset":6604,"count":0}],"isBlockCoverage":false},{"functionName":"TSNumberKeyword","ranges":[{"startOffset":6606,"endOffset":6659,"count":0}],"isBlockCoverage":false},{"functionName":"TSObjectKeyword","ranges":[{"startOffset":6661,"endOffset":6714,"count":0}],"isBlockCoverage":false},{"functionName":"TSBooleanKeyword","ranges":[{"startOffset":6716,"endOffset":6771,"count":0}],"isBlockCoverage":false},{"functionName":"TSStringKeyword","ranges":[{"startOffset":6773,"endOffset":6826,"count":0}],"isBlockCoverage":false},{"functionName":"TSSymbolKeyword","ranges":[{"startOffset":6828,"endOffset":6881,"count":0}],"isBlockCoverage":false},{"functionName":"TSVoidKeyword","ranges":[{"startOffset":6883,"endOffset":6932,"count":0}],"isBlockCoverage":false},{"functionName":"TSUndefinedKeyword","ranges":[{"startOffset":6934,"endOffset":6993,"count":0}],"isBlockCoverage":false},{"functionName":"TSNullKeyword","ranges":[{"startOffset":6995,"endOffset":7044,"count":0}],"isBlockCoverage":false},{"functionName":"TSNeverKeyword","ranges":[{"startOffset":7046,"endOffset":7097,"count":0}],"isBlockCoverage":false},{"functionName":"TSIntrinsicKeyword","ranges":[{"startOffset":7099,"endOffset":7158,"count":0}],"isBlockCoverage":false},{"functionName":"TSThisType","ranges":[{"startOffset":7160,"endOffset":7206,"count":0}],"isBlockCoverage":false},{"functionName":"TSFunctionType","ranges":[{"startOffset":7208,"endOffset":7288,"count":0}],"isBlockCoverage":false},{"functionName":"TSConstructorType","ranges":[{"startOffset":7290,"endOffset":7482,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintFunctionOrConstructorType","ranges":[{"startOffset":7484,"endOffset":7869,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeReference","ranges":[{"startOffset":7871,"endOffset":7981,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypePredicate","ranges":[{"startOffset":7983,"endOffset":8265,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeQuery","ranges":[{"startOffset":8267,"endOffset":8442,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeLiteral","ranges":[{"startOffset":8444,"endOffset":8538,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintTypeLiteralOrInterfaceBody","ranges":[{"startOffset":8540,"endOffset":8638,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintBraced","ranges":[{"startOffset":8640,"endOffset":8940,"count":0}],"isBlockCoverage":false},{"functionName":"TSArrayType","ranges":[{"startOffset":8942,"endOffset":9030,"count":0}],"isBlockCoverage":false},{"functionName":"TSTupleType","ranges":[{"startOffset":9032,"endOffset":9143,"count":0}],"isBlockCoverage":false},{"functionName":"TSOptionalType","ranges":[{"startOffset":9145,"endOffset":9238,"count":0}],"isBlockCoverage":false},{"functionName":"TSRestType","ranges":[{"startOffset":9240,"endOffset":9331,"count":0}],"isBlockCoverage":false},{"functionName":"TSNamedTupleMember","ranges":[{"startOffset":9333,"endOffset":9513,"count":0}],"isBlockCoverage":false},{"functionName":"TSUnionType","ranges":[{"startOffset":9515,"endOffset":9595,"count":0}],"isBlockCoverage":false},{"functionName":"TSIntersectionType","ranges":[{"startOffset":9597,"endOffset":9684,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintUnionOrIntersectionType","ranges":[{"startOffset":9686,"endOffset":9871,"count":0}],"isBlockCoverage":false},{"functionName":"TSConditionalType","ranges":[{"startOffset":9873,"endOffset":10188,"count":0}],"isBlockCoverage":false},{"functionName":"TSInferType","ranges":[{"startOffset":10190,"endOffset":10293,"count":0}],"isBlockCoverage":false},{"functionName":"TSParenthesizedType","ranges":[{"startOffset":10295,"endOffset":10412,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeOperator","ranges":[{"startOffset":10414,"endOffset":10532,"count":0}],"isBlockCoverage":false},{"functionName":"TSIndexedAccessType","ranges":[{"startOffset":10534,"endOffset":10683,"count":0}],"isBlockCoverage":false},{"functionName":"TSMappedType","ranges":[{"startOffset":10685,"endOffset":11424,"count":0}],"isBlockCoverage":false},{"functionName":"tokenIfPlusMinus","ranges":[{"startOffset":11426,"endOffset":11513,"count":0}],"isBlockCoverage":false},{"functionName":"TSLiteralType","ranges":[{"startOffset":11515,"endOffset":11581,"count":0}],"isBlockCoverage":false},{"functionName":"TSExpressionWithTypeArguments","ranges":[{"startOffset":11583,"endOffset":11709,"count":0}],"isBlockCoverage":false},{"functionName":"TSInterfaceDeclaration","ranges":[{"startOffset":11711,"endOffset":12203,"count":0}],"isBlockCoverage":false},{"functionName":"TSInterfaceBody","ranges":[{"startOffset":12205,"endOffset":12298,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeAliasDeclaration","ranges":[{"startOffset":12300,"endOffset":12693,"count":0}],"isBlockCoverage":false},{"functionName":"TSAsExpression","ranges":[{"startOffset":12695,"endOffset":12904,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeAssertion","ranges":[{"startOffset":12906,"endOffset":13119,"count":0}],"isBlockCoverage":false},{"functionName":"TSInstantiationExpression","ranges":[{"startOffset":13121,"endOffset":13243,"count":0}],"isBlockCoverage":false},{"functionName":"TSEnumDeclaration","ranges":[{"startOffset":13245,"endOffset":13601,"count":0}],"isBlockCoverage":false},{"functionName":"TSEnumMember","ranges":[{"startOffset":13603,"endOffset":13842,"count":0}],"isBlockCoverage":false},{"functionName":"TSModuleDeclaration","ranges":[{"startOffset":13844,"endOffset":14379,"count":0}],"isBlockCoverage":false},{"functionName":"TSModuleBlock","ranges":[{"startOffset":14381,"endOffset":14452,"count":0}],"isBlockCoverage":false},{"functionName":"TSImportType","ranges":[{"startOffset":14454,"endOffset":14791,"count":0}],"isBlockCoverage":false},{"functionName":"TSImportEqualsDeclaration","ranges":[{"startOffset":14793,"endOffset":15138,"count":0}],"isBlockCoverage":false},{"functionName":"TSExternalModuleReference","ranges":[{"startOffset":15140,"endOffset":15266,"count":0}],"isBlockCoverage":false},{"functionName":"TSNonNullExpression","ranges":[{"startOffset":15268,"endOffset":15362,"count":0}],"isBlockCoverage":false},{"functionName":"TSExportAssignment","ranges":[{"startOffset":15364,"endOffset":15531,"count":0}],"isBlockCoverage":false},{"functionName":"TSNamespaceExportDeclaration","ranges":[{"startOffset":15533,"endOffset":15725,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintSignatureDeclarationBase","ranges":[{"startOffset":15727,"endOffset":16044,"count":0}],"isBlockCoverage":false},{"functionName":"tsPrintClassMemberModifiers","ranges":[{"startOffset":16046,"endOffset":16567,"count":0}],"isBlockCoverage":false}]},{"scriptId":"549","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/ancestry.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3691,"count":1}],"isBlockCoverage":true},{"functionName":"findParent","ranges":[{"startOffset":602,"endOffset":747,"count":0}],"isBlockCoverage":false},{"functionName":"find","ranges":[{"startOffset":749,"endOffset":892,"count":0}],"isBlockCoverage":false},{"functionName":"getFunctionParent","ranges":[{"startOffset":894,"endOffset":973,"count":0}],"isBlockCoverage":false},{"functionName":"getStatementParent","ranges":[{"startOffset":975,"endOffset":1365,"count":0}],"isBlockCoverage":false},{"functionName":"getEarliestCommonAncestorFrom","ranges":[{"startOffset":1367,"endOffset":2128,"count":0}],"isBlockCoverage":false},{"functionName":"getDeepestCommonAncestorFrom","ranges":[{"startOffset":2130,"endOffset":3126,"count":0}],"isBlockCoverage":false},{"functionName":"getAncestry","ranges":[{"startOffset":3128,"endOffset":3276,"count":0}],"isBlockCoverage":false},{"functionName":"isAncestor","ranges":[{"startOffset":3278,"endOffset":3363,"count":0}],"isBlockCoverage":false},{"functionName":"isDescendant","ranges":[{"startOffset":3365,"endOffset":3469,"count":0}],"isBlockCoverage":false},{"functionName":"inType","ranges":[{"startOffset":3471,"endOffset":3691,"count":0}],"isBlockCoverage":false}]},{"scriptId":"550","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/inference/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3866,"count":1}],"isBlockCoverage":true},{"functionName":"getTypeAnnotation","ranges":[{"startOffset":796,"endOffset":1090,"count":0}],"isBlockCoverage":false},{"functionName":"_getTypeAnnotation","ranges":[{"startOffset":1145,"endOffset":2233,"count":0}],"isBlockCoverage":false},{"functionName":"isBaseType","ranges":[{"startOffset":2235,"endOffset":2338,"count":0}],"isBlockCoverage":false},{"functionName":"_isBaseType","ranges":[{"startOffset":2340,"endOffset":3046,"count":0}],"isBlockCoverage":false},{"functionName":"couldBeBaseType","ranges":[{"startOffset":3048,"endOffset":3430,"count":0}],"isBlockCoverage":false},{"functionName":"baseTypeStrictlyMatches","ranges":[{"startOffset":3432,"endOffset":3690,"count":0}],"isBlockCoverage":false},{"functionName":"isGenericType","ranges":[{"startOffset":3692,"endOffset":3866,"count":0}],"isBlockCoverage":false}]},{"scriptId":"551","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/inference/inferers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6980,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":584,"endOffset":639,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclarator","ranges":[{"startOffset":1983,"endOffset":2444,"count":0}],"isBlockCoverage":false},{"functionName":"TypeCastExpression","ranges":[{"startOffset":2446,"endOffset":2513,"count":0}],"isBlockCoverage":false},{"functionName":"NewExpression","ranges":[{"startOffset":2555,"endOffset":2681,"count":0}],"isBlockCoverage":false},{"functionName":"TemplateLiteral","ranges":[{"startOffset":2683,"endOffset":2746,"count":0}],"isBlockCoverage":false},{"functionName":"UnaryExpression","ranges":[{"startOffset":2748,"endOffset":3176,"count":0}],"isBlockCoverage":false},{"functionName":"BinaryExpression","ranges":[{"startOffset":3178,"endOffset":3853,"count":0}],"isBlockCoverage":false},{"functionName":"LogicalExpression","ranges":[{"startOffset":3855,"endOffset":4240,"count":0}],"isBlockCoverage":false},{"functionName":"ConditionalExpression","ranges":[{"startOffset":4242,"endOffset":4641,"count":0}],"isBlockCoverage":false},{"functionName":"SequenceExpression","ranges":[{"startOffset":4643,"endOffset":4736,"count":0}],"isBlockCoverage":false},{"functionName":"ParenthesizedExpression","ranges":[{"startOffset":4738,"endOffset":4829,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":4831,"endOffset":4914,"count":0}],"isBlockCoverage":false},{"functionName":"UpdateExpression","ranges":[{"startOffset":4916,"endOffset":5073,"count":0}],"isBlockCoverage":false},{"functionName":"StringLiteral","ranges":[{"startOffset":5075,"endOffset":5136,"count":0}],"isBlockCoverage":false},{"functionName":"NumericLiteral","ranges":[{"startOffset":5138,"endOffset":5200,"count":0}],"isBlockCoverage":false},{"functionName":"BooleanLiteral","ranges":[{"startOffset":5202,"endOffset":5265,"count":0}],"isBlockCoverage":false},{"functionName":"NullLiteral","ranges":[{"startOffset":5267,"endOffset":5331,"count":0}],"isBlockCoverage":false},{"functionName":"RegExpLiteral","ranges":[{"startOffset":5333,"endOffset":5415,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectExpression","ranges":[{"startOffset":5417,"endOffset":5502,"count":0}],"isBlockCoverage":false},{"functionName":"ArrayExpression","ranges":[{"startOffset":5504,"endOffset":5587,"count":0}],"isBlockCoverage":false},{"functionName":"RestElement","ranges":[{"startOffset":5589,"endOffset":5643,"count":0}],"isBlockCoverage":false},{"functionName":"Func","ranges":[{"startOffset":5678,"endOffset":5753,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":6020,"endOffset":6476,"count":0}],"isBlockCoverage":false},{"functionName":"TaggedTemplateExpression","ranges":[{"startOffset":6478,"endOffset":6556,"count":0}],"isBlockCoverage":false},{"functionName":"resolveCall","ranges":[{"startOffset":6558,"endOffset":6980,"count":0}],"isBlockCoverage":false}]},{"scriptId":"552","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5091,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":373,"endOffset":916,"count":0}],"isBlockCoverage":false},{"functionName":"getTypeAnnotationBindingConstantViolations","ranges":[{"startOffset":918,"endOffset":1945,"count":0}],"isBlockCoverage":false},{"functionName":"getConstantViolationsBefore","ranges":[{"startOffset":1947,"endOffset":2363,"count":0}],"isBlockCoverage":false},{"functionName":"inferAnnotationFromBinaryExpression","ranges":[{"startOffset":2365,"endOffset":3553,"count":0}],"isBlockCoverage":false},{"functionName":"getParentConditionalPath","ranges":[{"startOffset":3555,"endOffset":3986,"count":0}],"isBlockCoverage":false},{"functionName":"getConditionalAnnotation","ranges":[{"startOffset":3988,"endOffset":5091,"count":0}],"isBlockCoverage":false}]},{"scriptId":"553","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/replacement.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7131,"count":1}],"isBlockCoverage":true},{"functionName":"replaceWithMultiple","ranges":[{"startOffset":1076,"endOffset":1586,"count":0}],"isBlockCoverage":false},{"functionName":"replaceWithSourceString","ranges":[{"startOffset":1588,"endOffset":2238,"count":0}],"isBlockCoverage":false},{"functionName":"replaceWith","ranges":[{"startOffset":2240,"endOffset":4025,"count":0}],"isBlockCoverage":false},{"functionName":"_replaceWith","ranges":[{"startOffset":4027,"endOffset":4524,"count":0}],"isBlockCoverage":false},{"functionName":"replaceExpressionWithStatements","ranges":[{"startOffset":4526,"endOffset":6750,"count":0}],"isBlockCoverage":false},{"functionName":"replaceInline","ranges":[{"startOffset":6752,"endOffset":7131,"count":0}],"isBlockCoverage":false}]},{"scriptId":"554","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-hoist-variables/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1195,"count":1}],"isBlockCoverage":true},{"functionName":"Scope","ranges":[{"startOffset":246,"endOffset":313,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionParent","ranges":[{"startOffset":318,"endOffset":361,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclaration","ranges":[{"startOffset":366,"endOffset":1084,"count":0}],"isBlockCoverage":false},{"functionName":"hoistVariables","ranges":[{"startOffset":1090,"endOffset":1195,"count":0}],"isBlockCoverage":false}]},{"scriptId":"555","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/evaluation.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9193,"count":1}],"isBlockCoverage":true},{"functionName":"evaluateTruthy","ranges":[{"startOffset":239,"endOffset":340,"count":0}],"isBlockCoverage":false},{"functionName":"deopt","ranges":[{"startOffset":342,"endOffset":458,"count":0}],"isBlockCoverage":false},{"functionName":"evaluateCached","ranges":[{"startOffset":460,"endOffset":976,"count":0}],"isBlockCoverage":false},{"functionName":"_evaluate","ranges":[{"startOffset":978,"endOffset":8515,"count":0}],"isBlockCoverage":false},{"functionName":"evaluateQuasis","ranges":[{"startOffset":8517,"endOffset":8904,"count":0}],"isBlockCoverage":false},{"functionName":"evaluate","ranges":[{"startOffset":8906,"endOffset":9193,"count":0}],"isBlockCoverage":false}]},{"scriptId":"556","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/conversion.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15605,"count":1}],"isBlockCoverage":true},{"functionName":"toComputedKey","ranges":[{"startOffset":1056,"endOffset":1399,"count":0}],"isBlockCoverage":false},{"functionName":"ensureBlock","ranges":[{"startOffset":1401,"endOffset":2364,"count":0}],"isBlockCoverage":false},{"functionName":"arrowFunctionToShadowed","ranges":[{"startOffset":2366,"endOffset":2489,"count":0}],"isBlockCoverage":false},{"functionName":"unwrapFunctionEnvironment","ranges":[{"startOffset":2491,"endOffset":2764,"count":0}],"isBlockCoverage":false},{"functionName":"arrowFunctionToExpression","ranges":[{"startOffset":2766,"endOffset":3880,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":3937,"endOffset":4068,"count":0}],"isBlockCoverage":false},{"functionName":"hoistFunctionEnvironment","ranges":[{"startOffset":4111,"endOffset":8704,"count":0}],"isBlockCoverage":false},{"functionName":"isLogicalOp","ranges":[{"startOffset":8706,"endOffset":8775,"count":0}],"isBlockCoverage":false},{"functionName":"standardizeSuperProperty","ranges":[{"startOffset":8777,"endOffset":11514,"count":0}],"isBlockCoverage":false},{"functionName":"hasSuperClass","ranges":[{"startOffset":11516,"endOffset":11642,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":11701,"endOffset":11996,"count":0}],"isBlockCoverage":false},{"functionName":"getThisBinding","ranges":[{"startOffset":12039,"endOffset":12336,"count":0}],"isBlockCoverage":false},{"functionName":"getSuperBinding","ranges":[{"startOffset":12338,"endOffset":12643,"count":0}],"isBlockCoverage":false},{"functionName":"getSuperPropBinding","ranges":[{"startOffset":12645,"endOffset":13428,"count":0}],"isBlockCoverage":false},{"functionName":"getBinding","ranges":[{"startOffset":13430,"endOffset":13780,"count":0}],"isBlockCoverage":false},{"functionName":"ThisExpression","ranges":[{"startOffset":13843,"endOffset":13918,"count":0}],"isBlockCoverage":false},{"functionName":"JSXIdentifier","ranges":[{"startOffset":13923,"endOffset":14221,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":14226,"endOffset":14338,"count":0}],"isBlockCoverage":false},{"functionName":"MemberExpression","ranges":[{"startOffset":14343,"endOffset":14457,"count":0}],"isBlockCoverage":false},{"functionName":"Identifier","ranges":[{"startOffset":14462,"endOffset":14901,"count":0}],"isBlockCoverage":false},{"functionName":"MetaProperty","ranges":[{"startOffset":14906,"endOffset":15148,"count":0}],"isBlockCoverage":false},{"functionName":"getScopeInformation","ranges":[{"startOffset":15191,"endOffset":15605,"count":0}],"isBlockCoverage":false}]},{"scriptId":"557","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/introspection.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11615,"count":1}],"isBlockCoverage":true},{"functionName":"matchesPattern","ranges":[{"startOffset":1236,"endOffset":1346,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":1348,"endOffset":1506,"count":0}],"isBlockCoverage":false},{"functionName":"isStatic","ranges":[{"startOffset":1508,"endOffset":1572,"count":0}],"isBlockCoverage":false},{"functionName":"isnt","ranges":[{"startOffset":1608,"endOffset":1655,"count":0}],"isBlockCoverage":false},{"functionName":"equals","ranges":[{"startOffset":1657,"endOffset":1723,"count":0}],"isBlockCoverage":false},{"functionName":"isNodeType","ranges":[{"startOffset":1725,"endOffset":1788,"count":0}],"isBlockCoverage":false},{"functionName":"canHaveVariableDeclarationOrExpression","ranges":[{"startOffset":1790,"endOffset":1925,"count":0}],"isBlockCoverage":false},{"functionName":"canSwapBetweenExpressionAndStatement","ranges":[{"startOffset":1927,"endOffset":2259,"count":0}],"isBlockCoverage":false},{"functionName":"isCompletionRecord","ranges":[{"startOffset":2261,"endOffset":2745,"count":0}],"isBlockCoverage":false},{"functionName":"isStatementOrBlock","ranges":[{"startOffset":2747,"endOffset":2950,"count":0}],"isBlockCoverage":false},{"functionName":"referencesImport","ranges":[{"startOffset":2952,"endOffset":4160,"count":0}],"isBlockCoverage":false},{"functionName":"getSource","ranges":[{"startOffset":4162,"endOffset":4341,"count":0}],"isBlockCoverage":false},{"functionName":"willIMaybeExecuteBefore","ranges":[{"startOffset":4343,"endOffset":4454,"count":0}],"isBlockCoverage":false},{"functionName":"getOuterFunction","ranges":[{"startOffset":4456,"endOffset":4572,"count":0}],"isBlockCoverage":false},{"functionName":"isExecutionUncertain","ranges":[{"startOffset":4574,"endOffset":5385,"count":0}],"isBlockCoverage":false},{"functionName":"isExecutionUncertainInList","ranges":[{"startOffset":5387,"endOffset":5622,"count":0}],"isBlockCoverage":false},{"functionName":"_guessExecutionStatusRelativeTo","ranges":[{"startOffset":5624,"endOffset":7357,"count":0}],"isBlockCoverage":false},{"functionName":"_guessExecutionStatusRelativeToDifferentFunctions","ranges":[{"startOffset":7410,"endOffset":8383,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":8385,"endOffset":8479,"count":0}],"isBlockCoverage":false},{"functionName":"_resolve","ranges":[{"startOffset":8481,"endOffset":10214,"count":0}],"isBlockCoverage":false},{"functionName":"isConstantExpression","ranges":[{"startOffset":10216,"endOffset":10965,"count":0}],"isBlockCoverage":false},{"functionName":"isInStrictMode","ranges":[{"startOffset":10967,"endOffset":11615,"count":0}],"isBlockCoverage":false}]},{"scriptId":"558","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/context.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5894,"count":1}],"isBlockCoverage":true},{"functionName":"call","ranges":[{"startOffset":787,"endOffset":1037,"count":0}],"isBlockCoverage":false},{"functionName":"_call","ranges":[{"startOffset":1039,"endOffset":1785,"count":0}],"isBlockCoverage":false},{"functionName":"isDenylisted","ranges":[{"startOffset":1787,"endOffset":2017,"count":0}],"isBlockCoverage":false},{"functionName":"restoreContext","ranges":[{"startOffset":2019,"endOffset":2189,"count":0}],"isBlockCoverage":false},{"functionName":"visit","ranges":[{"startOffset":2191,"endOffset":2818,"count":0}],"isBlockCoverage":false},{"functionName":"skip","ranges":[{"startOffset":2820,"endOffset":2865,"count":0}],"isBlockCoverage":false},{"functionName":"skipKey","ranges":[{"startOffset":2867,"endOffset":2981,"count":0}],"isBlockCoverage":false},{"functionName":"stop","ranges":[{"startOffset":2983,"endOffset":3068,"count":0}],"isBlockCoverage":false},{"functionName":"setScope","ranges":[{"startOffset":3070,"endOffset":3509,"count":0}],"isBlockCoverage":false},{"functionName":"setContext","ranges":[{"startOffset":3511,"endOffset":3777,"count":0}],"isBlockCoverage":false},{"functionName":"resync","ranges":[{"startOffset":3779,"endOffset":3898,"count":0}],"isBlockCoverage":false},{"functionName":"_resyncParent","ranges":[{"startOffset":3900,"endOffset":3997,"count":0}],"isBlockCoverage":false},{"functionName":"_resyncKey","ranges":[{"startOffset":3999,"endOffset":4475,"count":0}],"isBlockCoverage":false},{"functionName":"_resyncList","ranges":[{"startOffset":4477,"endOffset":4685,"count":0}],"isBlockCoverage":false},{"functionName":"_resyncRemoved","ranges":[{"startOffset":4687,"endOffset":4832,"count":0}],"isBlockCoverage":false},{"functionName":"popContext","ranges":[{"startOffset":4834,"endOffset":5026,"count":0}],"isBlockCoverage":false},{"functionName":"pushContext","ranges":[{"startOffset":5028,"endOffset":5120,"count":0}],"isBlockCoverage":false},{"functionName":"setup","ranges":[{"startOffset":5122,"endOffset":5304,"count":0}],"isBlockCoverage":false},{"functionName":"setKey","ranges":[{"startOffset":5306,"endOffset":5482,"count":0}],"isBlockCoverage":false},{"functionName":"requeue","ranges":[{"startOffset":5484,"endOffset":5675,"count":0}],"isBlockCoverage":false},{"functionName":"_getQueueContexts","ranges":[{"startOffset":5677,"endOffset":5894,"count":0}],"isBlockCoverage":false}]},{"scriptId":"559","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/removal.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1563,"count":1}],"isBlockCoverage":true},{"functionName":"remove","ranges":[{"startOffset":429,"endOffset":772,"count":0}],"isBlockCoverage":false},{"functionName":"_removeFromScope","ranges":[{"startOffset":774,"endOffset":927,"count":0}],"isBlockCoverage":false},{"functionName":"_callRemovalHooks","ranges":[{"startOffset":929,"endOffset":1055,"count":0}],"isBlockCoverage":false},{"functionName":"_remove","ranges":[{"startOffset":1057,"endOffset":1244,"count":0}],"isBlockCoverage":false},{"functionName":"_markRemoved","ranges":[{"startOffset":1246,"endOffset":1422,"count":0}],"isBlockCoverage":false},{"functionName":"_assertUnremoved","ranges":[{"startOffset":1424,"endOffset":1563,"count":0}],"isBlockCoverage":false}]},{"scriptId":"560","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1313,"count":1}],"isBlockCoverage":true},{"functionName":"hooks","ranges":[{"startOffset":119,"endOffset":591,"count":0}],"isBlockCoverage":false},{"functionName":"hooks","ranges":[{"startOffset":593,"endOffset":772,"count":0}],"isBlockCoverage":false},{"functionName":"hooks","ranges":[{"startOffset":774,"endOffset":989,"count":0}],"isBlockCoverage":false},{"functionName":"hooks","ranges":[{"startOffset":991,"endOffset":1288,"count":0}],"isBlockCoverage":false}]},{"scriptId":"561","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/modification.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7658,"count":1}],"isBlockCoverage":true},{"functionName":"insertBefore","ranges":[{"startOffset":943,"endOffset":2081,"count":0}],"isBlockCoverage":false},{"functionName":"_containerInsert","ranges":[{"startOffset":2083,"endOffset":2690,"count":0}],"isBlockCoverage":false},{"functionName":"_containerInsertBefore","ranges":[{"startOffset":2692,"endOffset":2783,"count":0}],"isBlockCoverage":false},{"functionName":"_containerInsertAfter","ranges":[{"startOffset":2785,"endOffset":2879,"count":0}],"isBlockCoverage":false},{"functionName":"last","ranges":[{"startOffset":2894,"endOffset":2920,"count":0}],"isBlockCoverage":false},{"functionName":"isHiddenInSequenceExpression","ranges":[{"startOffset":2923,"endOffset":3112,"count":0}],"isBlockCoverage":false},{"functionName":"isAlmostConstantAssignment","ranges":[{"startOffset":3114,"endOffset":3427,"count":0}],"isBlockCoverage":false},{"functionName":"insertAfter","ranges":[{"startOffset":3429,"endOffset":5861,"count":0}],"isBlockCoverage":false},{"functionName":"updateSiblingKeys","ranges":[{"startOffset":5863,"endOffset":6101,"count":0}],"isBlockCoverage":false},{"functionName":"_verifyNodeList","ranges":[{"startOffset":6103,"endOffset":6814,"count":0}],"isBlockCoverage":false},{"functionName":"unshiftContainer","ranges":[{"startOffset":6816,"endOffset":7146,"count":0}],"isBlockCoverage":false},{"functionName":"pushContainer","ranges":[{"startOffset":7148,"endOffset":7541,"count":0}],"isBlockCoverage":false},{"functionName":"hoist","ranges":[{"startOffset":7543,"endOffset":7658,"count":0}],"isBlockCoverage":false}]},{"scriptId":"562","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/lib/hoister.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5395,"count":1}],"isBlockCoverage":true},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":309,"endOffset":1176,"count":0}],"isBlockCoverage":false},{"functionName":"PathHoister","ranges":[{"startOffset":1204,"endOffset":1627,"count":0}],"isBlockCoverage":false},{"functionName":"isCompatibleScope","ranges":[{"startOffset":1631,"endOffset":1879,"count":0}],"isBlockCoverage":false},{"functionName":"getCompatibleScopes","ranges":[{"startOffset":1883,"endOffset":2188,"count":0}],"isBlockCoverage":false},{"functionName":"getAttachmentPath","ranges":[{"startOffset":2192,"endOffset":3192,"count":0}],"isBlockCoverage":false},{"functionName":"_getAttachmentPath","ranges":[{"startOffset":3196,"endOffset":3805,"count":0}],"isBlockCoverage":false},{"functionName":"getNextScopeAttachmentParent","ranges":[{"startOffset":3809,"endOffset":3949,"count":0}],"isBlockCoverage":false},{"functionName":"getAttachmentParentForPath","ranges":[{"startOffset":3953,"endOffset":4152,"count":0}],"isBlockCoverage":false},{"functionName":"hasOwnParamBindings","ranges":[{"startOffset":4156,"endOffset":4426,"count":0}],"isBlockCoverage":false},{"functionName":"run","ranges":[{"startOffset":4430,"endOffset":5360,"count":0}],"isBlockCoverage":false}]},{"scriptId":"563","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/family.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10161,"count":1}],"isBlockCoverage":true},{"functionName":"NormalCompletion","ranges":[{"startOffset":1023,"endOffset":1112,"count":0}],"isBlockCoverage":false},{"functionName":"BreakCompletion","ranges":[{"startOffset":1114,"endOffset":1201,"count":0}],"isBlockCoverage":false},{"functionName":"getOpposite","ranges":[{"startOffset":1203,"endOffset":1388,"count":0}],"isBlockCoverage":false},{"functionName":"addCompletionRecords","ranges":[{"startOffset":1390,"endOffset":1543,"count":0}],"isBlockCoverage":false},{"functionName":"completionRecordForSwitch","ranges":[{"startOffset":1545,"endOffset":2268,"count":0}],"isBlockCoverage":false},{"functionName":"normalCompletionToBreak","ranges":[{"startOffset":2270,"endOffset":2385,"count":0}],"isBlockCoverage":false},{"functionName":"replaceBreakStatementInBreakCompletion","ranges":[{"startOffset":2387,"endOffset":2708,"count":0}],"isBlockCoverage":false},{"functionName":"getStatementListCompletion","ranges":[{"startOffset":2710,"endOffset":5068,"count":0}],"isBlockCoverage":false},{"functionName":"_getCompletionRecords","ranges":[{"startOffset":5070,"endOffset":6474,"count":0}],"isBlockCoverage":false},{"functionName":"getCompletionRecords","ranges":[{"startOffset":6476,"endOffset":6682,"count":0}],"isBlockCoverage":false},{"functionName":"getSibling","ranges":[{"startOffset":6684,"endOffset":6902,"count":0}],"isBlockCoverage":false},{"functionName":"getPrevSibling","ranges":[{"startOffset":6904,"endOffset":6973,"count":0}],"isBlockCoverage":false},{"functionName":"getNextSibling","ranges":[{"startOffset":6975,"endOffset":7044,"count":0}],"isBlockCoverage":false},{"functionName":"getAllNextSiblings","ranges":[{"startOffset":7046,"endOffset":7283,"count":0}],"isBlockCoverage":false},{"functionName":"getAllPrevSiblings","ranges":[{"startOffset":7285,"endOffset":7522,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":7524,"endOffset":7769,"count":0}],"isBlockCoverage":false},{"functionName":"_getKey","ranges":[{"startOffset":7771,"endOffset":8278,"count":0}],"isBlockCoverage":false},{"functionName":"_getPattern","ranges":[{"startOffset":8280,"endOffset":8586,"count":0}],"isBlockCoverage":false},{"functionName":"getBindingIdentifiers","ranges":[{"startOffset":8588,"endOffset":8690,"count":0}],"isBlockCoverage":false},{"functionName":"getOuterBindingIdentifiers","ranges":[{"startOffset":8692,"endOffset":8804,"count":0}],"isBlockCoverage":false},{"functionName":"getBindingIdentifierPaths","ranges":[{"startOffset":8806,"endOffset":10045,"count":0}],"isBlockCoverage":false},{"functionName":"getOuterBindingIdentifierPaths","ranges":[{"startOffset":10047,"endOffset":10161,"count":0}],"isBlockCoverage":false}]},{"scriptId":"564","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/path/comments.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1071,"count":1}],"isBlockCoverage":true},{"functionName":"shareCommentsWithSiblings","ranges":[{"startOffset":319,"endOffset":893,"count":0}],"isBlockCoverage":false},{"functionName":"addComment","ranges":[{"startOffset":895,"endOffset":986,"count":0}],"isBlockCoverage":false},{"functionName":"addComments","ranges":[{"startOffset":988,"endOffset":1071,"count":0}],"isBlockCoverage":false}]},{"scriptId":"565","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/traverse/lib/hub.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":345,"count":1}],"isBlockCoverage":true},{"functionName":"getCode","ranges":[{"startOffset":121,"endOffset":133,"count":0}],"isBlockCoverage":false},{"functionName":"getScope","ranges":[{"startOffset":137,"endOffset":150,"count":0}],"isBlockCoverage":false},{"functionName":"addHelper","ranges":[{"startOffset":154,"endOffset":241,"count":0}],"isBlockCoverage":false},{"functionName":"buildError","ranges":[{"startOffset":245,"endOffset":318,"count":0}],"isBlockCoverage":false}]},{"scriptId":"566","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-member-expression-to-functions/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12391,"count":1}],"isBlockCoverage":true},{"functionName":"_interopNamespace","ranges":[{"startOffset":114,"endOffset":573,"count":1},{"startOffset":180,"endOffset":572,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":250,"endOffset":518,"count":0}],"isBlockCoverage":false},{"functionName":"willPathCastToBoolean","ranges":[{"startOffset":632,"endOffset":1416,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentMemoiser","ranges":[{"startOffset":1908,"endOffset":1982,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":1986,"endOffset":2031,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2035,"endOffset":2290,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":2294,"endOffset":2387,"count":0}],"isBlockCoverage":false},{"functionName":"toNonOptional","ranges":[{"startOffset":2392,"endOffset":3128,"count":0}],"isBlockCoverage":false},{"functionName":"isInDetachedTree","ranges":[{"startOffset":3130,"endOffset":3521,"count":0}],"isBlockCoverage":false},{"functionName":"memoise","ranges":[{"startOffset":3542,"endOffset":3554,"count":0}],"isBlockCoverage":false},{"functionName":"handle","ranges":[{"startOffset":3559,"endOffset":12135,"count":0}],"isBlockCoverage":false},{"functionName":"memberExpressionToFunctions","ranges":[{"startOffset":12140,"endOffset":12308,"count":0}],"isBlockCoverage":false}]},{"scriptId":"567","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-optimise-call-expression/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1043,"count":1}],"isBlockCoverage":true},{"functionName":"optimiseCallExpression","ranges":[{"startOffset":315,"endOffset":1043,"count":0}],"isBlockCoverage":false}]},{"scriptId":"568","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-annotate-as-pure/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":544,"count":1}],"isBlockCoverage":true},{"functionName":"isPureAnnotated","ranges":[{"startOffset":241,"endOffset":356,"count":0}],"isBlockCoverage":false},{"functionName":"annotateAsPure","ranges":[{"startOffset":359,"endOffset":544,"count":0}],"isBlockCoverage":false}]},{"scriptId":"569","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":650,"count":1}],"isBlockCoverage":true},{"functionName":"assertFieldTransformed","ranges":[{"startOffset":138,"endOffset":650,"count":0}],"isBlockCoverage":false}]},{"scriptId":"570","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5204,"count":1}],"isBlockCoverage":true},{"functionName":"hasOwnDecorators","ranges":[{"startOffset":389,"endOffset":480,"count":0}],"isBlockCoverage":false},{"functionName":"hasDecorators","ranges":[{"startOffset":482,"endOffset":588,"count":0}],"isBlockCoverage":false},{"functionName":"prop","ranges":[{"startOffset":590,"endOffset":719,"count":0}],"isBlockCoverage":false},{"functionName":"method","ranges":[{"startOffset":721,"endOffset":863,"count":0}],"isBlockCoverage":false},{"functionName":"takeDecorators","ranges":[{"startOffset":865,"endOffset":1119,"count":0}],"isBlockCoverage":false},{"functionName":"getKey","ranges":[{"startOffset":1121,"endOffset":1371,"count":0}],"isBlockCoverage":false},{"functionName":"extractElementDescriptor","ranges":[{"startOffset":1373,"endOffset":3070,"count":0}],"isBlockCoverage":false},{"functionName":"addDecorateHelper","ranges":[{"startOffset":3072,"endOffset":3423,"count":0}],"isBlockCoverage":false},{"functionName":"buildDecoratedClass","ranges":[{"startOffset":3425,"endOffset":5204,"count":0}],"isBlockCoverage":false}]},{"scriptId":"571","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3427,"count":1}],"isBlockCoverage":true},{"functionName":"Super","ranges":[{"startOffset":359,"endOffset":534,"count":0}],"isBlockCoverage":false},{"functionName":"TSTypeAnnotation|TypeAnnotation","ranges":[{"startOffset":606,"endOffset":668,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":673,"endOffset":830,"count":0}],"isBlockCoverage":false},{"functionName":"handleClassTDZ","ranges":[{"startOffset":836,"endOffset":1256,"count":0}],"isBlockCoverage":false},{"functionName":"injectInitialization","ranges":[{"startOffset":1352,"endOffset":2465,"count":0}],"isBlockCoverage":false},{"functionName":"extractComputedKeys","ranges":[{"startOffset":2467,"endOffset":3427,"count":0}],"isBlockCoverage":false}]},{"scriptId":"572","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-class-features-plugin/lib/features.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6286,"count":1}],"isBlockCoverage":true},{"functionName":"enableFeature","ranges":[{"startOffset":958,"endOffset":3118,"count":0}],"isBlockCoverage":false},{"functionName":"hasFeature","ranges":[{"startOffset":3120,"endOffset":3204,"count":0}],"isBlockCoverage":false},{"functionName":"isLoose","ranges":[{"startOffset":3206,"endOffset":3284,"count":0}],"isBlockCoverage":false},{"functionName":"setLoose","ranges":[{"startOffset":3286,"endOffset":3522,"count":0}],"isBlockCoverage":false},{"functionName":"canIgnoreLoose","ranges":[{"startOffset":3524,"endOffset":3620,"count":0}],"isBlockCoverage":false},{"functionName":"shouldTransform","ranges":[{"startOffset":3622,"endOffset":6286,"count":0}],"isBlockCoverage":false}]},{"scriptId":"573","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-object-rest-spread/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":44969,"count":1},{"startOffset":28400,"endOffset":28403,"count":0}],"isBlockCoverage":true},{"functionName":"_interopDefaultLegacy","ranges":[{"startOffset":415,"endOffset":529,"count":1},{"startOffset":508,"endOffset":526,"count":0}],"isBlockCoverage":true},{"functionName":"shouldStoreRHSInTemporaryVariable","ranges":[{"startOffset":27091,"endOffset":28082,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":28449,"endOffset":44903,"count":1},{"startOffset":28854,"endOffset":28922,"count":0},{"startOffset":29022,"endOffset":29039,"count":0},{"startOffset":29146,"endOffset":29164,"count":0},{"startOffset":29255,"endOffset":29273,"count":0},{"startOffset":29380,"endOffset":29398,"count":0}],"isBlockCoverage":true},{"functionName":"getExtendsHelper","ranges":[{"startOffset":29411,"endOffset":29596,"count":0}],"isBlockCoverage":false},{"functionName":"hasRestElement","ranges":[{"startOffset":29600,"endOffset":29808,"count":0}],"isBlockCoverage":false},{"functionName":"hasObjectPatternRestElement","ranges":[{"startOffset":29812,"endOffset":30099,"count":0}],"isBlockCoverage":false},{"functionName":"visitRestElements","ranges":[{"startOffset":30103,"endOffset":30466,"count":0}],"isBlockCoverage":false},{"functionName":"hasSpread","ranges":[{"startOffset":30470,"endOffset":30642,"count":0}],"isBlockCoverage":false},{"functionName":"extractNormalizedKeys","ranges":[{"startOffset":30646,"endOffset":31414,"count":0}],"isBlockCoverage":false},{"functionName":"replaceImpureComputedKeys","ranges":[{"startOffset":31418,"endOffset":31995,"count":0}],"isBlockCoverage":false},{"functionName":"removeUnusedExcludedKeys","ranges":[{"startOffset":31999,"endOffset":32401,"count":0}],"isBlockCoverage":false},{"functionName":"createObjectRest","ranges":[{"startOffset":32405,"endOffset":34005,"count":0}],"isBlockCoverage":false},{"functionName":"replaceRestElement","ranges":[{"startOffset":34009,"endOffset":34947,"count":0}],"isBlockCoverage":false},{"functionName":"Function","ranges":[{"startOffset":35088,"endOffset":36946,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclarator","ranges":[{"startOffset":36955,"endOffset":39389,"count":0}],"isBlockCoverage":false},{"functionName":"ExportNamedDeclaration","ranges":[{"startOffset":39398,"endOffset":40052,"count":0}],"isBlockCoverage":false},{"functionName":"CatchClause","ranges":[{"startOffset":40061,"endOffset":40178,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":40187,"endOffset":41378,"count":0}],"isBlockCoverage":false},{"functionName":"ForXStatement","ranges":[{"startOffset":41387,"endOffset":42681,"count":0}],"isBlockCoverage":false},{"functionName":"ArrayPattern","ranges":[{"startOffset":42690,"endOffset":43530,"count":0}],"isBlockCoverage":false},{"functionName":"ObjectExpression","ranges":[{"startOffset":43539,"endOffset":44889,"count":0}],"isBlockCoverage":false}]},{"scriptId":"574","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-object-rest-spread/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":440,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":409,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":307,"endOffset":401,"count":0}],"isBlockCoverage":false}]},{"scriptId":"575","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-parameters/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1393,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":165,"endOffset":210,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":422,"endOffset":1362,"count":0}],"isBlockCoverage":false}]},{"scriptId":"576","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-parameters/lib/params.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6320,"count":1}],"isBlockCoverage":true},{"functionName":"ReferencedIdentifier|BindingIdentifier","ranges":[{"startOffset":826,"endOffset":1164,"count":0}],"isBlockCoverage":false},{"functionName":"TypeAnnotation|TSTypeAnnotation|TypeParameterDeclaration|TSTypeParameterDeclaration","ranges":[{"startOffset":1256,"endOffset":1275,"count":0}],"isBlockCoverage":false},{"functionName":"convertFunctionParams","ranges":[{"startOffset":1280,"endOffset":5969,"count":0}],"isBlockCoverage":false},{"functionName":"buildScopeIIFE","ranges":[{"startOffset":5971,"endOffset":6320,"count":0}],"isBlockCoverage":false}]},{"scriptId":"577","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-parameters/lib/rest.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7992,"count":1}],"isBlockCoverage":true},{"functionName":"referencesRest","ranges":[{"startOffset":744,"endOffset":923,"count":0}],"isBlockCoverage":false},{"functionName":"Scope","ranges":[{"startOffset":973,"endOffset":1101,"count":0}],"isBlockCoverage":false},{"functionName":"Flow","ranges":[{"startOffset":1106,"endOffset":1184,"count":0}],"isBlockCoverage":false},{"functionName":"Function","ranges":[{"startOffset":1189,"endOffset":1407,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":1412,"endOffset":3293,"count":0}],"isBlockCoverage":false},{"functionName":"BindingIdentifier","ranges":[{"startOffset":3298,"endOffset":3407,"count":0}],"isBlockCoverage":false},{"functionName":"getParamsCount","ranges":[{"startOffset":3413,"endOffset":3605,"count":0}],"isBlockCoverage":false},{"functionName":"hasRest","ranges":[{"startOffset":3607,"endOffset":3745,"count":0}],"isBlockCoverage":false},{"functionName":"optimiseIndexGetter","ranges":[{"startOffset":3747,"endOffset":5087,"count":0}],"isBlockCoverage":false},{"functionName":"optimiseLengthGetter","ranges":[{"startOffset":5089,"endOffset":5333,"count":0}],"isBlockCoverage":false},{"functionName":"convertFunctionRest","ranges":[{"startOffset":5335,"endOffset":7992,"count":0}],"isBlockCoverage":false}]},{"scriptId":"578","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7193,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":155,"endOffset":205,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":315,"endOffset":365,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":453,"endOffset":509,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":641,"endOffset":694,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":778,"endOffset":831,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":916,"endOffset":971,"count":0}],"isBlockCoverage":false},{"functionName":"validateTargetNames","ranges":[{"startOffset":1533,"endOffset":1917,"count":3},{"startOffset":1677,"endOffset":1896,"count":1},{"startOffset":1722,"endOffset":1892,"count":0}],"isBlockCoverage":true},{"functionName":"isBrowsersQueryValid","ranges":[{"startOffset":1919,"endOffset":2074,"count":0}],"isBlockCoverage":false},{"functionName":"validateBrowsers","ranges":[{"startOffset":2076,"endOffset":2266,"count":3},{"startOffset":2151,"endOffset":2184,"count":0}],"isBlockCoverage":true},{"functionName":"getLowestVersions","ranges":[{"startOffset":2268,"endOffset":3568,"count":0}],"isBlockCoverage":false},{"functionName":"outputDecimalWarning","ranges":[{"startOffset":3570,"endOffset":4010,"count":3},{"startOffset":3665,"endOffset":4009,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":3773,"endOffset":3843,"count":0}],"isBlockCoverage":false},{"functionName":"semverifyTarget","ranges":[{"startOffset":4012,"endOffset":4226,"count":0}],"isBlockCoverage":false},{"functionName":"__default","ranges":[{"startOffset":4256,"endOffset":4439,"count":0}],"isBlockCoverage":false},{"functionName":"node","ranges":[{"startOffset":4444,"endOffset":4613,"count":1},{"startOffset":4547,"endOffset":4579,"count":0}],"isBlockCoverage":true},{"functionName":"generateTargets","ranges":[{"startOffset":4619,"endOffset":4777,"count":3}],"isBlockCoverage":true},{"functionName":"resolveTargets","ranges":[{"startOffset":4779,"endOffset":4944,"count":0}],"isBlockCoverage":false},{"functionName":"getTargets","ranges":[{"startOffset":4946,"endOffset":7193,"count":3},{"startOffset":5498,"endOffset":5720,"count":2},{"startOffset":5738,"endOffset":5825,"count":0},{"startOffset":5827,"endOffset":5963,"count":0},{"startOffset":6003,"endOffset":6023,"count":2},{"startOffset":6025,"endOffset":6556,"count":0},{"startOffset":6662,"endOffset":7132,"count":1},{"startOffset":6766,"endOffset":6784,"count":0},{"startOffset":6786,"endOffset":6862,"count":0},{"startOffset":6965,"endOffset":6992,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5873,"endOffset":5923,"count":0}],"isBlockCoverage":false}]},{"scriptId":"579","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/browserslist/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":34293,"count":1}],"isBlockCoverage":true},{"functionName":"isVersionsMatch","ranges":[{"startOffset":513,"endOffset":617,"count":0}],"isBlockCoverage":false},{"functionName":"isEolReleased","ranges":[{"startOffset":619,"endOffset":780,"count":0}],"isBlockCoverage":false},{"functionName":"normalize","ranges":[{"startOffset":782,"endOffset":904,"count":38}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":838,"endOffset":901,"count":3895}],"isBlockCoverage":true},{"functionName":"normalizeElectron","ranges":[{"startOffset":906,"endOffset":1102,"count":0}],"isBlockCoverage":false},{"functionName":"nameMapper","ranges":[{"startOffset":1104,"endOffset":1206,"count":0}],"isBlockCoverage":false},{"functionName":"getMajor","ranges":[{"startOffset":1208,"endOffset":1279,"count":0}],"isBlockCoverage":false},{"functionName":"getMajorVersions","ranges":[{"startOffset":1281,"endOffset":1695,"count":0}],"isBlockCoverage":false},{"functionName":"uniq","ranges":[{"startOffset":1697,"endOffset":1873,"count":0}],"isBlockCoverage":false},{"functionName":"fillUsage","ranges":[{"startOffset":1887,"endOffset":1994,"count":19},{"startOffset":1950,"endOffset":1992,"count":415}],"isBlockCoverage":true},{"functionName":"generateFilter","ranges":[{"startOffset":1996,"endOffset":2444,"count":0}],"isBlockCoverage":false},{"functionName":"generateSemverFilter","ranges":[{"startOffset":2446,"endOffset":3177,"count":0}],"isBlockCoverage":false},{"functionName":"parseSimpleInt","ranges":[{"startOffset":3179,"endOffset":3230,"count":0}],"isBlockCoverage":false},{"functionName":"compare","ranges":[{"startOffset":3232,"endOffset":3315,"count":0}],"isBlockCoverage":false},{"functionName":"compareSemver","ranges":[{"startOffset":3317,"endOffset":3530,"count":0}],"isBlockCoverage":false},{"functionName":"semverFilterLoose","ranges":[{"startOffset":3577,"endOffset":4200,"count":0}],"isBlockCoverage":false},{"functionName":"compareSemverLoose","ranges":[{"startOffset":4247,"endOffset":4508,"count":0}],"isBlockCoverage":false},{"functionName":"resolveVersion","ranges":[{"startOffset":4510,"endOffset":4773,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeVersion","ranges":[{"startOffset":4775,"endOffset":5007,"count":0}],"isBlockCoverage":false},{"functionName":"filterByYear","ranges":[{"startOffset":5009,"endOffset":5437,"count":0}],"isBlockCoverage":false},{"functionName":"cloneData","ranges":[{"startOffset":5439,"endOffset":5595,"count":0}],"isBlockCoverage":false},{"functionName":"mapVersions","ranges":[{"startOffset":5597,"endOffset":5945,"count":0}],"isBlockCoverage":false},{"functionName":"byName","ranges":[{"startOffset":5947,"endOffset":6537,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeAndroidVersions","ranges":[{"startOffset":6539,"endOffset":6885,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeAndroidData","ranges":[{"startOffset":6887,"endOffset":7116,"count":0}],"isBlockCoverage":false},{"functionName":"checkName","ranges":[{"startOffset":7118,"endOffset":7272,"count":0}],"isBlockCoverage":false},{"functionName":"unknownQuery","ranges":[{"startOffset":7274,"endOffset":7470,"count":0}],"isBlockCoverage":false},{"functionName":"filterAndroid","ranges":[{"startOffset":7472,"endOffset":7807,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":8103,"endOffset":9930,"count":0}],"isBlockCoverage":false},{"functionName":"browserslist","ranges":[{"startOffset":11393,"endOffset":13153,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":13155,"endOffset":13270,"count":0}],"isBlockCoverage":false},{"functionName":"doMatch","ranges":[{"startOffset":13272,"endOffset":13803,"count":0}],"isBlockCoverage":false},{"functionName":"find","ranges":[{"startOffset":13805,"endOffset":14027,"count":0}],"isBlockCoverage":false},{"functionName":"flatten","ranges":[{"startOffset":14029,"endOffset":14181,"count":0}],"isBlockCoverage":false},{"functionName":"browserslist.coverage","ranges":[{"startOffset":15941,"endOffset":17125,"count":0}],"isBlockCoverage":false},{"functionName":"nodeQuery","ranges":[{"startOffset":17127,"endOffset":17514,"count":0}],"isBlockCoverage":false},{"functionName":"sinceQuery","ranges":[{"startOffset":17516,"endOffset":17730,"count":0}],"isBlockCoverage":false},{"functionName":"coverQuery","ranges":[{"startOffset":17732,"endOffset":18727,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":18812,"endOffset":19255,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":19320,"endOffset":19752,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":19836,"endOffset":20032,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":20112,"endOffset":20302,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":20383,"endOffset":20710,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":20786,"endOffset":20953,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":21025,"endOffset":21184,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":21257,"endOffset":21533,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":21595,"endOffset":21977,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":22051,"endOffset":22086,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":22157,"endOffset":22385,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":22452,"endOffset":22547,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":22824,"endOffset":23519,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":23610,"endOffset":24514,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":24608,"endOffset":25756,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":25850,"endOffset":26840,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":27091,"endOffset":27477,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":27552,"endOffset":28194,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":28265,"endOffset":28500,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":28572,"endOffset":28959,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":29031,"endOffset":29281,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":29349,"endOffset":29550,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":29618,"endOffset":29974,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":30036,"endOffset":30083,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":30147,"endOffset":30195,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":30255,"endOffset":30545,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":30801,"endOffset":30876,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":30945,"endOffset":31361,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":31417,"endOffset":31462,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":31518,"endOffset":31563,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":31623,"endOffset":32360,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":32420,"endOffset":32492,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":32545,"endOffset":32639,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":32688,"endOffset":32767,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":32812,"endOffset":33033,"count":0}],"isBlockCoverage":false},{"functionName":"select","ranges":[{"startOffset":33079,"endOffset":33320,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":33365,"endOffset":34258,"count":1},{"startOffset":33406,"endOffset":34106,"count":19},{"startOffset":33820,"endOffset":34102,"count":1976},{"startOffset":33876,"endOffset":33884,"count":1561},{"startOffset":33884,"endOffset":33922,"count":415},{"startOffset":33922,"endOffset":34096,"count":27},{"startOffset":34013,"endOffset":34088,"count":54}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":34204,"endOffset":34255,"count":236}],"isBlockCoverage":true}]},{"scriptId":"580","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/unpacker/agents.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1439,"count":1}],"isBlockCoverage":true},{"functionName":"unpackBrowserVersions","ranges":[{"startOffset":173,"endOffset":364,"count":23}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":262,"endOffset":357,"count":435}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":421,"endOffset":1433,"count":19}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":530,"endOffset":1413,"count":99},{"startOffset":572,"endOffset":648,"count":19},{"startOffset":648,"endOffset":1393,"count":80},{"startOffset":673,"endOffset":905,"count":19},{"startOffset":905,"endOffset":1393,"count":61},{"startOffset":930,"endOffset":1011,"count":4},{"startOffset":1011,"endOffset":1393,"count":57},{"startOffset":1036,"endOffset":1084,"count":19},{"startOffset":1084,"endOffset":1393,"count":38},{"startOffset":1109,"endOffset":1393,"count":19}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":724,"endOffset":894,"count":1976},{"startOffset":773,"endOffset":810,"count":1561},{"startOffset":810,"endOffset":866,"count":415}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1186,"endOffset":1294,"count":415}],"isBlockCoverage":true}]},{"scriptId":"581","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/unpacker/browsers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":57,"count":1}],"isBlockCoverage":true}]},{"scriptId":"582","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/data/browsers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":220,"count":1}],"isBlockCoverage":true}]},{"scriptId":"583","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/unpacker/browserVersions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":71,"count":1}],"isBlockCoverage":true}]},{"scriptId":"584","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/data/browserVersions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1582,"count":1}],"isBlockCoverage":true}]},{"scriptId":"585","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/data/agents.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":17761,"count":1}],"isBlockCoverage":true}]},{"scriptId":"586","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/electron-to-chromium/versions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1432,"count":1}],"isBlockCoverage":true}]},{"scriptId":"587","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/browserslist/error.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":299,"count":1}],"isBlockCoverage":true},{"functionName":"BrowserslistError","ranges":[{"startOffset":0,"endOffset":215,"count":0}],"isBlockCoverage":false}]},{"scriptId":"588","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/browserslist/node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11031,"count":1}],"isBlockCoverage":true},{"functionName":"checkExtend","ranges":[{"startOffset":614,"endOffset":1204,"count":0}],"isBlockCoverage":false},{"functionName":"isFile","ranges":[{"startOffset":1206,"endOffset":1464,"count":44},{"startOffset":1259,"endOffset":1331,"count":22},{"startOffset":1331,"endOffset":1360,"count":2},{"startOffset":1408,"endOffset":1463,"count":22}],"isBlockCoverage":true},{"functionName":"eachParent","ranges":[{"startOffset":1466,"endOffset":1744,"count":2},{"startOffset":1529,"endOffset":1549,"count":0},{"startOffset":1592,"endOffset":1681,"count":14},{"startOffset":1664,"endOffset":1677,"count":0}],"isBlockCoverage":true},{"functionName":"check","ranges":[{"startOffset":1746,"endOffset":2042,"count":0}],"isBlockCoverage":false},{"functionName":"pickEnv","ranges":[{"startOffset":2044,"endOffset":2639,"count":2},{"startOffset":2124,"endOffset":2637,"count":0}],"isBlockCoverage":true},{"functionName":"parsePackage","ranges":[{"startOffset":2641,"endOffset":3065,"count":1},{"startOffset":2745,"endOffset":2768,"count":0},{"startOffset":2770,"endOffset":2877,"count":0},{"startOffset":2966,"endOffset":3001,"count":0},{"startOffset":3024,"endOffset":3064,"count":0}],"isBlockCoverage":true},{"functionName":"latestReleaseTime","ranges":[{"startOffset":3067,"endOffset":3329,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeStats","ranges":[{"startOffset":3331,"endOffset":3891,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeUsageData","ranges":[{"startOffset":3893,"endOffset":4399,"count":0}],"isBlockCoverage":false},{"functionName":"loadQueries","ranges":[{"startOffset":4435,"endOffset":5044,"count":0}],"isBlockCoverage":false},{"functionName":"loadStat","ranges":[{"startOffset":5059,"endOffset":5367,"count":0}],"isBlockCoverage":false},{"functionName":"getStat","ranges":[{"startOffset":5381,"endOffset":6039,"count":0}],"isBlockCoverage":false},{"functionName":"loadConfig","ranges":[{"startOffset":6056,"endOffset":6611,"count":2},{"startOffset":6118,"endOffset":6163,"count":0},{"startOffset":6221,"endOffset":6478,"count":0},{"startOffset":6571,"endOffset":6607,"count":0}],"isBlockCoverage":true},{"functionName":"loadCountry","ranges":[{"startOffset":6629,"endOffset":7083,"count":0}],"isBlockCoverage":false},{"functionName":"loadFeature","ranges":[{"startOffset":7101,"endOffset":7478,"count":0}],"isBlockCoverage":false},{"functionName":"parseConfig","ranges":[{"startOffset":7496,"endOffset":8378,"count":0}],"isBlockCoverage":false},{"functionName":"readConfig","ranges":[{"startOffset":8395,"endOffset":8586,"count":0}],"isBlockCoverage":false},{"functionName":"findConfig","ranges":[{"startOffset":8603,"endOffset":10186,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":8718,"endOffset":10021,"count":14},{"startOffset":8765,"endOffset":9028,"count":7},{"startOffset":9028,"endOffset":9290,"count":1},{"startOffset":9100,"endOffset":9282,"count":0},{"startOffset":9290,"endOffset":9317,"count":7},{"startOffset":9317,"endOffset":9335,"count":0},{"startOffset":9337,"endOffset":9470,"count":0},{"startOffset":9470,"endOffset":10015,"count":7},{"startOffset":9491,"endOffset":9509,"count":0},{"startOffset":9511,"endOffset":9647,"count":0},{"startOffset":9672,"endOffset":9685,"count":0},{"startOffset":9687,"endOffset":9809,"count":0},{"startOffset":9835,"endOffset":9893,"count":0},{"startOffset":9915,"endOffset":9969,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10095,"endOffset":10155,"count":7}],"isBlockCoverage":true},{"functionName":"clearCaches","ranges":[{"startOffset":10204,"endOffset":10325,"count":0}],"isBlockCoverage":false},{"functionName":"oldDataWarning","ranges":[{"startOffset":10346,"endOffset":10939,"count":0}],"isBlockCoverage":false},{"functionName":"currentNode","ranges":[{"startOffset":10957,"endOffset":11028,"count":0}],"isBlockCoverage":false}]},{"scriptId":"589","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/unpacker/feature.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1334,"count":1}],"isBlockCoverage":true},{"functionName":"unpackSupport","ranges":[{"startOffset":245,"endOffset":695,"count":0}],"isBlockCoverage":false},{"functionName":"unpackFeature","ranges":[{"startOffset":697,"endOffset":1262,"count":0}],"isBlockCoverage":false}]},{"scriptId":"590","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/lib/statuses.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":306,"count":1}],"isBlockCoverage":true}]},{"scriptId":"591","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/lib/supported.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":111,"count":1}],"isBlockCoverage":true}]},{"scriptId":"592","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/caniuse-lite/dist/unpacker/region.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":550,"count":1}],"isBlockCoverage":true},{"functionName":"unpackRegion","ranges":[{"startOffset":63,"endOffset":480,"count":0}],"isBlockCoverage":false}]},{"scriptId":"593","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-validator-option/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":457,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":159,"endOffset":215,"count":3}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":298,"endOffset":358,"count":0}],"isBlockCoverage":false}]},{"scriptId":"594","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-validator-option/lib/validator.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1397,"count":1}],"isBlockCoverage":true},{"functionName":"OptionValidator","ranges":[{"startOffset":194,"endOffset":257,"count":3}],"isBlockCoverage":true},{"functionName":"validateTopLevelOptions","ranges":[{"startOffset":261,"endOffset":671,"count":1},{"startOffset":476,"endOffset":661,"count":0}],"isBlockCoverage":true},{"functionName":"validateBooleanOption","ranges":[{"startOffset":675,"endOffset":914,"count":7},{"startOffset":789,"endOffset":913,"count":0}],"isBlockCoverage":true},{"functionName":"validateStringOption","ranges":[{"startOffset":918,"endOffset":1154,"count":2},{"startOffset":1031,"endOffset":1153,"count":0}],"isBlockCoverage":true},{"functionName":"invariant","ranges":[{"startOffset":1158,"endOffset":1273,"count":48},{"startOffset":1210,"endOffset":1269,"count":0}],"isBlockCoverage":true},{"functionName":"formatMessage","ranges":[{"startOffset":1277,"endOffset":1350,"count":0}],"isBlockCoverage":false}]},{"scriptId":"595","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-validator-option/lib/find-suggestion.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":715,"count":1}],"isBlockCoverage":true},{"functionName":"levenshtein","ranges":[{"startOffset":146,"endOffset":567,"count":0}],"isBlockCoverage":false},{"functionName":"findSuggestion","ranges":[{"startOffset":569,"endOffset":715,"count":0}],"isBlockCoverage":false}]},{"scriptId":"596","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/compat-data/native-modules.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":56,"count":1}],"isBlockCoverage":true}]},{"scriptId":"597","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1898,"count":1}],"isBlockCoverage":true},{"functionName":"semverMin","ranges":[{"startOffset":643,"endOffset":742,"count":0}],"isBlockCoverage":false},{"functionName":"semverify","ranges":[{"startOffset":744,"endOffset":1137,"count":42},{"startOffset":835,"endOffset":860,"count":0},{"startOffset":1082,"endOffset":1108,"count":68}],"isBlockCoverage":true},{"functionName":"isUnreleasedVersion","ranges":[{"startOffset":1139,"endOffset":1327,"count":84},{"startOffset":1269,"endOffset":1324,"count":0}],"isBlockCoverage":true},{"functionName":"getLowestUnreleased","ranges":[{"startOffset":1329,"endOffset":1601,"count":0}],"isBlockCoverage":false},{"functionName":"getHighestUnreleased","ranges":[{"startOffset":1603,"endOffset":1702,"count":0}],"isBlockCoverage":false},{"functionName":"getLowestImplementedVersion","ranges":[{"startOffset":1704,"endOffset":1898,"count":42},{"startOffset":1817,"endOffset":1845,"count":0},{"startOffset":1847,"endOffset":1878,"count":0}],"isBlockCoverage":true}]},{"scriptId":"598","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/semver/semver.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":42130,"count":1},{"startOffset":153,"endOffset":202,"count":0},{"startOffset":204,"endOffset":355,"count":0},{"startOffset":622,"endOffset":670,"count":0},{"startOffset":8258,"endOffset":8331,"count":38},{"startOffset":8293,"endOffset":8329,"count":34}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":216,"endOffset":353,"count":0}],"isBlockCoverage":false},{"functionName":"debug","ranges":[{"startOffset":373,"endOffset":387,"count":713}],"isBlockCoverage":true},{"functionName":"tok","ranges":[{"startOffset":879,"endOffset":912,"count":38}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":8355,"endOffset":8881,"count":84},{"startOffset":8406,"endOffset":8436,"count":0},{"startOffset":8555,"endOffset":8579,"count":0},{"startOffset":8616,"endOffset":8637,"count":0},{"startOffset":8674,"endOffset":8695,"count":0},{"startOffset":8721,"endOffset":8734,"count":0},{"startOffset":8772,"endOffset":8847,"count":42},{"startOffset":8847,"endOffset":8879,"count":0}],"isBlockCoverage":true},{"functionName":"valid","ranges":[{"startOffset":8905,"endOffset":9006,"count":84},{"startOffset":8986,"endOffset":8997,"count":42},{"startOffset":8998,"endOffset":9004,"count":42}],"isBlockCoverage":true},{"functionName":"clean","ranges":[{"startOffset":9030,"endOffset":9160,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer","ranges":[{"startOffset":9187,"endOffset":10883,"count":254},{"startOffset":9239,"endOffset":9269,"count":132},{"startOffset":9271,"endOffset":9353,"count":122},{"startOffset":9387,"endOffset":9507,"count":72},{"startOffset":9458,"endOffset":9503,"count":0},{"startOffset":9507,"endOffset":9606,"count":182},{"startOffset":9546,"endOffset":9606,"count":0},{"startOffset":9606,"endOffset":9643,"count":182},{"startOffset":9643,"endOffset":9728,"count":0},{"startOffset":9728,"endOffset":9763,"count":182},{"startOffset":9763,"endOffset":9808,"count":0},{"startOffset":9808,"endOffset":9948,"count":182},{"startOffset":9948,"endOffset":9961,"count":0},{"startOffset":9962,"endOffset":9974,"count":182},{"startOffset":9987,"endOffset":10047,"count":0},{"startOffset":10047,"endOffset":10220,"count":182},{"startOffset":10222,"endOffset":10276,"count":0},{"startOffset":10276,"endOffset":10331,"count":182},{"startOffset":10333,"endOffset":10387,"count":0},{"startOffset":10387,"endOffset":10442,"count":182},{"startOffset":10444,"endOffset":10498,"count":0},{"startOffset":10498,"endOffset":10555,"count":182},{"startOffset":10555,"endOffset":10585,"count":164},{"startOffset":10585,"endOffset":10821,"count":18},{"startOffset":10821,"endOffset":10843,"count":182},{"startOffset":10843,"endOffset":10860,"count":0},{"startOffset":10861,"endOffset":10865,"count":182}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10635,"endOffset":10816,"count":18},{"startOffset":10794,"endOffset":10815,"count":0}],"isBlockCoverage":true},{"functionName":"SemVer.format","ranges":[{"startOffset":10911,"endOffset":11102,"count":182},{"startOffset":11021,"endOffset":11078,"count":18}],"isBlockCoverage":true},{"functionName":"SemVer.toString","ranges":[{"startOffset":11132,"endOffset":11169,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer.compare","ranges":[{"startOffset":11198,"endOffset":11423,"count":79},{"startOffset":11312,"endOffset":11361,"count":0},{"startOffset":11396,"endOffset":11421,"count":0}],"isBlockCoverage":true},{"functionName":"SemVer.compareMain","ranges":[{"startOffset":11456,"endOffset":11726,"count":79},{"startOffset":11509,"endOffset":11558,"count":0},{"startOffset":11613,"endOffset":11668,"count":22},{"startOffset":11669,"endOffset":11724,"count":0}],"isBlockCoverage":true},{"functionName":"SemVer.comparePre","ranges":[{"startOffset":11758,"endOffset":12545,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer.compareBuild","ranges":[{"startOffset":12579,"endOffset":13071,"count":0}],"isBlockCoverage":false},{"functionName":"SemVer.inc","ranges":[{"startOffset":13241,"endOffset":16302,"count":0}],"isBlockCoverage":false},{"functionName":"inc","ranges":[{"startOffset":16322,"endOffset":16579,"count":0}],"isBlockCoverage":false},{"functionName":"diff","ranges":[{"startOffset":16601,"endOffset":17129,"count":0}],"isBlockCoverage":false},{"functionName":"compareIdentifiers","ranges":[{"startOffset":17205,"endOffset":17450,"count":101},{"startOffset":17367,"endOffset":17370,"count":22},{"startOffset":17375,"endOffset":17448,"count":79},{"startOffset":17393,"endOffset":17397,"count":0},{"startOffset":17420,"endOffset":17423,"count":0},{"startOffset":17436,"endOffset":17440,"count":60},{"startOffset":17445,"endOffset":17448,"count":19}],"isBlockCoverage":true},{"functionName":"rcompareIdentifiers","ranges":[{"startOffset":17502,"endOffset":17575,"count":0}],"isBlockCoverage":false},{"functionName":"major","ranges":[{"startOffset":17599,"endOffset":17664,"count":0}],"isBlockCoverage":false},{"functionName":"minor","ranges":[{"startOffset":17688,"endOffset":17753,"count":0}],"isBlockCoverage":false},{"functionName":"patch","ranges":[{"startOffset":17777,"endOffset":17842,"count":0}],"isBlockCoverage":false},{"functionName":"compare","ranges":[{"startOffset":17870,"endOffset":17964,"count":79}],"isBlockCoverage":true},{"functionName":"compareLoose","ranges":[{"startOffset":18002,"endOffset":18063,"count":0}],"isBlockCoverage":false},{"functionName":"compareBuild","ranges":[{"startOffset":18101,"endOffset":18287,"count":0}],"isBlockCoverage":false},{"functionName":"rcompare","ranges":[{"startOffset":18317,"endOffset":18382,"count":0}],"isBlockCoverage":false},{"functionName":"sort","ranges":[{"startOffset":18404,"endOffset":18522,"count":0}],"isBlockCoverage":false},{"functionName":"rsort","ranges":[{"startOffset":18546,"endOffset":18665,"count":0}],"isBlockCoverage":false},{"functionName":"gt","ranges":[{"startOffset":18683,"endOffset":18746,"count":42}],"isBlockCoverage":true},{"functionName":"lt","ranges":[{"startOffset":18764,"endOffset":18827,"count":19}],"isBlockCoverage":true},{"functionName":"eq","ranges":[{"startOffset":18845,"endOffset":18910,"count":0}],"isBlockCoverage":false},{"functionName":"neq","ranges":[{"startOffset":18930,"endOffset":18996,"count":0}],"isBlockCoverage":false},{"functionName":"gte","ranges":[{"startOffset":19016,"endOffset":19081,"count":18}],"isBlockCoverage":true},{"functionName":"lte","ranges":[{"startOffset":19101,"endOffset":19166,"count":0}],"isBlockCoverage":false},{"functionName":"cmp","ranges":[{"startOffset":19186,"endOffset":19900,"count":36},{"startOffset":19239,"endOffset":19381,"count":0},{"startOffset":19387,"endOffset":19529,"count":0},{"startOffset":19535,"endOffset":19543,"count":0},{"startOffset":19548,"endOffset":19557,"count":0},{"startOffset":19562,"endOffset":19601,"count":0},{"startOffset":19607,"endOffset":19647,"count":0},{"startOffset":19653,"endOffset":19691,"count":0},{"startOffset":19697,"endOffset":19737,"count":18},{"startOffset":19743,"endOffset":19781,"count":18},{"startOffset":19787,"endOffset":19827,"count":0},{"startOffset":19833,"endOffset":19894,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator","ranges":[{"startOffset":19934,"endOffset":20586,"count":36},{"startOffset":20019,"endOffset":20101,"count":0},{"startOffset":20137,"endOffset":20245,"count":0},{"startOffset":20284,"endOffset":20330,"count":0},{"startOffset":20472,"endOffset":20497,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator.parse","ranges":[{"startOffset":20630,"endOffset":21093,"count":36},{"startOffset":20677,"endOffset":20700,"count":0},{"startOffset":20755,"endOffset":20815,"count":0},{"startOffset":20861,"endOffset":20865,"count":0},{"startOffset":20895,"endOffset":20923,"count":0},{"startOffset":20998,"endOffset":21025,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator.toString","ranges":[{"startOffset":21127,"endOffset":21162,"count":36}],"isBlockCoverage":true},{"functionName":"Comparator.test","ranges":[{"startOffset":21192,"endOffset":21550,"count":36},{"startOffset":21316,"endOffset":21337,"count":0},{"startOffset":21374,"endOffset":21483,"count":0}],"isBlockCoverage":true},{"functionName":"Comparator.intersects","ranges":[{"startOffset":21586,"endOffset":23312,"count":0}],"isBlockCoverage":false},{"functionName":"Range","ranges":[{"startOffset":23336,"endOffset":24393,"count":18},{"startOffset":23385,"endOffset":23415,"count":0},{"startOffset":23531,"endOffset":23727,"count":0},{"startOffset":23764,"endOffset":23812,"count":0},{"startOffset":23846,"endOffset":23888,"count":0},{"startOffset":24311,"endOffset":24374,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24105,"endOffset":24168,"count":18}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24183,"endOffset":24284,"count":18}],"isBlockCoverage":true},{"functionName":"Range.format","ranges":[{"startOffset":24420,"endOffset":24559,"count":18}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":24462,"endOffset":24518,"count":18}],"isBlockCoverage":true},{"functionName":"Range.toString","ranges":[{"startOffset":24588,"endOffset":24623,"count":0}],"isBlockCoverage":false},{"functionName":"Range.parseRange","ranges":[{"startOffset":24654,"endOffset":25892,"count":18},{"startOffset":24788,"endOffset":24812,"count":0},{"startOffset":25432,"endOffset":25455,"count":0},{"startOffset":25633,"endOffset":25785,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":25508,"endOffset":25576,"count":18}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":25723,"endOffset":25780,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":25802,"endOffset":25869,"count":36}],"isBlockCoverage":true},{"functionName":"Range.intersects","ranges":[{"startOffset":25923,"endOffset":26537,"count":0}],"isBlockCoverage":false},{"functionName":"isSatisfiable","ranges":[{"startOffset":26637,"endOffset":27067,"count":0}],"isBlockCoverage":false},{"functionName":"toComparators","ranges":[{"startOffset":27157,"endOffset":27357,"count":0}],"isBlockCoverage":false},{"functionName":"parseComparator","ranges":[{"startOffset":27503,"endOffset":27838,"count":18}],"isBlockCoverage":true},{"functionName":"isX","ranges":[{"startOffset":27840,"endOffset":27916,"count":162}],"isBlockCoverage":true},{"functionName":"replaceTildes","ranges":[{"startOffset":28189,"endOffset":28341,"count":18}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28268,"endOffset":28328,"count":36}],"isBlockCoverage":true},{"functionName":"replaceTilde","ranges":[{"startOffset":28343,"endOffset":29131,"count":36},{"startOffset":28407,"endOffset":28425,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":28465,"endOffset":29128,"count":0}],"isBlockCoverage":false},{"functionName":"replaceCarets","ranges":[{"startOffset":29330,"endOffset":29482,"count":18}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29409,"endOffset":29469,"count":18}],"isBlockCoverage":true},{"functionName":"replaceCaret","ranges":[{"startOffset":29484,"endOffset":30969,"count":18},{"startOffset":29580,"endOffset":29598,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":29638,"endOffset":30966,"count":18},{"startOffset":29736,"endOffset":29758,"count":0},{"startOffset":29776,"endOffset":29835,"count":0},{"startOffset":29853,"endOffset":30038,"count":0},{"startOffset":30110,"endOffset":30388,"count":0},{"startOffset":30504,"endOffset":30915,"count":0}],"isBlockCoverage":true},{"functionName":"replaceXRanges","ranges":[{"startOffset":30971,"endOffset":31159,"count":18}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":31085,"endOffset":31146,"count":36}],"isBlockCoverage":true},{"functionName":"replaceXRange","ranges":[{"startOffset":31161,"endOffset":32910,"count":36},{"startOffset":31247,"endOffset":31266,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":31307,"endOffset":32907,"count":36},{"startOffset":31505,"endOffset":31512,"count":0},{"startOffset":31514,"endOffset":31537,"count":0},{"startOffset":31702,"endOffset":31708,"count":0},{"startOffset":31727,"endOffset":31904,"count":0},{"startOffset":31928,"endOffset":32654,"count":0},{"startOffset":32668,"endOffset":32742,"count":0},{"startOffset":32756,"endOffset":32854,"count":0}],"isBlockCoverage":true},{"functionName":"replaceStars","ranges":[{"startOffset":33035,"endOffset":33229,"count":18}],"isBlockCoverage":true},{"functionName":"hyphenReplace","ranges":[{"startOffset":33445,"endOffset":34015,"count":0}],"isBlockCoverage":false},{"functionName":"Range.test","ranges":[{"startOffset":34102,"endOffset":34454,"count":18},{"startOffset":34139,"endOffset":34161,"count":0},{"startOffset":34266,"endOffset":34303,"count":0},{"startOffset":34437,"endOffset":34453,"count":0}],"isBlockCoverage":true},{"functionName":"testSet","ranges":[{"startOffset":34456,"endOffset":35477,"count":18},{"startOffset":34538,"endOffset":34601,"count":36},{"startOffset":34571,"endOffset":34597,"count":0},{"startOffset":34635,"endOffset":34664,"count":0},{"startOffset":34666,"endOffset":35460,"count":0}],"isBlockCoverage":true},{"functionName":"satisfies","ranges":[{"startOffset":35509,"endOffset":35670,"count":18},{"startOffset":35606,"endOffset":35639,"count":0}],"isBlockCoverage":true},{"functionName":"maxSatisfying","ranges":[{"startOffset":35710,"endOffset":36156,"count":0}],"isBlockCoverage":false},{"functionName":"minSatisfying","ranges":[{"startOffset":36196,"endOffset":36641,"count":0}],"isBlockCoverage":false},{"functionName":"minVersion","ranges":[{"startOffset":36675,"endOffset":37918,"count":0}],"isBlockCoverage":false},{"functionName":"validRange","ranges":[{"startOffset":37952,"endOffset":38191,"count":0}],"isBlockCoverage":false},{"functionName":"ltr","ranges":[{"startOffset":38287,"endOffset":38376,"count":0}],"isBlockCoverage":false},{"functionName":"gtr","ranges":[{"startOffset":38476,"endOffset":38565,"count":0}],"isBlockCoverage":false},{"functionName":"outside","ranges":[{"startOffset":38593,"endOffset":40384,"count":0}],"isBlockCoverage":false},{"functionName":"prerelease","ranges":[{"startOffset":40418,"endOffset":40572,"count":0}],"isBlockCoverage":false},{"functionName":"intersects","ranges":[{"startOffset":40606,"endOffset":40734,"count":0}],"isBlockCoverage":false},{"functionName":"coerce","ranges":[{"startOffset":40760,"endOffset":42129,"count":0}],"isBlockCoverage":false}]},{"scriptId":"599","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/targets.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":560,"count":1}],"isBlockCoverage":true}]},{"scriptId":"600","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":392,"count":1}],"isBlockCoverage":true}]},{"scriptId":"601","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/pretty.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":950,"count":1}],"isBlockCoverage":true},{"functionName":"prettifyVersion","ranges":[{"startOffset":239,"endOffset":584,"count":0}],"isBlockCoverage":false},{"functionName":"prettifyTargets","ranges":[{"startOffset":586,"endOffset":950,"count":0}],"isBlockCoverage":false}]},{"scriptId":"602","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/debug.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1037,"count":1}],"isBlockCoverage":true},{"functionName":"getInclusionReasons","ranges":[{"startOffset":236,"endOffset":1037,"count":0}],"isBlockCoverage":false}]},{"scriptId":"603","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-compilation-targets/lib/filter-items.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2396,"count":1}],"isBlockCoverage":true},{"functionName":"targetsSupported","ranges":[{"startOffset":313,"endOffset":1376,"count":43},{"startOffset":448,"endOffset":471,"count":1},{"startOffset":471,"endOffset":1375,"count":42}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":533,"endOffset":1325,"count":42},{"startOffset":686,"endOffset":712,"count":0},{"startOffset":847,"endOffset":874,"count":0},{"startOffset":956,"endOffset":982,"count":0},{"startOffset":1042,"endOffset":1214,"count":0}],"isBlockCoverage":true},{"functionName":"isRequired","ranges":[{"startOffset":1378,"endOffset":1648,"count":43},{"startOffset":1496,"endOffset":1517,"count":42},{"startOffset":1519,"endOffset":1532,"count":0},{"startOffset":1556,"endOffset":1577,"count":42},{"startOffset":1579,"endOffset":1591,"count":0}],"isBlockCoverage":true},{"functionName":"filterItems","ranges":[{"startOffset":1650,"endOffset":2396,"count":1},{"startOffset":1889,"endOffset":2157,"count":42},{"startOffset":1935,"endOffset":1966,"count":0},{"startOffset":2094,"endOffset":2147,"count":11},{"startOffset":2290,"endOffset":2376,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2212,"endOffset":2259,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2320,"endOffset":2370,"count":0}],"isBlockCoverage":false}]},{"scriptId":"604","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/compat-data/plugins.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":49,"count":1}],"isBlockCoverage":true}]},{"scriptId":"605","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11548,"count":1},{"startOffset":1390,"endOffset":1419,"count":0},{"startOffset":1479,"endOffset":1509,"count":0},{"startOffset":1577,"endOffset":1611,"count":0}],"isBlockCoverage":true},{"functionName":"isPluginRequired","ranges":[{"startOffset":1614,"endOffset":1793,"count":0}],"isBlockCoverage":false},{"functionName":"filterStageFromList","ranges":[{"startOffset":1795,"endOffset":1999,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1877,"endOffset":1991,"count":92}],"isBlockCoverage":true},{"functionName":"getPluginList","ranges":[{"startOffset":2487,"endOffset":2812,"count":1},{"startOffset":2550,"endOffset":2674,"count":0},{"startOffset":2700,"endOffset":2749,"count":0}],"isBlockCoverage":true},{"functionName":"getPlugin","ranges":[{"startOffset":2832,"endOffset":3069,"count":13},{"startOffset":2922,"endOffset":3049,"count":0}],"isBlockCoverage":true},{"functionName":"transformIncludesAndExcludes","ranges":[{"startOffset":3109,"endOffset":3369,"count":2}],"isBlockCoverage":true},{"functionName":"opts.reduce.all","ranges":[{"startOffset":3140,"endOffset":3295,"count":0}],"isBlockCoverage":false},{"functionName":"getModulesPluginNames","ranges":[{"startOffset":3472,"endOffset":4626,"count":1},{"startOffset":3961,"endOffset":4247,"count":0},{"startOffset":4251,"endOffset":4316,"count":0},{"startOffset":4428,"endOffset":4500,"count":0},{"startOffset":4534,"endOffset":4594,"count":0}],"isBlockCoverage":true},{"functionName":"getPolyfillPlugins","ranges":[{"startOffset":4712,"endOffset":6246,"count":1},{"startOffset":4934,"endOffset":6217,"count":0}],"isBlockCoverage":true},{"functionName":"getLocalTargets","ranges":[{"startOffset":6299,"endOffset":6811,"count":1},{"startOffset":6454,"endOffset":6480,"count":0},{"startOffset":6482,"endOffset":6670,"count":0}],"isBlockCoverage":true},{"functionName":"supportsStaticESM","ranges":[{"startOffset":6813,"endOffset":6908,"count":2}],"isBlockCoverage":true},{"functionName":"supportsDynamicImport","ranges":[{"startOffset":6910,"endOffset":7013,"count":2}],"isBlockCoverage":true},{"functionName":"supportsExportNamespaceFrom","ranges":[{"startOffset":7015,"endOffset":7130,"count":2}],"isBlockCoverage":true},{"functionName":"supportsTopLevelAwait","ranges":[{"startOffset":7132,"endOffset":7235,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7290,"endOffset":11517,"count":1},{"startOffset":7850,"endOffset":7868,"count":0},{"startOffset":7869,"endOffset":7892,"count":0},{"startOffset":7893,"endOffset":7925,"count":0},{"startOffset":8030,"endOffset":8238,"count":0},{"startOffset":8417,"endOffset":8421,"count":0},{"startOffset":8707,"endOffset":8715,"count":0},{"startOffset":8780,"endOffset":8961,"count":0},{"startOffset":9873,"endOffset":9980,"count":0},{"startOffset":10934,"endOffset":11486,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10359,"endOffset":10893,"count":13},{"startOffset":10528,"endOffset":10781,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":11256,"endOffset":11339,"count":0}],"isBlockCoverage":false}]},{"scriptId":"606","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/debug.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":825,"count":1}],"isBlockCoverage":true},{"functionName":"logPlugin","ranges":[{"startOffset":206,"endOffset":792,"count":0}],"isBlockCoverage":false}]},{"scriptId":"607","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/get-option-specific-excludes.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":261,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":174,"endOffset":261,"count":1},{"startOffset":222,"endOffset":251,"count":0}],"isBlockCoverage":true}]},{"scriptId":"608","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/filter-items.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1022,"count":1}],"isBlockCoverage":true},{"functionName":"addProposalSyntaxPlugins","ranges":[{"startOffset":403,"endOffset":543,"count":0}],"isBlockCoverage":false},{"functionName":"removeUnnecessaryItems","ranges":[{"startOffset":545,"endOffset":778,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":615,"endOffset":774,"count":13},{"startOffset":714,"endOffset":769,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":742,"endOffset":768,"count":0}],"isBlockCoverage":false},{"functionName":"removeUnsupportedItems","ranges":[{"startOffset":780,"endOffset":1022,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":851,"endOffset":1018,"count":13},{"startOffset":910,"endOffset":979,"count":0},{"startOffset":981,"endOffset":1014,"count":0}],"isBlockCoverage":true}]},{"scriptId":"609","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/available-plugins.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12593,"count":1}],"isBlockCoverage":true},{"functionName":"bugfix/transform-async-arrows-in-class","ranges":[{"startOffset":6842,"endOffset":6876,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-edge-default-parameters","ranges":[{"startOffset":6924,"endOffset":6961,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-edge-function-name","ranges":[{"startOffset":7004,"endOffset":7036,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-safari-block-shadowing","ranges":[{"startOffset":7083,"endOffset":7119,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-safari-for-shadowing","ranges":[{"startOffset":7164,"endOffset":7198,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-safari-id-destructuring-collision-in-function-expression","ranges":[{"startOffset":7279,"endOffset":7356,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-tagged-template-caching","ranges":[{"startOffset":7404,"endOffset":7441,"count":0}],"isBlockCoverage":false},{"functionName":"bugfix/transform-v8-spread-parameters-in-optional-chaining","ranges":[{"startOffset":7507,"endOffset":7570,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-async-generator-functions","ranges":[{"startOffset":7612,"endOffset":7664,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-class-properties","ranges":[{"startOffset":7697,"endOffset":7741,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-class-static-block","ranges":[{"startOffset":7776,"endOffset":7821,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-dynamic-import","ranges":[{"startOffset":7852,"endOffset":7894,"count":1}],"isBlockCoverage":true},{"functionName":"proposal-export-namespace-from","ranges":[{"startOffset":7932,"endOffset":7980,"count":1}],"isBlockCoverage":true},{"functionName":"proposal-json-strings","ranges":[{"startOffset":8009,"endOffset":8049,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-logical-assignment-operators","ranges":[{"startOffset":8094,"endOffset":8149,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-nullish-coalescing-operator","ranges":[{"startOffset":8193,"endOffset":8247,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-numeric-separator","ranges":[{"startOffset":8281,"endOffset":8326,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-object-rest-spread","ranges":[{"startOffset":8361,"endOffset":8406,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-optional-catch-binding","ranges":[{"startOffset":8445,"endOffset":8494,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-optional-chaining","ranges":[{"startOffset":8528,"endOffset":8573,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-private-methods","ranges":[{"startOffset":8605,"endOffset":8648,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-private-property-in-object","ranges":[{"startOffset":8691,"endOffset":8743,"count":0}],"isBlockCoverage":false},{"functionName":"proposal-unicode-property-regex","ranges":[{"startOffset":8782,"endOffset":8831,"count":0}],"isBlockCoverage":false},{"functionName":"syntax-async-generators","ranges":[{"startOffset":8862,"endOffset":8896,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-class-properties","ranges":[{"startOffset":8927,"endOffset":8961,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-class-static-block","ranges":[{"startOffset":8994,"endOffset":9029,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-dynamic-import","ranges":[{"startOffset":9058,"endOffset":9090,"count":0}],"isBlockCoverage":false},{"functionName":"syntax-export-namespace-from","ranges":[{"startOffset":9126,"endOffset":9164,"count":0}],"isBlockCoverage":false},{"functionName":"syntax-import-assertions","ranges":[{"startOffset":9196,"endOffset":9239,"count":0}],"isBlockCoverage":false},{"functionName":"syntax-json-strings","ranges":[{"startOffset":9266,"endOffset":9296,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-logical-assignment-operators","ranges":[{"startOffset":9339,"endOffset":9384,"count":0}],"isBlockCoverage":false},{"functionName":"syntax-nullish-coalescing-operator","ranges":[{"startOffset":9426,"endOffset":9470,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-numeric-separator","ranges":[{"startOffset":9502,"endOffset":9537,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-object-rest-spread","ranges":[{"startOffset":9570,"endOffset":9605,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-optional-catch-binding","ranges":[{"startOffset":9642,"endOffset":9681,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-optional-chaining","ranges":[{"startOffset":9713,"endOffset":9748,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-private-property-in-object","ranges":[{"startOffset":9789,"endOffset":9831,"count":1}],"isBlockCoverage":true},{"functionName":"syntax-top-level-await","ranges":[{"startOffset":9861,"endOffset":9893,"count":0}],"isBlockCoverage":false},{"functionName":"transform-arrow-functions","ranges":[{"startOffset":9926,"endOffset":9970,"count":0}],"isBlockCoverage":false},{"functionName":"transform-async-to-generator","ranges":[{"startOffset":10006,"endOffset":10052,"count":0}],"isBlockCoverage":false},{"functionName":"transform-block-scoped-functions","ranges":[{"startOffset":10092,"endOffset":10142,"count":0}],"isBlockCoverage":false},{"functionName":"transform-block-scoping","ranges":[{"startOffset":10173,"endOffset":10215,"count":0}],"isBlockCoverage":false},{"functionName":"transform-classes","ranges":[{"startOffset":10240,"endOffset":10277,"count":0}],"isBlockCoverage":false},{"functionName":"transform-computed-properties","ranges":[{"startOffset":10314,"endOffset":10362,"count":0}],"isBlockCoverage":false},{"functionName":"transform-destructuring","ranges":[{"startOffset":10393,"endOffset":10436,"count":0}],"isBlockCoverage":false},{"functionName":"transform-dotall-regex","ranges":[{"startOffset":10466,"endOffset":10507,"count":0}],"isBlockCoverage":false},{"functionName":"transform-duplicate-keys","ranges":[{"startOffset":10539,"endOffset":10582,"count":0}],"isBlockCoverage":false},{"functionName":"transform-exponentiation-operator","ranges":[{"startOffset":10623,"endOffset":10675,"count":0}],"isBlockCoverage":false},{"functionName":"transform-for-of","ranges":[{"startOffset":10699,"endOffset":10734,"count":0}],"isBlockCoverage":false},{"functionName":"transform-function-name","ranges":[{"startOffset":10765,"endOffset":10807,"count":0}],"isBlockCoverage":false},{"functionName":"transform-literals","ranges":[{"startOffset":10833,"endOffset":10871,"count":0}],"isBlockCoverage":false},{"functionName":"transform-member-expression-literals","ranges":[{"startOffset":10915,"endOffset":10969,"count":0}],"isBlockCoverage":false},{"functionName":"transform-modules-amd","ranges":[{"startOffset":10998,"endOffset":11038,"count":0}],"isBlockCoverage":false},{"functionName":"transform-modules-commonjs","ranges":[{"startOffset":11072,"endOffset":11117,"count":1}],"isBlockCoverage":true},{"functionName":"transform-modules-systemjs","ranges":[{"startOffset":11151,"endOffset":11196,"count":0}],"isBlockCoverage":false},{"functionName":"transform-modules-umd","ranges":[{"startOffset":11225,"endOffset":11265,"count":0}],"isBlockCoverage":false},{"functionName":"transform-named-capturing-groups-regex","ranges":[{"startOffset":11311,"endOffset":11366,"count":0}],"isBlockCoverage":false},{"functionName":"transform-new-target","ranges":[{"startOffset":11394,"endOffset":11433,"count":0}],"isBlockCoverage":false},{"functionName":"transform-object-super","ranges":[{"startOffset":11463,"endOffset":11504,"count":0}],"isBlockCoverage":false},{"functionName":"transform-parameters","ranges":[{"startOffset":11532,"endOffset":11572,"count":0}],"isBlockCoverage":false},{"functionName":"transform-property-literals","ranges":[{"startOffset":11607,"endOffset":11653,"count":0}],"isBlockCoverage":false},{"functionName":"transform-regenerator","ranges":[{"startOffset":11682,"endOffset":11723,"count":0}],"isBlockCoverage":false},{"functionName":"transform-reserved-words","ranges":[{"startOffset":11755,"endOffset":11798,"count":0}],"isBlockCoverage":false},{"functionName":"transform-shorthand-properties","ranges":[{"startOffset":11836,"endOffset":11885,"count":0}],"isBlockCoverage":false},{"functionName":"transform-spread","ranges":[{"startOffset":11909,"endOffset":11945,"count":0}],"isBlockCoverage":false},{"functionName":"transform-sticky-regex","ranges":[{"startOffset":11975,"endOffset":12016,"count":0}],"isBlockCoverage":false},{"functionName":"transform-template-literals","ranges":[{"startOffset":12051,"endOffset":12097,"count":0}],"isBlockCoverage":false},{"functionName":"transform-typeof-symbol","ranges":[{"startOffset":12128,"endOffset":12170,"count":0}],"isBlockCoverage":false},{"functionName":"transform-unicode-escapes","ranges":[{"startOffset":12203,"endOffset":12247,"count":0}],"isBlockCoverage":false},{"functionName":"transform-unicode-regex","ranges":[{"startOffset":12278,"endOffset":12320,"count":0}],"isBlockCoverage":false}]},{"scriptId":"610","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-async-generators/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":437,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":406,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":305,"endOffset":398,"count":0}],"isBlockCoverage":false}]},{"scriptId":"611","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-class-properties/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":486,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":455,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":305,"endOffset":447,"count":0}],"isBlockCoverage":false}]},{"scriptId":"612","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-class-static-block/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":440,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":409,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":307,"endOffset":401,"count":0}],"isBlockCoverage":false}]},{"scriptId":"613","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-dynamic-import/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":433,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":402,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":303,"endOffset":394,"count":0}],"isBlockCoverage":false}]},{"scriptId":"614","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":446,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":415,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":310,"endOffset":407,"count":0}],"isBlockCoverage":false}]},{"scriptId":"615","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":439,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":408,"count":0}],"isBlockCoverage":false}]},{"scriptId":"616","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-json-strings/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":429,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":398,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":301,"endOffset":390,"count":0}],"isBlockCoverage":false}]},{"scriptId":"617","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-logical-assignment-operators/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":451,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":420,"count":0}],"isBlockCoverage":false}]},{"scriptId":"618","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":458,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":427,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":316,"endOffset":419,"count":0}],"isBlockCoverage":false}]},{"scriptId":"619","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-numeric-separator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":439,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":408,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":306,"endOffset":400,"count":0}],"isBlockCoverage":false}]},{"scriptId":"620","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-optional-catch-binding/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":448,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":417,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":311,"endOffset":409,"count":0}],"isBlockCoverage":false}]},{"scriptId":"621","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":439,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":408,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":306,"endOffset":400,"count":0}],"isBlockCoverage":false}]},{"scriptId":"622","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-private-property-in-object/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":441,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":410,"count":1}],"isBlockCoverage":true},{"functionName":"manipulateOptions","ranges":[{"startOffset":315,"endOffset":402,"count":0}],"isBlockCoverage":false}]},{"scriptId":"623","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-syntax-top-level-await/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":434,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":403,"count":0}],"isBlockCoverage":false}]},{"scriptId":"624","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-async-generator-functions/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2375,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":470,"endOffset":2344,"count":0}],"isBlockCoverage":false}]},{"scriptId":"625","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-remap-async-to-generator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1858,"count":1}],"isBlockCoverage":true},{"functionName":"Function","ranges":[{"startOffset":409,"endOffset":446,"count":0}],"isBlockCoverage":false},{"functionName":"AwaitExpression","ranges":[{"startOffset":451,"endOffset":664,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":670,"endOffset":1858,"count":0}],"isBlockCoverage":false}]},{"scriptId":"626","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-wrap-function/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3123,"count":1}],"isBlockCoverage":true},{"functionName":"classOrObjectMethod","ranges":[{"startOffset":1019,"endOffset":1421,"count":0}],"isBlockCoverage":false},{"functionName":"plainFunction","ranges":[{"startOffset":1423,"endOffset":2885,"count":0}],"isBlockCoverage":false},{"functionName":"wrapFunction","ranges":[{"startOffset":2887,"endOffset":3123,"count":0}],"isBlockCoverage":false}]},{"scriptId":"627","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-async-generator-functions/lib/for-await.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2416,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":920,"endOffset":2416,"count":0}],"isBlockCoverage":false}]},{"scriptId":"628","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-class-static-block/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2022,"count":1}],"isBlockCoverage":true},{"functionName":"generateUid","ranges":[{"startOffset":356,"endOffset":542,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":591,"endOffset":1991,"count":0}],"isBlockCoverage":false}]},{"scriptId":"629","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-dynamic-import/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1340,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":846,"endOffset":1309,"count":1}],"isBlockCoverage":true},{"functionName":"pre","ranges":[{"startOffset":982,"endOffset":1067,"count":0}],"isBlockCoverage":false},{"functionName":"Program","ranges":[{"startOffset":1091,"endOffset":1295,"count":0}],"isBlockCoverage":false}]},{"scriptId":"630","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1759,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":351,"endOffset":1728,"count":1}],"isBlockCoverage":true},{"functionName":"ExportNamedDeclaration","ranges":[{"startOffset":516,"endOffset":1714,"count":0}],"isBlockCoverage":false}]},{"scriptId":"631","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-json-strings/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":956,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":297,"endOffset":925,"count":0}],"isBlockCoverage":false}]},{"scriptId":"632","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-logical-assignment-operators/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1786,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":365,"endOffset":1755,"count":0}],"isBlockCoverage":false}]},{"scriptId":"633","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1874,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":363,"endOffset":1843,"count":0}],"isBlockCoverage":false}]},{"scriptId":"634","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-numeric-separator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":784,"count":1}],"isBlockCoverage":true},{"functionName":"remover","ranges":[{"startOffset":260,"endOffset":480,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":529,"endOffset":753,"count":0}],"isBlockCoverage":false}]},{"scriptId":"635","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-optional-catch-binding/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":748,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":316,"endOffset":717,"count":0}],"isBlockCoverage":false}]},{"scriptId":"636","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8177,"count":1}],"isBlockCoverage":true},{"functionName":"_interopDefaultLegacy","ranges":[{"startOffset":367,"endOffset":481,"count":1},{"startOffset":460,"endOffset":478,"count":0}],"isBlockCoverage":true},{"functionName":"willPathCastToBoolean","ranges":[{"startOffset":582,"endOffset":1398,"count":0}],"isBlockCoverage":false},{"functionName":"findOutermostTransparentParent","ranges":[{"startOffset":1399,"endOffset":1647,"count":0}],"isBlockCoverage":false},{"functionName":"isSimpleMemberExpression","ranges":[{"startOffset":1694,"endOffset":2039,"count":0}],"isBlockCoverage":false},{"functionName":"needsMemoize","ranges":[{"startOffset":2041,"endOffset":2592,"count":0}],"isBlockCoverage":false},{"functionName":"transform","ranges":[{"startOffset":2594,"endOffset":7389,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7429,"endOffset":8080,"count":0}],"isBlockCoverage":false}]},{"scriptId":"637","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":947,"count":1}],"isBlockCoverage":true},{"functionName":"isTransparentExprWrapper","ranges":[{"startOffset":454,"endOffset":653,"count":0}],"isBlockCoverage":false},{"functionName":"skipTransparentExprWrappers","ranges":[{"startOffset":655,"endOffset":804,"count":0}],"isBlockCoverage":false},{"functionName":"skipTransparentExprWrapperNodes","ranges":[{"startOffset":806,"endOffset":947,"count":0}],"isBlockCoverage":false}]},{"scriptId":"638","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-private-methods/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":718,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":314,"endOffset":687,"count":0}],"isBlockCoverage":false}]},{"scriptId":"639","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-private-property-in-object/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4517,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":490,"endOffset":4486,"count":0}],"isBlockCoverage":false}]},{"scriptId":"640","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-unicode-property-regex/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":773,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":316,"endOffset":742,"count":0}],"isBlockCoverage":false}]},{"scriptId":"641","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-regexp-features-plugin/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2890,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":414,"endOffset":436,"count":3}],"isBlockCoverage":true},{"functionName":"createRegExpFeaturePlugin","ranges":[{"startOffset":503,"endOffset":2690,"count":0}],"isBlockCoverage":false},{"functionName":"isRegExpTest","ranges":[{"startOffset":2692,"endOffset":2890,"count":0}],"isBlockCoverage":false}]},{"scriptId":"642","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regexpu-core/rewrite-pattern.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":20517,"count":1}],"isBlockCoverage":true},{"functionName":"getCharacterClassEscapeSet","ranges":[{"startOffset":1054,"endOffset":1283,"count":0}],"isBlockCoverage":false},{"functionName":"getUnicodeDotSet","ranges":[{"startOffset":1311,"endOffset":1374,"count":0}],"isBlockCoverage":false},{"functionName":"getUnicodePropertyValueSet","ranges":[{"startOffset":1412,"endOffset":1731,"count":0}],"isBlockCoverage":false},{"functionName":"handleLoneUnicodePropertyNameOrValue","ranges":[{"startOffset":1779,"endOffset":2518,"count":0}],"isBlockCoverage":false},{"functionName":"getUnicodePropertyEscapeSet","ranges":[{"startOffset":2557,"endOffset":3281,"count":0}],"isBlockCoverage":false},{"functionName":"getUnicodePropertyEscapeCharacterClassData","ranges":[{"startOffset":3335,"endOffset":3624,"count":0}],"isBlockCoverage":false},{"functionName":"regenerate.iuAddRange","ranges":[{"startOffset":3753,"endOffset":3916,"count":0}],"isBlockCoverage":false},{"functionName":"regenerate.iuRemoveRange","ranges":[{"startOffset":3955,"endOffset":4121,"count":0}],"isBlockCoverage":false},{"functionName":"update","ranges":[{"startOffset":4139,"endOffset":4460,"count":0}],"isBlockCoverage":false},{"functionName":"wrap","ranges":[{"startOffset":4476,"endOffset":4648,"count":0}],"isBlockCoverage":false},{"functionName":"caseFold","ranges":[{"startOffset":4668,"endOffset":4730,"count":0}],"isBlockCoverage":false},{"functionName":"buildHandler","ranges":[{"startOffset":4754,"endOffset":8881,"count":0}],"isBlockCoverage":false},{"functionName":"getCharacterClassEmptyData","ranges":[{"startOffset":8919,"endOffset":9094,"count":0}],"isBlockCoverage":false},{"functionName":"maybeFold","ranges":[{"startOffset":9115,"endOffset":9310,"count":0}],"isBlockCoverage":false},{"functionName":"computeClassStrings","ranges":[{"startOffset":9341,"endOffset":10163,"count":0}],"isBlockCoverage":false},{"functionName":"computeCharacterClass","ranges":[{"startOffset":10195,"endOffset":12784,"count":0}],"isBlockCoverage":false},{"functionName":"processCharacterClass","ranges":[{"startOffset":12816,"endOffset":13690,"count":0}],"isBlockCoverage":false},{"functionName":"updateNamedReference","ranges":[{"startOffset":13722,"endOffset":13787,"count":0}],"isBlockCoverage":false},{"functionName":"assertNoUnmatchedReferences","ranges":[{"startOffset":13826,"endOffset":14034,"count":0}],"isBlockCoverage":false},{"functionName":"processTerm","ranges":[{"startOffset":14057,"endOffset":17389,"count":0}],"isBlockCoverage":false},{"functionName":"get useUnicodeFlag","ranges":[{"startOffset":17666,"endOffset":17779,"count":0}],"isBlockCoverage":false},{"functionName":"validateOptions","ranges":[{"startOffset":17808,"endOffset":18658,"count":0}],"isBlockCoverage":false},{"functionName":"hasFlag","ranges":[{"startOffset":18677,"endOffset":18730,"count":0}],"isBlockCoverage":false},{"functionName":"transform","ranges":[{"startOffset":18750,"endOffset":18816,"count":0}],"isBlockCoverage":false},{"functionName":"rewritePattern","ranges":[{"startOffset":18842,"endOffset":20481,"count":0}],"isBlockCoverage":false}]},{"scriptId":"643","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regjsgen/regjsgen.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11570,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":185,"endOffset":11556,"count":1},{"startOffset":440,"endOffset":449,"count":0},{"startOffset":941,"endOffset":976,"count":0},{"startOffset":977,"endOffset":1010,"count":0},{"startOffset":11044,"endOffset":11076,"count":0},{"startOffset":11077,"endOffset":11090,"count":0},{"startOffset":11092,"endOffset":11263,"count":0},{"startOffset":11475,"endOffset":11554,"count":0}],"isBlockCoverage":true},{"functionName":"fromCodePoint","ranges":[{"startOffset":1343,"endOffset":2199,"count":0}],"isBlockCoverage":false},{"functionName":"assertType","ranges":[{"startOffset":2364,"endOffset":2899,"count":0}],"isBlockCoverage":false},{"functionName":"generate","ranges":[{"startOffset":3045,"endOffset":3241,"count":0}],"isBlockCoverage":false},{"functionName":"generateSequence","ranges":[{"startOffset":3313,"endOffset":4074,"count":0}],"isBlockCoverage":false},{"functionName":"generateAlternative","ranges":[{"startOffset":4160,"endOffset":4297,"count":0}],"isBlockCoverage":false},{"functionName":"generateAnchor","ranges":[{"startOffset":4301,"endOffset":4634,"count":0}],"isBlockCoverage":false},{"functionName":"generateAtom","ranges":[{"startOffset":4638,"endOffset":4798,"count":0}],"isBlockCoverage":false},{"functionName":"generateCharacterClass","ranges":[{"startOffset":4802,"endOffset":5134,"count":0}],"isBlockCoverage":false},{"functionName":"generateCharacterClassEscape","ranges":[{"startOffset":5138,"endOffset":5269,"count":0}],"isBlockCoverage":false},{"functionName":"generateCharacterClassRange","ranges":[{"startOffset":5273,"endOffset":5628,"count":0}],"isBlockCoverage":false},{"functionName":"generateClassAtom","ranges":[{"startOffset":5632,"endOffset":5836,"count":0}],"isBlockCoverage":false},{"functionName":"generateClassStrings","ranges":[{"startOffset":5840,"endOffset":6006,"count":0}],"isBlockCoverage":false},{"functionName":"generateClassString","ranges":[{"startOffset":6010,"endOffset":6149,"count":0}],"isBlockCoverage":false},{"functionName":"generateDisjunction","ranges":[{"startOffset":6153,"endOffset":6291,"count":0}],"isBlockCoverage":false},{"functionName":"generateDot","ranges":[{"startOffset":6296,"endOffset":6379,"count":0}],"isBlockCoverage":false},{"functionName":"generateGroup","ranges":[{"startOffset":6383,"endOffset":7140,"count":0}],"isBlockCoverage":false},{"functionName":"generateIdentifier","ranges":[{"startOffset":7144,"endOffset":7248,"count":0}],"isBlockCoverage":false},{"functionName":"generateQuantifier","ranges":[{"startOffset":7252,"endOffset":7899,"count":0}],"isBlockCoverage":false},{"functionName":"generateReference","ranges":[{"startOffset":7903,"endOffset":8186,"count":0}],"isBlockCoverage":false},{"functionName":"generateTerm","ranges":[{"startOffset":8190,"endOffset":8389,"count":0}],"isBlockCoverage":false},{"functionName":"generateUnicodePropertyEscape","ranges":[{"startOffset":8393,"endOffset":8568,"count":0}],"isBlockCoverage":false},{"functionName":"generateValue","ranges":[{"startOffset":8572,"endOffset":10078,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":11185,"endOffset":11226,"count":0}],"isBlockCoverage":false}]},{"scriptId":"644","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regjsparser/parser.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":55350,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4753,"endOffset":55345,"count":1},{"startOffset":4810,"endOffset":6443,"count":0},{"startOffset":55293,"endOffset":55342,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4814,"endOffset":6440,"count":0}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":6448,"endOffset":55152,"count":0}],"isBlockCoverage":false}]},{"scriptId":"645","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerate/regenerate.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":34557,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":69,"endOffset":34548,"count":1},{"startOffset":514,"endOffset":549,"count":0},{"startOffset":34129,"endOffset":34163,"count":0},{"startOffset":34164,"endOffset":34179,"count":0},{"startOffset":34183,"endOffset":34237,"count":0},{"startOffset":34387,"endOffset":34471,"count":0},{"startOffset":34474,"endOffset":34545,"count":0}],"isBlockCoverage":true},{"functionName":"extend","ranges":[{"startOffset":1359,"endOffset":1538,"count":1},{"startOffset":1424,"endOffset":1513,"count":10}],"isBlockCoverage":true},{"functionName":"forEach","ranges":[{"startOffset":1556,"endOffset":1700,"count":5},{"startOffset":1658,"endOffset":1697,"count":28}],"isBlockCoverage":true},{"functionName":"isArray","ranges":[{"startOffset":1751,"endOffset":1822,"count":38}],"isBlockCoverage":true},{"functionName":"isNumber","ranges":[{"startOffset":1840,"endOffset":1943,"count":183},{"startOffset":1892,"endOffset":1939,"count":0}],"isBlockCoverage":true},{"functionName":"pad","ranges":[{"startOffset":2109,"endOffset":2279,"count":0}],"isBlockCoverage":false},{"functionName":"hex","ranges":[{"startOffset":2293,"endOffset":2366,"count":0}],"isBlockCoverage":false},{"functionName":"dataFromCodePoints","ranges":[{"startOffset":2500,"endOffset":3190,"count":0}],"isBlockCoverage":false},{"functionName":"dataRemove","ranges":[{"startOffset":3211,"endOffset":4128,"count":4},{"startOffset":3385,"endOffset":4110,"count":10},{"startOffset":3483,"endOffset":4091,"count":4},{"startOffset":3538,"endOffset":3785,"count":1},{"startOffset":3567,"endOffset":3663,"count":0},{"startOffset":3785,"endOffset":4086,"count":3},{"startOffset":3817,"endOffset":3921,"count":0},{"startOffset":4091,"endOffset":4110,"count":6},{"startOffset":4110,"endOffset":4127,"count":0}],"isBlockCoverage":true},{"functionName":"dataRemoveRange","ranges":[{"startOffset":4154,"endOffset":6264,"count":0}],"isBlockCoverage":false},{"functionName":"dataAdd","ranges":[{"startOffset":6283,"endOffset":7811,"count":29},{"startOffset":6503,"endOffset":6552,"count":0},{"startOffset":6578,"endOffset":7681,"count":66},{"startOffset":6730,"endOffset":6753,"count":0},{"startOffset":6786,"endOffset":6884,"count":0},{"startOffset":7104,"endOffset":7238,"count":0},{"startOffset":7265,"endOffset":7640,"count":0}],"isBlockCoverage":true},{"functionName":"dataAddData","ranges":[{"startOffset":7833,"endOffset":8243,"count":0}],"isBlockCoverage":false},{"functionName":"dataRemoveData","ranges":[{"startOffset":8268,"endOffset":8684,"count":0}],"isBlockCoverage":false},{"functionName":"dataAddRange","ranges":[{"startOffset":8707,"endOffset":12000,"count":75},{"startOffset":8775,"endOffset":8815,"count":0},{"startOffset":8916,"endOffset":8965,"count":0},{"startOffset":9133,"endOffset":11821,"count":264},{"startOffset":9200,"endOffset":10641,"count":0},{"startOffset":10699,"endOffset":10752,"count":0},{"startOffset":10853,"endOffset":10929,"count":25},{"startOffset":10929,"endOffset":11801,"count":239},{"startOffset":10983,"endOffset":11005,"count":0},{"startOffset":11007,"endOffset":11121,"count":0},{"startOffset":11313,"endOffset":11600,"count":0},{"startOffset":11634,"endOffset":11656,"count":0},{"startOffset":11658,"endOffset":11801,"count":0},{"startOffset":11801,"endOffset":11821,"count":239},{"startOffset":11821,"endOffset":11999,"count":50}],"isBlockCoverage":true},{"functionName":"dataContains","ranges":[{"startOffset":12023,"endOffset":12553,"count":0}],"isBlockCoverage":false},{"functionName":"dataIntersection","ranges":[{"startOffset":12580,"endOffset":12885,"count":0}],"isBlockCoverage":false},{"functionName":"dataIsEmpty","ranges":[{"startOffset":12907,"endOffset":12949,"count":0}],"isBlockCoverage":false},{"functionName":"dataIsSingleton","ranges":[{"startOffset":12975,"endOffset":13106,"count":0}],"isBlockCoverage":false},{"functionName":"dataToArray","ranges":[{"startOffset":13128,"endOffset":13467,"count":0}],"isBlockCoverage":false},{"functionName":"highSurrogate","ranges":[{"startOffset":13671,"endOffset":13787,"count":0}],"isBlockCoverage":false},{"functionName":"lowSurrogate","ranges":[{"startOffset":13810,"endOffset":13918,"count":0}],"isBlockCoverage":false},{"functionName":"codePointToString","ranges":[{"startOffset":13993,"endOffset":16572,"count":0}],"isBlockCoverage":false},{"functionName":"codePointToStringUnicode","ranges":[{"startOffset":16607,"endOffset":16766,"count":0}],"isBlockCoverage":false},{"functionName":"symbolToCodePoint","ranges":[{"startOffset":16794,"endOffset":17386,"count":0}],"isBlockCoverage":false},{"functionName":"createBMPCharacterClasses","ranges":[{"startOffset":17422,"endOffset":18075,"count":0}],"isBlockCoverage":false},{"functionName":"createUnicodeCharacterClasses","ranges":[{"startOffset":18115,"endOffset":18810,"count":0}],"isBlockCoverage":false},{"functionName":"splitAtBMP","ranges":[{"startOffset":18831,"endOffset":22912,"count":0}],"isBlockCoverage":false},{"functionName":"optimizeSurrogateMappings","ranges":[{"startOffset":22948,"endOffset":24476,"count":0}],"isBlockCoverage":false},{"functionName":"optimizeByLowSurrogates","ranges":[{"startOffset":24510,"endOffset":25810,"count":0}],"isBlockCoverage":false},{"functionName":"surrogateSet","ranges":[{"startOffset":25833,"endOffset":28040,"count":0}],"isBlockCoverage":false},{"functionName":"createSurrogateCharacterClasses","ranges":[{"startOffset":28082,"endOffset":28428,"count":0}],"isBlockCoverage":false},{"functionName":"createCharacterClassesFromData","ranges":[{"startOffset":28469,"endOffset":30184,"count":0}],"isBlockCoverage":false},{"functionName":"regenerate","ranges":[{"startOffset":30520,"endOffset":30747,"count":39},{"startOffset":30566,"endOffset":30605,"count":4},{"startOffset":30640,"endOffset":30706,"count":20},{"startOffset":30677,"endOffset":30694,"count":0},{"startOffset":30706,"endOffset":30746,"count":19}],"isBlockCoverage":true},{"functionName":"add","ranges":[{"startOffset":30843,"endOffset":31400,"count":43},{"startOffset":30904,"endOffset":30928,"count":10},{"startOffset":30928,"endOffset":30965,"count":33},{"startOffset":30965,"endOffset":31092,"count":0},{"startOffset":31092,"endOffset":31122,"count":33},{"startOffset":31122,"endOffset":31163,"count":0},{"startOffset":31163,"endOffset":31187,"count":33},{"startOffset":31187,"endOffset":31277,"count":4},{"startOffset":31277,"endOffset":31346,"count":29},{"startOffset":31347,"endOffset":31373,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":31208,"endOffset":31252,"count":24}],"isBlockCoverage":true},{"functionName":"remove","ranges":[{"startOffset":31414,"endOffset":31980,"count":5},{"startOffset":31475,"endOffset":31499,"count":0},{"startOffset":31536,"endOffset":31666,"count":0},{"startOffset":31696,"endOffset":31737,"count":1},{"startOffset":31761,"endOffset":31854,"count":1},{"startOffset":31854,"endOffset":31926,"count":4},{"startOffset":31927,"endOffset":31953,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":31782,"endOffset":31829,"count":4}],"isBlockCoverage":true},{"functionName":"addRange","ranges":[{"startOffset":31996,"endOffset":32212,"count":75},{"startOffset":32109,"endOffset":32135,"count":0},{"startOffset":32161,"endOffset":32185,"count":0}],"isBlockCoverage":true},{"functionName":"removeRange","ranges":[{"startOffset":32231,"endOffset":32531,"count":0}],"isBlockCoverage":false},{"functionName":"intersection","ranges":[{"startOffset":32551,"endOffset":32882,"count":0}],"isBlockCoverage":false},{"functionName":"contains","ranges":[{"startOffset":32898,"endOffset":33035,"count":0}],"isBlockCoverage":false},{"functionName":"clone","ranges":[{"startOffset":33048,"endOffset":33142,"count":1}],"isBlockCoverage":true},{"functionName":"toString","ranges":[{"startOffset":33158,"endOffset":33641,"count":0}],"isBlockCoverage":false},{"functionName":"toRegExp","ranges":[{"startOffset":33657,"endOffset":33840,"count":0}],"isBlockCoverage":false},{"functionName":"valueOf","ranges":[{"startOffset":33855,"endOffset":33949,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":34194,"endOffset":34232,"count":0}],"isBlockCoverage":false}]},{"scriptId":"646","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/unicode-match-property-ecmascript/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":449,"count":1}],"isBlockCoverage":true},{"functionName":"matchProperty","ranges":[{"startOffset":194,"endOffset":414,"count":0}],"isBlockCoverage":false}]},{"scriptId":"647","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/unicode-canonical-property-names-ecmascript/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1151,"count":1}],"isBlockCoverage":true}]},{"scriptId":"648","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/unicode-property-aliases-ecmascript/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1688,"count":1}],"isBlockCoverage":true}]},{"scriptId":"649","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/unicode-match-property-value-ecmascript/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":504,"count":1}],"isBlockCoverage":true},{"functionName":"matchPropertyValue","ranges":[{"startOffset":105,"endOffset":464,"count":0}],"isBlockCoverage":false}]},{"scriptId":"650","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/unicode-match-property-value-ecmascript/data/mappings.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":19993,"count":1}],"isBlockCoverage":true}]},{"scriptId":"651","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regexpu-core/data/iu-mappings.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":13368,"count":1}],"isBlockCoverage":true}]},{"scriptId":"652","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regexpu-core/data/character-class-escape-sets.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2698,"count":1}],"isBlockCoverage":true}]},{"scriptId":"653","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-regexp-features-plugin/lib/features.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":820,"count":1}],"isBlockCoverage":true},{"functionName":"enableFeature","ranges":[{"startOffset":669,"endOffset":743,"count":0}],"isBlockCoverage":false},{"functionName":"hasFeature","ranges":[{"startOffset":745,"endOffset":820,"count":0}],"isBlockCoverage":false}]},{"scriptId":"654","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-create-regexp-features-plugin/lib/util.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1710,"count":1}],"isBlockCoverage":true},{"functionName":"generateRegexpuOptions","ranges":[{"startOffset":260,"endOffset":759,"count":0}],"isBlockCoverage":false},{"functionName":"canSkipRegexpu","ranges":[{"startOffset":761,"endOffset":1359,"count":0}],"isBlockCoverage":false},{"functionName":"transformFlags","ranges":[{"startOffset":1361,"endOffset":1710,"count":0}],"isBlockCoverage":false}]},{"scriptId":"655","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-async-to-generator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1779,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":412,"endOffset":1748,"count":0}],"isBlockCoverage":false}]},{"scriptId":"656","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-imports/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1109,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":158,"endOffset":211,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":426,"endOffset":473,"count":0}],"isBlockCoverage":false},{"functionName":"addDefault","ranges":[{"startOffset":573,"endOffset":701,"count":0}],"isBlockCoverage":false},{"functionName":"addNamed","ranges":[{"startOffset":703,"endOffset":839,"count":0}],"isBlockCoverage":false},{"functionName":"addNamespace","ranges":[{"startOffset":841,"endOffset":973,"count":0}],"isBlockCoverage":false},{"functionName":"addSideEffect","ranges":[{"startOffset":975,"endOffset":1109,"count":0}],"isBlockCoverage":false}]},{"scriptId":"657","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-imports/lib/import-injector.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8407,"count":1}],"isBlockCoverage":true},{"functionName":"ImportInjector","ranges":[{"startOffset":349,"endOffset":889,"count":0}],"isBlockCoverage":false},{"functionName":"addDefault","ranges":[{"startOffset":893,"endOffset":994,"count":0}],"isBlockCoverage":false},{"functionName":"addNamed","ranges":[{"startOffset":998,"endOffset":1184,"count":0}],"isBlockCoverage":false},{"functionName":"addNamespace","ranges":[{"startOffset":1188,"endOffset":1314,"count":0}],"isBlockCoverage":false},{"functionName":"addSideEffect","ranges":[{"startOffset":1318,"endOffset":1446,"count":0}],"isBlockCoverage":false},{"functionName":"_applyDefaults","ranges":[{"startOffset":1450,"endOffset":2228,"count":0}],"isBlockCoverage":false},{"functionName":"_generateImport","ranges":[{"startOffset":2232,"endOffset":7627,"count":0}],"isBlockCoverage":false},{"functionName":"_insertStatements","ranges":[{"startOffset":7631,"endOffset":8369,"count":0}],"isBlockCoverage":false}]},{"scriptId":"658","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-imports/lib/import-builder.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4234,"count":1}],"isBlockCoverage":true},{"functionName":"ImportBuilder","ranges":[{"startOffset":460,"endOffset":731,"count":0}],"isBlockCoverage":false},{"functionName":"done","ranges":[{"startOffset":735,"endOffset":838,"count":0}],"isBlockCoverage":false},{"functionName":"import","ranges":[{"startOffset":842,"endOffset":961,"count":0}],"isBlockCoverage":false},{"functionName":"require","ranges":[{"startOffset":965,"endOffset":1124,"count":0}],"isBlockCoverage":false},{"functionName":"namespace","ranges":[{"startOffset":1128,"endOffset":1516,"count":0}],"isBlockCoverage":false},{"functionName":"default","ranges":[{"startOffset":1520,"endOffset":1880,"count":0}],"isBlockCoverage":false},{"functionName":"named","ranges":[{"startOffset":1884,"endOffset":2332,"count":0}],"isBlockCoverage":false},{"functionName":"var","ranges":[{"startOffset":2336,"endOffset":2849,"count":0}],"isBlockCoverage":false},{"functionName":"defaultInterop","ranges":[{"startOffset":2853,"endOffset":2947,"count":0}],"isBlockCoverage":false},{"functionName":"wildcardInterop","ranges":[{"startOffset":2951,"endOffset":3047,"count":0}],"isBlockCoverage":false},{"functionName":"_interop","ranges":[{"startOffset":3051,"endOffset":3558,"count":0}],"isBlockCoverage":false},{"functionName":"prop","ranges":[{"startOffset":3562,"endOffset":4100,"count":0}],"isBlockCoverage":false},{"functionName":"read","ranges":[{"startOffset":4104,"endOffset":4197,"count":0}],"isBlockCoverage":false}]},{"scriptId":"659","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-imports/lib/is-module.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":381,"count":1}],"isBlockCoverage":true},{"functionName":"isModule","ranges":[{"startOffset":109,"endOffset":381,"count":0}],"isBlockCoverage":false}]},{"scriptId":"660","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-arrow-functions/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":761,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":730,"count":0}],"isBlockCoverage":false}]},{"scriptId":"661","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-block-scoped-functions/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1196,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":1165,"count":0}],"isBlockCoverage":false}]},{"scriptId":"662","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-block-scoping/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":22198,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":315,"endOffset":2624,"count":0}],"isBlockCoverage":false},{"functionName":"ignoreBlock","ranges":[{"startOffset":2657,"endOffset":2771,"count":0}],"isBlockCoverage":false},{"functionName":"isBlockScoped","ranges":[{"startOffset":2873,"endOffset":3106,"count":0}],"isBlockCoverage":false},{"functionName":"isInLoop","ranges":[{"startOffset":3108,"endOffset":3301,"count":0}],"isBlockCoverage":false},{"functionName":"convertBlockScopedToVar","ranges":[{"startOffset":3303,"endOffset":4060,"count":0}],"isBlockCoverage":false},{"functionName":"isVar","ranges":[{"startOffset":4062,"endOffset":4183,"count":0}],"isBlockCoverage":false},{"functionName":"enter","ranges":[{"startOffset":4265,"endOffset":4316,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":4323,"endOffset":4373,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionParent","ranges":[{"startOffset":4383,"endOffset":4590,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":4683,"endOffset":4957,"count":0}],"isBlockCoverage":false},{"functionName":"enter","ranges":[{"startOffset":5019,"endOffset":5813,"count":0}],"isBlockCoverage":false},{"functionName":"LabeledStatement","ranges":[{"startOffset":5847,"endOffset":5937,"count":0}],"isBlockCoverage":false},{"functionName":"enter","ranges":[{"startOffset":5974,"endOffset":6400,"count":0}],"isBlockCoverage":false},{"functionName":"loopNodeTo","ranges":[{"startOffset":6406,"endOffset":6580,"count":0}],"isBlockCoverage":false},{"functionName":"Loop","ranges":[{"startOffset":6606,"endOffset":6816,"count":0}],"isBlockCoverage":false},{"functionName":"Function","ranges":[{"startOffset":6821,"endOffset":6858,"count":0}],"isBlockCoverage":false},{"functionName":"SwitchCase","ranges":[{"startOffset":6863,"endOffset":7069,"count":0}],"isBlockCoverage":false},{"functionName":"BreakStatement|ContinueStatement|ReturnStatement","ranges":[{"startOffset":7074,"endOffset":8331,"count":0}],"isBlockCoverage":false},{"functionName":"isStrict","ranges":[{"startOffset":8337,"endOffset":8658,"count":0}],"isBlockCoverage":false},{"functionName":"BlockScoping","ranges":[{"startOffset":8683,"endOffset":9843,"count":0}],"isBlockCoverage":false},{"functionName":"run","ranges":[{"startOffset":9847,"endOffset":10481,"count":0}],"isBlockCoverage":false},{"functionName":"checkConstants","ranges":[{"startOffset":10485,"endOffset":12241,"count":0}],"isBlockCoverage":false},{"functionName":"updateScopeInfo","ranges":[{"startOffset":12245,"endOffset":12960,"count":0}],"isBlockCoverage":false},{"functionName":"remap","ranges":[{"startOffset":12964,"endOffset":14042,"count":0}],"isBlockCoverage":false},{"functionName":"wrapClosure","ranges":[{"startOffset":14046,"endOffset":17239,"count":0}],"isBlockCoverage":false},{"functionName":"addContinuations","ranges":[{"startOffset":17243,"endOffset":18234,"count":0}],"isBlockCoverage":false},{"functionName":"getLetReferences","ranges":[{"startOffset":18238,"endOffset":20606,"count":0}],"isBlockCoverage":false},{"functionName":"checkLoop","ranges":[{"startOffset":20610,"endOffset":20979,"count":0}],"isBlockCoverage":false},{"functionName":"hoistVarDeclarations","ranges":[{"startOffset":20983,"endOffset":21075,"count":0}],"isBlockCoverage":false},{"functionName":"pushDeclar","ranges":[{"startOffset":21079,"endOffset":21748,"count":0}],"isBlockCoverage":false},{"functionName":"buildHas","ranges":[{"startOffset":21752,"endOffset":22195,"count":0}],"isBlockCoverage":false}]},{"scriptId":"663","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-block-scoping/lib/tdz.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2563,"count":1}],"isBlockCoverage":true},{"functionName":"getTDZStatus","ranges":[{"startOffset":144,"endOffset":432,"count":0}],"isBlockCoverage":false},{"functionName":"buildTDZAssert","ranges":[{"startOffset":434,"endOffset":589,"count":0}],"isBlockCoverage":false},{"functionName":"isReference","ranges":[{"startOffset":591,"endOffset":782,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":848,"endOffset":1909,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":1942,"endOffset":2528,"count":0}],"isBlockCoverage":false}]},{"scriptId":"664","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-classes/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2847,"count":1}],"isBlockCoverage":true},{"functionName":"getBuiltinClasses","ranges":[{"startOffset":550,"endOffset":629,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":601,"endOffset":628,"count":768}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":780,"endOffset":2816,"count":0}],"isBlockCoverage":false}]},{"scriptId":"665","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-classes/lib/transformClass.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":18642,"count":1}],"isBlockCoverage":true},{"functionName":"buildConstructor","ranges":[{"startOffset":601,"endOffset":818,"count":0}],"isBlockCoverage":false},{"functionName":"transformClass","ranges":[{"startOffset":820,"endOffset":18642,"count":0}],"isBlockCoverage":false}]},{"scriptId":"666","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-classes/lib/inline-createSuper-helpers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2379,"count":1}],"isBlockCoverage":true},{"functionName":"addCreateSuperHelper","ranges":[{"startOffset":192,"endOffset":828,"count":0}],"isBlockCoverage":false}]},{"scriptId":"667","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-computed-properties/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5277,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":5246,"count":0}],"isBlockCoverage":false}]},{"scriptId":"668","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-destructuring/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":19753,"count":1}],"isBlockCoverage":true},{"functionName":"unshiftForXStatementBody","ranges":[{"startOffset":178,"endOffset":683,"count":0}],"isBlockCoverage":false},{"functionName":"hasArrayRest","ranges":[{"startOffset":685,"endOffset":791,"count":0}],"isBlockCoverage":false},{"functionName":"hasObjectRest","ranges":[{"startOffset":793,"endOffset":902,"count":0}],"isBlockCoverage":false},{"functionName":"arrayUnpackVisitor","ranges":[{"startOffset":959,"endOffset":1227,"count":0}],"isBlockCoverage":false},{"functionName":"DestructuringTransformer","ranges":[{"startOffset":1265,"endOffset":2064,"count":0}],"isBlockCoverage":false},{"functionName":"getExtendsHelper","ranges":[{"startOffset":2068,"endOffset":2245,"count":0}],"isBlockCoverage":false},{"functionName":"buildVariableAssignment","ranges":[{"startOffset":2249,"endOffset":2923,"count":0}],"isBlockCoverage":false},{"functionName":"buildVariableDeclaration","ranges":[{"startOffset":2927,"endOffset":3173,"count":0}],"isBlockCoverage":false},{"functionName":"push","ranges":[{"startOffset":3177,"endOffset":3593,"count":0}],"isBlockCoverage":false},{"functionName":"toArray","ranges":[{"startOffset":3597,"endOffset":3833,"count":0}],"isBlockCoverage":false},{"functionName":"pushAssignmentPattern","ranges":[{"startOffset":3837,"endOffset":4941,"count":0}],"isBlockCoverage":false},{"functionName":"pushObjectRest","ranges":[{"startOffset":4945,"endOffset":5274,"count":0}],"isBlockCoverage":false},{"functionName":"pushObjectProperty","ranges":[{"startOffset":5278,"endOffset":5680,"count":0}],"isBlockCoverage":false},{"functionName":"pushObjectPattern","ranges":[{"startOffset":5684,"endOffset":7278,"count":0}],"isBlockCoverage":false},{"functionName":"canUnpackArrayPattern","ranges":[{"startOffset":7282,"endOffset":8208,"count":0}],"isBlockCoverage":false},{"functionName":"pushUnpackedArrayPattern","ranges":[{"startOffset":8212,"endOffset":8553,"count":0}],"isBlockCoverage":false},{"functionName":"pushArrayPattern","ranges":[{"startOffset":8557,"endOffset":9915,"count":0}],"isBlockCoverage":false},{"functionName":"init","ranges":[{"startOffset":9919,"endOffset":10287,"count":0}],"isBlockCoverage":false},{"functionName":"buildObjectExcludingKeys","ranges":[{"startOffset":10291,"endOffset":12168,"count":0}],"isBlockCoverage":false},{"functionName":"convertVariableDeclaration","ranges":[{"startOffset":12169,"endOffset":13732,"count":0}],"isBlockCoverage":false},{"functionName":"convertAssignmentExpression","ranges":[{"startOffset":13733,"endOffset":14974,"count":0}],"isBlockCoverage":false},{"functionName":"variableDeclarationHasPattern","ranges":[{"startOffset":14976,"endOffset":15157,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15197,"endOffset":19565,"count":0}],"isBlockCoverage":false}]},{"scriptId":"669","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-dotall-regex/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":525,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":316,"endOffset":494,"count":0}],"isBlockCoverage":false}]},{"scriptId":"670","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-duplicate-keys/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1842,"count":1}],"isBlockCoverage":true},{"functionName":"getName","ranges":[{"startOffset":209,"endOffset":330,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":379,"endOffset":1811,"count":0}],"isBlockCoverage":false}]},{"scriptId":"671","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-exponentiation-operator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":797,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":378,"endOffset":766,"count":0}],"isBlockCoverage":false}]},{"scriptId":"672","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-builder-binary-assignment-operator-visitor/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1025,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":304,"endOffset":1025,"count":0}],"isBlockCoverage":false}]},{"scriptId":"673","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-explode-assignable-expression/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2052,"count":1}],"isBlockCoverage":true},{"functionName":"getObjRef","ranges":[{"startOffset":326,"endOffset":938,"count":0}],"isBlockCoverage":false},{"functionName":"getPropRef","ranges":[{"startOffset":940,"endOffset":1456,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":1458,"endOffset":2052,"count":0}],"isBlockCoverage":false}]},{"scriptId":"674","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-for-of/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7547,"count":1}],"isBlockCoverage":true},{"functionName":"buildLoopBody","ranges":[{"startOffset":279,"endOffset":730,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":779,"endOffset":7516,"count":0}],"isBlockCoverage":false}]},{"scriptId":"675","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-for-of/lib/no-helper-implementation.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4917,"count":1}],"isBlockCoverage":true},{"functionName":"transformWithoutHelper","ranges":[{"startOffset":160,"endOffset":817,"count":0}],"isBlockCoverage":false},{"functionName":"pushComputedPropsLoose","ranges":[{"startOffset":1947,"endOffset":3370,"count":0}],"isBlockCoverage":false},{"functionName":"pushComputedPropsSpec","ranges":[{"startOffset":3372,"endOffset":4917,"count":0}],"isBlockCoverage":false}]},{"scriptId":"676","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-function-name/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1177,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":365,"endOffset":1146,"count":0}],"isBlockCoverage":false}]},{"scriptId":"677","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-literals/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":673,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":219,"endOffset":642,"count":0}],"isBlockCoverage":false}]},{"scriptId":"678","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-member-expression-literals/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":761,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":730,"count":0}],"isBlockCoverage":false}]},{"scriptId":"679","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-modules-amd/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5422,"count":1}],"isBlockCoverage":true},{"functionName":"injectWrapper","ranges":[{"startOffset":567,"endOffset":987,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1036,"endOffset":5391,"count":0}],"isBlockCoverage":false}]},{"scriptId":"680","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-transforms/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12183,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":285,"endOffset":337,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":416,"endOffset":482,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":559,"endOffset":618,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":705,"endOffset":779,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":950,"endOffset":1000,"count":0}],"isBlockCoverage":false},{"functionName":"rewriteModuleStatementsAndPrepareHeader","ranges":[{"startOffset":1714,"endOffset":3326,"count":0}],"isBlockCoverage":false},{"functionName":"ensureStatementsHoisted","ranges":[{"startOffset":3328,"endOffset":3443,"count":0}],"isBlockCoverage":false},{"functionName":"wrapInterop","ranges":[{"startOffset":3445,"endOffset":4038,"count":0}],"isBlockCoverage":false},{"functionName":"buildNamespaceInitStatements","ranges":[{"startOffset":4040,"endOffset":5412,"count":0}],"isBlockCoverage":false},{"functionName":"buildReexportsFromMeta","ranges":[{"startOffset":5844,"endOffset":6914,"count":0}],"isBlockCoverage":false},{"functionName":"buildESModuleHeader","ranges":[{"startOffset":6917,"endOffset":7265,"count":0}],"isBlockCoverage":false},{"functionName":"buildNamespaceReexport","ranges":[{"startOffset":7267,"endOffset":8431,"count":0}],"isBlockCoverage":false},{"functionName":"buildExportNameListDeclaration","ranges":[{"startOffset":8433,"endOffset":9320,"count":0}],"isBlockCoverage":false},{"functionName":"buildExportInitializationStatements","ranges":[{"startOffset":9322,"endOffset":11566,"count":0}],"isBlockCoverage":false},{"functionName":"buildInitStatement","ranges":[{"startOffset":11724,"endOffset":12183,"count":0}],"isBlockCoverage":false}]},{"scriptId":"681","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":675,"count":1}],"isBlockCoverage":true},{"functionName":"rewriteThis","ranges":[{"startOffset":324,"endOffset":469,"count":0}],"isBlockCoverage":false},{"functionName":"ThisExpression","ranges":[{"startOffset":571,"endOffset":669,"count":0}],"isBlockCoverage":false}]},{"scriptId":"682","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11822,"count":1}],"isBlockCoverage":true},{"functionName":"isInType","ranges":[{"startOffset":650,"endOffset":1152,"count":0}],"isBlockCoverage":false},{"functionName":"rewriteLiveReferences","ranges":[{"startOffset":1154,"endOffset":3105,"count":0}],"isBlockCoverage":false},{"functionName":"Scope","ranges":[{"startOffset":3145,"endOffset":3179,"count":0}],"isBlockCoverage":false},{"functionName":"ClassDeclaration","ranges":[{"startOffset":3184,"endOffset":3761,"count":0}],"isBlockCoverage":false},{"functionName":"VariableDeclaration","ranges":[{"startOffset":3766,"endOffset":4306,"count":0}],"isBlockCoverage":false},{"functionName":"buildBindingExportAssignmentExpression","ranges":[{"startOffset":4359,"endOffset":4753,"count":0}],"isBlockCoverage":false},{"functionName":"buildImportThrow","ranges":[{"startOffset":4781,"endOffset":4937,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":4977,"endOffset":6520,"count":0}],"isBlockCoverage":false},{"functionName":"UpdateExpression","ranges":[{"startOffset":6525,"endOffset":7928,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":7961,"endOffset":10248,"count":0}],"isBlockCoverage":false},{"functionName":"ForOfStatement|ForInStatement","ranges":[{"startOffset":10258,"endOffset":11818,"count":0}],"isBlockCoverage":false}]},{"scriptId":"683","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-simple-access/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2947,"count":1}],"isBlockCoverage":true},{"functionName":"simplifyAccess","ranges":[{"startOffset":338,"endOffset":560,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":622,"endOffset":2019,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":2056,"endOffset":2939,"count":0}],"isBlockCoverage":false}]},{"scriptId":"684","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12554,"count":1}],"isBlockCoverage":true},{"functionName":"hasExports","ranges":[{"startOffset":479,"endOffset":542,"count":0}],"isBlockCoverage":false},{"functionName":"isSideEffectImport","ranges":[{"startOffset":544,"endOffset":750,"count":0}],"isBlockCoverage":false},{"functionName":"validateImportInteropOption","ranges":[{"startOffset":752,"endOffset":1118,"count":0}],"isBlockCoverage":false},{"functionName":"resolveImportInterop","ranges":[{"startOffset":1120,"endOffset":1333,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeModuleAndLoadMetadata","ranges":[{"startOffset":1335,"endOffset":2682,"count":0}],"isBlockCoverage":false},{"functionName":"getExportSpecifierName","ranges":[{"startOffset":2684,"endOffset":3155,"count":0}],"isBlockCoverage":false},{"functionName":"assertExportSpecifier","ranges":[{"startOffset":3157,"endOffset":3515,"count":0}],"isBlockCoverage":false},{"functionName":"getModuleMetadata","ranges":[{"startOffset":3517,"endOffset":8203,"count":0}],"isBlockCoverage":false},{"functionName":"getLocalExportMetadata","ranges":[{"startOffset":8205,"endOffset":11452,"count":0}],"isBlockCoverage":false},{"functionName":"nameAnonymousExports","ranges":[{"startOffset":11454,"endOffset":11659,"count":0}],"isBlockCoverage":false},{"functionName":"removeModuleDeclarations","ranges":[{"startOffset":11661,"endOffset":12554,"count":0}],"isBlockCoverage":false}]},{"scriptId":"685","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-module-transforms/lib/get-module-name.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1696,"count":1}],"isBlockCoverage":true},{"functionName":"getModuleName","ranges":[{"startOffset":199,"endOffset":877,"count":0}],"isBlockCoverage":false},{"functionName":"getModuleName","ranges":[{"startOffset":882,"endOffset":1696,"count":0}],"isBlockCoverage":false}]},{"scriptId":"686","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-dynamic-import-node/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":243,"count":1}],"isBlockCoverage":true}]},{"scriptId":"687","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-dynamic-import-node/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2548,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":102,"endOffset":742,"count":1}],"isBlockCoverage":true},{"functionName":"sliceIterator","ranges":[{"startOffset":116,"endOffset":509,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":517,"endOffset":739,"count":0}],"isBlockCoverage":false},{"functionName":"getImportSource","ranges":[{"startOffset":859,"endOffset":1351,"count":0}],"isBlockCoverage":false},{"functionName":"createDynamicImportTransform","ranges":[{"startOffset":1353,"endOffset":2548,"count":1}],"isBlockCoverage":true},{"functionName":"isString","ranges":[{"startOffset":1921,"endOffset":2048,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2060,"endOffset":2545,"count":0}],"isBlockCoverage":false}]},{"scriptId":"688","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7928,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":463,"endOffset":7897,"count":1},{"startOffset":986,"endOffset":1003,"count":0},{"startOffset":1112,"endOffset":1130,"count":0},{"startOffset":1257,"endOffset":1275,"count":0},{"startOffset":1318,"endOffset":1347,"count":0},{"startOffset":1348,"endOffset":1422,"count":0},{"startOffset":1424,"endOffset":1510,"count":0},{"startOffset":1556,"endOffset":1634,"count":0},{"startOffset":1683,"endOffset":1764,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1388,"endOffset":1420,"count":0}],"isBlockCoverage":false},{"functionName":"getAssertion","ranges":[{"startOffset":1789,"endOffset":2107,"count":0}],"isBlockCoverage":false},{"functionName":"ReferencedIdentifier","ranges":[{"startOffset":2147,"endOffset":2791,"count":0}],"isBlockCoverage":false},{"functionName":"UpdateExpression","ranges":[{"startOffset":2798,"endOffset":3306,"count":0}],"isBlockCoverage":false},{"functionName":"AssignmentExpression","ranges":[{"startOffset":3313,"endOffset":4371,"count":0}],"isBlockCoverage":false},{"functionName":"pre","ranges":[{"startOffset":4434,"endOffset":4517,"count":0}],"isBlockCoverage":false},{"functionName":"CallExpression","ranges":[{"startOffset":4541,"endOffset":4893,"count":0}],"isBlockCoverage":false},{"functionName":"exit","ranges":[{"startOffset":4921,"endOffset":7875,"count":0}],"isBlockCoverage":false}]},{"scriptId":"689","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-modules-systemjs/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":18363,"count":1}],"isBlockCoverage":true},{"functionName":"getExportSpecifierName","ranges":[{"startOffset":1444,"endOffset":1914,"count":0}],"isBlockCoverage":false},{"functionName":"constructExportCall","ranges":[{"startOffset":1916,"endOffset":3739,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3788,"endOffset":18332,"count":0}],"isBlockCoverage":false}]},{"scriptId":"690","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-modules-umd/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6964,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":995,"endOffset":6933,"count":0}],"isBlockCoverage":false}]},{"scriptId":"691","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-named-capturing-groups-regex/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":721,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":316,"endOffset":690,"count":0}],"isBlockCoverage":false}]},{"scriptId":"692","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-new-target/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1982,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":1951,"count":0}],"isBlockCoverage":false}]},{"scriptId":"693","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-object-super/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1269,"count":1}],"isBlockCoverage":true},{"functionName":"replacePropertySuper","ranges":[{"startOffset":278,"endOffset":498,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":547,"endOffset":1238,"count":0}],"isBlockCoverage":false}]},{"scriptId":"694","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-property-literals/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":702,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":671,"count":0}],"isBlockCoverage":false}]},{"scriptId":"695","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-regenerator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1108,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":282,"endOffset":1077,"count":0}],"isBlockCoverage":false}]},{"scriptId":"696","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":889,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":291,"endOffset":889,"count":0}],"isBlockCoverage":false}]},{"scriptId":"697","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/visit.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12415,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":569,"endOffset":904,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":906,"endOffset":1715,"count":1},{"startOffset":1017,"endOffset":1090,"count":0},{"startOffset":1092,"endOffset":1201,"count":0},{"startOffset":1203,"endOffset":1331,"count":0},{"startOffset":1354,"endOffset":1714,"count":0}],"isBlockCoverage":true},{"functionName":"exports.getVisitor","ranges":[{"startOffset":1738,"endOffset":8299,"count":0}],"isBlockCoverage":false},{"functionName":"shouldRegenerate","ranges":[{"startOffset":8359,"endOffset":8776,"count":0}],"isBlockCoverage":false},{"functionName":"getOuterFnExpr","ranges":[{"startOffset":9054,"endOffset":9651,"count":0}],"isBlockCoverage":false},{"functionName":"getMarkInfo","ranges":[{"startOffset":9684,"endOffset":9805,"count":0}],"isBlockCoverage":false},{"functionName":"getMarkedFunctionId","ranges":[{"startOffset":9807,"endOffset":10985,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionExpressionFunctionDeclarationMethod","ranges":[{"startOffset":11067,"endOffset":11148,"count":0}],"isBlockCoverage":false},{"functionName":"Identifier","ranges":[{"startOffset":11164,"endOffset":11367,"count":0}],"isBlockCoverage":false},{"functionName":"ThisExpression","ranges":[{"startOffset":11387,"endOffset":11456,"count":0}],"isBlockCoverage":false},{"functionName":"MetaProperty","ranges":[{"startOffset":11504,"endOffset":11779,"count":0}],"isBlockCoverage":false},{"functionName":"Function","ranges":[{"startOffset":11816,"endOffset":11908,"count":0}],"isBlockCoverage":false},{"functionName":"AwaitExpression","ranges":[{"startOffset":11929,"endOffset":12412,"count":0}],"isBlockCoverage":false}]},{"scriptId":"698","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/runtime/helpers/interopRequireDefault.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":225,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":0,"endOffset":105,"count":5},{"startOffset":70,"endOffset":75,"count":1},{"startOffset":76,"endOffset":102,"count":4}],"isBlockCoverage":true}]},{"scriptId":"699","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/hoist.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5903,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":71,"endOffset":406,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":408,"endOffset":1217,"count":1},{"startOffset":519,"endOffset":592,"count":0},{"startOffset":594,"endOffset":703,"count":0},{"startOffset":705,"endOffset":833,"count":0},{"startOffset":856,"endOffset":1216,"count":0}],"isBlockCoverage":true},{"functionName":"exports.hoist","ranges":[{"startOffset":1701,"endOffset":5902,"count":0}],"isBlockCoverage":false}]},{"scriptId":"700","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/util.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1288,"count":1}],"isBlockCoverage":true},{"functionName":"wrapWithTypes","ranges":[{"startOffset":449,"endOffset":816,"count":0}],"isBlockCoverage":false},{"functionName":"getTypes","ranges":[{"startOffset":818,"endOffset":864,"count":0}],"isBlockCoverage":false},{"functionName":"runtimeProperty","ranges":[{"startOffset":866,"endOffset":1014,"count":0}],"isBlockCoverage":false},{"functionName":"isReference","ranges":[{"startOffset":1016,"endOffset":1145,"count":0}],"isBlockCoverage":false},{"functionName":"replaceWithOrRemove","ranges":[{"startOffset":1147,"endOffset":1288,"count":0}],"isBlockCoverage":false}]},{"scriptId":"701","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/emit.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":37192,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":328,"endOffset":663,"count":1},{"startOffset":412,"endOffset":424,"count":0}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":537,"endOffset":646,"count":2},{"startOffset":605,"endOffset":623,"count":0}],"isBlockCoverage":true},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":665,"endOffset":1474,"count":3},{"startOffset":761,"endOffset":776,"count":1},{"startOffset":776,"endOffset":849,"count":2},{"startOffset":821,"endOffset":849,"count":0},{"startOffset":851,"endOffset":881,"count":0},{"startOffset":881,"endOffset":960,"count":2},{"startOffset":962,"endOffset":988,"count":0},{"startOffset":988,"endOffset":1090,"count":2},{"startOffset":1113,"endOffset":1393,"count":10},{"startOffset":1267,"endOffset":1273,"count":0},{"startOffset":1311,"endOffset":1356,"count":0},{"startOffset":1393,"endOffset":1473,"count":2}],"isBlockCoverage":true},{"functionName":"Emitter","ranges":[{"startOffset":1706,"endOffset":2862,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.loc","ranges":[{"startOffset":3251,"endOffset":3352,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.getInsertedLocs","ranges":[{"startOffset":3376,"endOffset":3419,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.getContextId","ranges":[{"startOffset":3440,"endOffset":3503,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.mark","ranges":[{"startOffset":3611,"endOffset":3972,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.emit","ranges":[{"startOffset":3985,"endOffset":4161,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.emitAssign","ranges":[{"startOffset":4297,"endOffset":4370,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.assign","ranges":[{"startOffset":4428,"endOffset":4562,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.contextProperty","ranges":[{"startOffset":4692,"endOffset":4865,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.stop","ranges":[{"startOffset":4950,"endOffset":5047,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.setReturnValue","ranges":[{"startOffset":5070,"endOffset":5231,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.clearPendingException","ranges":[{"startOffset":5261,"endOffset":5540,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.jump","ranges":[{"startOffset":5678,"endOffset":5801,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.jumpIf","ranges":[{"startOffset":5838,"endOffset":6069,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.jumpIfNot","ranges":[{"startOffset":6137,"endOffset":6582,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.makeTempVar","ranges":[{"startOffset":6925,"endOffset":6996,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.getContextFunction","ranges":[{"startOffset":7023,"endOffset":7265,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.getDispatchLoop","ranges":[{"startOffset":7545,"endOffset":8862,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.getTryLocsList","ranges":[{"startOffset":8885,"endOffset":9752,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.explode","ranges":[{"startOffset":9957,"endOffset":10834,"count":0}],"isBlockCoverage":false},{"functionName":"getDeclError","ranges":[{"startOffset":10837,"endOffset":11019,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.explodeStatement","ranges":[{"startOffset":11043,"endOffset":21335,"count":0}],"isBlockCoverage":false},{"functionName":"Identifier","ranges":[{"startOffset":21378,"endOffset":21559,"count":0}],"isBlockCoverage":false},{"functionName":"Scope","ranges":[{"startOffset":21570,"endOffset":21798,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.emitAbruptCompletion","ranges":[{"startOffset":21829,"endOffset":22699,"count":0}],"isBlockCoverage":false},{"functionName":"isValidCompletion","ranges":[{"startOffset":22702,"endOffset":23125,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.getUnmarkedCurrentLoc","ranges":[{"startOffset":23749,"endOffset":23826,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.updateContextPrevLoc","ranges":[{"startOffset":24552,"endOffset":25293,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.explodeViaTempVar","ranges":[{"startOffset":25921,"endOffset":27241,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.explodeExpression","ranges":[{"startOffset":27267,"endOffset":36428,"count":0}],"isBlockCoverage":false},{"functionName":"Ep.explodeClass","ranges":[{"startOffset":36449,"endOffset":37191,"count":0}],"isBlockCoverage":false}]},{"scriptId":"702","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/leap.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4159,"count":1}],"isBlockCoverage":true},{"functionName":"Entry","ranges":[{"startOffset":438,"endOffset":506,"count":0}],"isBlockCoverage":false},{"functionName":"FunctionEntry","ranges":[{"startOffset":508,"endOffset":646,"count":0}],"isBlockCoverage":false},{"functionName":"LoopEntry","ranges":[{"startOffset":731,"endOffset":1063,"count":0}],"isBlockCoverage":false},{"functionName":"SwitchEntry","ranges":[{"startOffset":1136,"endOffset":1268,"count":0}],"isBlockCoverage":false},{"functionName":"TryEntry","ranges":[{"startOffset":1347,"endOffset":1931,"count":0}],"isBlockCoverage":false},{"functionName":"CatchEntry","ranges":[{"startOffset":2001,"endOffset":2211,"count":0}],"isBlockCoverage":false},{"functionName":"FinallyEntry","ranges":[{"startOffset":2287,"endOffset":2500,"count":0}],"isBlockCoverage":false},{"functionName":"LabeledEntry","ranges":[{"startOffset":2582,"endOffset":2786,"count":0}],"isBlockCoverage":false},{"functionName":"LeapManager","ranges":[{"startOffset":2868,"endOffset":3101,"count":0}],"isBlockCoverage":false},{"functionName":"LMp.withEntry","ranges":[{"startOffset":3188,"endOffset":3451,"count":0}],"isBlockCoverage":false},{"functionName":"LMp._findLeapLocation","ranges":[{"startOffset":3478,"endOffset":3966,"count":0}],"isBlockCoverage":false},{"functionName":"LMp.getBreakLoc","ranges":[{"startOffset":3987,"endOffset":4059,"count":0}],"isBlockCoverage":false},{"functionName":"LMp.getContinueLoc","ranges":[{"startOffset":4083,"endOffset":4158,"count":0}],"isBlockCoverage":false}]},{"scriptId":"703","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/meta.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3015,"count":1},{"startOffset":2784,"endOffset":2874,"count":5}],"isBlockCoverage":true},{"functionName":"m","ranges":[{"startOffset":405,"endOffset":504,"count":0}],"isBlockCoverage":false},{"functionName":"makePredicate","ranges":[{"startOffset":553,"endOffset":1868,"count":2}],"isBlockCoverage":true},{"functionName":"onlyChildren","ranges":[{"startOffset":606,"endOffset":1292,"count":0}],"isBlockCoverage":false},{"functionName":"predicate","ranges":[{"startOffset":1296,"endOffset":1804,"count":0}],"isBlockCoverage":false}]},{"scriptId":"704","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/regenerator-transform/lib/replaceShorthandObjectMethod.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3745,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":150,"endOffset":485,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":487,"endOffset":1296,"count":1},{"startOffset":598,"endOffset":671,"count":0},{"startOffset":673,"endOffset":782,"count":0},{"startOffset":784,"endOffset":912,"count":0},{"startOffset":935,"endOffset":1295,"count":0}],"isBlockCoverage":true},{"functionName":"replaceShorthandObjectMethod","ranges":[{"startOffset":2505,"endOffset":3745,"count":0}],"isBlockCoverage":false}]},{"scriptId":"705","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-reserved-words/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":580,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":549,"count":0}],"isBlockCoverage":false}]},{"scriptId":"706","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-shorthand-properties/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1520,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":1489,"count":0}],"isBlockCoverage":false}]},{"scriptId":"707","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-spread/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5286,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":367,"endOffset":5255,"count":0}],"isBlockCoverage":false}]},{"scriptId":"708","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-sticky-regex/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":696,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":665,"count":0}],"isBlockCoverage":false}]},{"scriptId":"709","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-template-literals/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3829,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":3798,"count":0}],"isBlockCoverage":false}]},{"scriptId":"710","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-typeof-symbol/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2234,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":2203,"count":0}],"isBlockCoverage":false}]},{"scriptId":"711","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-unicode-escapes/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3617,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":256,"endOffset":3586,"count":0}],"isBlockCoverage":false}]},{"scriptId":"712","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-unicode-regex/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":527,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":316,"endOffset":496,"count":0}],"isBlockCoverage":false}]},{"scriptId":"713","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-modules/lib/plugins/transform-async-arrows-in-class/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1148,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":837,"endOffset":1084,"count":0}],"isBlockCoverage":false}]},{"scriptId":"714","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-modules/lib/plugins/transform-edge-default-parameters/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1122,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":360,"endOffset":1058,"count":0}],"isBlockCoverage":false}]},{"scriptId":"715","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-modules/lib/plugins/transform-edge-function-name/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1433,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":831,"endOffset":1369,"count":0}],"isBlockCoverage":false}]},{"scriptId":"716","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-modules/lib/plugins/transform-tagged-template-caching/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3175,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":969,"endOffset":3111,"count":0}],"isBlockCoverage":false}]},{"scriptId":"717","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-modules/lib/plugins/transform-safari-block-shadowing/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1339,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":218,"endOffset":1304,"count":0}],"isBlockCoverage":false}]},{"scriptId":"718","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-modules/lib/plugins/transform-safari-for-shadowing/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1128,"count":1}],"isBlockCoverage":true},{"functionName":"handle","ranges":[{"startOffset":457,"endOffset":847,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":864,"endOffset":1064,"count":0}],"isBlockCoverage":false}]},{"scriptId":"719","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1140,"count":1}],"isBlockCoverage":true},{"functionName":"shouldTransform","ranges":[{"startOffset":143,"endOffset":598,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":638,"endOffset":1074,"count":0}],"isBlockCoverage":false}]},{"scriptId":"720","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2352,"count":1}],"isBlockCoverage":true},{"functionName":"matchAffectedArguments","ranges":[{"startOffset":377,"endOffset":587,"count":0}],"isBlockCoverage":false},{"functionName":"shouldTransform","ranges":[{"startOffset":589,"endOffset":1607,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1647,"endOffset":2286,"count":0}],"isBlockCoverage":false}]},{"scriptId":"721","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/module-transformations.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":375,"count":1}],"isBlockCoverage":true}]},{"scriptId":"722","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/normalize-options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7563,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1048,"endOffset":1086,"count":6}],"isBlockCoverage":true},{"functionName":"getValidIncludesAndExcludes","ranges":[{"startOffset":1127,"endOffset":1339,"count":0}],"isBlockCoverage":false},{"functionName":"pluginToRegExp","ranges":[{"startOffset":1365,"endOffset":1530,"count":0}],"isBlockCoverage":false},{"functionName":"selectPlugins","ranges":[{"startOffset":1555,"endOffset":1696,"count":0}],"isBlockCoverage":false},{"functionName":"flatten","ranges":[{"startOffset":1715,"endOffset":1743,"count":0}],"isBlockCoverage":false},{"functionName":"expandIncludesAndExcludes","ranges":[{"startOffset":1780,"endOffset":2311,"count":2},{"startOffset":1852,"endOffset":2310,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1891,"endOffset":1952,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1998,"endOffset":2039,"count":0}],"isBlockCoverage":false},{"functionName":"normalizePluginName","ranges":[{"startOffset":2342,"endOffset":2402,"count":0}],"isBlockCoverage":false},{"functionName":"checkDuplicateIncludeExcludes","ranges":[{"startOffset":2495,"endOffset":2753,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2565,"endOffset":2597,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeTargets","ranges":[{"startOffset":2853,"endOffset":3016,"count":1},{"startOffset":2927,"endOffset":2976,"count":0}],"isBlockCoverage":true},{"functionName":"validateModulesOption","ranges":[{"startOffset":3049,"endOffset":3548,"count":1},{"startOffset":3157,"endOffset":3203,"count":0}],"isBlockCoverage":true},{"functionName":"validateUseBuiltInsOption","ranges":[{"startOffset":3641,"endOffset":4012,"count":1}],"isBlockCoverage":true},{"functionName":"normalizeCoreJSOption","ranges":[{"startOffset":4079,"endOffset":5878,"count":1},{"startOffset":4195,"endOffset":4218,"count":0},{"startOffset":4220,"endOffset":5171,"count":0},{"startOffset":5208,"endOffset":5226,"count":0},{"startOffset":5228,"endOffset":5309,"count":0},{"startOffset":5376,"endOffset":5417,"count":0},{"startOffset":5459,"endOffset":5602,"count":0},{"startOffset":5622,"endOffset":5677,"count":0},{"startOffset":5679,"endOffset":5832,"count":0}],"isBlockCoverage":true},{"functionName":"normalizeOptions","ranges":[{"startOffset":5880,"endOffset":7563,"count":1},{"startOffset":6217,"endOffset":6240,"count":0},{"startOffset":6352,"endOffset":6375,"count":0}],"isBlockCoverage":true}]},{"scriptId":"723","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/compat-data/corejs2-built-ins.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":59,"count":1}],"isBlockCoverage":true}]},{"scriptId":"724","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/plugins-compat-data.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":824,"count":1},{"startOffset":506,"endOffset":632,"count":42},{"startOffset":685,"endOffset":824,"count":14}],"isBlockCoverage":true}]},{"scriptId":"725","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/compat-data/plugin-bugfixes.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":57,"count":1}],"isBlockCoverage":true}]},{"scriptId":"726","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":972,"count":1}],"isBlockCoverage":true}]},{"scriptId":"727","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/data/shipped-proposals.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1565,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1369,"endOffset":1428,"count":12}],"isBlockCoverage":true}]},{"scriptId":"728","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/compat-data/overlapping-plugins.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":61,"count":1}],"isBlockCoverage":true}]},{"scriptId":"729","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/polyfills/regenerator.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1249,"count":1}],"isBlockCoverage":true},{"functionName":"isRegeneratorSource","ranges":[{"startOffset":143,"endOffset":281,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":283,"endOffset":1249,"count":0}],"isBlockCoverage":false}]},{"scriptId":"730","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/polyfills/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":914,"count":1}],"isBlockCoverage":true},{"functionName":"getImportSource","ranges":[{"startOffset":345,"endOffset":447,"count":0}],"isBlockCoverage":false},{"functionName":"getRequireSource","ranges":[{"startOffset":449,"endOffset":812,"count":0}],"isBlockCoverage":false},{"functionName":"isPolyfillSource","ranges":[{"startOffset":814,"endOffset":914,"count":0}],"isBlockCoverage":false}]},{"scriptId":"731","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/preset-env/lib/polyfills/babel-polyfill.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2256,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":532,"endOffset":2256,"count":0}],"isBlockCoverage":false}]},{"scriptId":"732","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs2/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5707,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":547,"endOffset":733,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":735,"endOffset":1478,"count":1},{"startOffset":817,"endOffset":890,"count":0},{"startOffset":892,"endOffset":988,"count":0},{"startOffset":990,"endOffset":1118,"count":0},{"startOffset":1141,"endOffset":1477,"count":0}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":1480,"endOffset":1575,"count":3},{"startOffset":1548,"endOffset":1553,"count":2},{"startOffset":1554,"endOffset":1572,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1899,"endOffset":5676,"count":0}],"isBlockCoverage":false}]},{"scriptId":"733","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs2/lib/built-in-definitions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11963,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":249,"endOffset":344,"count":1},{"startOffset":317,"endOffset":322,"count":0}],"isBlockCoverage":true},{"functionName":"define","ranges":[{"startOffset":361,"endOffset":456,"count":164}],"isBlockCoverage":true},{"functionName":"pureAndGlobal","ranges":[{"startOffset":481,"endOffset":581,"count":72}],"isBlockCoverage":true},{"functionName":"globalOnly","ranges":[{"startOffset":603,"endOffset":644,"count":74}],"isBlockCoverage":true},{"functionName":"pureOnly","ranges":[{"startOffset":664,"endOffset":702,"count":17}],"isBlockCoverage":true}]},{"scriptId":"734","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs2/lib/add-platform-specific-polyfills.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":915,"count":1}],"isBlockCoverage":true},{"functionName":"_extends","ranges":[{"startOffset":71,"endOffset":388,"count":0}],"isBlockCoverage":false},{"functionName":"_default","ranges":[{"startOffset":582,"endOffset":915,"count":0}],"isBlockCoverage":false}]},{"scriptId":"735","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs2/lib/helpers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1537,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":140,"endOffset":235,"count":1},{"startOffset":208,"endOffset":213,"count":0}],"isBlockCoverage":true},{"functionName":"hasMinVersion","ranges":[{"startOffset":237,"endOffset":1537,"count":0}],"isBlockCoverage":false}]},{"scriptId":"736","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11132,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":662,"endOffset":757,"count":2},{"startOffset":736,"endOffset":754,"count":0}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":759,"endOffset":945,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":947,"endOffset":1690,"count":3},{"startOffset":1029,"endOffset":1102,"count":0},{"startOffset":1104,"endOffset":1200,"count":0},{"startOffset":1202,"endOffset":1330,"count":0},{"startOffset":1353,"endOffset":1689,"count":0}],"isBlockCoverage":true},{"functionName":"_objectWithoutPropertiesLoose","ranges":[{"startOffset":1692,"endOffset":1999,"count":0}],"isBlockCoverage":false},{"functionName":"resolveOptions","ranges":[{"startOffset":2101,"endOffset":4332,"count":0}],"isBlockCoverage":false},{"functionName":"instantiateProvider","ranges":[{"startOffset":4334,"endOffset":7824,"count":0}],"isBlockCoverage":false},{"functionName":"definePolyfillProvider","ranges":[{"startOffset":7826,"endOffset":10967,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7910,"endOffset":10963,"count":0}],"isBlockCoverage":false},{"functionName":"mapGetOr","ranges":[{"startOffset":10969,"endOffset":11132,"count":0}],"isBlockCoverage":false}]},{"scriptId":"737","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5340,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":368,"endOffset":554,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":556,"endOffset":1299,"count":1},{"startOffset":638,"endOffset":711,"count":0},{"startOffset":713,"endOffset":809,"count":0},{"startOffset":811,"endOffset":939,"count":0},{"startOffset":962,"endOffset":1298,"count":0}],"isBlockCoverage":true},{"functionName":"intersection","ranges":[{"startOffset":1361,"endOffset":1482,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":1484,"endOffset":1573,"count":0}],"isBlockCoverage":false},{"functionName":"getType","ranges":[{"startOffset":1575,"endOffset":1665,"count":0}],"isBlockCoverage":false},{"functionName":"resolveId","ranges":[{"startOffset":1667,"endOffset":1939,"count":0}],"isBlockCoverage":false},{"functionName":"resolveKey","ranges":[{"startOffset":1941,"endOffset":2688,"count":0}],"isBlockCoverage":false},{"functionName":"resolveSource","ranges":[{"startOffset":2690,"endOffset":3533,"count":0}],"isBlockCoverage":false},{"functionName":"getImportSource","ranges":[{"startOffset":3535,"endOffset":3637,"count":0}],"isBlockCoverage":false},{"functionName":"getRequireSource","ranges":[{"startOffset":3639,"endOffset":4030,"count":0}],"isBlockCoverage":false},{"functionName":"hoist","ranges":[{"startOffset":4032,"endOffset":4095,"count":0}],"isBlockCoverage":false},{"functionName":"createUtilsGetter","ranges":[{"startOffset":4097,"endOffset":5340,"count":0}],"isBlockCoverage":false}]},{"scriptId":"738","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/imports-cache.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4040,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":131,"endOffset":317,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":319,"endOffset":1062,"count":1},{"startOffset":401,"endOffset":474,"count":0},{"startOffset":476,"endOffset":572,"count":0},{"startOffset":574,"endOffset":702,"count":0},{"startOffset":725,"endOffset":1061,"count":0}],"isBlockCoverage":true},{"functionName":"ImportsCache","ranges":[{"startOffset":1135,"endOffset":1311,"count":0}],"isBlockCoverage":false},{"functionName":"storeAnonymous","ranges":[{"startOffset":1315,"endOffset":1737,"count":0}],"isBlockCoverage":false},{"functionName":"storeNamed","ranges":[{"startOffset":1741,"endOffset":2234,"count":0}],"isBlockCoverage":false},{"functionName":"_injectImport","ranges":[{"startOffset":2238,"endOffset":3419,"count":0}],"isBlockCoverage":false},{"functionName":"_ensure","ranges":[{"startOffset":3423,"endOffset":3640,"count":0}],"isBlockCoverage":false},{"functionName":"_normalizeKey","ranges":[{"startOffset":3644,"endOffset":4004,"count":0}],"isBlockCoverage":false}]},{"scriptId":"739","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/debug-utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":735,"count":1}],"isBlockCoverage":true},{"functionName":"stringifyTargetsMultiline","ranges":[{"startOffset":457,"endOffset":595,"count":0}],"isBlockCoverage":false},{"functionName":"stringifyTargets","ranges":[{"startOffset":597,"endOffset":735,"count":0}],"isBlockCoverage":false}]},{"scriptId":"740","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/normalize-options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2360,"count":1}],"isBlockCoverage":true},{"functionName":"patternToRegExp","ranges":[{"startOffset":211,"endOffset":388,"count":0}],"isBlockCoverage":false},{"functionName":"buildUnusedError","ranges":[{"startOffset":390,"endOffset":609,"count":0}],"isBlockCoverage":false},{"functionName":"buldDuplicatesError","ranges":[{"startOffset":611,"endOffset":846,"count":0}],"isBlockCoverage":false},{"functionName":"validateIncludeExclude","ranges":[{"startOffset":848,"endOffset":1918,"count":0}],"isBlockCoverage":false},{"functionName":"applyMissingDependenciesDefaults","ranges":[{"startOffset":1920,"endOffset":2360,"count":0}],"isBlockCoverage":false}]},{"scriptId":"741","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/visitors/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":360,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":265,"endOffset":360,"count":2},{"startOffset":339,"endOffset":357,"count":0}],"isBlockCoverage":true}]},{"scriptId":"742","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/visitors/usage.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2594,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":119,"endOffset":2564,"count":0}],"isBlockCoverage":false}]},{"scriptId":"743","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/visitors/entry.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":593,"count":1}],"isBlockCoverage":true},{"functionName":"_default","ranges":[{"startOffset":119,"endOffset":563,"count":0}],"isBlockCoverage":false}]},{"scriptId":"744","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/node/dependencies.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2307,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":380,"endOffset":475,"count":3},{"startOffset":448,"endOffset":453,"count":0}],"isBlockCoverage":true},{"functionName":"resolve","ranges":[{"startOffset":587,"endOffset":1327,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":1329,"endOffset":1608,"count":0}],"isBlockCoverage":false},{"functionName":"logMissing","ranges":[{"startOffset":1610,"endOffset":1969,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2060,"endOffset":2129,"count":0}],"isBlockCoverage":false},{"functionName":"laterLogMissing","ranges":[{"startOffset":2138,"endOffset":2307,"count":0}],"isBlockCoverage":false}]},{"scriptId":"745","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/lodash.debounce/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10784,"count":1},{"startOffset":1303,"endOffset":1310,"count":0},{"startOffset":1311,"endOffset":1336,"count":0},{"startOffset":1337,"endOffset":1344,"count":0},{"startOffset":1418,"endOffset":1429,"count":0},{"startOffset":1430,"endOffset":1458,"count":0}],"isBlockCoverage":true},{"functionName":"now","ranges":[{"startOffset":2290,"endOffset":2330,"count":0}],"isBlockCoverage":false},{"functionName":"debounce","ranges":[{"startOffset":4773,"endOffset":8021,"count":1},{"startOffset":5038,"endOffset":5085,"count":0},{"startOffset":5110,"endOffset":5114,"count":0},{"startOffset":5141,"endOffset":5366,"count":0}],"isBlockCoverage":true},{"functionName":"invokeFunc","ranges":[{"startOffset":5370,"endOffset":5578,"count":0}],"isBlockCoverage":false},{"functionName":"leadingEdge","ranges":[{"startOffset":5582,"endOffset":5847,"count":0}],"isBlockCoverage":false},{"functionName":"remainingWait","ranges":[{"startOffset":5851,"endOffset":6110,"count":0}],"isBlockCoverage":false},{"functionName":"shouldInvoke","ranges":[{"startOffset":6114,"endOffset":6619,"count":0}],"isBlockCoverage":false},{"functionName":"timerExpired","ranges":[{"startOffset":6623,"endOffset":6830,"count":0}],"isBlockCoverage":false},{"functionName":"trailingEdge","ranges":[{"startOffset":6834,"endOffset":7119,"count":0}],"isBlockCoverage":false},{"functionName":"cancel","ranges":[{"startOffset":7123,"endOffset":7300,"count":0}],"isBlockCoverage":false},{"functionName":"flush","ranges":[{"startOffset":7304,"endOffset":7391,"count":0}],"isBlockCoverage":false},{"functionName":"debounced","ranges":[{"startOffset":7395,"endOffset":7943,"count":0}],"isBlockCoverage":false},{"functionName":"isObject","ranges":[{"startOffset":8604,"endOffset":8721,"count":1},{"startOffset":8675,"endOffset":8718,"count":0}],"isBlockCoverage":true},{"functionName":"isObjectLike","ranges":[{"startOffset":9220,"endOffset":9298,"count":0}],"isBlockCoverage":false},{"functionName":"isSymbol","ranges":[{"startOffset":9657,"endOffset":9792,"count":0}],"isBlockCoverage":false},{"functionName":"toNumber","ranges":[{"startOffset":10165,"endOffset":10755,"count":1},{"startOffset":10247,"endOffset":10652,"count":0},{"startOffset":10658,"endOffset":10706,"count":0},{"startOffset":10711,"endOffset":10752,"count":0}],"isBlockCoverage":true}]},{"scriptId":"746","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":174,"count":1}],"isBlockCoverage":true}]},{"scriptId":"747","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/async.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11355,"count":1},{"startOffset":371,"endOffset":384,"count":0}],"isBlockCoverage":true},{"functionName":"defaultPaths","ranges":[{"startOffset":434,"endOffset":560,"count":0}],"isBlockCoverage":false},{"functionName":"isFile","ranges":[{"startOffset":583,"endOffset":861,"count":0}],"isBlockCoverage":false},{"functionName":"isDirectory","ranges":[{"startOffset":883,"endOffset":1152,"count":0}],"isBlockCoverage":false},{"functionName":"realpath","ranges":[{"startOffset":1177,"endOffset":1392,"count":0}],"isBlockCoverage":false},{"functionName":"maybeRealpath","ranges":[{"startOffset":1415,"endOffset":1580,"count":0}],"isBlockCoverage":false},{"functionName":"defaultReadPackage","ranges":[{"startOffset":1608,"endOffset":1955,"count":0}],"isBlockCoverage":false},{"functionName":"getPackageCandidates","ranges":[{"startOffset":1985,"endOffset":2191,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":2211,"endOffset":11353,"count":0}],"isBlockCoverage":false}]},{"scriptId":"748","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/homedir.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":805,"count":1},{"startOffset":183,"endOffset":803,"count":0}],"isBlockCoverage":true},{"functionName":"homedir","ranges":[{"startOffset":186,"endOffset":803,"count":0}],"isBlockCoverage":false}]},{"scriptId":"749","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/caller.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":354,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":17,"endOffset":352,"count":0}],"isBlockCoverage":false}]},{"scriptId":"750","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/node-modules-paths.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1294,"count":1},{"startOffset":51,"endOffset":75,"count":0}],"isBlockCoverage":true},{"functionName":"getNodeModulesDirs","ranges":[{"startOffset":141,"endOffset":762,"count":0}],"isBlockCoverage":false},{"functionName":"nodeModulesPaths","ranges":[{"startOffset":782,"endOffset":1292,"count":0}],"isBlockCoverage":false}]},{"scriptId":"751","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/normalize-options.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":348,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":17,"endOffset":346,"count":0}],"isBlockCoverage":false}]},{"scriptId":"752","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/is-core-module/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1757,"count":1}],"isBlockCoverage":true},{"functionName":"specifierIncluded","ranges":[{"startOffset":42,"endOffset":634,"count":0}],"isBlockCoverage":false},{"functionName":"matchesRange","ranges":[{"startOffset":636,"endOffset":906,"count":0}],"isBlockCoverage":false},{"functionName":"versionIncluded","ranges":[{"startOffset":908,"endOffset":1602,"count":0}],"isBlockCoverage":false},{"functionName":"isCore","ranges":[{"startOffset":1657,"endOffset":1755,"count":0}],"isBlockCoverage":false}]},{"scriptId":"753","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/has/src/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":129,"count":1}],"isBlockCoverage":true}]},{"scriptId":"754","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/function-bind/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":126,"count":1},{"startOffset":107,"endOffset":124,"count":0}],"isBlockCoverage":true}]},{"scriptId":"755","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/function-bind/implementation.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1463,"count":1}],"isBlockCoverage":true},{"functionName":"bind","ranges":[{"startOffset":247,"endOffset":1461,"count":0}],"isBlockCoverage":false}]},{"scriptId":"756","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/core.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1653,"count":1},{"startOffset":94,"endOffset":99,"count":0},{"startOffset":1469,"endOffset":1629,"count":150}],"isBlockCoverage":true},{"functionName":"specifierIncluded","ranges":[{"startOffset":102,"endOffset":742,"count":268},{"startOffset":221,"endOffset":226,"count":0},{"startOffset":280,"endOffset":290,"count":0},{"startOffset":337,"endOffset":716,"count":335},{"startOffset":377,"endOffset":381,"count":0},{"startOffset":431,"endOffset":435,"count":63},{"startOffset":467,"endOffset":557,"count":67},{"startOffset":557,"endOffset":582,"count":268},{"startOffset":582,"endOffset":623,"count":83},{"startOffset":623,"endOffset":688,"count":185},{"startOffset":688,"endOffset":716,"count":0},{"startOffset":716,"endOffset":741,"count":0}],"isBlockCoverage":true},{"functionName":"matchesRange","ranges":[{"startOffset":744,"endOffset":1009,"count":188},{"startOffset":852,"endOffset":869,"count":0},{"startOffset":918,"endOffset":990,"count":268},{"startOffset":967,"endOffset":984,"count":85},{"startOffset":990,"endOffset":1008,"count":103}],"isBlockCoverage":true},{"functionName":"versionIncluded","ranges":[{"startOffset":1011,"endOffset":1394,"count":150},{"startOffset":1099,"endOffset":1125,"count":27},{"startOffset":1125,"endOffset":1186,"count":123},{"startOffset":1188,"endOffset":1351,"count":65},{"startOffset":1246,"endOffset":1323,"count":130},{"startOffset":1297,"endOffset":1313,"count":59},{"startOffset":1323,"endOffset":1351,"count":6},{"startOffset":1351,"endOffset":1393,"count":58}],"isBlockCoverage":true}]},{"scriptId":"757","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/is-core.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":116,"count":1}],"isBlockCoverage":true},{"functionName":"isCore","ranges":[{"startOffset":64,"endOffset":114,"count":0}],"isBlockCoverage":false}]},{"scriptId":"758","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/resolve/lib/sync.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6989,"count":1},{"startOffset":383,"endOffset":400,"count":0}],"isBlockCoverage":true},{"functionName":"defaultPaths","ranges":[{"startOffset":450,"endOffset":576,"count":0}],"isBlockCoverage":false},{"functionName":"isFile","ranges":[{"startOffset":599,"endOffset":873,"count":0}],"isBlockCoverage":false},{"functionName":"isDirectory","ranges":[{"startOffset":895,"endOffset":1158,"count":0}],"isBlockCoverage":false},{"functionName":"realpathSync","ranges":[{"startOffset":1187,"endOffset":1389,"count":0}],"isBlockCoverage":false},{"functionName":"maybeRealpathSync","ranges":[{"startOffset":1416,"endOffset":1572,"count":0}],"isBlockCoverage":false},{"functionName":"defaultReadPackageSync","ranges":[{"startOffset":1604,"endOffset":1791,"count":0}],"isBlockCoverage":false},{"functionName":"getPackageCandidates","ranges":[{"startOffset":1821,"endOffset":2027,"count":0}],"isBlockCoverage":false},{"functionName":"resolveSync","ranges":[{"startOffset":2047,"endOffset":6987,"count":0}],"isBlockCoverage":false}]},{"scriptId":"759","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-define-polyfill-provider/lib/meta-resolver.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1396,"count":1}],"isBlockCoverage":true},{"functionName":"createMetaResolver","ranges":[{"startOffset":199,"endOffset":1396,"count":0}],"isBlockCoverage":false}]},{"scriptId":"760","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10348,"count":1}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":627,"endOffset":813,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":815,"endOffset":1558,"count":1},{"startOffset":897,"endOffset":970,"count":0},{"startOffset":972,"endOffset":1068,"count":0},{"startOffset":1070,"endOffset":1198,"count":0},{"startOffset":1221,"endOffset":1557,"count":0}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":1560,"endOffset":1655,"count":4},{"startOffset":1628,"endOffset":1633,"count":2},{"startOffset":1634,"endOffset":1652,"count":2}],"isBlockCoverage":true},{"functionName":"_extends","ranges":[{"startOffset":1657,"endOffset":1974,"count":0}],"isBlockCoverage":false},{"functionName":"esnextFallback","ranges":[{"startOffset":2117,"endOffset":2323,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2384,"endOffset":10317,"count":0}],"isBlockCoverage":false}]},{"scriptId":"761","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/data.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":49,"count":1}],"isBlockCoverage":true}]},{"scriptId":"762","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/lib/shipped-proposals.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":337,"count":1}],"isBlockCoverage":true}]},{"scriptId":"763","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/get-modules-list-for-target-version.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":80,"count":1}],"isBlockCoverage":true}]},{"scriptId":"764","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/get-modules-list-for-target-version.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":584,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":194,"endOffset":582,"count":0}],"isBlockCoverage":false}]},{"scriptId":"765","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/helpers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":965,"count":1}],"isBlockCoverage":true},{"functionName":"compare","ranges":[{"startOffset":163,"endOffset":245,"count":0}],"isBlockCoverage":false},{"functionName":"filterOutStabilizedProposals","ranges":[{"startOffset":247,"endOffset":542,"count":0}],"isBlockCoverage":false},{"functionName":"intersection","ranges":[{"startOffset":544,"endOffset":686,"count":0}],"isBlockCoverage":false},{"functionName":"sortObjectByKey","ranges":[{"startOffset":688,"endOffset":846,"count":0}],"isBlockCoverage":false}]},{"scriptId":"766","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/cmp.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":907,"count":1}],"isBlockCoverage":true},{"functionName":"cmp","ranges":[{"startOffset":181,"endOffset":885,"count":0}],"isBlockCoverage":false}]},{"scriptId":"767","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/eq.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":112,"count":1}],"isBlockCoverage":true},{"functionName":"eq","ranges":[{"startOffset":48,"endOffset":91,"count":0}],"isBlockCoverage":false}]},{"scriptId":"768","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/compare.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":156,"count":1}],"isBlockCoverage":true},{"functionName":"compare","ranges":[{"startOffset":60,"endOffset":129,"count":0}],"isBlockCoverage":false}]},{"scriptId":"769","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/classes/semver.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8032,"count":1}],"isBlockCoverage":true},{"functionName":"SemVer","ranges":[{"startOffset":245,"endOffset":2240,"count":0}],"isBlockCoverage":false},{"functionName":"format","ranges":[{"startOffset":2244,"endOffset":2440,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":2444,"endOffset":2485,"count":0}],"isBlockCoverage":false},{"functionName":"compare","ranges":[{"startOffset":2489,"endOffset":2879,"count":0}],"isBlockCoverage":false},{"functionName":"compareMain","ranges":[{"startOffset":2883,"endOffset":3174,"count":0}],"isBlockCoverage":false},{"functionName":"comparePre","ranges":[{"startOffset":3178,"endOffset":4029,"count":0}],"isBlockCoverage":false},{"functionName":"compareBuild","ranges":[{"startOffset":4033,"endOffset":4575,"count":0}],"isBlockCoverage":false},{"functionName":"inc","ranges":[{"startOffset":4728,"endOffset":8004,"count":0}],"isBlockCoverage":false}]},{"scriptId":"770","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/internal/debug.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":226,"count":1},{"startOffset":91,"endOffset":138,"count":0},{"startOffset":141,"endOffset":188,"count":0}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":143,"endOffset":188,"count":0}],"isBlockCoverage":false},{"functionName":"debug","ranges":[{"startOffset":193,"endOffset":201,"count":38}],"isBlockCoverage":true}]},{"scriptId":"771","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/internal/constants.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":468,"count":1},{"startOffset":233,"endOffset":281,"count":0}],"isBlockCoverage":true}]},{"scriptId":"772","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/internal/re.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6537,"count":1}],"isBlockCoverage":true},{"functionName":"createToken","ranges":[{"startOffset":276,"endOffset":447,"count":38},{"startOffset":427,"endOffset":432,"count":4},{"startOffset":433,"endOffset":444,"count":34}],"isBlockCoverage":true}]},{"scriptId":"773","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/internal/identifiers.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":409,"count":1}],"isBlockCoverage":true},{"functionName":"compareIdentifiers","ranges":[{"startOffset":54,"endOffset":278,"count":0}],"isBlockCoverage":false},{"functionName":"rcompareIdentifiers","ranges":[{"startOffset":308,"endOffset":342,"count":0}],"isBlockCoverage":false}]},{"scriptId":"774","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/neq.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":114,"count":1}],"isBlockCoverage":true},{"functionName":"neq","ranges":[{"startOffset":49,"endOffset":92,"count":0}],"isBlockCoverage":false}]},{"scriptId":"775","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/gt.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":110,"count":1}],"isBlockCoverage":true},{"functionName":"gt","ranges":[{"startOffset":48,"endOffset":89,"count":0}],"isBlockCoverage":false}]},{"scriptId":"776","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/gte.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":113,"count":1}],"isBlockCoverage":true},{"functionName":"gte","ranges":[{"startOffset":49,"endOffset":91,"count":0}],"isBlockCoverage":false}]},{"scriptId":"777","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/lt.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":110,"count":1}],"isBlockCoverage":true},{"functionName":"lt","ranges":[{"startOffset":48,"endOffset":89,"count":0}],"isBlockCoverage":false}]},{"scriptId":"778","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/lte.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":113,"count":1}],"isBlockCoverage":true},{"functionName":"lte","ranges":[{"startOffset":49,"endOffset":91,"count":0}],"isBlockCoverage":false}]},{"scriptId":"779","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/coerce.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1497,"count":1}],"isBlockCoverage":true},{"functionName":"coerce","ranges":[{"startOffset":135,"endOffset":1472,"count":0}],"isBlockCoverage":false}]},{"scriptId":"780","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/core-js-compat/node_modules/semver/functions/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":698,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":157,"endOffset":673,"count":0}],"isBlockCoverage":false}]},{"scriptId":"781","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/lib/built-in-definitions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":27467,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":337,"endOffset":432,"count":1},{"startOffset":405,"endOffset":410,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":496,"endOffset":548,"count":396}],"isBlockCoverage":true},{"functionName":"define","ranges":[{"startOffset":567,"endOffset":737,"count":293}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":669,"endOffset":716,"count":1716}],"isBlockCoverage":true},{"functionName":"typed","ranges":[{"startOffset":754,"endOffset":809,"count":9}],"isBlockCoverage":true}]},{"scriptId":"782","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2417,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":342,"endOffset":437,"count":1},{"startOffset":410,"endOffset":415,"count":0}],"isBlockCoverage":true},{"functionName":"_getRequireWildcardCache","ranges":[{"startOffset":439,"endOffset":625,"count":0}],"isBlockCoverage":false},{"functionName":"_interopRequireWildcard","ranges":[{"startOffset":627,"endOffset":1370,"count":1},{"startOffset":709,"endOffset":782,"count":0},{"startOffset":784,"endOffset":880,"count":0},{"startOffset":882,"endOffset":1010,"count":0},{"startOffset":1033,"endOffset":1369,"count":0}],"isBlockCoverage":true},{"functionName":"callMethod","ranges":[{"startOffset":1420,"endOffset":1923,"count":0}],"isBlockCoverage":false},{"functionName":"isCoreJSSource","ranges":[{"startOffset":1925,"endOffset":2178,"count":0}],"isBlockCoverage":false},{"functionName":"coreJSModule","ranges":[{"startOffset":2180,"endOffset":2250,"count":0}],"isBlockCoverage":false},{"functionName":"coreJSPureHelper","ranges":[{"startOffset":2252,"endOffset":2417,"count":0}],"isBlockCoverage":false}]},{"scriptId":"783","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-corejs3/core-js-compat/entries.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":52,"count":1}],"isBlockCoverage":true}]},{"scriptId":"784","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/babel-plugin-polyfill-regenerator/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1173,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":181,"endOffset":276,"count":1},{"startOffset":255,"endOffset":273,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":407,"endOffset":1049,"count":0}],"isBlockCoverage":false},{"functionName":"isRegenerator","ranges":[{"startOffset":1104,"endOffset":1172,"count":0}],"isBlockCoverage":false}]},{"scriptId":"785","url":"node:worker_threads","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":686,"count":1}],"isBlockCoverage":false}]},{"scriptId":"786","url":"node:internal/worker","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15348,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2212,"endOffset":2237,"count":0}],"isBlockCoverage":false},{"functionName":"process.chdir","ranges":[{"startOffset":2433,"endOffset":2513,"count":0}],"isBlockCoverage":false},{"functionName":"setEnvironmentData","ranges":[{"startOffset":2518,"endOffset":2665,"count":0}],"isBlockCoverage":false},{"functionName":"getEnvironmentData","ranges":[{"startOffset":2667,"endOffset":2738,"count":0}],"isBlockCoverage":false},{"functionName":"assignEnvironmentData","ranges":[{"startOffset":2740,"endOffset":2890,"count":0}],"isBlockCoverage":false},{"functionName":"Worker","ranges":[{"startOffset":2930,"endOffset":7962,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7966,"endOffset":8598,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8602,"endOffset":8698,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8702,"endOffset":8871,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8875,"endOffset":9768,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9772,"endOffset":10240,"count":0}],"isBlockCoverage":false},{"functionName":"postMessage","ranges":[{"startOffset":10244,"endOffset":10389,"count":0}],"isBlockCoverage":false},{"functionName":"terminate","ranges":[{"startOffset":10393,"endOffset":11227,"count":0}],"isBlockCoverage":false},{"functionName":"ref","ranges":[{"startOffset":11231,"endOffset":11337,"count":0}],"isBlockCoverage":false},{"functionName":"unref","ranges":[{"startOffset":11341,"endOffset":11453,"count":0}],"isBlockCoverage":false},{"functionName":"get threadId","ranges":[{"startOffset":11457,"endOffset":11556,"count":0}],"isBlockCoverage":false},{"functionName":"get stdin","ranges":[{"startOffset":11560,"endOffset":11618,"count":0}],"isBlockCoverage":false},{"functionName":"get stdout","ranges":[{"startOffset":11622,"endOffset":11682,"count":0}],"isBlockCoverage":false},{"functionName":"get stderr","ranges":[{"startOffset":11686,"endOffset":11746,"count":0}],"isBlockCoverage":false},{"functionName":"get resourceLimits","ranges":[{"startOffset":11750,"endOffset":11886,"count":0}],"isBlockCoverage":false},{"functionName":"getHeapSnapshot","ranges":[{"startOffset":11890,"endOffset":12299,"count":0}],"isBlockCoverage":false},{"functionName":"pipeWithoutWarning","ranges":[{"startOffset":12303,"endOffset":12625,"count":0}],"isBlockCoverage":false},{"functionName":"parseResourceLimits","ranges":[{"startOffset":12699,"endOffset":13313,"count":0}],"isBlockCoverage":false},{"functionName":"makeResourceLimits","ranges":[{"startOffset":13315,"endOffset":13601,"count":0}],"isBlockCoverage":false},{"functionName":"eventLoopUtilization","ranges":[{"startOffset":13603,"endOffset":15102,"count":0}],"isBlockCoverage":false}]},{"scriptId":"787","url":"node:internal/error_serdes","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4174,"count":1}],"isBlockCoverage":false},{"functionName":"TryGetAllProperties","ranges":[{"startOffset":692,"endOffset":1539,"count":0}],"isBlockCoverage":false},{"functionName":"GetConstructors","ranges":[{"startOffset":1541,"endOffset":1958,"count":0}],"isBlockCoverage":false},{"functionName":"GetName","ranges":[{"startOffset":1960,"endOffset":2080,"count":0}],"isBlockCoverage":false},{"functionName":"inspect","ranges":[{"startOffset":2107,"endOffset":2277,"count":0}],"isBlockCoverage":false},{"functionName":"serializeError","ranges":[{"startOffset":2294,"endOffset":3278,"count":0}],"isBlockCoverage":false},{"functionName":"deserializeError","ranges":[{"startOffset":3297,"endOffset":4117,"count":0}],"isBlockCoverage":false}]},{"scriptId":"788","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/test/app.test.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1330,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":66,"endOffset":251,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":105,"endOffset":247,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":176,"endOffset":241,"count":1}],"isBlockCoverage":true}]},{"scriptId":"789","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/test/user.test.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7631,"count":1}],"isBlockCoverage":true},{"functionName":"_interopRequireDefault","ranges":[{"startOffset":190,"endOffset":285,"count":3},{"startOffset":258,"endOffset":263,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":455,"endOffset":1940,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":537,"endOffset":1270,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":918,"endOffset":1264,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1380,"endOffset":1936,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1686,"endOffset":1930,"count":1}],"isBlockCoverage":true}]},{"scriptId":"790","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":40,"count":1}],"isBlockCoverage":true}]},{"scriptId":"791","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1258,"count":1}],"isBlockCoverage":true},{"functionName":"exports.use","ranges":[{"startOffset":497,"endOffset":607,"count":6}],"isBlockCoverage":true}]},{"scriptId":"792","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/assertion-error/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2429,"count":1}],"isBlockCoverage":true},{"functionName":"exclude","ranges":[{"startOffset":328,"endOffset":754,"count":0}],"isBlockCoverage":false},{"functionName":"AssertionError","ranges":[{"startOffset":1083,"endOffset":1666,"count":0}],"isBlockCoverage":false},{"functionName":"AssertionError.toJSON","ranges":[{"startOffset":2162,"endOffset":2427,"count":0}],"isBlockCoverage":false}]},{"scriptId":"793","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2540,"count":1}],"isBlockCoverage":true}]},{"scriptId":"794","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/pathval/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7808,"count":1}],"isBlockCoverage":true},{"functionName":"hasProperty","ranges":[{"startOffset":1145,"endOffset":1339,"count":5},{"startOffset":1229,"endOffset":1252,"count":0}],"isBlockCoverage":true},{"functionName":"parsePath","ranges":[{"startOffset":1827,"endOffset":2379,"count":0}],"isBlockCoverage":false},{"functionName":"internalGetPathValue","ranges":[{"startOffset":2832,"endOffset":3365,"count":0}],"isBlockCoverage":false},{"functionName":"internalSetPathValue","ranges":[{"startOffset":3727,"endOffset":5011,"count":0}],"isBlockCoverage":false},{"functionName":"getPathInfo","ranges":[{"startOffset":5630,"endOffset":6014,"count":0}],"isBlockCoverage":false},{"functionName":"getPathValue","ranges":[{"startOffset":6735,"endOffset":6829,"count":0}],"isBlockCoverage":false},{"functionName":"setPathValue","ranges":[{"startOffset":7539,"endOffset":7668,"count":0}],"isBlockCoverage":false}]},{"scriptId":"795","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/test.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":541,"count":1}],"isBlockCoverage":true},{"functionName":"test","ranges":[{"startOffset":422,"endOffset":539,"count":15},{"startOffset":522,"endOffset":529,"count":0}],"isBlockCoverage":true}]},{"scriptId":"796","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/flag.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":812,"count":1}],"isBlockCoverage":true},{"functionName":"flag","ranges":[{"startOffset":616,"endOffset":810,"count":273},{"startOffset":675,"endOffset":713,"count":32},{"startOffset":745,"endOffset":774,"count":168},{"startOffset":774,"endOffset":808,"count":105}],"isBlockCoverage":true}]},{"scriptId":"797","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/type-detect/type-detect.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15484,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":222,"count":1},{"startOffset":121,"endOffset":219,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":230,"endOffset":15479,"count":1},{"startOffset":483,"endOffset":489,"count":0}],"isBlockCoverage":true},{"functionName":"typeDetect","ranges":[{"startOffset":2073,"endOffset":15456,"count":2},{"startOffset":2928,"endOffset":2955,"count":0},{"startOffset":3174,"endOffset":3198,"count":0},{"startOffset":3906,"endOffset":3932,"count":0},{"startOffset":4160,"endOffset":4234,"count":0},{"startOffset":4239,"endOffset":4264,"count":0},{"startOffset":4452,"endOffset":4470,"count":0},{"startOffset":4472,"endOffset":9159,"count":0},{"startOffset":10579,"endOffset":10606,"count":0},{"startOffset":11028,"endOffset":11054,"count":0},{"startOffset":11285,"endOffset":11309,"count":0},{"startOffset":11819,"endOffset":11846,"count":0},{"startOffset":12089,"endOffset":12112,"count":0},{"startOffset":12355,"endOffset":12378,"count":0},{"startOffset":12629,"endOffset":12656,"count":0},{"startOffset":12907,"endOffset":12934,"count":0},{"startOffset":13325,"endOffset":13353,"count":0},{"startOffset":13741,"endOffset":13773,"count":0},{"startOffset":14161,"endOffset":14193,"count":0},{"startOffset":14601,"endOffset":14635,"count":0},{"startOffset":15048,"endOffset":15083,"count":0},{"startOffset":15304,"endOffset":15330,"count":0}],"isBlockCoverage":true}]},{"scriptId":"798","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/expectTypes.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1433,"count":1}],"isBlockCoverage":true},{"functionName":"expectTypes","ranges":[{"startOffset":597,"endOffset":1431,"count":0}],"isBlockCoverage":false}]},{"scriptId":"799","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/getMessage.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1370,"count":1}],"isBlockCoverage":true},{"functionName":"getMessage","ranges":[{"startOffset":793,"endOffset":1368,"count":0}],"isBlockCoverage":false}]},{"scriptId":"800","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/getActual.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":467,"count":1}],"isBlockCoverage":true},{"functionName":"getActual","ranges":[{"startOffset":385,"endOffset":465,"count":0}],"isBlockCoverage":false}]},{"scriptId":"801","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/objDisplay.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1226,"count":1}],"isBlockCoverage":true},{"functionName":"objDisplay","ranges":[{"startOffset":505,"endOffset":1224,"count":0}],"isBlockCoverage":false}]},{"scriptId":"802","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/inspect.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1152,"count":1}],"isBlockCoverage":true},{"functionName":"inspect","ranges":[{"startOffset":857,"endOffset":1151,"count":10},{"startOffset":991,"endOffset":998,"count":0},{"startOffset":1095,"endOffset":1105,"count":0}],"isBlockCoverage":true}]},{"scriptId":"803","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/get-func-name/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1123,"count":1}],"isBlockCoverage":true},{"functionName":"getFuncName","ranges":[{"startOffset":563,"endOffset":1091,"count":0}],"isBlockCoverage":false}]},{"scriptId":"804","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/loupe/loupe.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":27258,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1,"endOffset":299,"count":1},{"startOffset":112,"endOffset":296,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":307,"endOffset":27253,"count":1},{"startOffset":14041,"endOffset":14082,"count":0},{"startOffset":16801,"endOffset":17314,"count":0},{"startOffset":18424,"endOffset":18431,"count":0},{"startOffset":21717,"endOffset":21735,"count":0},{"startOffset":21918,"endOffset":21925,"count":0},{"startOffset":21931,"endOffset":21983,"count":0}],"isBlockCoverage":true},{"functionName":"_typeof","ranges":[{"startOffset":345,"endOffset":773,"count":1},{"startOffset":554,"endOffset":743,"count":0}],"isBlockCoverage":true},{"functionName":"_typeof","ranges":[{"startOffset":496,"endOffset":547,"count":10}],"isBlockCoverage":true},{"functionName":"_typeof","ranges":[{"startOffset":578,"endOffset":736,"count":0}],"isBlockCoverage":false},{"functionName":"_slicedToArray","ranges":[{"startOffset":777,"endOffset":941,"count":0}],"isBlockCoverage":false},{"functionName":"_arrayWithHoles","ranges":[{"startOffset":945,"endOffset":1020,"count":0}],"isBlockCoverage":false},{"functionName":"_iterableToArrayLimit","ranges":[{"startOffset":1024,"endOffset":1632,"count":0}],"isBlockCoverage":false},{"functionName":"_unsupportedIterableToArray","ranges":[{"startOffset":1636,"endOffset":2078,"count":0}],"isBlockCoverage":false},{"functionName":"_arrayLikeToArray","ranges":[{"startOffset":2082,"endOffset":2277,"count":0}],"isBlockCoverage":false},{"functionName":"_nonIterableRest","ranges":[{"startOffset":2281,"endOffset":2480,"count":0}],"isBlockCoverage":false},{"functionName":"colorise","ranges":[{"startOffset":3506,"endOffset":3768,"count":0}],"isBlockCoverage":false},{"functionName":"normaliseOptions","ranges":[{"startOffset":3772,"endOffset":5466,"count":10},{"startOffset":3883,"endOffset":3887,"count":0},{"startOffset":3988,"endOffset":4005,"count":0},{"startOffset":4078,"endOffset":4081,"count":0},{"startOffset":4179,"endOffset":4192,"count":0},{"startOffset":4304,"endOffset":4324,"count":0},{"startOffset":4421,"endOffset":4437,"count":0},{"startOffset":4557,"endOffset":4578,"count":0},{"startOffset":4686,"endOffset":4704,"count":0},{"startOffset":4778,"endOffset":4789,"count":0},{"startOffset":4874,"endOffset":4884,"count":0},{"startOffset":4990,"endOffset":5004,"count":0},{"startOffset":5400,"endOffset":5441,"count":0}],"isBlockCoverage":true},{"functionName":"truncate","ranges":[{"startOffset":5469,"endOffset":5953,"count":10},{"startOffset":5541,"endOffset":5570,"count":0},{"startOffset":5571,"endOffset":5585,"count":0},{"startOffset":5729,"endOffset":5757,"count":0},{"startOffset":5759,"endOffset":5785,"count":0},{"startOffset":5817,"endOffset":5845,"count":0},{"startOffset":5847,"endOffset":5929,"count":0}],"isBlockCoverage":true},{"functionName":"inspectList","ranges":[{"startOffset":5996,"endOffset":8293,"count":0}],"isBlockCoverage":false},{"functionName":"quoteComplexKey","ranges":[{"startOffset":8297,"endOffset":8505,"count":0}],"isBlockCoverage":false},{"functionName":"inspectProperty","ranges":[{"startOffset":8509,"endOffset":8982,"count":0}],"isBlockCoverage":false},{"functionName":"inspectArray","ranges":[{"startOffset":8986,"endOffset":9750,"count":0}],"isBlockCoverage":false},{"functionName":"getFuncName","ranges":[{"startOffset":10340,"endOffset":10900,"count":0}],"isBlockCoverage":false},{"functionName":"getArrayName","ranges":[{"startOffset":10959,"endOffset":11298,"count":0}],"isBlockCoverage":false},{"functionName":"inspectTypedArray","ranges":[{"startOffset":11303,"endOffset":12648,"count":0}],"isBlockCoverage":false},{"functionName":"inspectDate","ranges":[{"startOffset":12652,"endOffset":12962,"count":0}],"isBlockCoverage":false},{"functionName":"inspectFunction","ranges":[{"startOffset":12966,"endOffset":13231,"count":0}],"isBlockCoverage":false},{"functionName":"inspectMapEntry","ranges":[{"startOffset":13235,"endOffset":13570,"count":0}],"isBlockCoverage":false},{"functionName":"mapToEntries","ranges":[{"startOffset":13615,"endOffset":13771,"count":0}],"isBlockCoverage":false},{"functionName":"inspectMap","ranges":[{"startOffset":13775,"endOffset":14012,"count":0}],"isBlockCoverage":false},{"functionName":"isNaN","ranges":[{"startOffset":14044,"endOffset":14082,"count":0}],"isBlockCoverage":false},{"functionName":"inspectNumber","ranges":[{"startOffset":14127,"endOffset":14617,"count":0}],"isBlockCoverage":false},{"functionName":"inspectBigInt","ranges":[{"startOffset":14621,"endOffset":14817,"count":0}],"isBlockCoverage":false},{"functionName":"inspectRegExp","ranges":[{"startOffset":14821,"endOffset":15107,"count":0}],"isBlockCoverage":false},{"functionName":"arrayFromSet","ranges":[{"startOffset":15111,"endOffset":15252,"count":0}],"isBlockCoverage":false},{"functionName":"inspectSet","ranges":[{"startOffset":15256,"endOffset":15436,"count":0}],"isBlockCoverage":false},{"functionName":"escape","ranges":[{"startOffset":15827,"endOffset":15976,"count":0}],"isBlockCoverage":false},{"functionName":"inspectString","ranges":[{"startOffset":15980,"endOffset":16227,"count":10},{"startOffset":16062,"endOffset":16127,"count":0}],"isBlockCoverage":true},{"functionName":"inspectSymbol","ranges":[{"startOffset":16231,"endOffset":16435,"count":0}],"isBlockCoverage":false},{"functionName":"getPromiseValue","ranges":[{"startOffset":16461,"endOffset":16518,"count":0}],"isBlockCoverage":false},{"functionName":"getPromiseValue","ranges":[{"startOffset":16827,"endOffset":17307,"count":0}],"isBlockCoverage":false},{"functionName":"inspectObject","ranges":[{"startOffset":17402,"endOffset":18329,"count":0}],"isBlockCoverage":false},{"functionName":"inspectClass","ranges":[{"startOffset":18435,"endOffset":18880,"count":0}],"isBlockCoverage":false},{"functionName":"inspectArguments","ranges":[{"startOffset":18884,"endOffset":19074,"count":0}],"isBlockCoverage":false},{"functionName":"inspectObject$1","ranges":[{"startOffset":19211,"endOffset":19982,"count":0}],"isBlockCoverage":false},{"functionName":"inspectAttribute","ranges":[{"startOffset":19986,"endOffset":20352,"count":0}],"isBlockCoverage":false},{"functionName":"inspectHTMLCollection","ranges":[{"startOffset":20355,"endOffset":20529,"count":0}],"isBlockCoverage":false},{"functionName":"inspectHTML","ranges":[{"startOffset":20532,"endOffset":21558,"count":0}],"isBlockCoverage":false},{"functionName":"undefined$1","ranges":[{"startOffset":22086,"endOffset":22186,"count":0}],"isBlockCoverage":false},{"functionName":"_null","ranges":[{"startOffset":22198,"endOffset":22280,"count":0}],"isBlockCoverage":false},{"functionName":"boolean","ranges":[{"startOffset":22295,"endOffset":22383,"count":0}],"isBlockCoverage":false},{"functionName":"Boolean","ranges":[{"startOffset":22398,"endOffset":22486,"count":0}],"isBlockCoverage":false},{"functionName":"WeakSet","ranges":[{"startOffset":23049,"endOffset":23144,"count":0}],"isBlockCoverage":false},{"functionName":"WeakMap","ranges":[{"startOffset":23159,"endOffset":23254,"count":0}],"isBlockCoverage":false},{"functionName":"Generator","ranges":[{"startOffset":23631,"endOffset":23676,"count":0}],"isBlockCoverage":false},{"functionName":"DataView","ranges":[{"startOffset":23692,"endOffset":23736,"count":0}],"isBlockCoverage":false},{"functionName":"ArrayBuffer","ranges":[{"startOffset":23755,"endOffset":23802,"count":0}],"isBlockCoverage":false},{"functionName":"inspectCustom","ranges":[{"startOffset":23978,"endOffset":24687,"count":0}],"isBlockCoverage":false},{"functionName":"inspect","ranges":[{"startOffset":24778,"endOffset":26593,"count":10},{"startOffset":24991,"endOffset":24999,"count":0},{"startOffset":25046,"endOffset":25103,"count":0},{"startOffset":25267,"endOffset":25382,"count":0},{"startOffset":25384,"endOffset":25626,"count":0},{"startOffset":25627,"endOffset":25634,"count":0},{"startOffset":25725,"endOffset":25742,"count":0},{"startOffset":25744,"endOffset":25930,"count":0},{"startOffset":25931,"endOffset":25962,"count":0},{"startOffset":25964,"endOffset":26592,"count":0}],"isBlockCoverage":true},{"functionName":"registerConstructor","ranges":[{"startOffset":26596,"endOffset":26789,"count":0}],"isBlockCoverage":false},{"functionName":"registerStringTag","ranges":[{"startOffset":26792,"endOffset":26968,"count":0}],"isBlockCoverage":false}]},{"scriptId":"805","url":"node:internal/legacy/processbinding","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":816,"count":1}],"isBlockCoverage":false},{"functionName":"util","ranges":[{"startOffset":205,"endOffset":812,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":321,"endOffset":804,"count":42}],"isBlockCoverage":true}]},{"scriptId":"806","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/config.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2937,"count":1}],"isBlockCoverage":true}]},{"scriptId":"807","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/transferFlags.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1361,"count":1}],"isBlockCoverage":true},{"functionName":"transferFlags","ranges":[{"startOffset":895,"endOffset":1359,"count":24},{"startOffset":983,"endOffset":1027,"count":0},{"startOffset":1053,"endOffset":1100,"count":0},{"startOffset":1140,"endOffset":1152,"count":0},{"startOffset":1188,"endOffset":1357,"count":96},{"startOffset":1209,"endOffset":1302,"count":0}],"isBlockCoverage":true}]},{"scriptId":"808","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/deep-eql/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":14910,"count":1},{"startOffset":628,"endOffset":637,"count":0}],"isBlockCoverage":true},{"functionName":"FakeMap","ranges":[{"startOffset":207,"endOffset":291,"count":0}],"isBlockCoverage":false},{"functionName":"getMap","ranges":[{"startOffset":322,"endOffset":375,"count":0}],"isBlockCoverage":false},{"functionName":"setMap","ranges":[{"startOffset":384,"endOffset":565,"count":0}],"isBlockCoverage":false},{"functionName":"memoizeCompare","ranges":[{"startOffset":862,"endOffset":1324,"count":0}],"isBlockCoverage":false},{"functionName":"memoizeSet","ranges":[{"startOffset":1520,"endOffset":2039,"count":0}],"isBlockCoverage":false},{"functionName":"deepEqual","ranges":[{"startOffset":2757,"endOffset":3293,"count":0}],"isBlockCoverage":false},{"functionName":"simpleEqual","ranges":[{"startOffset":3497,"endOffset":4314,"count":0}],"isBlockCoverage":false},{"functionName":"extensiveDeepEqual","ranges":[{"startOffset":4906,"endOffset":6894,"count":0}],"isBlockCoverage":false},{"functionName":"extensiveDeepEqualByType","ranges":[{"startOffset":6896,"endOffset":8482,"count":0}],"isBlockCoverage":false},{"functionName":"regexpEqual","ranges":[{"startOffset":8644,"endOffset":8772,"count":0}],"isBlockCoverage":false},{"functionName":"entriesEqual","ranges":[{"startOffset":8996,"endOffset":9655,"count":0}],"isBlockCoverage":false},{"functionName":"iterableEqual","ranges":[{"startOffset":9905,"endOffset":10304,"count":0}],"isBlockCoverage":false},{"functionName":"generatorEqual","ranges":[{"startOffset":10549,"endOffset":10730,"count":0}],"isBlockCoverage":false},{"functionName":"hasIteratorFunction","ranges":[{"startOffset":10900,"endOffset":11113,"count":0}],"isBlockCoverage":false},{"functionName":"getIteratorEntries","ranges":[{"startOffset":11449,"endOffset":11666,"count":0}],"isBlockCoverage":false},{"functionName":"getGeneratorEntries","ranges":[{"startOffset":11871,"endOffset":12157,"count":0}],"isBlockCoverage":false},{"functionName":"getEnumerableKeys","ranges":[{"startOffset":12340,"endOffset":12462,"count":0}],"isBlockCoverage":false},{"functionName":"keysEqual","ranges":[{"startOffset":12937,"endOffset":13258,"count":0}],"isBlockCoverage":false},{"functionName":"objectEqual","ranges":[{"startOffset":13571,"endOffset":14586,"count":0}],"isBlockCoverage":false},{"functionName":"isPrimitive","ranges":[{"startOffset":14824,"endOffset":14909,"count":0}],"isBlockCoverage":false}]},{"scriptId":"809","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/addProperty.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2452,"count":1}],"isBlockCoverage":true},{"functionName":"addProperty","ranges":[{"startOffset":998,"endOffset":2450,"count":46},{"startOffset":1072,"endOffset":1088,"count":17},{"startOffset":1089,"endOffset":1097,"count":29}],"isBlockCoverage":true},{"functionName":"getter","ranges":[{"startOffset":1074,"endOffset":1088,"count":9}],"isBlockCoverage":true},{"functionName":"propertyGetter","ranges":[{"startOffset":1146,"endOffset":2417,"count":9},{"startOffset":2102,"endOffset":2128,"count":0},{"startOffset":2130,"endOffset":2187,"count":0},{"startOffset":2273,"endOffset":2287,"count":0}],"isBlockCoverage":true}]},{"scriptId":"810","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/isProxyEnabled.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":579,"count":1}],"isBlockCoverage":true},{"functionName":"isProxyEnabled","ranges":[{"startOffset":448,"endOffset":577,"count":96}],"isBlockCoverage":true}]},{"scriptId":"811","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/addMethod.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2179,"count":1}],"isBlockCoverage":true},{"functionName":"addMethod","ranges":[{"startOffset":1024,"endOffset":2177,"count":53}],"isBlockCoverage":true},{"functionName":"methodWrapper","ranges":[{"startOffset":1086,"endOffset":2083,"count":11},{"startOffset":1955,"endOffset":1969,"count":0}],"isBlockCoverage":true}]},{"scriptId":"812","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/addLengthGuard.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2376,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":51,"endOffset":65,"count":0}],"isBlockCoverage":false},{"functionName":"addLengthGuard","ranges":[{"startOffset":1768,"endOffset":2374,"count":55},{"startOffset":1861,"endOffset":1871,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":1922,"endOffset":2352,"count":0}],"isBlockCoverage":false}]},{"scriptId":"813","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/proxify.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5224,"count":1}],"isBlockCoverage":true},{"functionName":"proxify","ranges":[{"startOffset":1055,"endOffset":4029,"count":87},{"startOffset":1128,"endOffset":1139,"count":0}],"isBlockCoverage":true},{"functionName":"proxyGetter","ranges":[{"startOffset":1176,"endOffset":4021,"count":261},{"startOffset":1616,"endOffset":2906,"count":0},{"startOffset":3888,"endOffset":3916,"count":22},{"startOffset":3918,"endOffset":3970,"count":22}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2225,"endOffset":2658,"count":0}],"isBlockCoverage":false},{"functionName":"stringDistanceCapped","ranges":[{"startOffset":4320,"endOffset":5223,"count":0}],"isBlockCoverage":false}]},{"scriptId":"814","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/getProperties.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":789,"count":1}],"isBlockCoverage":true},{"functionName":"getProperties","ranges":[{"startOffset":387,"endOffset":787,"count":0}],"isBlockCoverage":false}]},{"scriptId":"815","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/overwriteProperty.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3281,"count":1}],"isBlockCoverage":true},{"functionName":"overwriteProperty","ranges":[{"startOffset":1302,"endOffset":3279,"count":0}],"isBlockCoverage":false}]},{"scriptId":"816","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/overwriteMethod.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3100,"count":1}],"isBlockCoverage":true},{"functionName":"overwriteMethod","ranges":[{"startOffset":1338,"endOffset":3098,"count":0}],"isBlockCoverage":false}]},{"scriptId":"817","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/addChainableMethod.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5448,"count":1}],"isBlockCoverage":true},{"functionName":"testFn","ranges":[{"startOffset":703,"endOffset":716,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":779,"endOffset":1256,"count":5},{"startOffset":1208,"endOffset":1220,"count":0}],"isBlockCoverage":true},{"functionName":"addChainableMethod","ranges":[{"startOffset":2460,"endOffset":5446,"count":8},{"startOffset":2573,"endOffset":2618,"count":2},{"startOffset":2807,"endOffset":2836,"count":1}],"isBlockCoverage":true},{"functionName":"chainingBehavior","ranges":[{"startOffset":2598,"endOffset":2613,"count":2}],"isBlockCoverage":true},{"functionName":"chainableMethodGetter","ranges":[{"startOffset":2927,"endOffset":5413,"count":2},{"startOffset":4841,"endOffset":5303,"count":0}],"isBlockCoverage":true},{"functionName":"chainableMethodWrapper","ranges":[{"startOffset":3055,"endOffset":4344,"count":2},{"startOffset":4166,"endOffset":4206,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5006,"endOffset":5291,"count":0}],"isBlockCoverage":false}]},{"scriptId":"818","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2150,"count":1}],"isBlockCoverage":true},{"functionName":"overwriteChainableMethod","ranges":[{"startOffset":1290,"endOffset":2148,"count":0}],"isBlockCoverage":false}]},{"scriptId":"819","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/compareByInspect.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":808,"count":1}],"isBlockCoverage":true},{"functionName":"compareByInspect","ranges":[{"startOffset":728,"endOffset":806,"count":0}],"isBlockCoverage":false}]},{"scriptId":"820","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":819,"count":1}],"isBlockCoverage":true},{"functionName":"getOwnEnumerablePropertySymbols","ranges":[{"startOffset":560,"endOffset":817,"count":0}],"isBlockCoverage":false}]},{"scriptId":"821","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":785,"count":1}],"isBlockCoverage":true},{"functionName":"getOwnEnumerableProperties","ranges":[{"startOffset":667,"endOffset":783,"count":0}],"isBlockCoverage":false}]},{"scriptId":"822","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/check-error/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4969,"count":1}],"isBlockCoverage":true},{"functionName":"compatibleInstance","ranges":[{"startOffset":701,"endOffset":812,"count":0}],"isBlockCoverage":false},{"functionName":"compatibleConstructor","ranges":[{"startOffset":1293,"endOffset":1844,"count":0}],"isBlockCoverage":false},{"functionName":"compatibleMessage","ranges":[{"startOffset":2244,"endOffset":2621,"count":0}],"isBlockCoverage":false},{"functionName":"getFunctionName","ranges":[{"startOffset":2972,"endOffset":3322,"count":0}],"isBlockCoverage":false},{"functionName":"getConstructorName","ranges":[{"startOffset":3559,"endOffset":4259,"count":0}],"isBlockCoverage":false},{"functionName":"getMessage","ranges":[{"startOffset":4542,"endOffset":4747,"count":0}],"isBlockCoverage":false}]},{"scriptId":"823","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/isNaN.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":590,"count":1},{"startOffset":580,"endOffset":588,"count":0}],"isBlockCoverage":true},{"functionName":"isNaN","ranges":[{"startOffset":341,"endOffset":489,"count":0}],"isBlockCoverage":false}]},{"scriptId":"824","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/utils/getOperator.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1252,"count":1}],"isBlockCoverage":true},{"functionName":"isObjectType","ranges":[{"startOffset":67,"endOffset":230,"count":0}],"isBlockCoverage":false},{"functionName":"getOperator","ranges":[{"startOffset":671,"endOffset":1250,"count":0}],"isBlockCoverage":false}]},{"scriptId":"825","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/assertion.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5975,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":169,"endOffset":5973,"count":1}],"isBlockCoverage":true},{"functionName":"Assertion","ranges":[{"startOffset":2261,"endOffset":2488,"count":32},{"startOffset":2337,"endOffset":2349,"count":24}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2552,"endOffset":2703,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":2714,"endOffset":2871,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":2937,"endOffset":3076,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":3087,"endOffset":3232,"count":0}],"isBlockCoverage":false},{"functionName":"Assertion.addProperty","ranges":[{"startOffset":3266,"endOffset":3339,"count":46}],"isBlockCoverage":true},{"functionName":"Assertion.addMethod","ranges":[{"startOffset":3366,"endOffset":3437,"count":53}],"isBlockCoverage":true},{"functionName":"Assertion.addChainableMethod","ranges":[{"startOffset":3473,"endOffset":3589,"count":8}],"isBlockCoverage":true},{"functionName":"Assertion.overwriteProperty","ranges":[{"startOffset":3624,"endOffset":3703,"count":0}],"isBlockCoverage":false},{"functionName":"Assertion.overwriteMethod","ranges":[{"startOffset":3736,"endOffset":3813,"count":0}],"isBlockCoverage":false},{"functionName":"Assertion.overwriteChainableMethod","ranges":[{"startOffset":3855,"endOffset":3977,"count":0}],"isBlockCoverage":false},{"functionName":"Assertion.assert","ranges":[{"startOffset":4808,"endOffset":5644,"count":15},{"startOffset":4940,"endOffset":4956,"count":13},{"startOffset":4988,"endOffset":5012,"count":7},{"startOffset":5014,"endOffset":5031,"count":7},{"startOffset":5066,"endOffset":5083,"count":0},{"startOffset":5098,"endOffset":5640,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":5836,"endOffset":5894,"count":10}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":5906,"endOffset":5965,"count":0}],"isBlockCoverage":false}]},{"scriptId":"826","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/core/assertions.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":134714,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":134,"endOffset":134712,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":836,"endOffset":892,"count":17}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1701,"endOffset":1750,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3305,"endOffset":3352,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4094,"endOffset":4143,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4756,"endOffset":4802,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5392,"endOffset":5442,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5939,"endOffset":6015,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6706,"endOffset":6782,"count":0}],"isBlockCoverage":false},{"functionName":"an","ranges":[{"startOffset":9049,"endOffset":9446,"count":2},{"startOffset":9088,"endOffset":9115,"count":0},{"startOffset":9261,"endOffset":9267,"count":0}],"isBlockCoverage":true},{"functionName":"SameValueZero","ranges":[{"startOffset":15727,"endOffset":15811,"count":0}],"isBlockCoverage":false},{"functionName":"includeChainingBehavior","ranges":[{"startOffset":15815,"endOffset":15890,"count":0}],"isBlockCoverage":false},{"functionName":"include","ranges":[{"startOffset":15894,"endOffset":19389,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":20878,"endOffset":21022,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":21802,"endOffset":22002,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":22789,"endOffset":22990,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":23653,"endOffset":23812,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":24525,"endOffset":24699,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":25346,"endOffset":25507,"count":0}],"isBlockCoverage":false},{"functionName":"assertExist","ranges":[{"startOffset":26516,"endOffset":26723,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":28645,"endOffset":29813,"count":0}],"isBlockCoverage":false},{"functionName":"checkArguments","ranges":[{"startOffset":30668,"endOffset":30922,"count":0}],"isBlockCoverage":false},{"functionName":"assertEqual","ranges":[{"startOffset":32619,"endOffset":33125,"count":4},{"startOffset":32666,"endOffset":32693,"count":0},{"startOffset":32758,"endOffset":32915,"count":0}],"isBlockCoverage":true},{"functionName":"assertEql","ranges":[{"startOffset":34854,"endOffset":35141,"count":0}],"isBlockCoverage":false},{"functionName":"assertAbove","ranges":[{"startOffset":36723,"endOffset":38605,"count":0}],"isBlockCoverage":false},{"functionName":"assertLeast","ranges":[{"startOffset":40357,"endOffset":42241,"count":0}],"isBlockCoverage":false},{"functionName":"assertBelow","ranges":[{"startOffset":43872,"endOffset":45755,"count":0}],"isBlockCoverage":false},{"functionName":"assertMost","ranges":[{"startOffset":47480,"endOffset":49359,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":51281,"endOffset":53452,"count":0}],"isBlockCoverage":false},{"functionName":"assertInstanceOf","ranges":[{"startOffset":54971,"endOffset":55858,"count":0}],"isBlockCoverage":false},{"functionName":"assertProperty","ranges":[{"startOffset":60668,"endOffset":63431,"count":5},{"startOffset":60724,"endOffset":60751,"count":0},{"startOffset":60991,"endOffset":61007,"count":0},{"startOffset":61033,"endOffset":61254,"count":0},{"startOffset":61294,"endOffset":61318,"count":0},{"startOffset":61319,"endOffset":61343,"count":0},{"startOffset":61345,"endOffset":61519,"count":0},{"startOffset":61544,"endOffset":61552,"count":0},{"startOffset":61554,"endOffset":61704,"count":0},{"startOffset":61749,"endOffset":61886,"count":0},{"startOffset":61990,"endOffset":62016,"count":0},{"startOffset":62049,"endOffset":62065,"count":0},{"startOffset":62121,"endOffset":62143,"count":0},{"startOffset":62159,"endOffset":62180,"count":0},{"startOffset":62199,"endOffset":62223,"count":0},{"startOffset":62292,"endOffset":62354,"count":0},{"startOffset":62378,"endOffset":62408,"count":0},{"startOffset":62819,"endOffset":62844,"count":0},{"startOffset":63070,"endOffset":63393,"count":0}],"isBlockCoverage":true},{"functionName":"assertOwnProperty","ranges":[{"startOffset":63487,"endOffset":63610,"count":0}],"isBlockCoverage":false},{"functionName":"assertOwnPropertyDescriptor","ranges":[{"startOffset":68144,"endOffset":69227,"count":0}],"isBlockCoverage":false},{"functionName":"assertLengthChain","ranges":[{"startOffset":71867,"endOffset":71936,"count":0}],"isBlockCoverage":false},{"functionName":"assertLength","ranges":[{"startOffset":71940,"endOffset":72714,"count":0}],"isBlockCoverage":false},{"functionName":"assertMatch","ranges":[{"startOffset":73691,"endOffset":73936,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":74819,"endOffset":75222,"count":0}],"isBlockCoverage":false},{"functionName":"assertKeys","ranges":[{"startOffset":79909,"endOffset":83223,"count":0}],"isBlockCoverage":false},{"functionName":"assertThrows","ranges":[{"startOffset":90865,"endOffset":95841,"count":0}],"isBlockCoverage":false},{"functionName":"respondTo","ranges":[{"startOffset":98373,"endOffset":98828,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":99598,"endOffset":99647,"count":0}],"isBlockCoverage":false},{"functionName":"satisfy","ranges":[{"startOffset":100747,"endOffset":101119,"count":0}],"isBlockCoverage":false},{"functionName":"closeTo","ranges":[{"startOffset":102478,"endOffset":103325,"count":0}],"isBlockCoverage":false},{"functionName":"isSubsetOf","ranges":[{"startOffset":103502,"endOffset":104372,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":107383,"endOffset":108508,"count":0}],"isBlockCoverage":false},{"functionName":"oneOf","ranges":[{"startOffset":109900,"endOffset":111063,"count":0}],"isBlockCoverage":false},{"functionName":"assertChanges","ranges":[{"startOffset":114654,"endOffset":115759,"count":0}],"isBlockCoverage":false},{"functionName":"assertIncreases","ranges":[{"startOffset":119059,"endOffset":120221,"count":0}],"isBlockCoverage":false},{"functionName":"assertDecreases","ranges":[{"startOffset":123541,"endOffset":124703,"count":0}],"isBlockCoverage":false},{"functionName":"assertDelta","ranges":[{"startOffset":127440,"endOffset":128122,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":129068,"endOffset":129718,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":130626,"endOffset":131253,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":132003,"endOffset":132630,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":134477,"endOffset":134708,"count":0}],"isBlockCoverage":false}]},{"scriptId":"827","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/interface/expect.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1142,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":113,"endOffset":1140,"count":1}],"isBlockCoverage":true},{"functionName":"chai.expect","ranges":[{"startOffset":153,"endOffset":227,"count":0}],"isBlockCoverage":false},{"functionName":"chai.expect.fail","ranges":[{"startOffset":802,"endOffset":1137,"count":0}],"isBlockCoverage":false}]},{"scriptId":"828","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/interface/should.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6225,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":113,"endOffset":6223,"count":1}],"isBlockCoverage":true},{"functionName":"loadShould","ranges":[{"startOffset":174,"endOffset":6163,"count":1}],"isBlockCoverage":true},{"functionName":"shouldGetter","ranges":[{"startOffset":294,"endOffset":698,"count":8},{"startOffset":563,"endOffset":638,"count":0}],"isBlockCoverage":true},{"functionName":"shouldSetter","ranges":[{"startOffset":703,"endOffset":1250,"count":0}],"isBlockCoverage":false},{"functionName":"should.fail","ranges":[{"startOffset":2081,"endOffset":2433,"count":0}],"isBlockCoverage":false},{"functionName":"should.equal","ranges":[{"startOffset":2829,"endOffset":2910,"count":0}],"isBlockCoverage":false},{"functionName":"should.Throw","ranges":[{"startOffset":3896,"endOffset":3985,"count":0}],"isBlockCoverage":false},{"functionName":"should.exist","ranges":[{"startOffset":4270,"endOffset":4337,"count":0}],"isBlockCoverage":false},{"functionName":"should.not.equal","ranges":[{"startOffset":4784,"endOffset":4869,"count":0}],"isBlockCoverage":false},{"functionName":"should.not.Throw","ranges":[{"startOffset":5579,"endOffset":5672,"count":0}],"isBlockCoverage":false},{"functionName":"should.not.exist","ranges":[{"startOffset":5981,"endOffset":6052,"count":0}],"isBlockCoverage":false}]},{"scriptId":"829","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai/lib/chai/interface/assert.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":93320,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":113,"endOffset":93318,"count":1}],"isBlockCoverage":true},{"functionName":"chai.assert","ranges":[{"startOffset":673,"endOffset":864,"count":0}],"isBlockCoverage":false},{"functionName":"assert.fail","ranges":[{"startOffset":1473,"endOffset":1860,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isOk","ranges":[{"startOffset":2217,"endOffset":2296,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotOk","ranges":[{"startOffset":2668,"endOffset":2754,"count":0}],"isBlockCoverage":false},{"functionName":"assert.equal","ranges":[{"startOffset":3120,"endOffset":3398,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notEqual","ranges":[{"startOffset":3775,"endOffset":4056,"count":0}],"isBlockCoverage":false},{"functionName":"assert.strictEqual","ranges":[{"startOffset":4452,"endOffset":4551,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notStrictEqual","ranges":[{"startOffset":4955,"endOffset":5061,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepEqual.assert.deepStrictEqual","ranges":[{"startOffset":5482,"endOffset":5577,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepEqual","ranges":[{"startOffset":5962,"endOffset":6064,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isAbove","ranges":[{"startOffset":6468,"endOffset":6566,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isAtLeast","ranges":[{"startOffset":7049,"endOffset":7153,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isBelow","ranges":[{"startOffset":7551,"endOffset":7649,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isAtMost","ranges":[{"startOffset":8125,"endOffset":8227,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isTrue","ranges":[{"startOffset":8552,"endOffset":8638,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotTrue","ranges":[{"startOffset":8972,"endOffset":9069,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isFalse","ranges":[{"startOffset":9395,"endOffset":9483,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotFalse","ranges":[{"startOffset":9822,"endOffset":9921,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNull","ranges":[{"startOffset":10204,"endOffset":10294,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotNull","ranges":[{"startOffset":10628,"endOffset":10725,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNaN","ranges":[{"startOffset":10975,"endOffset":11059,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotNaN","ranges":[{"startOffset":11324,"endOffset":11415,"count":0}],"isBlockCoverage":false},{"functionName":"assert.exists","ranges":[{"startOffset":11758,"endOffset":11842,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notExists","ranges":[{"startOffset":12238,"endOffset":12329,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isUndefined","ranges":[{"startOffset":12653,"endOffset":12753,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isDefined","ranges":[{"startOffset":13095,"endOffset":13197,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isFunction","ranges":[{"startOffset":13570,"endOffset":13669,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotFunction","ranges":[{"startOffset":14061,"endOffset":14167,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isObject","ranges":[{"startOffset":14660,"endOffset":14755,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotObject","ranges":[{"startOffset":15241,"endOffset":15343,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isArray","ranges":[{"startOffset":15696,"endOffset":15790,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotArray","ranges":[{"startOffset":16151,"endOffset":16252,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isString","ranges":[{"startOffset":16578,"endOffset":16673,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotString","ranges":[{"startOffset":17012,"endOffset":17114,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNumber","ranges":[{"startOffset":17429,"endOffset":17524,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotNumber","ranges":[{"startOffset":17870,"endOffset":17972,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isFinite","ranges":[{"startOffset":18402,"endOffset":18492,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isBoolean","ranges":[{"startOffset":18922,"endOffset":19019,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotBoolean","ranges":[{"startOffset":19472,"endOffset":19576,"count":0}],"isBlockCoverage":false},{"functionName":"assert.typeOf","ranges":[{"startOffset":20308,"endOffset":20403,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notTypeOf","ranges":[{"startOffset":20820,"endOffset":20922,"count":0}],"isBlockCoverage":false},{"functionName":"assert.instanceOf","ranges":[{"startOffset":21412,"endOffset":21520,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notInstanceOf","ranges":[{"startOffset":22028,"endOffset":22150,"count":0}],"isBlockCoverage":false},{"functionName":"assert.include","ranges":[{"startOffset":23450,"endOffset":23544,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notInclude","ranges":[{"startOffset":24947,"endOffset":25048,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepInclude","ranges":[{"startOffset":25743,"endOffset":25846,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepInclude","ranges":[{"startOffset":26565,"endOffset":26675,"count":0}],"isBlockCoverage":false},{"functionName":"assert.nestedInclude","ranges":[{"startOffset":27379,"endOffset":27486,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notNestedInclude","ranges":[{"startOffset":28209,"endOffset":28330,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepNestedInclude","ranges":[{"startOffset":29098,"endOffset":29220,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepNestedInclude","ranges":[{"startOffset":30008,"endOffset":30137,"count":0}],"isBlockCoverage":false},{"functionName":"assert.ownInclude","ranges":[{"startOffset":30607,"endOffset":30707,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notOwnInclude","ranges":[{"startOffset":31225,"endOffset":31332,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepOwnInclude","ranges":[{"startOffset":31856,"endOffset":31972,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepOwnInclude","ranges":[{"startOffset":32507,"endOffset":32630,"count":0}],"isBlockCoverage":false},{"functionName":"assert.match","ranges":[{"startOffset":32986,"endOffset":33077,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notMatch","ranges":[{"startOffset":33459,"endOffset":33557,"count":0}],"isBlockCoverage":false},{"functionName":"assert.property","ranges":[{"startOffset":34020,"endOffset":34126,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notProperty","ranges":[{"startOffset":34549,"endOffset":34669,"count":0}],"isBlockCoverage":false},{"functionName":"assert.propertyVal","ranges":[{"startOffset":35183,"endOffset":35309,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notPropertyVal","ranges":[{"startOffset":35917,"endOffset":36050,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepPropertyVal","ranges":[{"startOffset":36587,"endOffset":36722,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepPropertyVal","ranges":[{"startOffset":37472,"endOffset":37614,"count":0}],"isBlockCoverage":false},{"functionName":"assert.ownProperty","ranges":[{"startOffset":38023,"endOffset":38143,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notOwnProperty","ranges":[{"startOffset":38627,"endOffset":38754,"count":0}],"isBlockCoverage":false},{"functionName":"assert.ownPropertyVal","ranges":[{"startOffset":39298,"endOffset":39435,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notOwnPropertyVal","ranges":[{"startOffset":40079,"endOffset":40223,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepOwnPropertyVal","ranges":[{"startOffset":40790,"endOffset":40936,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepOwnPropertyVal","ranges":[{"startOffset":41807,"endOffset":41960,"count":0}],"isBlockCoverage":false},{"functionName":"assert.nestedProperty","ranges":[{"startOffset":42467,"endOffset":42593,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notNestedProperty","ranges":[{"startOffset":43182,"endOffset":43315,"count":0}],"isBlockCoverage":false},{"functionName":"assert.nestedPropertyVal","ranges":[{"startOffset":43912,"endOffset":44051,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notNestedPropertyVal","ranges":[{"startOffset":44766,"endOffset":44912,"count":0}],"isBlockCoverage":false},{"functionName":"assert.deepNestedPropertyVal","ranges":[{"startOffset":45538,"endOffset":45686,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notDeepNestedPropertyVal","ranges":[{"startOffset":46561,"endOffset":46716,"count":0}],"isBlockCoverage":false},{"functionName":"assert.lengthOf","ranges":[{"startOffset":47315,"endOffset":47419,"count":0}],"isBlockCoverage":false},{"functionName":"assert.hasAnyKeys","ranges":[{"startOffset":48234,"endOffset":48342,"count":0}],"isBlockCoverage":false},{"functionName":"assert.hasAllKeys","ranges":[{"startOffset":49141,"endOffset":49249,"count":0}],"isBlockCoverage":false},{"functionName":"assert.containsAllKeys","ranges":[{"startOffset":50440,"endOffset":50563,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotHaveAnyKeys","ranges":[{"startOffset":51418,"endOffset":51545,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotHaveAllKeys","ranges":[{"startOffset":52418,"endOffset":52545,"count":0}],"isBlockCoverage":false},{"functionName":"assert.hasAnyDeepKeys","ranges":[{"startOffset":53737,"endOffset":53861,"count":0}],"isBlockCoverage":false},{"functionName":"assert.hasAllDeepKeys","ranges":[{"startOffset":54820,"endOffset":54944,"count":0}],"isBlockCoverage":false},{"functionName":"assert.containsAllDeepKeys","ranges":[{"startOffset":55952,"endOffset":56084,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotHaveAnyDeepKeys","ranges":[{"startOffset":57145,"endOffset":57281,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotHaveAllDeepKeys","ranges":[{"startOffset":58350,"endOffset":58486,"count":0}],"isBlockCoverage":false},{"functionName":"assert.throws","ranges":[{"startOffset":59956,"endOffset":60287,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotThrow","ranges":[{"startOffset":61664,"endOffset":61951,"count":0}],"isBlockCoverage":false},{"functionName":"assert.operator","ranges":[{"startOffset":62378,"endOffset":63433,"count":0}],"isBlockCoverage":false},{"functionName":"assert.closeTo","ranges":[{"startOffset":63850,"endOffset":63964,"count":0}],"isBlockCoverage":false},{"functionName":"assert.approximately","ranges":[{"startOffset":64405,"endOffset":64538,"count":0}],"isBlockCoverage":false},{"functionName":"assert.sameMembers","ranges":[{"startOffset":64963,"endOffset":65085,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notSameMembers","ranges":[{"startOffset":65531,"endOffset":65660,"count":0}],"isBlockCoverage":false},{"functionName":"assert.sameDeepMembers","ranges":[{"startOffset":66137,"endOffset":66268,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notSameDeepMembers","ranges":[{"startOffset":66767,"endOffset":66905,"count":0}],"isBlockCoverage":false},{"functionName":"assert.sameOrderedMembers","ranges":[{"startOffset":67370,"endOffset":67507,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notSameOrderedMembers","ranges":[{"startOffset":67994,"endOffset":68138,"count":0}],"isBlockCoverage":false},{"functionName":"assert.sameDeepOrderedMembers","ranges":[{"startOffset":68658,"endOffset":68804,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notSameDeepOrderedMembers","ranges":[{"startOffset":69490,"endOffset":69643,"count":0}],"isBlockCoverage":false},{"functionName":"assert.includeMembers","ranges":[{"startOffset":70113,"endOffset":70248,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notIncludeMembers","ranges":[{"startOffset":70734,"endOffset":70876,"count":0}],"isBlockCoverage":false},{"functionName":"assert.includeDeepMembers","ranges":[{"startOffset":71401,"endOffset":71545,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notIncludeDeepMembers","ranges":[{"startOffset":72079,"endOffset":72230,"count":0}],"isBlockCoverage":false},{"functionName":"assert.includeOrderedMembers","ranges":[{"startOffset":72766,"endOffset":72916,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notIncludeOrderedMembers","ranges":[{"startOffset":73567,"endOffset":73724,"count":0}],"isBlockCoverage":false},{"functionName":"assert.includeDeepOrderedMembers","ranges":[{"startOffset":74308,"endOffset":74467,"count":0}],"isBlockCoverage":false},{"functionName":"assert.notIncludeDeepOrderedMembers","ranges":[{"startOffset":75350,"endOffset":75516,"count":0}],"isBlockCoverage":false},{"functionName":"assert.oneOf","ranges":[{"startOffset":75887,"endOffset":75991,"count":0}],"isBlockCoverage":false},{"functionName":"assert.changes","ranges":[{"startOffset":76512,"endOffset":76725,"count":0}],"isBlockCoverage":false},{"functionName":"assert.changesBy","ranges":[{"startOffset":77329,"endOffset":77677,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotChange","ranges":[{"startOffset":78238,"endOffset":78475,"count":0}],"isBlockCoverage":false},{"functionName":"assert.changesButNotBy","ranges":[{"startOffset":79142,"endOffset":79504,"count":0}],"isBlockCoverage":false},{"functionName":"assert.increases","ranges":[{"startOffset":80037,"endOffset":80268,"count":0}],"isBlockCoverage":false},{"functionName":"assert.increasesBy","ranges":[{"startOffset":80914,"endOffset":81266,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotIncrease","ranges":[{"startOffset":81830,"endOffset":82071,"count":0}],"isBlockCoverage":false},{"functionName":"assert.increasesButNotBy","ranges":[{"startOffset":82746,"endOffset":83112,"count":0}],"isBlockCoverage":false},{"functionName":"assert.decreases","ranges":[{"startOffset":83644,"endOffset":83875,"count":0}],"isBlockCoverage":false},{"functionName":"assert.decreasesBy","ranges":[{"startOffset":84518,"endOffset":84870,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotDecrease","ranges":[{"startOffset":85436,"endOffset":85677,"count":0}],"isBlockCoverage":false},{"functionName":"assert.doesNotDecreaseBy","ranges":[{"startOffset":86352,"endOffset":86721,"count":0}],"isBlockCoverage":false},{"functionName":"assert.decreasesButNotBy","ranges":[{"startOffset":87396,"endOffset":87762,"count":0}],"isBlockCoverage":false},{"functionName":"assert.ifError","ranges":[{"startOffset":88197,"endOffset":88256,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isExtensible","ranges":[{"startOffset":88611,"endOffset":88709,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotExtensible","ranges":[{"startOffset":89320,"endOffset":89425,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isSealed","ranges":[{"startOffset":89955,"endOffset":90045,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotSealed","ranges":[{"startOffset":90359,"endOffset":90456,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isFrozen","ranges":[{"startOffset":90897,"endOffset":90987,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotFrozen","ranges":[{"startOffset":91301,"endOffset":91398,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isEmpty","ranges":[{"startOffset":92033,"endOffset":92120,"count":0}],"isBlockCoverage":false},{"functionName":"assert.isNotEmpty","ranges":[{"startOffset":92789,"endOffset":92883,"count":0}],"isBlockCoverage":false},{"functionName":"alias","ranges":[{"startOffset":92916,"endOffset":92994,"count":12}],"isBlockCoverage":true}]},{"scriptId":"830","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai-http/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":40,"count":1}],"isBlockCoverage":true}]},{"scriptId":"831","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai-http/lib/http.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10068,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":248,"endOffset":10066,"count":1}],"isBlockCoverage":true},{"functionName":"getHeader","ranges":[{"startOffset":985,"endOffset":1153,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1419,"endOffset":2034,"count":2},{"startOffset":1487,"endOffset":1515,"count":0},{"startOffset":1803,"endOffset":1826,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2918,"endOffset":3808,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4326,"endOffset":4546,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":4833,"endOffset":4984,"count":0}],"isBlockCoverage":false},{"functionName":"checkContentType","ranges":[{"startOffset":5297,"endOffset":5789,"count":3}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5399,"endOffset":5783,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6092,"endOffset":6466,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6782,"endOffset":7600,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8061,"endOffset":8278,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9078,"endOffset":10062,"count":0}],"isBlockCoverage":false}]},{"scriptId":"832","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/dotenv/lib/main.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2689,"count":1}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":266,"endOffset":1045,"count":1},{"startOffset":506,"endOffset":1029,"count":3},{"startOffset":609,"endOffset":614,"count":0},{"startOffset":891,"endOffset":982,"count":0}],"isBlockCoverage":true},{"functionName":"_log","ranges":[{"startOffset":1047,"endOffset":1118,"count":0}],"isBlockCoverage":false},{"functionName":"_resolveHome","ranges":[{"startOffset":1120,"endOffset":1237,"count":0}],"isBlockCoverage":false},{"functionName":"config","ranges":[{"startOffset":1279,"endOffset":2527,"count":1},{"startOffset":1418,"endOffset":1434,"count":0},{"startOffset":1471,"endOffset":1490,"count":0},{"startOffset":1508,"endOffset":1673,"count":0},{"startOffset":2406,"endOffset":2525,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1864,"endOffset":2377,"count":3},{"startOffset":1996,"endOffset":2371,"count":0}],"isBlockCoverage":true}]},{"scriptId":"833","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/qs/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":211,"count":1}],"isBlockCoverage":true}]},{"scriptId":"834","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/qs/lib/stringify.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9817,"count":1}],"isBlockCoverage":true},{"functionName":"brackets","ranges":[{"startOffset":217,"endOffset":280,"count":0}],"isBlockCoverage":false},{"functionName":"indices","ranges":[{"startOffset":315,"endOffset":393,"count":0}],"isBlockCoverage":false},{"functionName":"repeat","ranges":[{"startOffset":407,"endOffset":461,"count":0}],"isBlockCoverage":false},{"functionName":"pushToArray","ranges":[{"startOffset":582,"endOffset":690,"count":0}],"isBlockCoverage":false},{"functionName":"serializeDate","ranges":[{"startOffset":1118,"endOffset":1187,"count":0}],"isBlockCoverage":false},{"functionName":"isNonNullishPrimitive","ranges":[{"startOffset":1273,"endOffset":1477,"count":0}],"isBlockCoverage":false},{"functionName":"stringify","ranges":[{"startOffset":1516,"endOffset":5382,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeStringifyOptions","ranges":[{"startOffset":5417,"endOffset":7639,"count":2},{"startOffset":5475,"endOffset":5507,"count":0},{"startOffset":5578,"endOffset":5615,"count":0},{"startOffset":5617,"endOffset":5686,"count":0},{"startOffset":5784,"endOffset":5811,"count":0},{"startOffset":5812,"endOffset":5844,"count":0},{"startOffset":5846,"endOffset":5951,"count":0},{"startOffset":6034,"endOffset":6207,"count":0},{"startOffset":6358,"endOffset":6395,"count":0},{"startOffset":6475,"endOffset":6496,"count":0},{"startOffset":6602,"endOffset":6620,"count":0},{"startOffset":6715,"endOffset":6737,"count":0},{"startOffset":6844,"endOffset":6860,"count":0},{"startOffset":6911,"endOffset":6924,"count":0},{"startOffset":6996,"endOffset":7010,"count":0},{"startOffset":7100,"endOffset":7123,"count":0},{"startOffset":7295,"endOffset":7315,"count":0},{"startOffset":7397,"endOffset":7413,"count":0},{"startOffset":7482,"endOffset":7493,"count":0},{"startOffset":7601,"endOffset":7630,"count":0}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":7659,"endOffset":9815,"count":2},{"startOffset":7839,"endOffset":7910,"count":0},{"startOffset":7945,"endOffset":8011,"count":0},{"startOffset":8082,"endOffset":8108,"count":0},{"startOffset":8190,"endOffset":8237,"count":0},{"startOffset":8311,"endOffset":8322,"count":0},{"startOffset":8340,"endOffset":8386,"count":0},{"startOffset":8540,"endOffset":8583,"count":0},{"startOffset":8670,"endOffset":9309,"count":0},{"startOffset":9407,"endOffset":9412,"count":0},{"startOffset":9453,"endOffset":9759,"count":0},{"startOffset":9790,"endOffset":9807,"count":0}],"isBlockCoverage":true}]},{"scriptId":"835","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/side-channel/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3391,"count":1}],"isBlockCoverage":true},{"functionName":"listGetNode","ranges":[{"startOffset":948,"endOffset":1249,"count":0}],"isBlockCoverage":false},{"functionName":"listGet","ranges":[{"startOffset":1266,"endOffset":1360,"count":0}],"isBlockCoverage":false},{"functionName":"listSet","ranges":[{"startOffset":1376,"endOffset":1669,"count":0}],"isBlockCoverage":false},{"functionName":"listHas","ranges":[{"startOffset":1685,"endOffset":1749,"count":0}],"isBlockCoverage":false},{"functionName":"getSideChannel","ranges":[{"startOffset":1769,"endOffset":3389,"count":2}],"isBlockCoverage":true},{"functionName":"assert","ranges":[{"startOffset":1852,"endOffset":1980,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":1989,"endOffset":2365,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":2374,"endOffset":2726,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":2735,"endOffset":3366,"count":0}],"isBlockCoverage":false}]},{"scriptId":"836","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/get-intrinsic/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12499,"count":1},{"startOffset":420,"endOffset":491,"count":0},{"startOffset":993,"endOffset":1009,"count":0},{"startOffset":1093,"endOffset":1132,"count":0},{"startOffset":1239,"endOffset":1250,"count":0},{"startOffset":1354,"endOffset":1365,"count":0},{"startOffset":1456,"endOffset":1467,"count":0},{"startOffset":1557,"endOffset":1568,"count":0},{"startOffset":1806,"endOffset":1817,"count":0},{"startOffset":1872,"endOffset":1883,"count":0},{"startOffset":1964,"endOffset":1975,"count":0},{"startOffset":2298,"endOffset":2309,"count":0},{"startOffset":2381,"endOffset":2392,"count":0},{"startOffset":2480,"endOffset":2491,"count":0},{"startOffset":2626,"endOffset":2637,"count":0},{"startOffset":2702,"endOffset":2713,"count":0},{"startOffset":2779,"endOffset":2790,"count":0},{"startOffset":2928,"endOffset":2939,"count":0},{"startOffset":2984,"endOffset":2995,"count":0},{"startOffset":3034,"endOffset":3045,"count":0},{"startOffset":3122,"endOffset":3133,"count":0},{"startOffset":3334,"endOffset":3345,"count":0},{"startOffset":3398,"endOffset":3409,"count":0},{"startOffset":3530,"endOffset":3541,"count":0},{"startOffset":3611,"endOffset":3622,"count":0},{"startOffset":3699,"endOffset":3710,"count":0},{"startOffset":3818,"endOffset":3829,"count":0},{"startOffset":3947,"endOffset":3958,"count":0},{"startOffset":3993,"endOffset":4004,"count":0},{"startOffset":4183,"endOffset":4194,"count":0},{"startOffset":4274,"endOffset":4285,"count":0},{"startOffset":4360,"endOffset":4371,"count":0},{"startOffset":4440,"endOffset":4451,"count":0},{"startOffset":4537,"endOffset":4548,"count":0},{"startOffset":4605,"endOffset":4616,"count":0},{"startOffset":4673,"endOffset":4684,"count":0}],"isBlockCoverage":true},{"functionName":"getEvalledConstructor","ranges":[{"startOffset":192,"endOffset":332,"count":0}],"isBlockCoverage":false},{"functionName":"throwTypeError","ranges":[{"startOffset":516,"endOffset":556,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":589,"endOffset":988,"count":1},{"startOffset":929,"endOffset":981,"count":0}],"isBlockCoverage":true},{"functionName":"getProto","ranges":[{"startOffset":1096,"endOffset":1132,"count":0}],"isBlockCoverage":false},{"functionName":"doEval","ranges":[{"startOffset":4712,"endOffset":5370,"count":0}],"isBlockCoverage":false},{"functionName":"stringToPath","ranges":[{"startOffset":8775,"endOffset":9326,"count":16},{"startOffset":8899,"endOffset":8914,"count":9},{"startOffset":8916,"endOffset":8996,"count":0},{"startOffset":9019,"endOffset":9035,"count":9},{"startOffset":9037,"endOffset":9117,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9166,"endOffset":9306,"count":38},{"startOffset":9243,"endOffset":9284,"count":0}],"isBlockCoverage":true},{"functionName":"getBaseIntrinsic","ranges":[{"startOffset":9373,"endOffset":10049,"count":16},{"startOffset":9504,"endOffset":9589,"count":0},{"startOffset":9701,"endOffset":9740,"count":0},{"startOffset":9776,"endOffset":9792,"count":0},{"startOffset":9794,"endOffset":9902,"count":0},{"startOffset":9979,"endOffset":10048,"count":0}],"isBlockCoverage":true},{"functionName":"GetIntrinsic","ranges":[{"startOffset":10069,"endOffset":12497,"count":16},{"startOffset":10165,"endOffset":10238,"count":0},{"startOffset":10265,"endOffset":10301,"count":11},{"startOffset":10303,"endOffset":10376,"count":0},{"startOffset":10464,"endOffset":10468,"count":0},{"startOffset":10698,"endOffset":10781,"count":0},{"startOffset":10840,"endOffset":12480,"count":22},{"startOffset":11064,"endOffset":11081,"count":0},{"startOffset":11086,"endOffset":11174,"count":0},{"startOffset":11215,"endOffset":11250,"count":0},{"startOffset":11386,"endOffset":11433,"count":5},{"startOffset":11433,"endOffset":12477,"count":17},{"startOffset":11485,"endOffset":11654,"count":0},{"startOffset":11696,"endOffset":12315,"count":13},{"startOffset":12206,"endOffset":12239,"count":0},{"startOffset":12241,"endOffset":12271,"count":0},{"startOffset":12315,"endOffset":12385,"count":4}],"isBlockCoverage":true}]},{"scriptId":"837","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/has-symbols/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":420,"count":1}],"isBlockCoverage":true},{"functionName":"hasNativeSymbols","ranges":[{"startOffset":131,"endOffset":418,"count":1},{"startOffset":200,"endOffset":217,"count":0},{"startOffset":253,"endOffset":270,"count":0},{"startOffset":315,"endOffset":332,"count":0},{"startOffset":373,"endOffset":390,"count":0}],"isBlockCoverage":true}]},{"scriptId":"838","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/has-symbols/shams.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1761,"count":1}],"isBlockCoverage":true},{"functionName":"hasSymbols","ranges":[{"startOffset":90,"endOffset":1759,"count":1},{"startOffset":203,"endOffset":220,"count":0},{"startOffset":279,"endOffset":1198,"count":0},{"startOffset":1200,"endOffset":1320,"count":0},{"startOffset":1322,"endOffset":1429,"count":0},{"startOffset":1431,"endOffset":1758,"count":0}],"isBlockCoverage":true}]},{"scriptId":"839","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/function-bind/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":126,"count":1},{"startOffset":107,"endOffset":124,"count":0}],"isBlockCoverage":true}]},{"scriptId":"840","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/function-bind/implementation.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1463,"count":1}],"isBlockCoverage":true},{"functionName":"bind","ranges":[{"startOffset":247,"endOffset":1461,"count":0}],"isBlockCoverage":false}]},{"scriptId":"841","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/has/src/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":129,"count":1}],"isBlockCoverage":true}]},{"scriptId":"842","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/call-bind/callBound.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":413,"count":1}],"isBlockCoverage":true},{"functionName":"callBoundIntrinsic","ranges":[{"startOffset":177,"endOffset":411,"count":6},{"startOffset":390,"endOffset":410,"count":0}],"isBlockCoverage":true}]},{"scriptId":"843","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/call-bind/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1306,"count":1},{"startOffset":268,"endOffset":295,"count":0},{"startOffset":551,"endOffset":629,"count":0},{"startOffset":1261,"endOffset":1305,"count":0}],"isBlockCoverage":true},{"functionName":"callBind","ranges":[{"startOffset":650,"endOffset":1078,"count":7}],"isBlockCoverage":true},{"functionName":"applyBind","ranges":[{"startOffset":1097,"endOffset":1169,"count":0}],"isBlockCoverage":false}]},{"scriptId":"844","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/object-inspect/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":18486,"count":1},{"startOffset":180,"endOffset":186,"count":0},{"startOffset":301,"endOffset":307,"count":0},{"startOffset":539,"endOffset":545,"count":0},{"startOffset":660,"endOffset":666,"count":0},{"startOffset":839,"endOffset":845,"count":0},{"startOffset":968,"endOffset":974,"count":0},{"startOffset":1101,"endOffset":1107,"count":0},{"startOffset":1717,"endOffset":1723,"count":0},{"startOffset":1880,"endOffset":1886,"count":0},{"startOffset":2132,"endOffset":2142,"count":0},{"startOffset":2184,"endOffset":2190,"count":0},{"startOffset":2292,"endOffset":2316,"count":0},{"startOffset":2342,"endOffset":2531,"count":0},{"startOffset":3403,"endOffset":3409,"count":0},{"startOffset":12577,"endOffset":12618,"count":0}],"isBlockCoverage":true},{"functionName":"gPO","ranges":[{"startOffset":2426,"endOffset":2514,"count":0}],"isBlockCoverage":false},{"functionName":"addNumericSeparator","ranges":[{"startOffset":2534,"endOffset":3256,"count":0}],"isBlockCoverage":false},{"functionName":"inspect_","ranges":[{"startOffset":3429,"endOffset":10617,"count":0}],"isBlockCoverage":false},{"functionName":"wrapQuotes","ranges":[{"startOffset":10620,"endOffset":10784,"count":0}],"isBlockCoverage":false},{"functionName":"quote","ranges":[{"startOffset":10786,"endOffset":10860,"count":0}],"isBlockCoverage":false},{"functionName":"isArray","ranges":[{"startOffset":10862,"endOffset":10997,"count":0}],"isBlockCoverage":false},{"functionName":"isDate","ranges":[{"startOffset":10998,"endOffset":11131,"count":0}],"isBlockCoverage":false},{"functionName":"isRegExp","ranges":[{"startOffset":11132,"endOffset":11269,"count":0}],"isBlockCoverage":false},{"functionName":"isError","ranges":[{"startOffset":11270,"endOffset":11405,"count":0}],"isBlockCoverage":false},{"functionName":"isString","ranges":[{"startOffset":11406,"endOffset":11543,"count":0}],"isBlockCoverage":false},{"functionName":"isNumber","ranges":[{"startOffset":11544,"endOffset":11681,"count":0}],"isBlockCoverage":false},{"functionName":"isBoolean","ranges":[{"startOffset":11682,"endOffset":11821,"count":0}],"isBlockCoverage":false},{"functionName":"isSymbol","ranges":[{"startOffset":11931,"endOffset":12312,"count":1},{"startOffset":11983,"endOffset":12062,"count":0},{"startOffset":12124,"endOffset":12164,"count":0},{"startOffset":12165,"endOffset":12180,"count":0},{"startOffset":12182,"endOffset":12311,"count":0}],"isBlockCoverage":true},{"functionName":"isBigInt","ranges":[{"startOffset":12314,"endOffset":12530,"count":0}],"isBlockCoverage":false},{"functionName":"hasOwn","ranges":[{"startOffset":12580,"endOffset":12618,"count":0}],"isBlockCoverage":false},{"functionName":"has","ranges":[{"startOffset":12620,"endOffset":12680,"count":0}],"isBlockCoverage":false},{"functionName":"toStr","ranges":[{"startOffset":12682,"endOffset":12742,"count":0}],"isBlockCoverage":false},{"functionName":"nameOf","ranges":[{"startOffset":12744,"endOffset":12921,"count":0}],"isBlockCoverage":false},{"functionName":"indexOf","ranges":[{"startOffset":12923,"endOffset":13105,"count":0}],"isBlockCoverage":false},{"functionName":"isMap","ranges":[{"startOffset":13107,"endOffset":13446,"count":0}],"isBlockCoverage":false},{"functionName":"isWeakMap","ranges":[{"startOffset":13448,"endOffset":13828,"count":0}],"isBlockCoverage":false},{"functionName":"isWeakRef","ranges":[{"startOffset":13830,"endOffset":14037,"count":0}],"isBlockCoverage":false},{"functionName":"isSet","ranges":[{"startOffset":14039,"endOffset":14378,"count":0}],"isBlockCoverage":false},{"functionName":"isWeakSet","ranges":[{"startOffset":14380,"endOffset":14760,"count":0}],"isBlockCoverage":false},{"functionName":"isElement","ranges":[{"startOffset":14762,"endOffset":15026,"count":0}],"isBlockCoverage":false},{"functionName":"inspectString","ranges":[{"startOffset":15028,"endOffset":15538,"count":0}],"isBlockCoverage":false},{"functionName":"lowbyte","ranges":[{"startOffset":15540,"endOffset":15808,"count":0}],"isBlockCoverage":false},{"functionName":"markBoxed","ranges":[{"startOffset":15810,"endOffset":15871,"count":0}],"isBlockCoverage":false},{"functionName":"weakCollectionOf","ranges":[{"startOffset":15873,"endOffset":15936,"count":0}],"isBlockCoverage":false},{"functionName":"collectionOf","ranges":[{"startOffset":15938,"endOffset":16145,"count":0}],"isBlockCoverage":false},{"functionName":"singleLineValues","ranges":[{"startOffset":16147,"endOffset":16322,"count":0}],"isBlockCoverage":false},{"functionName":"getIndent","ranges":[{"startOffset":16324,"endOffset":16710,"count":0}],"isBlockCoverage":false},{"functionName":"indentedJoin","ranges":[{"startOffset":16712,"endOffset":16923,"count":0}],"isBlockCoverage":false},{"functionName":"arrObjKeys","ranges":[{"startOffset":16925,"endOffset":18485,"count":0}],"isBlockCoverage":false}]},{"scriptId":"845","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/object-inspect/util.inspect.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":42,"count":1}],"isBlockCoverage":true}]},{"scriptId":"846","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/qs/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":6823,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":141,"endOffset":317,"count":1},{"startOffset":209,"endOffset":296,"count":256},{"startOffset":245,"endOffset":250,"count":16},{"startOffset":251,"endOffset":255,"count":240}],"isBlockCoverage":true},{"functionName":"compactQueue","ranges":[{"startOffset":342,"endOffset":780,"count":0}],"isBlockCoverage":false},{"functionName":"arrayToObject","ranges":[{"startOffset":803,"endOffset":1079,"count":0}],"isBlockCoverage":false},{"functionName":"merge","ranges":[{"startOffset":1094,"endOffset":2706,"count":0}],"isBlockCoverage":false},{"functionName":"assignSingleSource","ranges":[{"startOffset":2722,"endOffset":2897,"count":0}],"isBlockCoverage":false},{"functionName":"decode","ranges":[{"startOffset":2913,"endOffset":3294,"count":0}],"isBlockCoverage":false},{"functionName":"encode","ranges":[{"startOffset":3310,"endOffset":5309,"count":0}],"isBlockCoverage":false},{"functionName":"compact","ranges":[{"startOffset":5326,"endOffset":5934,"count":0}],"isBlockCoverage":false},{"functionName":"isRegExp","ranges":[{"startOffset":5952,"endOffset":6048,"count":0}],"isBlockCoverage":false},{"functionName":"isBuffer","ranges":[{"startOffset":6066,"endOffset":6257,"count":0}],"isBlockCoverage":false},{"functionName":"combine","ranges":[{"startOffset":6274,"endOffset":6328,"count":0}],"isBlockCoverage":false},{"functionName":"maybeMap","ranges":[{"startOffset":6346,"endOffset":6571,"count":0}],"isBlockCoverage":false}]},{"scriptId":"847","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/qs/lib/formats.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":476,"count":1}],"isBlockCoverage":true},{"functionName":"RFC1738","ranges":[{"startOffset":237,"endOffset":327,"count":0}],"isBlockCoverage":false},{"functionName":"RFC3986","ranges":[{"startOffset":346,"endOffset":408,"count":0}],"isBlockCoverage":false}]},{"scriptId":"848","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/qs/lib/parse.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9374,"count":1}],"isBlockCoverage":true},{"functionName":"interpretNumericEntities","ranges":[{"startOffset":567,"endOffset":717,"count":0}],"isBlockCoverage":false},{"functionName":"parseArrayValue","ranges":[{"startOffset":742,"endOffset":907,"count":0}],"isBlockCoverage":false},{"functionName":"parseQueryStringValues","ranges":[{"startOffset":1550,"endOffset":3679,"count":0}],"isBlockCoverage":false},{"functionName":"parseObject","ranges":[{"startOffset":3700,"endOffset":4825,"count":0}],"isBlockCoverage":false},{"functionName":"parseQueryStringKeys","ranges":[{"startOffset":4844,"endOffset":6346,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeParseOptions","ranges":[{"startOffset":6377,"endOffset":8598,"count":0}],"isBlockCoverage":false},{"functionName":"module.exports","ranges":[{"startOffset":8618,"endOffset":9372,"count":0}],"isBlockCoverage":false}]},{"scriptId":"849","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/cookiejar/cookiejar.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10054,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":25,"endOffset":10049,"count":1}],"isBlockCoverage":true},{"functionName":"CookieAccessInfo","ranges":[{"startOffset":62,"endOffset":431,"count":0}],"isBlockCoverage":false},{"functionName":"Cookie","ranges":[{"startOffset":549,"endOffset":1344,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":1407,"endOffset":1961,"count":0}],"isBlockCoverage":false},{"functionName":"toValueString","ranges":[{"startOffset":2001,"endOffset":2078,"count":0}],"isBlockCoverage":false},{"functionName":"parse","ranges":[{"startOffset":2176,"endOffset":4405,"count":0}],"isBlockCoverage":false},{"functionName":"matches","ranges":[{"startOffset":4439,"endOffset":4774,"count":0}],"isBlockCoverage":false},{"functionName":"collidesWith","ranges":[{"startOffset":4813,"endOffset":5882,"count":0}],"isBlockCoverage":false},{"functionName":"CookieJar","ranges":[{"startOffset":5889,"endOffset":9239,"count":0}],"isBlockCoverage":false},{"functionName":"setCookies","ranges":[{"startOffset":9423,"endOffset":10046,"count":0}],"isBlockCoverage":false}]},{"scriptId":"850","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/chai-http/lib/request.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9622,"count":1},{"startOffset":8493,"endOffset":8503,"count":0}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":5889,"endOffset":6798,"count":2},{"startOffset":6035,"endOffset":6059,"count":0},{"startOffset":6145,"endOffset":6154,"count":0},{"startOffset":6155,"endOffset":6171,"count":0},{"startOffset":6172,"endOffset":6189,"count":0},{"startOffset":6191,"endOffset":6263,"count":0}],"isBlockCoverage":true},{"functionName":"obj.keepOpen","ranges":[{"startOffset":6281,"endOffset":6333,"count":0}],"isBlockCoverage":false},{"functionName":"obj.close","ranges":[{"startOffset":6348,"endOffset":6511,"count":2},{"startOffset":6401,"endOffset":6438,"count":0},{"startOffset":6461,"endOffset":6486,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6530,"endOffset":6756,"count":68}],"isBlockCoverage":true},{"functionName":"obj.<computed>","ranges":[{"startOffset":6568,"endOffset":6751,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":6649,"endOffset":6743,"count":2}],"isBlockCoverage":true},{"functionName":"Test","ranges":[{"startOffset":7157,"endOffset":7372,"count":2},{"startOffset":7297,"endOffset":7323,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":7335,"endOffset":7368,"count":2}],"isBlockCoverage":true},{"functionName":"serverAddress","ranges":[{"startOffset":7404,"endOffset":7897,"count":0}],"isBlockCoverage":false},{"functionName":"TestAgent","ranges":[{"startOffset":8137,"endOffset":8461,"count":0}],"isBlockCoverage":false},{"functionName":"close","ranges":[{"startOffset":8535,"endOffset":8646,"count":0}],"isBlockCoverage":false},{"functionName":"keepOpen","ranges":[{"startOffset":8678,"endOffset":8715,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":8763,"endOffset":9564,"count":34}],"isBlockCoverage":true},{"functionName":"TestAgent.<computed>","ranges":[{"startOffset":8813,"endOffset":9561,"count":0}],"isBlockCoverage":false}]},{"scriptId":"851","url":"node:http","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4182,"count":1}],"isBlockCoverage":false},{"functionName":"createServer","ranges":[{"startOffset":1944,"endOffset":2036,"count":0}],"isBlockCoverage":false},{"functionName":"request","ranges":[{"startOffset":3001,"endOffset":3085,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":3250,"endOffset":3352,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3764,"endOffset":3973,"count":5},{"startOffset":3809,"endOffset":3942,"count":1}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4077,"endOffset":4122,"count":5}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":4126,"endOffset":4177,"count":0}],"isBlockCoverage":false}]},{"scriptId":"852","url":"node:_http_agent","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16463,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1693,"endOffset":1718,"count":1}],"isBlockCoverage":true},{"functionName":"ReusedHandle","ranges":[{"startOffset":2730,"endOffset":2809,"count":0}],"isBlockCoverage":false},{"functionName":"freeSocketErrorListener","ranges":[{"startOffset":2813,"endOffset":2992,"count":0}],"isBlockCoverage":false},{"functionName":"Agent","ranges":[{"startOffset":2994,"endOffset":6329,"count":4},{"startOffset":3056,"endOffset":3082,"count":0},{"startOffset":3945,"endOffset":4198,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4266,"endOffset":6212,"count":0}],"isBlockCoverage":false},{"functionName":"maybeEnableKeylog","ranges":[{"startOffset":6437,"endOffset":6962,"count":0}],"isBlockCoverage":false},{"functionName":"getName","ranges":[{"startOffset":7135,"endOffset":7623,"count":6},{"startOffset":7194,"endOffset":7208,"count":0},{"startOffset":7320,"endOffset":7349,"count":0},{"startOffset":7511,"endOffset":7540,"count":0},{"startOffset":7572,"endOffset":7605,"count":0}],"isBlockCoverage":true},{"functionName":"addRequest","ranges":[{"startOffset":7655,"endOffset":9817,"count":2},{"startOffset":7878,"endOffset":7981,"count":0},{"startOffset":8075,"endOffset":8109,"count":0},{"startOffset":8408,"endOffset":8707,"count":0},{"startOffset":8739,"endOffset":8759,"count":0},{"startOffset":8835,"endOffset":8998,"count":0},{"startOffset":9368,"endOffset":9815,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":9232,"endOffset":9362,"count":2},{"startOffset":9274,"endOffset":9300,"count":0}],"isBlockCoverage":true},{"functionName":"createSocket","ranges":[{"startOffset":9851,"endOffset":10747,"count":2},{"startOffset":9985,"endOffset":10019,"count":0},{"startOffset":10047,"endOffset":10075,"count":0},{"startOffset":10081,"endOffset":10136,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10301,"endOffset":10632,"count":2},{"startOffset":10334,"endOffset":10349,"count":0},{"startOffset":10379,"endOffset":10417,"count":0}],"isBlockCoverage":true},{"functionName":"calculateServerName","ranges":[{"startOffset":10750,"endOffset":11570,"count":2},{"startOffset":11085,"endOffset":11365,"count":0},{"startOffset":11531,"endOffset":11547,"count":0}],"isBlockCoverage":true},{"functionName":"installListeners","ranges":[{"startOffset":11572,"endOffset":13059,"count":2},{"startOffset":13014,"endOffset":13057,"count":0}],"isBlockCoverage":true},{"functionName":"onFree","ranges":[{"startOffset":11621,"endOffset":11715,"count":0}],"isBlockCoverage":false},{"functionName":"onClose","ranges":[{"startOffset":11743,"endOffset":12066,"count":2}],"isBlockCoverage":true},{"functionName":"onTimeout","ranges":[{"startOffset":12096,"endOffset":12440,"count":0}],"isBlockCoverage":false},{"functionName":"onRemove","ranges":[{"startOffset":12474,"endOffset":12955,"count":0}],"isBlockCoverage":false},{"functionName":"removeSocket","ranges":[{"startOffset":13092,"endOffset":14893,"count":2},{"startOffset":13436,"endOffset":13747,"count":4},{"startOffset":13492,"endOffset":13743,"count":2},{"startOffset":13786,"endOffset":13815,"count":0},{"startOffset":13817,"endOffset":13914,"count":0},{"startOffset":14239,"endOffset":14591,"count":0},{"startOffset":14607,"endOffset":14617,"count":0},{"startOffset":14619,"endOffset":14890,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":14770,"endOffset":14884,"count":0}],"isBlockCoverage":false},{"functionName":"keepSocketAlive","ranges":[{"startOffset":14930,"endOffset":15183,"count":0}],"isBlockCoverage":false},{"functionName":"reuseSocket","ranges":[{"startOffset":15216,"endOffset":15384,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":15413,"endOffset":15762,"count":0}],"isBlockCoverage":false},{"functionName":"setRequestSocket","ranges":[{"startOffset":15765,"endOffset":16006,"count":2},{"startOffset":15920,"endOffset":15951,"count":0},{"startOffset":15970,"endOffset":16005,"count":0}],"isBlockCoverage":true},{"functionName":"asyncResetHandle","ranges":[{"startOffset":16008,"endOffset":16403,"count":0}],"isBlockCoverage":false}]},{"scriptId":"853","url":"node:_http_client","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":26236,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2808,"endOffset":2833,"count":1}],"isBlockCoverage":true},{"functionName":"validateHost","ranges":[{"startOffset":3017,"endOffset":3310,"count":4},{"startOffset":3095,"endOffset":3122,"count":2},{"startOffset":3124,"endOffset":3293,"count":0}],"isBlockCoverage":true},{"functionName":"HTTPClientAsyncResource","ranges":[{"startOffset":3346,"endOffset":3416,"count":2}],"isBlockCoverage":true},{"functionName":"ClientRequest","ranges":[{"startOffset":3420,"endOffset":10642,"count":2},{"startOffset":3547,"endOffset":3625,"count":0},{"startOffset":3670,"endOffset":3731,"count":0},{"startOffset":3733,"endOffset":3799,"count":0},{"startOffset":3906,"endOffset":3956,"count":0},{"startOffset":4187,"endOffset":4677,"count":0},{"startOffset":5019,"endOffset":5070,"count":0},{"startOffset":5113,"endOffset":5182,"count":0},{"startOffset":5333,"endOffset":5347,"count":0},{"startOffset":5348,"endOffset":5353,"count":0},{"startOffset":5494,"endOffset":5508,"count":0},{"startOffset":5560,"endOffset":5587,"count":0},{"startOffset":5673,"endOffset":5733,"count":0},{"startOffset":5782,"endOffset":5821,"count":0},{"startOffset":5974,"endOffset":6051,"count":0},{"startOffset":6122,"endOffset":6187,"count":0},{"startOffset":6254,"endOffset":6299,"count":0},{"startOffset":6387,"endOffset":6438,"count":0},{"startOffset":6574,"endOffset":6622,"count":0},{"startOffset":6624,"endOffset":6733,"count":0},{"startOffset":6810,"endOffset":6816,"count":0},{"startOffset":6828,"endOffset":6864,"count":0},{"startOffset":7034,"endOffset":7085,"count":0},{"startOffset":7839,"endOffset":7913,"count":0},{"startOffset":8021,"endOffset":8320,"count":0},{"startOffset":8683,"endOffset":8750,"count":0},{"startOffset":8751,"endOffset":8811,"count":0},{"startOffset":8822,"endOffset":8871,"count":0},{"startOffset":9028,"endOffset":9063,"count":0},{"startOffset":9065,"endOffset":9189,"count":0},{"startOffset":9225,"endOffset":9435,"count":0},{"startOffset":9439,"endOffset":9561,"count":0},{"startOffset":9630,"endOffset":9723,"count":0},{"startOffset":9825,"endOffset":10640,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":10032,"endOffset":10196,"count":0}],"isBlockCoverage":false},{"functionName":"_finish","ranges":[{"startOffset":10806,"endOffset":11083,"count":2},{"startOffset":10969,"endOffset":11081,"count":0}],"isBlockCoverage":true},{"functionName":"_implicitHeader","ranges":[{"startOffset":11128,"endOffset":11340,"count":2},{"startOffset":11177,"endOffset":11229,"count":0}],"isBlockCoverage":true},{"functionName":"abort","ranges":[{"startOffset":11375,"endOffset":11513,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":11550,"endOffset":11826,"count":0}],"isBlockCoverage":false},{"functionName":"emitAbortNT","ranges":[{"startOffset":11829,"endOffset":11879,"count":0}],"isBlockCoverage":false},{"functionName":"ondrain","ranges":[{"startOffset":11881,"endOffset":12041,"count":0}],"isBlockCoverage":false},{"functionName":"socketCloseListener","ranges":[{"startOffset":12043,"endOffset":13210,"count":2},{"startOffset":12433,"endOffset":12490,"count":0},{"startOffset":12576,"endOffset":12605,"count":0},{"startOffset":12609,"endOffset":12936,"count":0},{"startOffset":13145,"endOffset":13208,"count":0}],"isBlockCoverage":true},{"functionName":"socketErrorListener","ranges":[{"startOffset":13212,"endOffset":13853,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnEnd","ranges":[{"startOffset":13855,"endOffset":14341,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnData","ranges":[{"startOffset":14343,"endOffset":16726,"count":2},{"startOffset":14565,"endOffset":14851,"count":0},{"startOffset":14905,"endOffset":16092,"count":0}],"isBlockCoverage":true},{"functionName":"statusIsInformational","ranges":[{"startOffset":16728,"endOffset":16963,"count":4},{"startOffset":16925,"endOffset":16941,"count":0},{"startOffset":16942,"endOffset":16959,"count":0}],"isBlockCoverage":true},{"functionName":"parserOnIncomingClient","ranges":[{"startOffset":16975,"endOffset":19447,"count":2},{"startOffset":17150,"endOffset":17312,"count":0},{"startOffset":17391,"endOffset":17400,"count":0},{"startOffset":17516,"endOffset":17595,"count":0},{"startOffset":17642,"endOffset":18345,"count":0},{"startOffset":18373,"endOffset":18392,"count":0},{"startOffset":18393,"endOffset":18417,"count":0},{"startOffset":18419,"endOffset":18637,"count":0},{"startOffset":19201,"endOffset":19213,"count":0},{"startOffset":19244,"endOffset":19253,"count":0},{"startOffset":19327,"endOffset":19406,"count":0}],"isBlockCoverage":true},{"functionName":"responseKeepAlive","ranges":[{"startOffset":19459,"endOffset":20528,"count":0}],"isBlockCoverage":false},{"functionName":"responseOnEnd","ranges":[{"startOffset":20530,"endOffset":21431,"count":2},{"startOffset":20650,"endOffset":20703,"count":0},{"startOffset":20969,"endOffset":21002,"count":0},{"startOffset":21042,"endOffset":21429,"count":0}],"isBlockCoverage":true},{"functionName":"responseOnTimeout","ranges":[{"startOffset":21433,"endOffset":21584,"count":0}],"isBlockCoverage":false},{"functionName":"requestOnPrefinish","ranges":[{"startOffset":21586,"endOffset":21709,"count":0}],"isBlockCoverage":false},{"functionName":"emitFreeNT","ranges":[{"startOffset":21711,"endOffset":21835,"count":0}],"isBlockCoverage":false},{"functionName":"tickOnSocket","ranges":[{"startOffset":21837,"endOffset":22981,"count":2},{"startOffset":22004,"endOffset":22028,"count":0},{"startOffset":22220,"endOffset":22233,"count":0},{"startOffset":22511,"endOffset":22570,"count":0},{"startOffset":22914,"endOffset":22949,"count":0}],"isBlockCoverage":true},{"functionName":"emitRequestTimeout","ranges":[{"startOffset":22983,"endOffset":23091,"count":0}],"isBlockCoverage":false},{"functionName":"listenSocketTimeout","ranges":[{"startOffset":23093,"endOffset":23484,"count":0}],"isBlockCoverage":false},{"functionName":"onSocket","ranges":[{"startOffset":23521,"endOffset":23692,"count":2}],"isBlockCoverage":true},{"functionName":"onSocketNT","ranges":[{"startOffset":23695,"endOffset":24395,"count":2},{"startOffset":23763,"endOffset":24333,"count":0}],"isBlockCoverage":true},{"functionName":"_destroy","ranges":[{"startOffset":23796,"endOffset":24033,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":24202,"endOffset":24257,"count":0}],"isBlockCoverage":false},{"functionName":"_deferToConnect","ranges":[{"startOffset":24456,"endOffset":25208,"count":2},{"startOffset":25179,"endOffset":25206,"count":0}],"isBlockCoverage":true},{"functionName":"callSocketMethod","ranges":[{"startOffset":24860,"endOffset":24953,"count":2}],"isBlockCoverage":true},{"functionName":"onSocket","ranges":[{"startOffset":24975,"endOffset":25116,"count":2},{"startOffset":25046,"endOffset":25112,"count":0}],"isBlockCoverage":true},{"functionName":"setTimeout","ranges":[{"startOffset":25247,"endOffset":25612,"count":0}],"isBlockCoverage":false},{"functionName":"setSocketTimeout","ranges":[{"startOffset":25615,"endOffset":25801,"count":0}],"isBlockCoverage":false},{"functionName":"setNoDelay","ranges":[{"startOffset":25840,"endOffset":25921,"count":2}],"isBlockCoverage":true},{"functionName":"setSocketKeepAlive","ranges":[{"startOffset":25973,"endOffset":26098,"count":0}],"isBlockCoverage":false},{"functionName":"clearTimeout","ranges":[{"startOffset":26140,"endOffset":26195,"count":0}],"isBlockCoverage":false}]},{"scriptId":"854","url":"node:_http_common","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8466,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1673,"endOffset":1698,"count":1}],"isBlockCoverage":true},{"functionName":"parserOnHeaders","ranges":[{"startOffset":2439,"endOffset":2686,"count":0}],"isBlockCoverage":false},{"functionName":"parserOnHeadersComplete","ranges":[{"startOffset":2899,"endOffset":4481,"count":2},{"startOffset":3185,"endOffset":3247,"count":0},{"startOffset":3423,"endOffset":3490,"count":0},{"startOffset":4248,"endOffset":4311,"count":0}],"isBlockCoverage":true},{"functionName":"parserOnBody","ranges":[{"startOffset":4483,"endOffset":4874,"count":2},{"startOffset":4641,"endOffset":4648,"count":0},{"startOffset":4846,"endOffset":4868,"count":0}],"isBlockCoverage":true},{"functionName":"parserOnMessageComplete","ranges":[{"startOffset":4876,"endOffset":5363,"count":2},{"startOffset":5119,"endOffset":5233,"count":0}],"isBlockCoverage":true},{"functionName":"parsersCb","ranges":[{"startOffset":5412,"endOffset":5700,"count":1}],"isBlockCoverage":true},{"functionName":"closeParserInstance","ranges":[{"startOffset":5704,"endOffset":5760,"count":0}],"isBlockCoverage":false},{"functionName":"freeParser","ranges":[{"startOffset":6083,"endOffset":6687,"count":2},{"startOffset":6174,"endOffset":6193,"count":0},{"startOffset":6259,"endOffset":6437,"count":0}],"isBlockCoverage":true},{"functionName":"checkIsHttpToken","ranges":[{"startOffset":6899,"endOffset":6981,"count":12}],"isBlockCoverage":true},{"functionName":"checkInvalidHeaderChar","ranges":[{"startOffset":7243,"endOffset":7335,"count":10}],"isBlockCoverage":true},{"functionName":"cleanParser","ranges":[{"startOffset":7337,"endOffset":7681,"count":3}],"isBlockCoverage":true},{"functionName":"prepareError","ranges":[{"startOffset":7683,"endOffset":7876,"count":0}],"isBlockCoverage":false},{"functionName":"isLenient","ranges":[{"startOffset":7906,"endOffset":8091,"count":2},{"startOffset":7954,"endOffset":7971,"count":0},{"startOffset":7973,"endOffset":8060,"count":0}],"isBlockCoverage":true}]},{"scriptId":"855","url":"node:internal/freelist","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":476,"count":1}],"isBlockCoverage":false},{"functionName":"FreeList","ranges":[{"startOffset":76,"endOffset":194,"count":1}],"isBlockCoverage":true},{"functionName":"alloc","ranges":[{"startOffset":198,"endOffset":317,"count":2},{"startOffset":240,"endOffset":263,"count":1},{"startOffset":264,"endOffset":312,"count":1}],"isBlockCoverage":true},{"functionName":"free","ranges":[{"startOffset":321,"endOffset":445,"count":2},{"startOffset":423,"endOffset":444,"count":0}],"isBlockCoverage":true}]},{"scriptId":"856","url":"node:_http_incoming","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12950,"count":1}],"isBlockCoverage":false},{"functionName":"readStart","ranges":[{"startOffset":1539,"endOffset":1642,"count":2}],"isBlockCoverage":true},{"functionName":"readStop","ranges":[{"startOffset":1644,"endOffset":1707,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingMessage","ranges":[{"startOffset":1773,"endOffset":2719,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":2910,"endOffset":2950,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":2959,"endOffset":3001,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3075,"endOffset":3372,"count":8},{"startOffset":3113,"endOffset":3341,"count":2},{"startOffset":3268,"endOffset":3335,"count":16}],"isBlockCoverage":true},{"functionName":"set","ranges":[{"startOffset":3381,"endOffset":3426,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3501,"endOffset":3804,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":3813,"endOffset":3859,"count":0}],"isBlockCoverage":false},{"functionName":"setTimeout","ranges":[{"startOffset":3904,"endOffset":4042,"count":0}],"isBlockCoverage":false},{"functionName":"_read","ranges":[{"startOffset":4521,"endOffset":4898,"count":0}],"isBlockCoverage":false},{"functionName":"_destroy","ranges":[{"startOffset":5141,"endOffset":5821,"count":2},{"startOffset":5215,"endOffset":5271,"count":0},{"startOffset":5634,"endOffset":5780,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":5708,"endOffset":5774,"count":0}],"isBlockCoverage":false},{"functionName":"_addHeaderLines","ranges":[{"startOffset":5885,"endOffset":6344,"count":2},{"startOffset":5996,"endOffset":6099,"count":0},{"startOffset":6221,"endOffset":6338,"count":0}],"isBlockCoverage":true},{"functionName":"matchKnownFields","ranges":[{"startOffset":7066,"endOffset":10960,"count":22},{"startOffset":7143,"endOffset":7223,"count":0},{"startOffset":7228,"endOffset":7575,"count":4},{"startOffset":7284,"endOffset":7298,"count":0},{"startOffset":7347,"endOffset":7361,"count":0},{"startOffset":7389,"endOffset":7408,"count":2},{"startOffset":7410,"endOffset":7452,"count":2},{"startOffset":7452,"endOffset":7471,"count":0},{"startOffset":7473,"endOffset":7493,"count":2},{"startOffset":7493,"endOffset":7540,"count":0},{"startOffset":7542,"endOffset":7575,"count":0},{"startOffset":7580,"endOffset":7969,"count":0},{"startOffset":7974,"endOffset":8216,"count":0},{"startOffset":8221,"endOffset":8413,"count":0},{"startOffset":8418,"endOffset":8708,"count":2},{"startOffset":8495,"endOffset":8515,"count":0},{"startOffset":8584,"endOffset":8600,"count":0},{"startOffset":8634,"endOffset":8659,"count":0},{"startOffset":8695,"endOffset":8708,"count":0},{"startOffset":8713,"endOffset":8826,"count":0},{"startOffset":8831,"endOffset":9042,"count":6},{"startOffset":8875,"endOffset":8902,"count":4},{"startOffset":8912,"endOffset":8934,"count":2},{"startOffset":8934,"endOffset":8997,"count":4},{"startOffset":9007,"endOffset":9029,"count":0},{"startOffset":9029,"endOffset":9042,"count":4},{"startOffset":9047,"endOffset":9472,"count":0},{"startOffset":9477,"endOffset":9599,"count":2},{"startOffset":9523,"endOffset":9552,"count":0},{"startOffset":9586,"endOffset":9599,"count":0},{"startOffset":9604,"endOffset":9955,"count":0},{"startOffset":9960,"endOffset":10207,"count":0},{"startOffset":10212,"endOffset":10575,"count":0},{"startOffset":10580,"endOffset":10833,"count":0},{"startOffset":10837,"endOffset":10856,"count":12},{"startOffset":10856,"endOffset":10959,"count":6}],"isBlockCoverage":true},{"functionName":"_addHeaderLine","ranges":[{"startOffset":11571,"endOffset":12269,"count":16},{"startOffset":11721,"endOffset":11734,"count":6},{"startOffset":11736,"endOffset":11960,"count":10},{"startOffset":11852,"endOffset":11916,"count":0},{"startOffset":11960,"endOffset":12267,"count":6},{"startOffset":11982,"endOffset":12177,"count":0}],"isBlockCoverage":true},{"functionName":"_dump","ranges":[{"startOffset":12392,"endOffset":12633,"count":0}],"isBlockCoverage":false},{"functionName":"onError","ranges":[{"startOffset":12636,"endOffset":12883,"count":2},{"startOffset":12840,"endOffset":12855,"count":0}],"isBlockCoverage":true}]},{"scriptId":"857","url":"node:_http_outgoing","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":28763,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2680,"endOffset":2705,"count":1}],"isBlockCoverage":true},{"functionName":"nop","ranges":[{"startOffset":2808,"endOffset":2816,"count":8}],"isBlockCoverage":true},{"functionName":"isCookieField","ranges":[{"startOffset":3059,"endOffset":3159,"count":0}],"isBlockCoverage":false},{"functionName":"OutgoingMessage","ranges":[{"startOffset":3161,"endOffset":4425,"count":2}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":4613,"endOffset":4755,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4835,"endOffset":4864,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":4940,"endOffset":5028,"count":2},{"startOffset":4990,"endOffset":5018,"count":0}],"isBlockCoverage":true},{"functionName":"get","ranges":[{"startOffset":5111,"endOffset":5200,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":5276,"endOffset":5387,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5485,"endOffset":5531,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5627,"endOffset":6112,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6253,"endOffset":6293,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":6302,"endOffset":6344,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6446,"endOffset":6902,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":7002,"endOffset":7452,"count":0}],"isBlockCoverage":false},{"functionName":"_renderHeaders","ranges":[{"startOffset":7570,"endOffset":8074,"count":0}],"isBlockCoverage":false},{"functionName":"OutgoingMessage.cork","ranges":[{"startOffset":8110,"endOffset":8205,"count":0}],"isBlockCoverage":false},{"functionName":"OutgoingMessage.uncork","ranges":[{"startOffset":8243,"endOffset":8359,"count":0}],"isBlockCoverage":false},{"functionName":"setTimeout","ranges":[{"startOffset":8401,"endOffset":8695,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":8938,"endOffset":9223,"count":0}],"isBlockCoverage":false},{"functionName":"_send","ranges":[{"startOffset":9333,"endOffset":10080,"count":4},{"startOffset":9601,"endOffset":10027,"count":2},{"startOffset":9749,"endOffset":9994,"count":0}],"isBlockCoverage":true},{"functionName":"_writeRaw","ranges":[{"startOffset":10133,"endOffset":10972,"count":4},{"startOffset":10219,"endOffset":10236,"count":0},{"startOffset":10238,"endOffset":10385,"count":0},{"startOffset":10425,"endOffset":10476,"count":0},{"startOffset":10489,"endOffset":10518,"count":0},{"startOffset":10519,"endOffset":10535,"count":0},{"startOffset":10537,"endOffset":10757,"count":0}],"isBlockCoverage":true},{"functionName":"_storeHeader","ranges":[{"startOffset":11030,"endOffset":15500,"count":2},{"startOffset":11456,"endOffset":11564,"count":10},{"startOffset":11570,"endOffset":12292,"count":0},{"startOffset":12362,"endOffset":12376,"count":0},{"startOffset":12378,"endOffset":12428,"count":0},{"startOffset":13022,"endOffset":13108,"count":0},{"startOffset":13110,"endOffset":13293,"count":0},{"startOffset":13348,"endOffset":13410,"count":0},{"startOffset":13494,"endOffset":13570,"count":0},{"startOffset":13600,"endOffset":13638,"count":0},{"startOffset":13640,"endOffset":13688,"count":0},{"startOffset":13719,"endOffset":13978,"count":0},{"startOffset":14084,"endOffset":14096,"count":0},{"startOffset":14098,"endOffset":14914,"count":0},{"startOffset":15235,"endOffset":15282,"count":0},{"startOffset":15483,"endOffset":15498,"count":0}],"isBlockCoverage":true},{"functionName":"processHeader","ranges":[{"startOffset":15502,"endOffset":16021,"count":10},{"startOffset":15582,"endOffset":15606,"count":0},{"startOffset":15634,"endOffset":15969,"count":0}],"isBlockCoverage":true},{"functionName":"storeHeader","ranges":[{"startOffset":16023,"endOffset":16222,"count":10},{"startOffset":16101,"endOffset":16133,"count":0}],"isBlockCoverage":true},{"functionName":"matchHeader","ranges":[{"startOffset":16224,"endOffset":17095,"count":10},{"startOffset":16323,"endOffset":16330,"count":0},{"startOffset":16399,"endOffset":16628,"count":0},{"startOffset":16633,"endOffset":16815,"count":0},{"startOffset":16820,"endOffset":16919,"count":2},{"startOffset":16924,"endOffset":16936,"count":0},{"startOffset":16941,"endOffset":16955,"count":0},{"startOffset":16960,"endOffset":17015,"count":0},{"startOffset":17020,"endOffset":17089,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17140,"endOffset":17286,"count":10},{"startOffset":17220,"endOffset":17284,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":17334,"endOffset":17604,"count":10},{"startOffset":17380,"endOffset":17443,"count":0},{"startOffset":17481,"endOffset":17602,"count":0}],"isBlockCoverage":true},{"functionName":"setHeader","ranges":[{"startOffset":17646,"endOffset":18006,"count":10},{"startOffset":17700,"endOffset":17749,"count":0},{"startOffset":17878,"endOffset":17927,"count":2}],"isBlockCoverage":true},{"functionName":"getHeader","ranges":[{"startOffset":18048,"endOffset":18270,"count":10},{"startOffset":18173,"endOffset":18180,"count":2},{"startOffset":18180,"endOffset":18256,"count":8},{"startOffset":18256,"endOffset":18267,"count":4}],"isBlockCoverage":true},{"functionName":"getHeaderNames","ranges":[{"startOffset":18383,"endOffset":18486,"count":0}],"isBlockCoverage":false},{"functionName":"getRawHeaderNames","ranges":[{"startOffset":18606,"endOffset":19007,"count":0}],"isBlockCoverage":false},{"functionName":"getHeaders","ranges":[{"startOffset":19109,"endOffset":19518,"count":0}],"isBlockCoverage":false},{"functionName":"hasHeader","ranges":[{"startOffset":19560,"endOffset":19718,"count":0}],"isBlockCoverage":false},{"functionName":"removeHeader","ranges":[{"startOffset":19763,"endOffset":20328,"count":0}],"isBlockCoverage":false},{"functionName":"_implicitHeader","ranges":[{"startOffset":20376,"endOffset":20467,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20584,"endOffset":20621,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20701,"endOffset":20737,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":20821,"endOffset":20903,"count":0}],"isBlockCoverage":false},{"functionName":"write","ranges":[{"startOffset":20981,"endOffset":21234,"count":0}],"isBlockCoverage":false},{"functionName":"onError","ranges":[{"startOffset":21237,"endOffset":21598,"count":0}],"isBlockCoverage":false},{"functionName":"emitErrorNt","ranges":[{"startOffset":21600,"endOffset":21749,"count":0}],"isBlockCoverage":false},{"functionName":"write_","ranges":[{"startOffset":21751,"endOffset":23301,"count":2},{"startOffset":21902,"endOffset":21947,"count":0},{"startOffset":22035,"endOffset":22201,"count":0},{"startOffset":22234,"endOffset":22283,"count":0},{"startOffset":22308,"endOffset":22358,"count":0},{"startOffset":22371,"endOffset":22513,"count":0},{"startOffset":22647,"endOffset":22798,"count":0},{"startOffset":22815,"endOffset":22828,"count":0},{"startOffset":22829,"endOffset":22858,"count":0},{"startOffset":22860,"endOffset":22940,"count":0},{"startOffset":22979,"endOffset":23000,"count":0},{"startOffset":23002,"endOffset":23194,"count":0}],"isBlockCoverage":true},{"functionName":"connectionCorkNT","ranges":[{"startOffset":23304,"endOffset":23356,"count":0}],"isBlockCoverage":false},{"functionName":"addTrailers","ranges":[{"startOffset":23399,"endOffset":24247,"count":0}],"isBlockCoverage":false},{"functionName":"onFinish","ranges":[{"startOffset":24250,"endOffset":24370,"count":2},{"startOffset":24336,"endOffset":24343,"count":0}],"isBlockCoverage":true},{"functionName":"end","ranges":[{"startOffset":24404,"endOffset":26189,"count":2},{"startOffset":24481,"endOffset":24547,"count":0},{"startOffset":24589,"endOffset":24640,"count":0},{"startOffset":24680,"endOffset":24838,"count":0},{"startOffset":24861,"endOffset":24894,"count":0},{"startOffset":24946,"endOffset":25338,"count":0},{"startOffset":25382,"endOffset":25412,"count":0},{"startOffset":25509,"endOffset":25582,"count":0},{"startOffset":25633,"endOffset":25641,"count":0},{"startOffset":25686,"endOffset":25727,"count":0},{"startOffset":25748,"endOffset":25863,"count":0},{"startOffset":26081,"endOffset":26101,"count":0},{"startOffset":26102,"endOffset":26144,"count":0},{"startOffset":26146,"endOffset":26171,"count":0}],"isBlockCoverage":true},{"functionName":"_finish","ranges":[{"startOffset":26229,"endOffset":26300,"count":2}],"isBlockCoverage":true},{"functionName":"_flush","ranges":[{"startOffset":27101,"endOffset":27531,"count":2},{"startOffset":27425,"endOffset":27525,"count":0}],"isBlockCoverage":true},{"functionName":"_flushOutput","ranges":[{"startOffset":27575,"endOffset":28218,"count":2},{"startOffset":27631,"endOffset":27676,"count":0},{"startOffset":27754,"endOffset":27771,"count":0},{"startOffset":27982,"endOffset":28093,"count":4}],"isBlockCoverage":true},{"functionName":"flushHeaders","ranges":[{"startOffset":28263,"endOffset":28394,"count":0}],"isBlockCoverage":false},{"functionName":"pipe","ranges":[{"startOffset":28430,"endOffset":28572,"count":0}],"isBlockCoverage":false},{"functionName":"OutgoingMessage.<computed>","ranges":[{"startOffset":28630,"endOffset":28675,"count":0}],"isBlockCoverage":false}]},{"scriptId":"858","url":"node:internal/http","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1132,"count":1}],"isBlockCoverage":false},{"functionName":"utcDate","ranges":[{"startOffset":346,"endOffset":413,"count":0}],"isBlockCoverage":false},{"functionName":"cache","ranges":[{"startOffset":415,"endOffset":572,"count":0}],"isBlockCoverage":false},{"functionName":"resetCache","ranges":[{"startOffset":574,"endOffset":623,"count":0}],"isBlockCoverage":false},{"functionName":"emitStatistics","ranges":[{"startOffset":625,"endOffset":1005,"count":2},{"startOffset":690,"endOffset":711,"count":0},{"startOffset":720,"endOffset":1004,"count":0}],"isBlockCoverage":true}]},{"scriptId":"859","url":"node:_http_server","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":32806,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2520,"endOffset":2545,"count":0}],"isBlockCoverage":false},{"functionName":"HTTPServerAsyncResource","ranges":[{"startOffset":6679,"endOffset":6758,"count":0}],"isBlockCoverage":false},{"functionName":"ServerResponse","ranges":[{"startOffset":6762,"endOffset":7374,"count":0}],"isBlockCoverage":false},{"functionName":"_finish","ranges":[{"startOffset":7541,"endOffset":7706,"count":0}],"isBlockCoverage":false},{"functionName":"onServerResponseClose","ranges":[{"startOffset":7806,"endOffset":8871,"count":0}],"isBlockCoverage":false},{"functionName":"assignSocket","ranges":[{"startOffset":8913,"endOffset":9125,"count":0}],"isBlockCoverage":false},{"functionName":"detachSocket","ranges":[{"startOffset":9168,"endOffset":9350,"count":0}],"isBlockCoverage":false},{"functionName":"writeContinue","ranges":[{"startOffset":9394,"endOffset":9512,"count":0}],"isBlockCoverage":false},{"functionName":"writeProcessing","ranges":[{"startOffset":9558,"endOffset":9656,"count":0}],"isBlockCoverage":false},{"functionName":"_implicitHeader","ranges":[{"startOffset":9702,"endOffset":9767,"count":0}],"isBlockCoverage":false},{"functionName":"writeHead","ranges":[{"startOffset":9818,"endOffset":12413,"count":0}],"isBlockCoverage":false},{"functionName":"storeHTTPOptions","ranges":[{"startOffset":12524,"endOffset":13095,"count":0}],"isBlockCoverage":false},{"functionName":"Server","ranges":[{"startOffset":13097,"endOffset":14271,"count":0}],"isBlockCoverage":false},{"functionName":"setTimeout","ranges":[{"startOffset":14408,"endOffset":14537,"count":0}],"isBlockCoverage":false},{"functionName":"Server.<computed>","ranges":[{"startOffset":14586,"endOffset":15154,"count":0}],"isBlockCoverage":false},{"functionName":"connectionListener","ranges":[{"startOffset":15157,"endOffset":15301,"count":0}],"isBlockCoverage":false},{"functionName":"connectionListenerInternal","ranges":[{"startOffset":15303,"endOffset":19191,"count":0}],"isBlockCoverage":false},{"functionName":"socketSetEncoding","ranges":[{"startOffset":19193,"endOffset":19265,"count":0}],"isBlockCoverage":false},{"functionName":"updateOutgoingData","ranges":[{"startOffset":19267,"endOffset":19383,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnDrain","ranges":[{"startOffset":19385,"endOffset":19839,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnTimeout","ranges":[{"startOffset":19841,"endOffset":20214,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnClose","ranges":[{"startOffset":20216,"endOffset":20365,"count":0}],"isBlockCoverage":false},{"functionName":"abortIncoming","ranges":[{"startOffset":20367,"endOffset":20550,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnEnd","ranges":[{"startOffset":20552,"endOffset":21074,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnData","ranges":[{"startOffset":21076,"endOffset":21305,"count":0}],"isBlockCoverage":false},{"functionName":"onRequestTimeout","ranges":[{"startOffset":21307,"endOffset":21520,"count":0}],"isBlockCoverage":false},{"functionName":"onParserExecute","ranges":[{"startOffset":21522,"endOffset":22021,"count":0}],"isBlockCoverage":false},{"functionName":"onParserTimeout","ranges":[{"startOffset":22023,"endOffset":22168,"count":0}],"isBlockCoverage":false},{"functionName":"noop","ranges":[{"startOffset":22183,"endOffset":22191,"count":0}],"isBlockCoverage":false},{"functionName":"socketOnError","ranges":[{"startOffset":22592,"endOffset":23227,"count":0}],"isBlockCoverage":false},{"functionName":"onParserExecuteCommon","ranges":[{"startOffset":23229,"endOffset":25175,"count":0}],"isBlockCoverage":false},{"functionName":"clearIncoming","ranges":[{"startOffset":25177,"endOffset":25515,"count":0}],"isBlockCoverage":false},{"functionName":"setRequestTimeout","ranges":[{"startOffset":25517,"endOffset":25849,"count":0}],"isBlockCoverage":false},{"functionName":"clearRequestTimeout","ranges":[{"startOffset":25851,"endOffset":26086,"count":0}],"isBlockCoverage":false},{"functionName":"resOnFinish","ranges":[{"startOffset":26088,"endOffset":27750,"count":0}],"isBlockCoverage":false},{"functionName":"emitCloseNT","ranges":[{"startOffset":27752,"endOffset":27852,"count":0}],"isBlockCoverage":false},{"functionName":"parserOnIncoming","ranges":[{"startOffset":28018,"endOffset":30998,"count":0}],"isBlockCoverage":false},{"functionName":"resetSocketTimeout","ranges":[{"startOffset":31000,"endOffset":31180,"count":0}],"isBlockCoverage":false},{"functionName":"onSocketResume","ranges":[{"startOffset":31182,"endOffset":31704,"count":0}],"isBlockCoverage":false},{"functionName":"onSocketPause","ranges":[{"startOffset":31706,"endOffset":31847,"count":0}],"isBlockCoverage":false},{"functionName":"unconsume","ranges":[{"startOffset":31849,"endOffset":32101,"count":0}],"isBlockCoverage":false},{"functionName":"generateSocketListenerWrapper","ranges":[{"startOffset":32103,"endOffset":32657,"count":0}],"isBlockCoverage":false}]},{"scriptId":"860","url":"node:diagnostics_channel","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2697,"count":1}],"isBlockCoverage":false},{"functionName":"subscribe","ranges":[{"startOffset":540,"endOffset":678,"count":0}],"isBlockCoverage":false},{"functionName":"unsubscribe","ranges":[{"startOffset":682,"endOffset":1126,"count":0}],"isBlockCoverage":false},{"functionName":"get hasSubscribers","ranges":[{"startOffset":1130,"endOffset":1173,"count":0}],"isBlockCoverage":false},{"functionName":"publish","ranges":[{"startOffset":1177,"endOffset":1478,"count":0}],"isBlockCoverage":false},{"functionName":"Channel","ranges":[{"startOffset":1500,"endOffset":1580,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1591,"endOffset":1776,"count":0}],"isBlockCoverage":false},{"functionName":"subscribe","ranges":[{"startOffset":1780,"endOffset":1928,"count":0}],"isBlockCoverage":false},{"functionName":"unsubscribe","ranges":[{"startOffset":1932,"endOffset":1969,"count":0}],"isBlockCoverage":false},{"functionName":"get hasSubscribers","ranges":[{"startOffset":1973,"endOffset":2017,"count":0}],"isBlockCoverage":false},{"functionName":"publish","ranges":[{"startOffset":2021,"endOffset":2033,"count":0}],"isBlockCoverage":false},{"functionName":"channel","ranges":[{"startOffset":2075,"endOffset":2448,"count":2},{"startOffset":2156,"endOffset":2176,"count":0},{"startOffset":2192,"endOffset":2207,"count":0},{"startOffset":2240,"endOffset":2267,"count":0},{"startOffset":2269,"endOffset":2349,"count":0}],"isBlockCoverage":true},{"functionName":"hasSubscribers","ranges":[{"startOffset":2450,"endOffset":2634,"count":0}],"isBlockCoverage":false}]},{"scriptId":"861","url":"node:https","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10053,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1736,"endOffset":1761,"count":0}],"isBlockCoverage":false},{"functionName":"Server","ranges":[{"startOffset":1844,"endOffset":2880,"count":0}],"isBlockCoverage":false},{"functionName":"createServer","ranges":[{"startOffset":3330,"endOffset":3422,"count":0}],"isBlockCoverage":false},{"functionName":"createConnection","ranges":[{"startOffset":3443,"endOffset":4540,"count":0}],"isBlockCoverage":false},{"functionName":"Agent","ranges":[{"startOffset":4891,"endOffset":5281,"count":1},{"startOffset":4953,"endOffset":4979,"count":0}],"isBlockCoverage":true},{"functionName":"getName","ranges":[{"startOffset":5652,"endOffset":7366,"count":0}],"isBlockCoverage":false},{"functionName":"_getSession","ranges":[{"startOffset":7399,"endOffset":7466,"count":0}],"isBlockCoverage":false},{"functionName":"_cacheSession","ranges":[{"startOffset":7501,"endOffset":8074,"count":0}],"isBlockCoverage":false},{"functionName":"_evictSession","ranges":[{"startOffset":8109,"endOffset":8339,"count":0}],"isBlockCoverage":false},{"functionName":"request","ranges":[{"startOffset":8479,"endOffset":9120,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9856,"endOffset":9962,"count":0}],"isBlockCoverage":false}]},{"scriptId":"862","url":"node:tls","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":12414,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3609,"endOffset":3673,"count":0}],"isBlockCoverage":false},{"functionName":"cacheRootCertificates","ranges":[{"startOffset":3701,"endOffset":3795,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":3899,"endOffset":4050,"count":0}],"isBlockCoverage":false},{"functionName":"convertProtocols","ranges":[{"startOffset":4160,"endOffset":4772,"count":0}],"isBlockCoverage":false},{"functionName":"convertALPNProtocols","ranges":[{"startOffset":4805,"endOffset":5142,"count":0}],"isBlockCoverage":false},{"functionName":"unfqdn","ranges":[{"startOffset":5145,"endOffset":5221,"count":0}],"isBlockCoverage":false},{"functionName":"toLowerCase","ranges":[{"startOffset":5329,"endOffset":5423,"count":0}],"isBlockCoverage":false},{"functionName":"splitHost","ranges":[{"startOffset":5425,"endOffset":5562,"count":0}],"isBlockCoverage":false},{"functionName":"check","ranges":[{"startOffset":5564,"endOffset":7550,"count":0}],"isBlockCoverage":false},{"functionName":"splitEscapedAltNames","ranges":[{"startOffset":7915,"endOffset":9151,"count":0}],"isBlockCoverage":false},{"functionName":"checkServerIdentity","ranges":[{"startOffset":9183,"endOffset":11796,"count":0}],"isBlockCoverage":false}]},{"scriptId":"863","url":"node:_tls_common","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5366,"count":1}],"isBlockCoverage":false},{"functionName":"toV","ranges":[{"startOffset":1805,"endOffset":2098,"count":0}],"isBlockCoverage":false},{"functionName":"SecureContext","ranges":[{"startOffset":2178,"endOffset":3015,"count":0}],"isBlockCoverage":false},{"functionName":"createSecureContext","ranges":[{"startOffset":3017,"endOffset":3477,"count":0}],"isBlockCoverage":false},{"functionName":"translatePeerCertificate","ranges":[{"startOffset":3716,"endOffset":5274,"count":0}],"isBlockCoverage":false}]},{"scriptId":"864","url":"node:internal/tls/secure-context","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9261,"count":1}],"isBlockCoverage":false},{"functionName":"getDefaultEcdhCurve","ranges":[{"startOffset":654,"endOffset":904,"count":0}],"isBlockCoverage":false},{"functionName":"getDefaultCiphers","ranges":[{"startOffset":906,"endOffset":1138,"count":0}],"isBlockCoverage":false},{"functionName":"addCACerts","ranges":[{"startOffset":1140,"endOffset":1304,"count":0}],"isBlockCoverage":false},{"functionName":"setCerts","ranges":[{"startOffset":1306,"endOffset":1466,"count":0}],"isBlockCoverage":false},{"functionName":"validateKeyOrCertOption","ranges":[{"startOffset":1468,"endOffset":1747,"count":0}],"isBlockCoverage":false},{"functionName":"setKey","ranges":[{"startOffset":1749,"endOffset":1991,"count":0}],"isBlockCoverage":false},{"functionName":"processCiphers","ranges":[{"startOffset":1993,"endOffset":2824,"count":0}],"isBlockCoverage":false},{"functionName":"configSecureContext","ranges":[{"startOffset":2826,"endOffset":9214,"count":0}],"isBlockCoverage":false}]},{"scriptId":"865","url":"node:internal/crypto/util","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10573,"count":1}],"isBlockCoverage":false},{"functionName":"lazyRequire","ranges":[{"startOffset":1190,"endOffset":1345,"count":3},{"startOffset":1284,"endOffset":1329,"count":1}],"isBlockCoverage":true},{"functionName":"setDefaultEncoding","ranges":[{"startOffset":1380,"endOffset":1441,"count":0}],"isBlockCoverage":false},{"functionName":"getDefaultEncoding","ranges":[{"startOffset":1443,"endOffset":1502,"count":0}],"isBlockCoverage":false},{"functionName":"toBuf","ranges":[{"startOffset":1677,"endOffset":1856,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1890,"endOffset":1933,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1967,"endOffset":2009,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2043,"endOffset":2085,"count":0}],"isBlockCoverage":false},{"functionName":"setEngine","ranges":[{"startOffset":2089,"endOffset":2400,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2447,"endOffset":2910,"count":0}],"isBlockCoverage":false},{"functionName":"validateMaxBufferLength","ranges":[{"startOffset":4460,"endOffset":4673,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeAlgorithm","ranges":[{"startOffset":4675,"endOffset":5625,"count":0}],"isBlockCoverage":false},{"functionName":"hasAnyNotIn","ranges":[{"startOffset":5627,"endOffset":5766,"count":0}],"isBlockCoverage":false},{"functionName":"validateBitLength","ranges":[{"startOffset":5768,"endOffset":6110,"count":0}],"isBlockCoverage":false},{"functionName":"validateByteLength","ranges":[{"startOffset":6112,"endOffset":6308,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6353,"endOffset":6618,"count":0}],"isBlockCoverage":false},{"functionName":"onDone","ranges":[{"startOffset":6622,"endOffset":6721,"count":0}],"isBlockCoverage":false},{"functionName":"jobPromise","ranges":[{"startOffset":6723,"endOffset":6886,"count":0}],"isBlockCoverage":false},{"functionName":"bigIntArrayToUnsignedInt","ranges":[{"startOffset":7422,"endOffset":7702,"count":0}],"isBlockCoverage":false},{"functionName":"bigIntArrayToUnsignedBigInt","ranges":[{"startOffset":7704,"endOffset":7940,"count":0}],"isBlockCoverage":false},{"functionName":"getStringOption","ranges":[{"startOffset":7942,"endOffset":8107,"count":0}],"isBlockCoverage":false},{"functionName":"getUsagesUnion","ranges":[{"startOffset":8109,"endOffset":8321,"count":0}],"isBlockCoverage":false},{"functionName":"getHashLength","ranges":[{"startOffset":8323,"endOffset":8503,"count":0}],"isBlockCoverage":false},{"functionName":"validateKeyOps","ranges":[{"startOffset":8642,"endOffset":9608,"count":0}],"isBlockCoverage":false},{"functionName":"secureHeapUsed","ranges":[{"startOffset":9610,"endOffset":9993,"count":0}],"isBlockCoverage":false}]},{"scriptId":"866","url":"node:internal/crypto/hashnames","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2786,"count":1}],"isBlockCoverage":false},{"functionName":"normalizeHashName","ranges":[{"startOffset":2101,"endOffset":2344,"count":0}],"isBlockCoverage":false}]},{"scriptId":"867","url":"node:internal/tls/parse-cert-string","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":889,"count":1}],"isBlockCoverage":false},{"functionName":"parseCertString","ranges":[{"startOffset":285,"endOffset":844,"count":0}],"isBlockCoverage":false}]},{"scriptId":"868","url":"node:_tls_wrap","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":49636,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1942,"endOffset":1967,"count":0}],"isBlockCoverage":false},{"functionName":"onhandshakestart","ranges":[{"startOffset":4060,"endOffset":4843,"count":0}],"isBlockCoverage":false},{"functionName":"onhandshakedone","ranges":[{"startOffset":4845,"endOffset":5138,"count":0}],"isBlockCoverage":false},{"functionName":"loadSession","ranges":[{"startOffset":5141,"endOffset":6345,"count":0}],"isBlockCoverage":false},{"functionName":"loadSNI","ranges":[{"startOffset":6348,"endOffset":7001,"count":0}],"isBlockCoverage":false},{"functionName":"requestOCSP","ranges":[{"startOffset":7004,"endOffset":8326,"count":0}],"isBlockCoverage":false},{"functionName":"requestOCSPDone","ranges":[{"startOffset":8328,"endOffset":8523,"count":0}],"isBlockCoverage":false},{"functionName":"onnewsessionclient","ranges":[{"startOffset":8525,"endOffset":8761,"count":0}],"isBlockCoverage":false},{"functionName":"onnewsession","ranges":[{"startOffset":8763,"endOffset":9599,"count":0}],"isBlockCoverage":false},{"functionName":"onPskServerCallback","ranges":[{"startOffset":9601,"endOffset":10249,"count":0}],"isBlockCoverage":false},{"functionName":"onPskClientCallback","ranges":[{"startOffset":10251,"endOffset":10956,"count":0}],"isBlockCoverage":false},{"functionName":"onkeylog","ranges":[{"startOffset":10958,"endOffset":11049,"count":0}],"isBlockCoverage":false},{"functionName":"onocspresponse","ranges":[{"startOffset":11051,"endOffset":11167,"count":0}],"isBlockCoverage":false},{"functionName":"onerror","ranges":[{"startOffset":11169,"endOffset":12099,"count":0}],"isBlockCoverage":false},{"functionName":"initRead","ranges":[{"startOffset":12243,"endOffset":12789,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket","ranges":[{"startOffset":12867,"endOffset":15172,"count":0}],"isBlockCoverage":false},{"functionName":"makeMethodProxy","ranges":[{"startOffset":15615,"endOffset":15790,"count":15}],"isBlockCoverage":true},{"functionName":"methodProxy","ranges":[{"startOffset":15657,"endOffset":15787,"count":0}],"isBlockCoverage":false},{"functionName":"close","ranges":[{"startOffset":15957,"endOffset":16650,"count":0}],"isBlockCoverage":false},{"functionName":"disableRenegotiation","ranges":[{"startOffset":16696,"endOffset":16769,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._wrapHandle","ranges":[{"startOffset":16806,"endOffset":17809,"count":0}],"isBlockCoverage":false},{"functionName":"defineHandleReading","ranges":[{"startOffset":17948,"endOffset":18169,"count":0}],"isBlockCoverage":false},{"functionName":"onSocketCloseDestroySSL","ranges":[{"startOffset":18171,"endOffset":18318,"count":0}],"isBlockCoverage":false},{"functionName":"destroySSL","ranges":[{"startOffset":18320,"endOffset":18371,"count":0}],"isBlockCoverage":false},{"functionName":"_destroySSL","ranges":[{"startOffset":18407,"endOffset":18699,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._init","ranges":[{"startOffset":18838,"endOffset":23566,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.renegotiate","ranges":[{"startOffset":23603,"endOffset":24837,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.exportKeyingMaterial","ranges":[{"startOffset":24883,"endOffset":25205,"count":0}],"isBlockCoverage":false},{"functionName":"setMaxSendFragment","ranges":[{"startOffset":25249,"endOffset":25371,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._handleTimeout","ranges":[{"startOffset":25411,"endOffset":25480,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._emitTLSError","ranges":[{"startOffset":25519,"endOffset":25605,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._tlsError","ranges":[{"startOffset":25640,"endOffset":25748,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._releaseControl","ranges":[{"startOffset":25789,"endOffset":25945,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._finishInit","ranges":[{"startOffset":25982,"endOffset":27041,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket._start","ranges":[{"startOffset":27073,"endOffset":27572,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.setServername","ranges":[{"startOffset":27611,"endOffset":27779,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.setSession","ranges":[{"startOffset":27815,"endOffset":27953,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.getPeerCertificate","ranges":[{"startOffset":27997,"endOffset":28161,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.getCertificate","ranges":[{"startOffset":28201,"endOffset":28407,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.getPeerX509Certificate","ranges":[{"startOffset":28455,"endOffset":28595,"count":0}],"isBlockCoverage":false},{"functionName":"TLSSocket.getX509Certificate","ranges":[{"startOffset":28639,"endOffset":28767,"count":0}],"isBlockCoverage":false},{"functionName":"makeSocketMethodProxy","ranges":[{"startOffset":28804,"endOffset":29002,"count":10}],"isBlockCoverage":true},{"functionName":"socketMethodProxy","ranges":[{"startOffset":28852,"endOffset":28999,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":29220,"endOffset":29298,"count":10}],"isBlockCoverage":true},{"functionName":"onServerSocketSecure","ranges":[{"startOffset":29340,"endOffset":29835,"count":0}],"isBlockCoverage":false},{"functionName":"onSocketTLSError","ranges":[{"startOffset":29837,"endOffset":30073,"count":0}],"isBlockCoverage":false},{"functionName":"onSocketKeylog","ranges":[{"startOffset":30075,"endOffset":30162,"count":0}],"isBlockCoverage":false},{"functionName":"onSocketClose","ranges":[{"startOffset":30164,"endOffset":30517,"count":0}],"isBlockCoverage":false},{"functionName":"tlsConnectionListener","ranges":[{"startOffset":30519,"endOffset":31368,"count":0}],"isBlockCoverage":false},{"functionName":"Server","ranges":[{"startOffset":34134,"endOffset":35958,"count":0}],"isBlockCoverage":false},{"functionName":"createServer","ranges":[{"startOffset":36112,"endOffset":36196,"count":0}],"isBlockCoverage":false},{"functionName":"Server.setSecureContext","ranges":[{"startOffset":36236,"endOffset":39139,"count":0}],"isBlockCoverage":false},{"functionName":"Server._getServerData","ranges":[{"startOffset":39177,"endOffset":39260,"count":0}],"isBlockCoverage":false},{"functionName":"Server._setServerData","ranges":[{"startOffset":39298,"endOffset":39375,"count":0}],"isBlockCoverage":false},{"functionName":"getTicketKeys","ranges":[{"startOffset":39412,"endOffset":39492,"count":0}],"isBlockCoverage":false},{"functionName":"setTicketKeys","ranges":[{"startOffset":39529,"endOffset":39725,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":39769,"endOffset":41835,"count":0}],"isBlockCoverage":false},{"functionName":"Server.addContext","ranges":[{"startOffset":41958,"endOffset":42326,"count":0}],"isBlockCoverage":false},{"functionName":"Server.<computed>","ranges":[{"startOffset":42375,"endOffset":42630,"count":0}],"isBlockCoverage":false},{"functionName":"SNICallback","ranges":[{"startOffset":42633,"endOffset":42940,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeConnectArgs","ranges":[{"startOffset":43173,"endOffset":43901,"count":0}],"isBlockCoverage":false},{"functionName":"onConnectSecure","ranges":[{"startOffset":43903,"endOffset":46206,"count":0}],"isBlockCoverage":false},{"functionName":"onConnectEnd","ranges":[{"startOffset":46208,"endOffset":46757,"count":0}],"isBlockCoverage":false},{"functionName":"connect","ranges":[{"startOffset":46823,"endOffset":49634,"count":0}],"isBlockCoverage":false}]},{"scriptId":"869","url":"node:crypto","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7610,"count":1}],"isBlockCoverage":false},{"functionName":"createHash","ranges":[{"startOffset":3343,"endOffset":3425,"count":0}],"isBlockCoverage":false},{"functionName":"createCipher","ranges":[{"startOffset":3427,"endOffset":3527,"count":0}],"isBlockCoverage":false},{"functionName":"createCipheriv","ranges":[{"startOffset":3529,"endOffset":3631,"count":0}],"isBlockCoverage":false},{"functionName":"createDecipher","ranges":[{"startOffset":3633,"endOffset":3737,"count":0}],"isBlockCoverage":false},{"functionName":"createDecipheriv","ranges":[{"startOffset":3739,"endOffset":3845,"count":0}],"isBlockCoverage":false},{"functionName":"createDiffieHellman","ranges":[{"startOffset":3847,"endOffset":4003,"count":0}],"isBlockCoverage":false},{"functionName":"createDiffieHellmanGroup","ranges":[{"startOffset":4005,"endOffset":4087,"count":0}],"isBlockCoverage":false},{"functionName":"createECDH","ranges":[{"startOffset":4089,"endOffset":4145,"count":0}],"isBlockCoverage":false},{"functionName":"createHmac","ranges":[{"startOffset":4147,"endOffset":4229,"count":0}],"isBlockCoverage":false},{"functionName":"createSign","ranges":[{"startOffset":4231,"endOffset":4313,"count":0}],"isBlockCoverage":false},{"functionName":"createVerify","ranges":[{"startOffset":4315,"endOffset":4401,"count":0}],"isBlockCoverage":false},{"functionName":"setFipsForced","ranges":[{"startOffset":5532,"endOffset":5620,"count":0}],"isBlockCoverage":false},{"functionName":"getFipsForced","ranges":[{"startOffset":5622,"endOffset":5662,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":6769,"endOffset":6834,"count":3}],"isBlockCoverage":true}]},{"scriptId":"870","url":"node:internal/crypto/random","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15086,"count":1}],"isBlockCoverage":false},{"functionName":"assertOffset","ranges":[{"startOffset":1112,"endOffset":1478,"count":0}],"isBlockCoverage":false},{"functionName":"assertSize","ranges":[{"startOffset":1480,"endOffset":1941,"count":0}],"isBlockCoverage":false},{"functionName":"randomBytes","ranges":[{"startOffset":1943,"endOffset":2474,"count":0}],"isBlockCoverage":false},{"functionName":"randomFillSync","ranges":[{"startOffset":2476,"endOffset":3144,"count":0}],"isBlockCoverage":false},{"functionName":"randomFill","ranges":[{"startOffset":3146,"endOffset":4180,"count":0}],"isBlockCoverage":false},{"functionName":"randomInt","ranges":[{"startOffset":4730,"endOffset":6957,"count":0}],"isBlockCoverage":false},{"functionName":"asyncRefillRandomIntCache","ranges":[{"startOffset":6959,"endOffset":7835,"count":0}],"isBlockCoverage":false},{"functionName":"onJobDone","ranges":[{"startOffset":7838,"endOffset":8000,"count":0}],"isBlockCoverage":false},{"functionName":"getRandomValues","ranges":[{"startOffset":8232,"endOffset":8848,"count":0}],"isBlockCoverage":false},{"functionName":"getHexBytes","ranges":[{"startOffset":9213,"endOffset":9512,"count":0}],"isBlockCoverage":false},{"functionName":"serializeUUID","ranges":[{"startOffset":9514,"endOffset":10240,"count":0}],"isBlockCoverage":false},{"functionName":"getBufferedUUID","ranges":[{"startOffset":10242,"endOffset":10545,"count":0}],"isBlockCoverage":false},{"functionName":"getUnbufferedUUID","ranges":[{"startOffset":10547,"endOffset":10785,"count":0}],"isBlockCoverage":false},{"functionName":"randomUUID","ranges":[{"startOffset":10787,"endOffset":11097,"count":0}],"isBlockCoverage":false},{"functionName":"createRandomPrimeJob","ranges":[{"startOffset":11099,"endOffset":12332,"count":0}],"isBlockCoverage":false},{"functionName":"generatePrime","ranges":[{"startOffset":12334,"endOffset":12772,"count":0}],"isBlockCoverage":false},{"functionName":"generatePrimeSync","ranges":[{"startOffset":12774,"endOffset":13026,"count":0}],"isBlockCoverage":false},{"functionName":"arrayBufferToUnsignedBigInt","ranges":[{"startOffset":13028,"endOffset":13147,"count":0}],"isBlockCoverage":false},{"functionName":"unsignedBigIntToBuffer","ranges":[{"startOffset":13149,"endOffset":13414,"count":0}],"isBlockCoverage":false},{"functionName":"checkPrime","ranges":[{"startOffset":13416,"endOffset":14193,"count":0}],"isBlockCoverage":false},{"functionName":"checkPrimeSync","ranges":[{"startOffset":14195,"endOffset":14899,"count":0}],"isBlockCoverage":false}]},{"scriptId":"871","url":"node:internal/crypto/pbkdf2","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3284,"count":1}],"isBlockCoverage":false},{"functionName":"pbkdf2","ranges":[{"startOffset":578,"endOffset":1376,"count":0}],"isBlockCoverage":false},{"functionName":"pbkdf2Sync","ranges":[{"startOffset":1378,"endOffset":1892,"count":0}],"isBlockCoverage":false},{"functionName":"check","ranges":[{"startOffset":1894,"endOffset":2239,"count":0}],"isBlockCoverage":false},{"functionName":"pbkdf2DeriveBits","ranges":[{"startOffset":2241,"endOffset":3216,"count":0}],"isBlockCoverage":false}]},{"scriptId":"872","url":"node:internal/crypto/scrypt","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4711,"count":1}],"isBlockCoverage":false},{"functionName":"scrypt","ranges":[{"startOffset":730,"endOffset":1530,"count":0}],"isBlockCoverage":false},{"functionName":"scryptSync","ranges":[{"startOffset":1532,"endOffset":2047,"count":0}],"isBlockCoverage":false},{"functionName":"check","ranges":[{"startOffset":2049,"endOffset":3630,"count":0}],"isBlockCoverage":false},{"functionName":"scryptDeriveBits","ranges":[{"startOffset":3632,"endOffset":4643,"count":0}],"isBlockCoverage":false}]},{"scriptId":"873","url":"node:internal/crypto/hkdf","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3678,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":894,"endOffset":1379,"count":0}],"isBlockCoverage":false},{"functionName":"prepareKey","ranges":[{"startOffset":1383,"endOffset":1898,"count":0}],"isBlockCoverage":false},{"functionName":"hkdf","ranges":[{"startOffset":1900,"endOffset":2354,"count":0}],"isBlockCoverage":false},{"functionName":"hkdfSync","ranges":[{"startOffset":2356,"endOffset":2694,"count":0}],"isBlockCoverage":false},{"functionName":"hkdfDeriveBits","ranges":[{"startOffset":2696,"endOffset":3616,"count":0}],"isBlockCoverage":false}]},{"scriptId":"874","url":"node:internal/crypto/keys","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":20682,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":2259,"endOffset":6186,"count":1}],"isBlockCoverage":true},{"functionName":"KeyObject","ranges":[{"startOffset":2369,"endOffset":2885,"count":0}],"isBlockCoverage":false},{"functionName":"get type","ranges":[{"startOffset":2891,"endOffset":2938,"count":0}],"isBlockCoverage":false},{"functionName":"from","ranges":[{"startOffset":2951,"endOffset":3092,"count":0}],"isBlockCoverage":false},{"functionName":"equals","ranges":[{"startOffset":3098,"endOffset":3382,"count":0}],"isBlockCoverage":false},{"functionName":"SecretKeyObject","ranges":[{"startOffset":3436,"endOffset":3494,"count":0}],"isBlockCoverage":false},{"functionName":"get symmetricKeySize","ranges":[{"startOffset":3500,"endOffset":3580,"count":0}],"isBlockCoverage":false},{"functionName":"export","ranges":[{"startOffset":3586,"endOffset":3934,"count":0}],"isBlockCoverage":false},{"functionName":"normalizeKeyDetails","ranges":[{"startOffset":4067,"endOffset":4335,"count":0}],"isBlockCoverage":false},{"functionName":"AsymmetricKeyObject","ranges":[{"startOffset":4444,"endOffset":4504,"count":0}],"isBlockCoverage":false},{"functionName":"get asymmetricKeyType","ranges":[{"startOffset":4510,"endOffset":4662,"count":0}],"isBlockCoverage":false},{"functionName":"get asymmetricKeyDetails","ranges":[{"startOffset":4668,"endOffset":5044,"count":0}],"isBlockCoverage":false},{"functionName":"PublicKeyObject","ranges":[{"startOffset":5108,"endOffset":5166,"count":0}],"isBlockCoverage":false},{"functionName":"export","ranges":[{"startOffset":5172,"endOffset":5462,"count":0}],"isBlockCoverage":false},{"functionName":"PrivateKeyObject","ranges":[{"startOffset":5527,"endOffset":5586,"count":0}],"isBlockCoverage":false},{"functionName":"export","ranges":[{"startOffset":5592,"endOffset":6105,"count":0}],"isBlockCoverage":false},{"functionName":"parseKeyFormat","ranges":[{"startOffset":6190,"endOffset":6575,"count":0}],"isBlockCoverage":false},{"functionName":"parseKeyType","ranges":[{"startOffset":6577,"endOffset":7429,"count":0}],"isBlockCoverage":false},{"functionName":"option","ranges":[{"startOffset":7431,"endOffset":7552,"count":0}],"isBlockCoverage":false},{"functionName":"parseKeyFormatAndType","ranges":[{"startOffset":7554,"endOffset":8254,"count":0}],"isBlockCoverage":false},{"functionName":"isStringOrBuffer","ranges":[{"startOffset":8256,"endOffset":8393,"count":0}],"isBlockCoverage":false},{"functionName":"parseKeyEncoding","ranges":[{"startOffset":8395,"endOffset":9752,"count":0}],"isBlockCoverage":false},{"functionName":"parsePublicKeyEncoding","ranges":[{"startOffset":9951,"endOffset":10087,"count":0}],"isBlockCoverage":false},{"functionName":"parsePrivateKeyEncoding","ranges":[{"startOffset":10287,"endOffset":10403,"count":0}],"isBlockCoverage":false},{"functionName":"getKeyObjectHandle","ranges":[{"startOffset":10405,"endOffset":10982,"count":0}],"isBlockCoverage":false},{"functionName":"getKeyTypes","ranges":[{"startOffset":10984,"endOffset":11489,"count":0}],"isBlockCoverage":false},{"functionName":"getKeyObjectHandleFromJwk","ranges":[{"startOffset":11491,"endOffset":14062,"count":0}],"isBlockCoverage":false},{"functionName":"prepareAsymmetricKey","ranges":[{"startOffset":14064,"endOffset":15572,"count":0}],"isBlockCoverage":false},{"functionName":"preparePrivateKey","ranges":[{"startOffset":15574,"endOffset":15662,"count":0}],"isBlockCoverage":false},{"functionName":"preparePublicOrPrivateKey","ranges":[{"startOffset":15664,"endOffset":15759,"count":0}],"isBlockCoverage":false},{"functionName":"prepareSecretKey","ranges":[{"startOffset":15761,"endOffset":16459,"count":0}],"isBlockCoverage":false},{"functionName":"createSecretKey","ranges":[{"startOffset":16461,"endOffset":16766,"count":0}],"isBlockCoverage":false},{"functionName":"createPublicKey","ranges":[{"startOffset":16768,"endOffset":17105,"count":0}],"isBlockCoverage":false},{"functionName":"createPrivateKey","ranges":[{"startOffset":17107,"endOffset":17448,"count":0}],"isBlockCoverage":false},{"functionName":"isKeyObject","ranges":[{"startOffset":17450,"endOffset":17532,"count":0}],"isBlockCoverage":false},{"functionName":"CryptoKey","ranges":[{"startOffset":18091,"endOffset":18151,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18155,"endOffset":18502,"count":0}],"isBlockCoverage":false},{"functionName":"get type","ranges":[{"startOffset":18506,"endOffset":18556,"count":0}],"isBlockCoverage":false},{"functionName":"get extractable","ranges":[{"startOffset":18560,"endOffset":18614,"count":0}],"isBlockCoverage":false},{"functionName":"get algorithm","ranges":[{"startOffset":18618,"endOffset":18668,"count":0}],"isBlockCoverage":false},{"functionName":"get usages","ranges":[{"startOffset":18672,"endOffset":18730,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":18734,"endOffset":19085,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":19089,"endOffset":19293,"count":0}],"isBlockCoverage":false},{"functionName":"InternalCryptoKey","ranges":[{"startOffset":19534,"endOffset":19936,"count":0}],"isBlockCoverage":false},{"functionName":"isCryptoKey","ranges":[{"startOffset":20066,"endOffset":20150,"count":0}],"isBlockCoverage":false},{"functionName":"isJwk","ranges":[{"startOffset":20152,"endOffset":20222,"count":0}],"isBlockCoverage":false}]},{"scriptId":"875","url":"node:internal/crypto/keygen","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":11480,"count":1}],"isBlockCoverage":false},{"functionName":"wrapKey","ranges":[{"startOffset":1266,"endOffset":1420,"count":0}],"isBlockCoverage":false},{"functionName":"generateKeyPair","ranges":[{"startOffset":1422,"endOffset":2046,"count":0}],"isBlockCoverage":false},{"functionName":"generateKeyPairSync","ranges":[{"startOffset":2172,"endOffset":2289,"count":0}],"isBlockCoverage":false},{"functionName":"handleError","ranges":[{"startOffset":2291,"endOffset":2668,"count":0}],"isBlockCoverage":false},{"functionName":"parseKeyEncoding","ranges":[{"startOffset":2670,"endOffset":3908,"count":0}],"isBlockCoverage":false},{"functionName":"createJob","ranges":[{"startOffset":3910,"endOffset":10012,"count":0}],"isBlockCoverage":false},{"functionName":"generateKeyJob","ranges":[{"startOffset":10043,"endOffset":10580,"count":0}],"isBlockCoverage":false},{"functionName":"handleGenerateKeyError","ranges":[{"startOffset":10582,"endOffset":10784,"count":0}],"isBlockCoverage":false},{"functionName":"generateKey","ranges":[{"startOffset":10786,"endOffset":11244,"count":0}],"isBlockCoverage":false},{"functionName":"generateKeySync","ranges":[{"startOffset":11246,"endOffset":11380,"count":0}],"isBlockCoverage":false}]},{"scriptId":"876","url":"node:internal/crypto/diffiehellman","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":16942,"count":1}],"isBlockCoverage":false},{"functionName":"DiffieHellman","ranges":[{"startOffset":1548,"endOffset":3452,"count":0}],"isBlockCoverage":false},{"functionName":"DiffieHellmanGroup","ranges":[{"startOffset":3455,"endOffset":3759,"count":0}],"isBlockCoverage":false},{"functionName":"dhGenerateKeys","ranges":[{"startOffset":3870,"endOffset":4032,"count":0}],"isBlockCoverage":false},{"functionName":"dhComputeSecret","ranges":[{"startOffset":4146,"endOffset":4505,"count":0}],"isBlockCoverage":false},{"functionName":"dhGetPrime","ranges":[{"startOffset":4604,"endOffset":4760,"count":0}],"isBlockCoverage":false},{"functionName":"dhGetGenerator","ranges":[{"startOffset":4871,"endOffset":5043,"count":0}],"isBlockCoverage":false},{"functionName":"dhGetPublicKey","ranges":[{"startOffset":5154,"endOffset":5314,"count":0}],"isBlockCoverage":false},{"functionName":"dhGetPrivateKey","ranges":[{"startOffset":5428,"endOffset":5590,"count":0}],"isBlockCoverage":false},{"functionName":"setPublicKey","ranges":[{"startOffset":5632,"endOffset":5821,"count":0}],"isBlockCoverage":false},{"functionName":"setPrivateKey","ranges":[{"startOffset":5865,"endOffset":6056,"count":0}],"isBlockCoverage":false},{"functionName":"ECDH","ranges":[{"startOffset":6060,"endOffset":6214,"count":0}],"isBlockCoverage":false},{"functionName":"generateKeys","ranges":[{"startOffset":6525,"endOffset":6647,"count":0}],"isBlockCoverage":false},{"functionName":"getPublicKey","ranges":[{"startOffset":6680,"endOffset":6878,"count":0}],"isBlockCoverage":false},{"functionName":"convertKey","ranges":[{"startOffset":6899,"endOffset":7249,"count":0}],"isBlockCoverage":false},{"functionName":"encode","ranges":[{"startOffset":7252,"endOffset":7387,"count":0}],"isBlockCoverage":false},{"functionName":"getFormat","ranges":[{"startOffset":7389,"endOffset":7712,"count":0}],"isBlockCoverage":false},{"functionName":"diffieHellman","ranges":[{"startOffset":7786,"endOffset":8854,"count":0}],"isBlockCoverage":false},{"functionName":"deriveBitsECDH","ranges":[{"startOffset":8973,"endOffset":9437,"count":0}],"isBlockCoverage":false},{"functionName":"deriveBitsDH","ranges":[{"startOffset":9554,"endOffset":9970,"count":0}],"isBlockCoverage":false},{"functionName":"verifyAcceptableDhKeyUse","ranges":[{"startOffset":9972,"endOffset":10342,"count":0}],"isBlockCoverage":false},{"functionName":"dhGenerateKey","ranges":[{"startOffset":10344,"endOffset":11521,"count":0}],"isBlockCoverage":false},{"functionName":"asyncDeriveBitsECDH","ranges":[{"startOffset":11523,"endOffset":13494,"count":0}],"isBlockCoverage":false},{"functionName":"asyncDeriveBitsDH","ranges":[{"startOffset":13496,"endOffset":15204,"count":0}],"isBlockCoverage":false},{"functionName":"dhExportKey","ranges":[{"startOffset":15206,"endOffset":15348,"count":0}],"isBlockCoverage":false},{"functionName":"dhImportKey","ranges":[{"startOffset":15350,"endOffset":16729,"count":0}],"isBlockCoverage":false}]},{"scriptId":"877","url":"node:internal/crypto/cipher","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":10241,"count":1}],"isBlockCoverage":false},{"functionName":"rsaFunctionFor","ranges":[{"startOffset":1227,"endOffset":1975,"count":4}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1295,"endOffset":1972,"count":0}],"isBlockCoverage":false},{"functionName":"getDecoder","ranges":[{"startOffset":2476,"endOffset":2697,"count":0}],"isBlockCoverage":false},{"functionName":"getUIntOption","ranges":[{"startOffset":2699,"endOffset":2933,"count":0}],"isBlockCoverage":false},{"functionName":"createCipherBase","ranges":[{"startOffset":2935,"endOffset":3354,"count":0}],"isBlockCoverage":false},{"functionName":"createCipher","ranges":[{"startOffset":3356,"endOffset":3591,"count":0}],"isBlockCoverage":false},{"functionName":"createCipherWithIV","ranges":[{"startOffset":3593,"endOffset":3932,"count":0}],"isBlockCoverage":false},{"functionName":"Cipher","ranges":[{"startOffset":4175,"endOffset":4376,"count":0}],"isBlockCoverage":false},{"functionName":"_transform","ranges":[{"startOffset":4519,"endOffset":4635,"count":0}],"isBlockCoverage":false},{"functionName":"_flush","ranges":[{"startOffset":4664,"endOffset":4802,"count":0}],"isBlockCoverage":false},{"functionName":"update","ranges":[{"startOffset":4831,"endOffset":5481,"count":0}],"isBlockCoverage":false},{"functionName":"final","ranges":[{"startOffset":5510,"endOffset":5813,"count":0}],"isBlockCoverage":false},{"functionName":"setAutoPadding","ranges":[{"startOffset":5851,"endOffset":5998,"count":0}],"isBlockCoverage":false},{"functionName":"getAuthTag","ranges":[{"startOffset":6031,"endOffset":6191,"count":0}],"isBlockCoverage":false},{"functionName":"setAuthTag","ranges":[{"startOffset":6195,"endOffset":6407,"count":0}],"isBlockCoverage":false},{"functionName":"setAAD","ranges":[{"startOffset":6435,"endOffset":6777,"count":0}],"isBlockCoverage":false},{"functionName":"Cipheriv","ranges":[{"startOffset":7025,"endOffset":7235,"count":0}],"isBlockCoverage":false},{"functionName":"addCipherPrototypeFunctions","ranges":[{"startOffset":7237,"endOffset":7828,"count":3},{"startOffset":7633,"endOffset":7706,"count":1},{"startOffset":7706,"endOffset":7768,"count":2}],"isBlockCoverage":true},{"functionName":"Decipher","ranges":[{"startOffset":8229,"endOffset":8437,"count":0}],"isBlockCoverage":false},{"functionName":"Decipheriv","ranges":[{"startOffset":8842,"endOffset":9059,"count":0}],"isBlockCoverage":false},{"functionName":"getCipherInfo","ranges":[{"startOffset":9221,"endOffset":10082,"count":0}],"isBlockCoverage":false}]},{"scriptId":"878","url":"node:internal/streams/lazy_transform","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1518,"count":1}],"isBlockCoverage":false},{"functionName":"LazyTransform","ranges":[{"startOffset":468,"endOffset":530,"count":0}],"isBlockCoverage":false},{"functionName":"makeGetter","ranges":[{"startOffset":662,"endOffset":970,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":699,"endOffset":967,"count":0}],"isBlockCoverage":false},{"functionName":"makeSetter","ranges":[{"startOffset":972,"endOffset":1167,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1009,"endOffset":1164,"count":0}],"isBlockCoverage":false}]},{"scriptId":"879","url":"node:internal/crypto/sig","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7083,"count":1}],"isBlockCoverage":false},{"functionName":"Sign","ranges":[{"startOffset":891,"endOffset":1150,"count":0}],"isBlockCoverage":false},{"functionName":"_write","ranges":[{"startOffset":1273,"endOffset":1365,"count":0}],"isBlockCoverage":false},{"functionName":"update","ranges":[{"startOffset":1392,"endOffset":1753,"count":0}],"isBlockCoverage":false},{"functionName":"getPadding","ranges":[{"startOffset":1756,"endOffset":1831,"count":0}],"isBlockCoverage":false},{"functionName":"getSaltLength","ranges":[{"startOffset":1833,"endOffset":1914,"count":0}],"isBlockCoverage":false},{"functionName":"getDSASignatureEncoding","ranges":[{"startOffset":1916,"endOffset":2268,"count":0}],"isBlockCoverage":false},{"functionName":"getIntOption","ranges":[{"startOffset":2270,"endOffset":2515,"count":0}],"isBlockCoverage":false},{"functionName":"sign","ranges":[{"startOffset":2539,"endOffset":3202,"count":0}],"isBlockCoverage":false},{"functionName":"signOneShot","ranges":[{"startOffset":3205,"endOffset":4410,"count":0}],"isBlockCoverage":false},{"functionName":"Verify","ranges":[{"startOffset":4412,"endOffset":4679,"count":0}],"isBlockCoverage":false},{"functionName":"verify","ranges":[{"startOffset":4907,"endOffset":5543,"count":0}],"isBlockCoverage":false},{"functionName":"verifyOneShot","ranges":[{"startOffset":5546,"endOffset":7009,"count":0}],"isBlockCoverage":false}]},{"scriptId":"880","url":"node:internal/crypto/hash","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4550,"count":1}],"isBlockCoverage":false},{"functionName":"Hash","ranges":[{"startOffset":962,"endOffset":1481,"count":0}],"isBlockCoverage":false},{"functionName":"copy","ranges":[{"startOffset":1612,"endOffset":1780,"count":0}],"isBlockCoverage":false},{"functionName":"_transform","ranges":[{"startOffset":1811,"endOffset":1916,"count":0}],"isBlockCoverage":false},{"functionName":"_flush","ranges":[{"startOffset":1943,"endOffset":2023,"count":0}],"isBlockCoverage":false},{"functionName":"update","ranges":[{"startOffset":2050,"endOffset":2562,"count":0}],"isBlockCoverage":false},{"functionName":"digest","ranges":[{"startOffset":2590,"endOffset":2935,"count":0}],"isBlockCoverage":false},{"functionName":"Hmac","ranges":[{"startOffset":2938,"endOffset":3337,"count":0}],"isBlockCoverage":false},{"functionName":"digest","ranges":[{"startOffset":3518,"endOffset":3937,"count":0}],"isBlockCoverage":false},{"functionName":"asyncDigest","ranges":[{"startOffset":4092,"endOffset":4495,"count":0}],"isBlockCoverage":false}]},{"scriptId":"881","url":"node:internal/crypto/x509","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9641,"count":1}],"isBlockCoverage":false},{"functionName":"isX509Certificate","ranges":[{"startOffset":1103,"endOffset":1186,"count":0}],"isBlockCoverage":false},{"functionName":"getFlags","ranges":[{"startOffset":1188,"endOffset":2477,"count":0}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":2536,"endOffset":2568,"count":0}],"isBlockCoverage":false},{"functionName":"InternalX509Certificate","ranges":[{"startOffset":2573,"endOffset":2639,"count":0}],"isBlockCoverage":false},{"functionName":"<instance_members_initializer>","ranges":[{"startOffset":2692,"endOffset":2724,"count":0}],"isBlockCoverage":false},{"functionName":"X509Certificate","ranges":[{"startOffset":2729,"endOffset":3051,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3055,"endOffset":3678,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3682,"endOffset":3846,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":3850,"endOffset":3910,"count":0}],"isBlockCoverage":false},{"functionName":"get subject","ranges":[{"startOffset":3914,"endOffset":4130,"count":0}],"isBlockCoverage":false},{"functionName":"get subjectAltName","ranges":[{"startOffset":4134,"endOffset":4378,"count":0}],"isBlockCoverage":false},{"functionName":"get issuer","ranges":[{"startOffset":4382,"endOffset":4594,"count":0}],"isBlockCoverage":false},{"functionName":"get issuerCertificate","ranges":[{"startOffset":4598,"endOffset":4947,"count":0}],"isBlockCoverage":false},{"functionName":"get infoAccess","ranges":[{"startOffset":4951,"endOffset":5179,"count":0}],"isBlockCoverage":false},{"functionName":"get validFrom","ranges":[{"startOffset":5183,"endOffset":5407,"count":0}],"isBlockCoverage":false},{"functionName":"get validTo","ranges":[{"startOffset":5411,"endOffset":5627,"count":0}],"isBlockCoverage":false},{"functionName":"get fingerprint","ranges":[{"startOffset":5631,"endOffset":5863,"count":0}],"isBlockCoverage":false},{"functionName":"get fingerprint256","ranges":[{"startOffset":5867,"endOffset":6111,"count":0}],"isBlockCoverage":false},{"functionName":"get fingerprint512","ranges":[{"startOffset":6115,"endOffset":6359,"count":0}],"isBlockCoverage":false},{"functionName":"get keyUsage","ranges":[{"startOffset":6363,"endOffset":6583,"count":0}],"isBlockCoverage":false},{"functionName":"get serialNumber","ranges":[{"startOffset":6587,"endOffset":6823,"count":0}],"isBlockCoverage":false},{"functionName":"get raw","ranges":[{"startOffset":6827,"endOffset":7027,"count":0}],"isBlockCoverage":false},{"functionName":"get publicKey","ranges":[{"startOffset":7031,"endOffset":7276,"count":0}],"isBlockCoverage":false},{"functionName":"toString","ranges":[{"startOffset":7280,"endOffset":7481,"count":0}],"isBlockCoverage":false},{"functionName":"toJSON","ranges":[{"startOffset":7606,"endOffset":7642,"count":0}],"isBlockCoverage":false},{"functionName":"get ca","ranges":[{"startOffset":7646,"endOffset":7847,"count":0}],"isBlockCoverage":false},{"functionName":"checkHost","ranges":[{"startOffset":7851,"endOffset":7976,"count":0}],"isBlockCoverage":false},{"functionName":"checkEmail","ranges":[{"startOffset":7980,"endOffset":8111,"count":0}],"isBlockCoverage":false},{"functionName":"checkIP","ranges":[{"startOffset":8115,"endOffset":8605,"count":0}],"isBlockCoverage":false},{"functionName":"checkIssued","ranges":[{"startOffset":8609,"endOffset":8815,"count":0}],"isBlockCoverage":false},{"functionName":"checkPrivateKey","ranges":[{"startOffset":8819,"endOffset":9082,"count":0}],"isBlockCoverage":false},{"functionName":"verify","ranges":[{"startOffset":9086,"endOffset":9330,"count":0}],"isBlockCoverage":false},{"functionName":"toLegacyObject","ranges":[{"startOffset":9334,"endOffset":9393,"count":0}],"isBlockCoverage":false}]},{"scriptId":"882","url":"node:internal/crypto/certificate","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1546,"count":1}],"isBlockCoverage":false},{"functionName":"verifySpkac","ranges":[{"startOffset":385,"endOffset":505,"count":0}],"isBlockCoverage":false},{"functionName":"exportPublicKey","ranges":[{"startOffset":507,"endOffset":635,"count":0}],"isBlockCoverage":false},{"functionName":"exportChallenge","ranges":[{"startOffset":637,"endOffset":765,"count":0}],"isBlockCoverage":false},{"functionName":"Certificate","ranges":[{"startOffset":1122,"endOffset":1216,"count":0}],"isBlockCoverage":false}]},{"scriptId":"883","url":"node:internal/js_stream_socket","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":7449,"count":1}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":335,"endOffset":364,"count":0}],"isBlockCoverage":false},{"functionName":"isClosing","ranges":[{"startOffset":693,"endOffset":756,"count":0}],"isBlockCoverage":false},{"functionName":"onreadstart","ranges":[{"startOffset":758,"endOffset":823,"count":0}],"isBlockCoverage":false},{"functionName":"onreadstop","ranges":[{"startOffset":825,"endOffset":888,"count":0}],"isBlockCoverage":false},{"functionName":"onshutdown","ranges":[{"startOffset":890,"endOffset":961,"count":0}],"isBlockCoverage":false},{"functionName":"onwrite","ranges":[{"startOffset":963,"endOffset":1040,"count":0}],"isBlockCoverage":false},{"functionName":"JSStreamSocket","ranges":[{"startOffset":1800,"endOffset":3495,"count":0}],"isBlockCoverage":false},{"functionName":"get StreamWrap","ranges":[{"startOffset":3635,"endOffset":3684,"count":0}],"isBlockCoverage":false},{"functionName":"isClosing","ranges":[{"startOffset":3688,"endOffset":3750,"count":0}],"isBlockCoverage":false},{"functionName":"readStart","ranges":[{"startOffset":3754,"endOffset":3811,"count":0}],"isBlockCoverage":false},{"functionName":"readStop","ranges":[{"startOffset":3815,"endOffset":3870,"count":0}],"isBlockCoverage":false},{"functionName":"doShutdown","ranges":[{"startOffset":3874,"endOffset":4870,"count":0}],"isBlockCoverage":false},{"functionName":"finishShutdown","ranges":[{"startOffset":4938,"endOffset":5230,"count":0}],"isBlockCoverage":false},{"functionName":"doWrite","ranges":[{"startOffset":5234,"endOffset":6156,"count":0}],"isBlockCoverage":false},{"functionName":"finishWrite","ranges":[{"startOffset":6224,"endOffset":6667,"count":0}],"isBlockCoverage":false},{"functionName":"doClose","ranges":[{"startOffset":6671,"endOffset":7412,"count":0}],"isBlockCoverage":false}]},{"scriptId":"884","url":"node:internal/tls/secure-pair","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1929,"count":1}],"isBlockCoverage":false},{"functionName":"DuplexSocket","ranges":[{"startOffset":347,"endOffset":436,"count":0}],"isBlockCoverage":false},{"functionName":"_read","ranges":[{"startOffset":440,"endOffset":565,"count":0}],"isBlockCoverage":false},{"functionName":"_write","ranges":[{"startOffset":569,"endOffset":773,"count":0}],"isBlockCoverage":false},{"functionName":"_final","ranges":[{"startOffset":777,"endOffset":874,"count":0}],"isBlockCoverage":false},{"functionName":"DuplexPair","ranges":[{"startOffset":899,"endOffset":1086,"count":0}],"isBlockCoverage":false},{"functionName":"SecurePair","ranges":[{"startOffset":1132,"endOffset":1734,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":1738,"endOffset":1813,"count":0}],"isBlockCoverage":false},{"functionName":"createSecurePair","ranges":[{"startOffset":1844,"endOffset":1927,"count":0}],"isBlockCoverage":false}]},{"scriptId":"885","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/methods/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1040,"count":1},{"startOffset":299,"endOffset":323,"count":0}],"isBlockCoverage":true},{"functionName":"getCurrentNodeMethods","ranges":[{"startOffset":383,"endOffset":535,"count":1}],"isBlockCoverage":true},{"functionName":"lowerCaseMethod","ranges":[{"startOffset":460,"endOffset":531,"count":34}],"isBlockCoverage":true},{"functionName":"getBasicNodeMethods","ranges":[{"startOffset":624,"endOffset":1039,"count":0}],"isBlockCoverage":false}]},{"scriptId":"886","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":26629,"count":1}],"isBlockCoverage":true},{"functionName":"request","ranges":[{"startOffset":842,"endOffset":1125,"count":0}],"isBlockCoverage":false},{"functionName":"noop","ranges":[{"startOffset":1314,"endOffset":1331,"count":0}],"isBlockCoverage":false},{"functionName":"_initHeaders","ranges":[{"startOffset":2202,"endOffset":2433,"count":2}],"isBlockCoverage":true},{"functionName":"Request","ranges":[{"startOffset":2583,"endOffset":3127,"count":2},{"startOffset":2666,"endOffset":2684,"count":0},{"startOffset":2879,"endOffset":2882,"count":0}],"isBlockCoverage":true},{"functionName":"Request.attach","ranges":[{"startOffset":3901,"endOffset":4480,"count":0}],"isBlockCoverage":false},{"functionName":"Request._getFormData","ranges":[{"startOffset":4516,"endOffset":4720,"count":0}],"isBlockCoverage":false},{"functionName":"Request.agent","ranges":[{"startOffset":4986,"endOffset":5087,"count":0}],"isBlockCoverage":false},{"functionName":"Request.type","ranges":[{"startOffset":5617,"endOffset":5729,"count":2},{"startOffset":5696,"endOffset":5702,"count":0}],"isBlockCoverage":true},{"functionName":"Request.accept","ranges":[{"startOffset":6163,"endOffset":6264,"count":0}],"isBlockCoverage":false},{"functionName":"Request.query","ranges":[{"startOffset":6515,"endOffset":6646,"count":0}],"isBlockCoverage":false},{"functionName":"Request.write","ranges":[{"startOffset":6830,"endOffset":6989,"count":0}],"isBlockCoverage":false},{"functionName":"Request.pipe","ranges":[{"startOffset":7155,"endOffset":7297,"count":0}],"isBlockCoverage":false},{"functionName":"Request._pipeContinue","ranges":[{"startOffset":7334,"endOffset":8183,"count":0}],"isBlockCoverage":false},{"functionName":"Request.buffer","ranges":[{"startOffset":8332,"endOffset":8397,"count":0}],"isBlockCoverage":false},{"functionName":"Request._redirect","ranges":[{"startOffset":8544,"endOffset":10058,"count":0}],"isBlockCoverage":false},{"functionName":"Request.auth","ranges":[{"startOffset":10501,"endOffset":10915,"count":0}],"isBlockCoverage":false},{"functionName":"Request.ca","ranges":[{"startOffset":11093,"endOffset":11144,"count":0}],"isBlockCoverage":false},{"functionName":"Request.key","ranges":[{"startOffset":11325,"endOffset":11377,"count":0}],"isBlockCoverage":false},{"functionName":"Request.pfx","ranges":[{"startOffset":11579,"endOffset":11775,"count":0}],"isBlockCoverage":false},{"functionName":"Request.cert","ranges":[{"startOffset":11953,"endOffset":12006,"count":0}],"isBlockCoverage":false},{"functionName":"Request.request","ranges":[{"startOffset":12124,"endOffset":14979,"count":2},{"startOffset":12152,"endOffset":12168,"count":0},{"startOffset":12320,"endOffset":12378,"count":0},{"startOffset":12416,"endOffset":12465,"count":0},{"startOffset":12579,"endOffset":12601,"count":0},{"startOffset":12701,"endOffset":12956,"count":0},{"startOffset":14252,"endOffset":14328,"count":0},{"startOffset":14349,"endOffset":14365,"count":0},{"startOffset":14367,"endOffset":14417,"count":0},{"startOffset":14451,"endOffset":14541,"count":4},{"startOffset":14580,"endOffset":14962,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":13638,"endOffset":13667,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":13691,"endOffset":14222,"count":0}],"isBlockCoverage":false},{"functionName":"Request.callback","ranges":[{"startOffset":15157,"endOffset":16289,"count":2},{"startOffset":15212,"endOffset":15243,"count":0},{"startOffset":15380,"endOffset":15387,"count":0},{"startOffset":15431,"endOffset":15486,"count":0},{"startOffset":15570,"endOffset":15791,"count":0},{"startOffset":15798,"endOffset":15842,"count":0},{"startOffset":15986,"endOffset":16234,"count":0},{"startOffset":16236,"endOffset":16288,"count":0}],"isBlockCoverage":true},{"functionName":"_isHost","ranges":[{"startOffset":16427,"endOffset":16535,"count":4}],"isBlockCoverage":true},{"functionName":"Request._emitResponse","ranges":[{"startOffset":16744,"endOffset":17017,"count":2}],"isBlockCoverage":true},{"functionName":"Request.end","ranges":[{"startOffset":17044,"endOffset":17353,"count":2},{"startOffset":17142,"endOffset":17250,"count":0},{"startOffset":17320,"endOffset":17327,"count":0}],"isBlockCoverage":true},{"functionName":"Request._end","ranges":[{"startOffset":17381,"endOffset":24435,"count":2},{"startOffset":17913,"endOffset":17935,"count":0},{"startOffset":17937,"endOffset":18005,"count":0},{"startOffset":18192,"endOffset":18205,"count":0},{"startOffset":23710,"endOffset":24286,"count":0},{"startOffset":24319,"endOffset":24387,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":18282,"endOffset":22481,"count":2},{"startOffset":18393,"endOffset":18448,"count":0},{"startOffset":18470,"endOffset":18491,"count":0},{"startOffset":18585,"endOffset":18590,"count":0},{"startOffset":18592,"endOffset":18607,"count":0},{"startOffset":18869,"endOffset":18896,"count":0},{"startOffset":18898,"endOffset":18939,"count":0},{"startOffset":18972,"endOffset":19066,"count":0},{"startOffset":19120,"endOffset":19150,"count":0},{"startOffset":19195,"endOffset":19299,"count":0},{"startOffset":19320,"endOffset":19444,"count":0},{"startOffset":19476,"endOffset":19620,"count":0},{"startOffset":19698,"endOffset":20049,"count":0},{"startOffset":21655,"endOffset":21720,"count":0},{"startOffset":21784,"endOffset":22095,"count":0},{"startOffset":22259,"endOffset":22477,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":20421,"endOffset":20901,"count":2},{"startOffset":20524,"endOffset":20893,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21133,"endOffset":21644,"count":2},{"startOffset":21185,"endOffset":21275,"count":0},{"startOffset":21421,"endOffset":21438,"count":0},{"startOffset":21440,"endOffset":21492,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":21981,"endOffset":22073,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":22145,"endOffset":22223,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":22275,"endOffset":22475,"count":0}],"isBlockCoverage":false},{"functionName":"getProgressMonitor","ranges":[{"startOffset":22545,"endOffset":22968,"count":0}],"isBlockCoverage":false},{"functionName":"bufferToChunks","ranges":[{"startOffset":22996,"endOffset":23578,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":23983,"endOffset":24280,"count":0}],"isBlockCoverage":false},{"functionName":"Request._shouldUnzip","ranges":[{"startOffset":24541,"endOffset":25033,"count":2},{"startOffset":24606,"endOffset":24675,"count":0},{"startOffset":24811,"endOffset":24932,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":25288,"endOffset":25735,"count":35},{"startOffset":25350,"endOffset":25360,"count":1},{"startOffset":25361,"endOffset":25369,"count":34}],"isBlockCoverage":true},{"functionName":"request.<computed>","ranges":[{"startOffset":25423,"endOffset":25732,"count":0}],"isBlockCoverage":false},{"functionName":"isText","ranges":[{"startOffset":25862,"endOffset":26037,"count":2}],"isBlockCoverage":true},{"functionName":"isImageOrVideo","ranges":[{"startOffset":26039,"endOffset":26153,"count":2}],"isBlockCoverage":true},{"functionName":"isJSON","ranges":[{"startOffset":26294,"endOffset":26418,"count":2}],"isBlockCoverage":true},{"functionName":"isRedirect","ranges":[{"startOffset":26543,"endOffset":26628,"count":2}],"isBlockCoverage":true}]},{"scriptId":"887","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/node_modules/debug/src/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":331,"count":1},{"startOffset":232,"endOffset":279,"count":0}],"isBlockCoverage":true}]},{"scriptId":"888","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/node_modules/debug/src/node.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4415,"count":1},{"startOffset":643,"endOffset":659,"count":0},{"startOffset":1052,"endOffset":1068,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1376,"endOffset":1425,"count":92}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":1434,"endOffset":1912,"count":0}],"isBlockCoverage":false},{"functionName":"useColors","ranges":[{"startOffset":1987,"endOffset":2123,"count":1},{"startOffset":2051,"endOffset":2088,"count":0}],"isBlockCoverage":true},{"functionName":"formatArgs","ranges":[{"startOffset":2196,"endOffset":2671,"count":0}],"isBlockCoverage":false},{"functionName":"getDate","ranges":[{"startOffset":2673,"endOffset":2794,"count":0}],"isBlockCoverage":false},{"functionName":"log","ranges":[{"startOffset":2883,"endOffset":2975,"count":0}],"isBlockCoverage":false},{"functionName":"save","ranges":[{"startOffset":3057,"endOffset":3325,"count":1},{"startOffset":3103,"endOffset":3144,"count":0}],"isBlockCoverage":true},{"functionName":"load","ranges":[{"startOffset":3442,"endOffset":3489,"count":1}],"isBlockCoverage":true},{"functionName":"init","ranges":[{"startOffset":3654,"endOffset":3861,"count":1},{"startOffset":3791,"endOffset":3859,"count":0}],"isBlockCoverage":true},{"functionName":"formatters.o","ranges":[{"startOffset":4031,"endOffset":4215,"count":0}],"isBlockCoverage":false},{"functionName":"formatters.O","ranges":[{"startOffset":4308,"endOffset":4412,"count":0}],"isBlockCoverage":false}]},{"scriptId":"889","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/node_modules/debug/src/common.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5929,"count":1}],"isBlockCoverage":true},{"functionName":"setup","ranges":[{"startOffset":121,"endOffset":5902,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":410,"endOffset":463,"count":8}],"isBlockCoverage":true},{"functionName":"selectColor","ranges":[{"startOffset":1108,"endOffset":1399,"count":1},{"startOffset":1208,"endOffset":1319,"count":10}],"isBlockCoverage":true},{"functionName":"createDebug","ranges":[{"startOffset":1579,"endOffset":3602,"count":1}],"isBlockCoverage":true},{"functionName":"debug","ranges":[{"startOffset":1636,"endOffset":3096,"count":4},{"startOffset":1725,"endOffset":1996,"count":0},{"startOffset":2181,"endOffset":3058,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":2380,"endOffset":2914,"count":0}],"isBlockCoverage":false},{"functionName":"destroy","ranges":[{"startOffset":3606,"endOffset":3798,"count":0}],"isBlockCoverage":false},{"functionName":"extend","ranges":[{"startOffset":3802,"endOffset":3952,"count":0}],"isBlockCoverage":false},{"functionName":"enable","ranges":[{"startOffset":4122,"endOffset":4922,"count":1},{"startOffset":4301,"endOffset":4313,"count":0},{"startOffset":4478,"endOffset":4735,"count":0},{"startOffset":4798,"endOffset":4918,"count":0}],"isBlockCoverage":true},{"functionName":"disable","ranges":[{"startOffset":4984,"endOffset":5036,"count":0}],"isBlockCoverage":false},{"functionName":"enabled","ranges":[{"startOffset":5188,"endOffset":5617,"count":1},{"startOffset":5252,"endOffset":5278,"count":0},{"startOffset":5367,"endOffset":5449,"count":0},{"startOffset":5513,"endOffset":5594,"count":0}],"isBlockCoverage":true},{"functionName":"coerce","ranges":[{"startOffset":5715,"endOffset":5835,"count":0}],"isBlockCoverage":false}]},{"scriptId":"890","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":133,"count":1}],"isBlockCoverage":true}]},{"scriptId":"891","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/incoming_form.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":13860,"count":1},{"startOffset":19,"endOffset":52,"count":0}],"isBlockCoverage":true},{"functionName":"IncomingForm","ranges":[{"startOffset":633,"endOffset":1481,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.parse","ranges":[{"startOffset":1594,"endOffset":3512,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.writeHeaders","ranges":[{"startOffset":3553,"endOffset":3658,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.write","ranges":[{"startOffset":3692,"endOffset":4271,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.pause","ranges":[{"startOffset":4305,"endOffset":4400,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.resume","ranges":[{"startOffset":4435,"endOffset":4530,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.onPart","ranges":[{"startOffset":4565,"endOffset":4656,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm.handlePart","ranges":[{"startOffset":4695,"endOffset":6132,"count":0}],"isBlockCoverage":false},{"functionName":"dummyParser","ranges":[{"startOffset":6135,"endOffset":6278,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._parseContentType","ranges":[{"startOffset":6323,"endOffset":7281,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._error","ranges":[{"startOffset":7316,"endOffset":7675,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._parseContentLength","ranges":[{"startOffset":7723,"endOffset":8079,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._newParser","ranges":[{"startOffset":8118,"endOffset":8164,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._initMultipart","ranges":[{"startOffset":8207,"endOffset":11002,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._fileName","ranges":[{"startOffset":11040,"endOffset":11524,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._initUrlencoded","ranges":[{"startOffset":11568,"endOffset":11870,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._initOctetStream","ranges":[{"startOffset":11915,"endOffset":13062,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._initJSONencoded","ranges":[{"startOffset":13107,"endOffset":13386,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._uploadPath","ranges":[{"startOffset":13426,"endOffset":13716,"count":0}],"isBlockCoverage":false},{"functionName":"IncomingForm._maybeEnd","ranges":[{"startOffset":13754,"endOffset":13858,"count":0}],"isBlockCoverage":false}]},{"scriptId":"892","url":"node:internal/crypto/webcrypto","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":22852,"count":1}],"isBlockCoverage":false},{"functionName":"randomUUID","ranges":[{"startOffset":1293,"endOffset":1312,"count":0}],"isBlockCoverage":false},{"functionName":"generateKey","ranges":[{"startOffset":1315,"endOffset":2838,"count":0}],"isBlockCoverage":false},{"functionName":"deriveBits","ranges":[{"startOffset":2840,"endOffset":4058,"count":0}],"isBlockCoverage":false},{"functionName":"deriveKey","ranges":[{"startOffset":4060,"endOffset":5834,"count":0}],"isBlockCoverage":false},{"functionName":"exportKeySpki","ranges":[{"startOffset":5836,"endOffset":6987,"count":0}],"isBlockCoverage":false},{"functionName":"exportKeyPkcs8","ranges":[{"startOffset":6989,"endOffset":8151,"count":0}],"isBlockCoverage":false},{"functionName":"exportKeyRaw","ranges":[{"startOffset":8153,"endOffset":9020,"count":0}],"isBlockCoverage":false},{"functionName":"exportKeyJWK","ranges":[{"startOffset":9022,"endOffset":10564,"count":0}],"isBlockCoverage":false},{"functionName":"exportKey","ranges":[{"startOffset":10566,"endOffset":11219,"count":0}],"isBlockCoverage":false},{"functionName":"importGenericSecretKey","ranges":[{"startOffset":11221,"endOffset":12972,"count":0}],"isBlockCoverage":false},{"functionName":"importKey","ranges":[{"startOffset":12974,"endOffset":14945,"count":0}],"isBlockCoverage":false},{"functionName":"wrapKey","ranges":[{"startOffset":15038,"endOffset":15619,"count":0}],"isBlockCoverage":false},{"functionName":"unwrapKey","ranges":[{"startOffset":15714,"endOffset":16540,"count":0}],"isBlockCoverage":false},{"functionName":"signVerify","ranges":[{"startOffset":16542,"endOffset":17968,"count":0}],"isBlockCoverage":false},{"functionName":"sign","ranges":[{"startOffset":17970,"endOffset":18058,"count":0}],"isBlockCoverage":false},{"functionName":"verify","ranges":[{"startOffset":18060,"endOffset":18172,"count":0}],"isBlockCoverage":false},{"functionName":"cipherOrWrap","ranges":[{"startOffset":18174,"endOffset":19863,"count":0}],"isBlockCoverage":false},{"functionName":"encrypt","ranges":[{"startOffset":19865,"endOffset":19994,"count":0}],"isBlockCoverage":false},{"functionName":"decrypt","ranges":[{"startOffset":19996,"endOffset":20125,"count":0}],"isBlockCoverage":false},{"functionName":"get subtle","ranges":[{"startOffset":20333,"endOffset":20370,"count":0}],"isBlockCoverage":false},{"functionName":"getRandomValues","ranges":[{"startOffset":20403,"endOffset":20577,"count":0}],"isBlockCoverage":false}]},{"scriptId":"893","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/file.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1643,"count":1},{"startOffset":19,"endOffset":52,"count":0}],"isBlockCoverage":true},{"functionName":"File","ranges":[{"startOffset":190,"endOffset":605,"count":0}],"isBlockCoverage":false},{"functionName":"File.open","ranges":[{"startOffset":687,"endOffset":754,"count":0}],"isBlockCoverage":false},{"functionName":"File.toJSON","ranges":[{"startOffset":781,"endOffset":1091,"count":0}],"isBlockCoverage":false},{"functionName":"File.write","ranges":[{"startOffset":1117,"endOffset":1443,"count":0}],"isBlockCoverage":false},{"functionName":"File.end","ranges":[{"startOffset":1467,"endOffset":1641,"count":0}],"isBlockCoverage":false}]},{"scriptId":"894","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/multipart_parser.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":8460,"count":1},{"startOffset":661,"endOffset":685,"count":13}],"isBlockCoverage":true},{"functionName":"lower","ranges":[{"startOffset":603,"endOffset":645,"count":0}],"isBlockCoverage":false},{"functionName":"MultipartParser","ranges":[{"startOffset":687,"endOffset":875,"count":0}],"isBlockCoverage":false},{"functionName":"MultipartParser.stateToString","ranges":[{"startOffset":952,"endOffset":1079,"count":0}],"isBlockCoverage":false},{"functionName":"MultipartParser.initWithBoundary","ranges":[{"startOffset":1127,"endOffset":1467,"count":0}],"isBlockCoverage":false},{"functionName":"MultipartParser.write","ranges":[{"startOffset":1504,"endOffset":7766,"count":0}],"isBlockCoverage":false},{"functionName":"MultipartParser.end","ranges":[{"startOffset":7801,"endOffset":8340,"count":0}],"isBlockCoverage":false},{"functionName":"MultipartParser.explain","ranges":[{"startOffset":8379,"endOffset":8458,"count":0}],"isBlockCoverage":false}]},{"scriptId":"895","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/querystring_parser.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":740,"count":1},{"startOffset":19,"endOffset":52,"count":0}],"isBlockCoverage":true},{"functionName":"QuerystringParser","ranges":[{"startOffset":234,"endOffset":319,"count":0}],"isBlockCoverage":false},{"functionName":"QuerystringParser.write","ranges":[{"startOffset":404,"endOffset":491,"count":0}],"isBlockCoverage":false},{"functionName":"QuerystringParser.end","ranges":[{"startOffset":528,"endOffset":737,"count":0}],"isBlockCoverage":false}]},{"scriptId":"896","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/octet_parser.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":456,"count":1}],"isBlockCoverage":true},{"functionName":"OctetParser","ranges":[{"startOffset":78,"endOffset":205,"count":0}],"isBlockCoverage":false},{"functionName":"OctetParser.write","ranges":[{"startOffset":316,"endOffset":390,"count":0}],"isBlockCoverage":false},{"functionName":"OctetParser.end","ranges":[{"startOffset":421,"endOffset":454,"count":0}],"isBlockCoverage":false}]},{"scriptId":"897","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/formidable/lib/json_parser.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":650,"count":1},{"startOffset":19,"endOffset":52,"count":0}],"isBlockCoverage":true},{"functionName":"JSONParser","ranges":[{"startOffset":94,"endOffset":194,"count":0}],"isBlockCoverage":false},{"functionName":"JSONParser.write","ranges":[{"startOffset":258,"endOffset":368,"count":0}],"isBlockCoverage":false},{"functionName":"JSONParser.end","ranges":[{"startOffset":398,"endOffset":648,"count":0}],"isBlockCoverage":false}]},{"scriptId":"898","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/form-data/lib/form_data.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":13199,"count":1}],"isBlockCoverage":true},{"functionName":"FormData","ranges":[{"startOffset":689,"endOffset":1001,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.append","ranges":[{"startOffset":1122,"endOffset":1953,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._trackLength","ranges":[{"startOffset":1990,"endOffset":2986,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._lengthRetriever","ranges":[{"startOffset":3027,"endOffset":4558,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._multiPartHeader","ranges":[{"startOffset":4599,"endOffset":5947,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._getContentDisposition","ranges":[{"startOffset":5994,"endOffset":6787,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._getContentType","ranges":[{"startOffset":6827,"endOffset":7741,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._multiPartFooter","ranges":[{"startOffset":7782,"endOffset":8009,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._lastBoundary","ranges":[{"startOffset":8047,"endOffset":8126,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.getHeaders","ranges":[{"startOffset":8161,"endOffset":8476,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.getBoundary","ranges":[{"startOffset":8512,"endOffset":8611,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.getBuffer","ranges":[{"startOffset":8645,"endOffset":9557,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._generateBoundary","ranges":[{"startOffset":9599,"endOffset":9915,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.getLengthSync","ranges":[{"startOffset":10099,"endOffset":10764,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.hasKnownLength","ranges":[{"startOffset":10967,"endOffset":11107,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.getLength","ranges":[{"startOffset":11141,"endOffset":11665,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.submit","ranges":[{"startOffset":11696,"endOffset":12977,"count":0}],"isBlockCoverage":false},{"functionName":"FormData._error","ranges":[{"startOffset":13008,"endOffset":13119,"count":0}],"isBlockCoverage":false},{"functionName":"FormData.toString","ranges":[{"startOffset":13152,"endOffset":13197,"count":0}],"isBlockCoverage":false}]},{"scriptId":"899","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/combined-stream/lib/combined_stream.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":4687,"count":1}],"isBlockCoverage":true},{"functionName":"CombinedStream","ranges":[{"startOffset":148,"endOffset":449,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.create","ranges":[{"startOffset":514,"endOffset":706,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.isStreamLike","ranges":[{"startOffset":739,"endOffset":943,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.append","ranges":[{"startOffset":980,"endOffset":1491,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.pipe","ranges":[{"startOffset":1526,"endOffset":1636,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._getNext","ranges":[{"startOffset":1675,"endOffset":1992,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._realGetNext","ranges":[{"startOffset":2035,"endOffset":2527,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._pipeNext","ranges":[{"startOffset":2567,"endOffset":2864,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._handleErrors","ranges":[{"startOffset":2908,"endOffset":3016,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.write","ranges":[{"startOffset":3052,"endOffset":3097,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.pause","ranges":[{"startOffset":3133,"endOffset":3341,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.resume","ranges":[{"startOffset":3378,"endOffset":3648,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.end","ranges":[{"startOffset":3682,"endOffset":3733,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream.destroy","ranges":[{"startOffset":3771,"endOffset":3824,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._reset","ranges":[{"startOffset":3861,"endOffset":3952,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._checkDataSize","ranges":[{"startOffset":3997,"endOffset":4229,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._updateDataSize","ranges":[{"startOffset":4275,"endOffset":4583,"count":0}],"isBlockCoverage":false},{"functionName":"CombinedStream._emitError","ranges":[{"startOffset":4624,"endOffset":4685,"count":0}],"isBlockCoverage":false}]},{"scriptId":"900","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/delayed-stream/lib/delayed_stream.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2319,"count":1}],"isBlockCoverage":true},{"functionName":"DelayedStream","ranges":[{"startOffset":100,"endOffset":325,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream.create","ranges":[{"startOffset":388,"endOffset":869,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":982,"endOffset":1031,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream.setEncoding","ranges":[{"startOffset":1075,"endOffset":1153,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream.resume","ranges":[{"startOffset":1189,"endOffset":1277,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream.pause","ranges":[{"startOffset":1312,"endOffset":1349,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream.release","ranges":[{"startOffset":1386,"endOffset":1553,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream.pipe","ranges":[{"startOffset":1587,"endOffset":1686,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream._handleEmit","ranges":[{"startOffset":1727,"endOffset":1964,"count":0}],"isBlockCoverage":false},{"functionName":"DelayedStream._checkIfMaxDataSizeExceeded","ranges":[{"startOffset":2021,"endOffset":2317,"count":0}],"isBlockCoverage":false}]},{"scriptId":"901","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mime-types/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3663,"count":1}],"isBlockCoverage":true},{"functionName":"charset","ranges":[{"startOffset":841,"endOffset":1232,"count":0}],"isBlockCoverage":false},{"functionName":"contentType","ranges":[{"startOffset":1366,"endOffset":1822,"count":0}],"isBlockCoverage":false},{"functionName":"extension","ranges":[{"startOffset":1934,"endOffset":2257,"count":0}],"isBlockCoverage":false},{"functionName":"lookup","ranges":[{"startOffset":2374,"endOffset":2678,"count":0}],"isBlockCoverage":false},{"functionName":"populateMaps","ranges":[{"startOffset":2744,"endOffset":3662,"count":1}],"isBlockCoverage":true},{"functionName":"forEachMimeType","ranges":[{"startOffset":2912,"endOffset":3659,"count":2279},{"startOffset":3016,"endOffset":3031,"count":965},{"startOffset":3033,"endOffset":3053,"count":1314},{"startOffset":3053,"endOffset":3177,"count":965},{"startOffset":3177,"endOffset":3655,"count":1220},{"startOffset":3238,"endOffset":3583,"count":40},{"startOffset":3417,"endOffset":3511,"count":34},{"startOffset":3441,"endOffset":3510,"count":19},{"startOffset":3457,"endOffset":3509,"count":11},{"startOffset":3513,"endOffset":3575,"count":23},{"startOffset":3583,"endOffset":3655,"count":1197}],"isBlockCoverage":true}]},{"scriptId":"902","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mime-db/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":189,"count":1}],"isBlockCoverage":true}]},{"scriptId":"903","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":156,"count":1}],"isBlockCoverage":true}]},{"scriptId":"904","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/parallel.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1017,"count":1}],"isBlockCoverage":true},{"functionName":"parallel","ranges":[{"startOffset":492,"endOffset":1016,"count":0}],"isBlockCoverage":false}]},{"scriptId":"905","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/lib/iterate.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1794,"count":1}],"isBlockCoverage":true},{"functionName":"iterate","ranges":[{"startOffset":390,"endOffset":1078,"count":0}],"isBlockCoverage":false},{"functionName":"runJob","ranges":[{"startOffset":1455,"endOffset":1793,"count":0}],"isBlockCoverage":false}]},{"scriptId":"906","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/lib/async.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":599,"count":1}],"isBlockCoverage":true},{"functionName":"async","ranges":[{"startOffset":251,"endOffset":598,"count":0}],"isBlockCoverage":false}]},{"scriptId":"907","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/lib/defer.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":441,"count":1}],"isBlockCoverage":true},{"functionName":"defer","ranges":[{"startOffset":140,"endOffset":440,"count":0}],"isBlockCoverage":false}]},{"scriptId":"908","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/lib/abort.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":497,"count":1}],"isBlockCoverage":true},{"functionName":"abort","ranges":[{"startOffset":122,"endOffset":246,"count":0}],"isBlockCoverage":false},{"functionName":"clean","ranges":[{"startOffset":400,"endOffset":496,"count":0}],"isBlockCoverage":false}]},{"scriptId":"909","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/lib/state.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":941,"count":1}],"isBlockCoverage":true},{"functionName":"state","ranges":[{"startOffset":341,"endOffset":940,"count":0}],"isBlockCoverage":false}]},{"scriptId":"910","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/lib/terminator.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":533,"count":1}],"isBlockCoverage":true},{"functionName":"terminator","ranges":[{"startOffset":270,"endOffset":532,"count":0}],"isBlockCoverage":false}]},{"scriptId":"911","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/serial.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":501,"count":1}],"isBlockCoverage":true},{"functionName":"serial","ranges":[{"startOffset":399,"endOffset":500,"count":0}],"isBlockCoverage":false}]},{"scriptId":"912","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/asynckit/serialOrdered.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1751,"count":1}],"isBlockCoverage":true},{"functionName":"serialOrdered","ranges":[{"startOffset":657,"endOffset":1203,"count":0}],"isBlockCoverage":false},{"functionName":"ascending","ranges":[{"startOffset":1427,"endOffset":1492,"count":0}],"isBlockCoverage":false},{"functionName":"descending","ranges":[{"startOffset":1690,"endOffset":1750,"count":0}],"isBlockCoverage":false}]},{"scriptId":"913","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/form-data/lib/populate.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":177,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":45,"endOffset":175,"count":0}],"isBlockCoverage":false}]},{"scriptId":"914","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/response.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2366,"count":1}],"isBlockCoverage":true},{"functionName":"Response","ranges":[{"startOffset":480,"endOffset":1138,"count":2},{"startOffset":667,"endOffset":677,"count":0}],"isBlockCoverage":true},{"functionName":"Response.destroy","ranges":[{"startOffset":1325,"endOffset":1366,"count":0}],"isBlockCoverage":false},{"functionName":"Response.pause","ranges":[{"startOffset":1415,"endOffset":1448,"count":0}],"isBlockCoverage":false},{"functionName":"Response.resume","ranges":[{"startOffset":1499,"endOffset":1533,"count":0}],"isBlockCoverage":false},{"functionName":"Response.toError","ranges":[{"startOffset":1665,"endOffset":1956,"count":1}],"isBlockCoverage":true},{"functionName":"Response.setStatusProperties","ranges":[{"startOffset":2001,"endOffset":2141,"count":0}],"isBlockCoverage":false},{"functionName":"Response.toJSON","ranges":[{"startOffset":2231,"endOffset":2364,"count":0}],"isBlockCoverage":false}]},{"scriptId":"915","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/response-base.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2869,"count":1}],"isBlockCoverage":true},{"functionName":"ResponseBase","ranges":[{"startOffset":211,"endOffset":271,"count":1}],"isBlockCoverage":true},{"functionName":"mixin","ranges":[{"startOffset":379,"endOffset":508,"count":1},{"startOffset":443,"endOffset":492,"count":3}],"isBlockCoverage":true},{"functionName":"ResponseBase.get","ranges":[{"startOffset":650,"endOffset":712,"count":0}],"isBlockCoverage":false},{"functionName":"ResponseBase._setHeaderProperties","ranges":[{"startOffset":1013,"endOffset":1463,"count":2},{"startOffset":1137,"endOffset":1142,"count":0},{"startOffset":1350,"endOffset":1417,"count":0},{"startOffset":1424,"endOffset":1461,"count":0}],"isBlockCoverage":true},{"functionName":"ResponseBase._setStatusProperties","ranges":[{"startOffset":2118,"endOffset":2867,"count":2},{"startOffset":2458,"endOffset":2470,"count":1},{"startOffset":2480,"endOffset":2496,"count":1},{"startOffset":2505,"endOffset":2512,"count":1}],"isBlockCoverage":true}]},{"scriptId":"916","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/utils.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1365,"count":1}],"isBlockCoverage":true},{"functionName":"exports.type","ranges":[{"startOffset":146,"endOffset":199,"count":4}],"isBlockCoverage":true},{"functionName":"exports.params","ranges":[{"startOffset":325,"endOffset":553,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":375,"endOffset":545,"count":4},{"startOffset":510,"endOffset":525,"count":2}],"isBlockCoverage":true},{"functionName":"exports.parseLinks","ranges":[{"startOffset":677,"endOffset":922,"count":0}],"isBlockCoverage":false},{"functionName":"exports.cleanHeader","ranges":[{"startOffset":1075,"endOffset":1363,"count":0}],"isBlockCoverage":false}]},{"scriptId":"917","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/unzip.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1516,"count":1}],"isBlockCoverage":true},{"functionName":"exports.unzip","ranges":[{"startOffset":337,"endOffset":1514,"count":0}],"isBlockCoverage":false}]},{"scriptId":"918","url":"node:zlib","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":29376,"count":1}],"isBlockCoverage":false},{"functionName":"zlibBuffer","ranges":[{"startOffset":3527,"endOffset":4154,"count":0}],"isBlockCoverage":false},{"functionName":"zlibBufferOnData","ranges":[{"startOffset":4156,"endOffset":4487,"count":0}],"isBlockCoverage":false},{"functionName":"zlibBufferOnError","ranges":[{"startOffset":4489,"endOffset":4574,"count":0}],"isBlockCoverage":false},{"functionName":"zlibBufferOnEnd","ranges":[{"startOffset":4576,"endOffset":4906,"count":0}],"isBlockCoverage":false},{"functionName":"zlibBufferSync","ranges":[{"startOffset":4908,"endOffset":5448,"count":0}],"isBlockCoverage":false},{"functionName":"zlibOnError","ranges":[{"startOffset":5450,"endOffset":5764,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":5989,"endOffset":6325,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":6629,"endOffset":6920,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase","ranges":[{"startOffset":7156,"endOffset":9208,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9414,"endOffset":9451,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":9874,"endOffset":9920,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":10067,"endOffset":10119,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase.reset","ranges":[{"startOffset":10259,"endOffset":10367,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase._flush","ranges":[{"startOffset":10513,"endOffset":10585,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase._final","ranges":[{"startOffset":10652,"endOffset":10688,"count":0}],"isBlockCoverage":false},{"functionName":"maxFlush","ranges":[{"startOffset":11286,"endOffset":11361,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase.flush","ranges":[{"startOffset":11802,"endOffset":12204,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase.close","ranges":[{"startOffset":12234,"endOffset":12316,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase._destroy","ranges":[{"startOffset":12349,"endOffset":12409,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase._transform","ranges":[{"startOffset":12444,"endOffset":12978,"count":0}],"isBlockCoverage":false},{"functionName":"ZlibBase._processChunk","ranges":[{"startOffset":13016,"endOffset":13245,"count":0}],"isBlockCoverage":false},{"functionName":"processChunkSync","ranges":[{"startOffset":13248,"endOffset":15533,"count":0}],"isBlockCoverage":false},{"functionName":"processChunk","ranges":[{"startOffset":15535,"endOffset":16125,"count":0}],"isBlockCoverage":false},{"functionName":"processCallback","ranges":[{"startOffset":16127,"endOffset":18429,"count":0}],"isBlockCoverage":false},{"functionName":"_close","ranges":[{"startOffset":18431,"endOffset":18621,"count":0}],"isBlockCoverage":false},{"functionName":"Zlib","ranges":[{"startOffset":18817,"endOffset":21134,"count":0}],"isBlockCoverage":false},{"functionName":"paramsAfterFlushCallback","ranges":[{"startOffset":21484,"endOffset":21750,"count":0}],"isBlockCoverage":false},{"functionName":"params","ranges":[{"startOffset":21776,"endOffset":22243,"count":0}],"isBlockCoverage":false},{"functionName":"Deflate","ranges":[{"startOffset":22287,"endOffset":22422,"count":0}],"isBlockCoverage":false},{"functionName":"Inflate","ranges":[{"startOffset":22518,"endOffset":22653,"count":0}],"isBlockCoverage":false},{"functionName":"Gzip","ranges":[{"startOffset":22749,"endOffset":22872,"count":0}],"isBlockCoverage":false},{"functionName":"Gunzip","ranges":[{"startOffset":22962,"endOffset":23093,"count":0}],"isBlockCoverage":false},{"functionName":"DeflateRaw","ranges":[{"startOffset":23187,"endOffset":23392,"count":0}],"isBlockCoverage":false},{"functionName":"InflateRaw","ranges":[{"startOffset":23494,"endOffset":23641,"count":0}],"isBlockCoverage":false},{"functionName":"Unzip","ranges":[{"startOffset":23743,"endOffset":23870,"count":0}],"isBlockCoverage":false},{"functionName":"createConvenienceMethod","ranges":[{"startOffset":23962,"endOffset":24351,"count":18},{"startOffset":24021,"endOffset":24350,"count":9}],"isBlockCoverage":true},{"functionName":"syncBufferWrapper","ranges":[{"startOffset":24034,"endOffset":24135,"count":0}],"isBlockCoverage":false},{"functionName":"asyncBufferWrapper","ranges":[{"startOffset":24150,"endOffset":24348,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":24436,"endOffset":24523,"count":107},{"startOffset":24494,"endOffset":24514,"count":9},{"startOffset":24515,"endOffset":24522,"count":98}],"isBlockCoverage":true},{"functionName":"Brotli","ranges":[{"startOffset":24740,"endOffset":26077,"count":0}],"isBlockCoverage":false},{"functionName":"BrotliCompress","ranges":[{"startOffset":26171,"endOffset":26335,"count":0}],"isBlockCoverage":false},{"functionName":"BrotliDecompress","ranges":[{"startOffset":26449,"endOffset":26619,"count":0}],"isBlockCoverage":false},{"functionName":"createProperty","ranges":[{"startOffset":26738,"endOffset":26902,"count":9}],"isBlockCoverage":true},{"functionName":"value","ranges":[{"startOffset":26838,"endOffset":26895,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":27112,"endOffset":27148,"count":0}],"isBlockCoverage":false},{"functionName":"set","ranges":[{"startOffset":27152,"endOffset":27193,"count":0}],"isBlockCoverage":false}]},{"scriptId":"919","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/extend/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":3321,"count":1}],"isBlockCoverage":true},{"functionName":"isArray","ranges":[{"startOffset":203,"endOffset":351,"count":0}],"isBlockCoverage":false},{"functionName":"isPlainObject","ranges":[{"startOffset":374,"endOffset":1012,"count":0}],"isBlockCoverage":false},{"functionName":"setProperty","ranges":[{"startOffset":1146,"endOffset":1435,"count":0}],"isBlockCoverage":false},{"functionName":"getProperty","ranges":[{"startOffset":1535,"endOffset":1880,"count":0}],"isBlockCoverage":false},{"functionName":"extend","ranges":[{"startOffset":1900,"endOffset":3319,"count":0}],"isBlockCoverage":false}]},{"scriptId":"920","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/mime/mime.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":2726,"count":1}],"isBlockCoverage":true},{"functionName":"Mime","ranges":[{"startOffset":53,"endOffset":220,"count":1}],"isBlockCoverage":true},{"functionName":"Mime.define","ranges":[{"startOffset":562,"endOffset":1094,"count":2},{"startOffset":603,"endOffset":1092,"count":845},{"startOffset":673,"endOffset":953,"count":1072},{"startOffset":708,"endOffset":730,"count":0},{"startOffset":732,"endOffset":912,"count":0}],"isBlockCoverage":true},{"functionName":"Mime.load","ranges":[{"startOffset":1346,"endOffset":1776,"count":0}],"isBlockCoverage":false},{"functionName":"Mime.lookup","ranges":[{"startOffset":1852,"endOffset":1999,"count":3},{"startOffset":1964,"endOffset":1975,"count":0},{"startOffset":1976,"endOffset":1996,"count":0}],"isBlockCoverage":true},{"functionName":"Mime.extension","ranges":[{"startOffset":2090,"endOffset":2217,"count":0}],"isBlockCoverage":false},{"functionName":"lookup","ranges":[{"startOffset":2538,"endOffset":2698,"count":0}],"isBlockCoverage":false}]},{"scriptId":"921","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/request-base.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":15709,"count":1}],"isBlockCoverage":true},{"functionName":"RequestBase","ranges":[{"startOffset":258,"endOffset":317,"count":1}],"isBlockCoverage":true},{"functionName":"mixin","ranges":[{"startOffset":425,"endOffset":552,"count":1},{"startOffset":488,"endOffset":536,"count":30}],"isBlockCoverage":true},{"functionName":"_clearTimeout","ranges":[{"startOffset":679,"endOffset":853,"count":4}],"isBlockCoverage":true},{"functionName":"parse","ranges":[{"startOffset":1053,"endOffset":1110,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.responseType","ranges":[{"startOffset":1524,"endOffset":1583,"count":0}],"isBlockCoverage":false},{"functionName":"serialize","ranges":[{"startOffset":1809,"endOffset":1874,"count":0}],"isBlockCoverage":false},{"functionName":"timeout","ranges":[{"startOffset":2391,"endOffset":2866,"count":0}],"isBlockCoverage":false},{"functionName":"retry","ranges":[{"startOffset":3136,"endOffset":3389,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase._shouldRetry","ranges":[{"startOffset":3692,"endOffset":4378,"count":2},{"startOffset":3737,"endOffset":3775,"count":0},{"startOffset":3800,"endOffset":4094,"count":0},{"startOffset":4095,"endOffset":4115,"count":0},{"startOffset":4116,"endOffset":4136,"count":0},{"startOffset":4138,"endOffset":4377,"count":0}],"isBlockCoverage":true},{"functionName":"RequestBase._retry","ranges":[{"startOffset":4491,"endOffset":4688,"count":0}],"isBlockCoverage":false},{"functionName":"then","ranges":[{"startOffset":4831,"endOffset":5364,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.catch","ranges":[{"startOffset":5400,"endOffset":5451,"count":0}],"isBlockCoverage":false},{"functionName":"use","ranges":[{"startOffset":5514,"endOffset":5561,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.ok","ranges":[{"startOffset":5591,"endOffset":5713,"count":2},{"startOffset":5638,"endOffset":5671,"count":0}],"isBlockCoverage":true},{"functionName":"RequestBase._isResponseOK","ranges":[{"startOffset":5754,"endOffset":5921,"count":2},{"startOffset":5782,"endOffset":5805,"count":0},{"startOffset":5870,"endOffset":5918,"count":0}],"isBlockCoverage":true},{"functionName":"RequestBase.get","ranges":[{"startOffset":6076,"endOffset":6138,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.set","ranges":[{"startOffset":6979,"endOffset":7202,"count":2},{"startOffset":7024,"endOffset":7114,"count":0}],"isBlockCoverage":true},{"functionName":"RequestBase.unset","ranges":[{"startOffset":7414,"endOffset":7520,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.field","ranges":[{"startOffset":8000,"endOffset":8812,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.abort","ranges":[{"startOffset":8943,"endOffset":9167,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase._auth","ranges":[{"startOffset":9200,"endOffset":9630,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.withCredentials","ranges":[{"startOffset":9940,"endOffset":10096,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.redirects","ranges":[{"startOffset":10291,"endOffset":10346,"count":2}],"isBlockCoverage":true},{"functionName":"RequestBase.maxResponseSize","ranges":[{"startOffset":10552,"endOffset":10686,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.toJSON","ranges":[{"startOffset":10991,"endOffset":11114,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase.send","ranges":[{"startOffset":12089,"endOffset":13249,"count":2},{"startOffset":12201,"endOffset":12337,"count":0},{"startOffset":12398,"endOffset":12428,"count":0},{"startOffset":12493,"endOffset":12605,"count":0},{"startOffset":12683,"endOffset":12725,"count":12},{"startOffset":12729,"endOffset":13118,"count":0},{"startOffset":13156,"endOffset":13178,"count":0}],"isBlockCoverage":true},{"functionName":"RequestBase.sortQuery","ranges":[{"startOffset":13866,"endOffset":14027,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase._finalizeQueryString","ranges":[{"startOffset":14146,"endOffset":14694,"count":2},{"startOffset":14208,"endOffset":14279,"count":0},{"startOffset":14354,"endOffset":14692,"count":0}],"isBlockCoverage":true},{"functionName":"RequestBase._appendQueryString","ranges":[{"startOffset":14769,"endOffset":14811,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase._timeoutError","ranges":[{"startOffset":14918,"endOffset":15186,"count":0}],"isBlockCoverage":false},{"functionName":"RequestBase._setTimeouts","ranges":[{"startOffset":15226,"endOffset":15707,"count":2},{"startOffset":15293,"endOffset":15308,"count":0},{"startOffset":15310,"endOffset":15444,"count":0},{"startOffset":15495,"endOffset":15525,"count":0},{"startOffset":15527,"endOffset":15705,"count":0}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":15341,"endOffset":15423,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":15573,"endOffset":15676,"count":0}],"isBlockCoverage":false}]},{"scriptId":"922","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/is-object.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":224,"count":1}],"isBlockCoverage":true},{"functionName":"isObject","ranges":[{"startOffset":119,"endOffset":195,"count":6}],"isBlockCoverage":true}]},{"scriptId":"923","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/agent.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":1987,"count":1}],"isBlockCoverage":true},{"functionName":"Agent","ranges":[{"startOffset":416,"endOffset":772,"count":0}],"isBlockCoverage":false},{"functionName":"Agent._saveCookies","ranges":[{"startOffset":998,"endOffset":1105,"count":0}],"isBlockCoverage":false},{"functionName":"Agent._attachCookies","ranges":[{"startOffset":1246,"endOffset":1482,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":1501,"endOffset":1934,"count":34}],"isBlockCoverage":true},{"functionName":"Agent.<computed>","ranges":[{"startOffset":1574,"endOffset":1931,"count":0}],"isBlockCoverage":false}]},{"scriptId":"924","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/agent-base.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":622,"count":1}],"isBlockCoverage":true},{"functionName":"Agent","ranges":[{"startOffset":0,"endOffset":43,"count":0}],"isBlockCoverage":false},{"functionName":"","ranges":[{"startOffset":249,"endOffset":447,"count":21}],"isBlockCoverage":true},{"functionName":"Agent.<computed>","ranges":[{"startOffset":346,"endOffset":445,"count":0}],"isBlockCoverage":false},{"functionName":"Agent._setDefaults","ranges":[{"startOffset":482,"endOffset":595,"count":0}],"isBlockCoverage":false}]},{"scriptId":"925","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/parsers/index.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":313,"count":1}],"isBlockCoverage":true}]},{"scriptId":"926","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/parsers/urlencoded.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":333,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":92,"endOffset":331,"count":0}],"isBlockCoverage":false}]},{"scriptId":"927","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/parsers/json.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":571,"count":1}],"isBlockCoverage":true},{"functionName":"parseJSON","ranges":[{"startOffset":32,"endOffset":569,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":122,"endOffset":159,"count":2}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":178,"endOffset":565,"count":2},{"startOffset":253,"endOffset":524,"count":0}],"isBlockCoverage":true}]},{"scriptId":"928","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/parsers/text.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":176,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":174,"count":0}],"isBlockCoverage":false}]},{"scriptId":"929","url":"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/superagent/lib/node/parsers/image.js","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":227,"count":1}],"isBlockCoverage":true},{"functionName":"module.exports","ranges":[{"startOffset":32,"endOffset":225,"count":0}],"isBlockCoverage":false}]},{"scriptId":"930","url":"node:dns","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":9428,"count":1}],"isBlockCoverage":false},{"functionName":"onlookup","ranges":[{"startOffset":2099,"endOffset":2300,"count":2},{"startOffset":2146,"endOffset":2226,"count":0}],"isBlockCoverage":true},{"functionName":"onlookupall","ranges":[{"startOffset":2303,"endOffset":2667,"count":0}],"isBlockCoverage":false},{"functionName":"lookup","ranges":[{"startOffset":2738,"endOffset":4375,"count":2},{"startOffset":3003,"endOffset":3048,"count":0},{"startOffset":3303,"endOffset":3358,"count":0},{"startOffset":3393,"endOffset":3436,"count":0},{"startOffset":3506,"endOffset":3714,"count":0},{"startOffset":3777,"endOffset":3993,"count":0},{"startOffset":4135,"endOffset":4148,"count":0},{"startOffset":4263,"endOffset":4359,"count":0}],"isBlockCoverage":true},{"functionName":"onlookupservice","ranges":[{"startOffset":4504,"endOffset":4685,"count":0}],"isBlockCoverage":false},{"functionName":"lookupService","ranges":[{"startOffset":4688,"endOffset":5265,"count":0}],"isBlockCoverage":false},{"functionName":"onresolve","ranges":[{"startOffset":5403,"endOffset":5691,"count":0}],"isBlockCoverage":false},{"functionName":"resolver","ranges":[{"startOffset":5693,"endOffset":6375,"count":13}],"isBlockCoverage":true},{"functionName":"query","ranges":[{"startOffset":5728,"endOffset":6294,"count":0}],"isBlockCoverage":false},{"functionName":"resolve","ranges":[{"startOffset":7364,"endOffset":7836,"count":0}],"isBlockCoverage":false},{"functionName":"defaultResolverSetServers","ranges":[{"startOffset":7838,"endOffset":8134,"count":0}],"isBlockCoverage":false},{"functionName":"get","ranges":[{"startOffset":9170,"endOffset":9419,"count":0}],"isBlockCoverage":false}]},{"scriptId":"931","url":"node:internal/dns/utils","functions":[{"functionName":"","ranges":[{"startOffset":0,"endOffset":5349,"count":1}],"isBlockCoverage":false},{"functionName":"validateTimeout","ranges":[{"startOffset":799,"endOffset":959,"count":1}],"isBlockCoverage":true},{"functionName":"validateTries","ranges":[{"startOffset":961,"endOffset":1109,"count":1}],"isBlockCoverage":true},{"functionName":"Resolver","ranges":[{"startOffset":1187,"endOffset":1365,"count":1}],"isBlockCoverage":true},{"functionName":"cancel","ranges":[{"startOffset":1369,"endOffset":1410,"count":0}],"isBlockCoverage":false},{"functionName":"getServers","ranges":[{"startOffset":1414,"endOffset":1676,"count":0}],"isBlockCoverage":false},{"functionName":"setServers","ranges":[{"startOffset":1680,"endOffset":3410,"count":0}],"isBlockCoverage":false},{"functionName":"setLocalAddress","ranges":[{"startOffset":3414,"endOffset":3601,"count":0}],"isBlockCoverage":false},{"functionName":"getDefaultResolver","ranges":[{"startOffset":3902,"endOffset":3961,"count":1}],"isBlockCoverage":true},{"functionName":"setDefaultResolver","ranges":[{"startOffset":3963,"endOffset":4034,"count":0}],"isBlockCoverage":false},{"functionName":"bindDefaultResolver","ranges":[{"startOffset":4036,"endOffset":4210,"count":1}],"isBlockCoverage":true},{"functionName":"","ranges":[{"startOffset":4121,"endOffset":4206,"count":15}],"isBlockCoverage":true},{"functionName":"validateHints","ranges":[{"startOffset":4212,"endOffset":4367,"count":2},{"startOffset":4307,"endOffset":4365,"count":0}],"isBlockCoverage":true},{"functionName":"emitInvalidHostnameWarning","ranges":[{"startOffset":4412,"endOffset":4765,"count":0}],"isBlockCoverage":false},{"functionName":"getDefaultVerbatim","ranges":[{"startOffset":4836,"endOffset":4990,"count":2},{"startOffset":4894,"endOffset":4929,"count":0}],"isBlockCoverage":true},{"functionName":"setDefaultResultOrder","ranges":[{"startOffset":4992,"endOffset":5116,"count":0}],"isBlockCoverage":false}]}],"timestamp":28635.694391,"source-map-cache":{"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/index.js":{"lineLengths":[25,13,0,46,13,3,40,19,23,28,3,3,45,19,23,32,3,3,45,19,23,27,3,3,54,19,23,36,3,3,45,19,23,27,3,3,52,19,23,34,3,3,49,19,23,35,3,3,43,19,23,24,3,3,44,19,23,26,3,3,48,19,23,30,3,3,46,19,23,29,3,3,46,19,23,29,3,3,48,19,23,31,3,3,46,19,23,29,3,3,41,19,23,24,3,3,51,19,23,35,3,3,55,19,23,39,3,3,47,19,23,31,3,3,55,19,23,36,3,3,55,19,23,36,3,3,0,23,3,25,54,23,1,0,3,25,40,23,1,0,3,25,30,23,1,0,3,25,30,23,1,0,3,25,38,23,1,0,3,25,28,23,1,0,3,25,30,23,1,0,3,25,32,23,1,0,3,25,33,23,1,0,3,25,33,23,1,0,3,25,33,23,1,0,3,25,35,23,1,0,3,25,31,23,1,0,3,25,31,23,1,0,123,0,23,3012,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\nimport Diff from './diff/base';\nimport {diffChars} from './diff/character';\nimport {diffWords, diffWordsWithSpace} from './diff/word';\nimport {diffLines, diffTrimmedLines} from './diff/line';\nimport {diffSentences} from './diff/sentence';\n\nimport {diffCss} from './diff/css';\nimport {diffJson, canonicalize} from './diff/json';\n\nimport {diffArrays} from './diff/array';\n\nimport {applyPatch, applyPatches} from './patch/apply';\nimport {parsePatch} from './patch/parse';\nimport {merge} from './patch/merge';\nimport {structuredPatch, createTwoFilesPatch, createPatch} from './patch/create';\n\nimport {convertChangesToDMP} from './convert/dmp';\nimport {convertChangesToXML} from './convert/xml';\n\nexport {\n  Diff,\n\n  diffChars,\n  diffWords,\n  diffWordsWithSpace,\n  diffLines,\n  diffTrimmedLines,\n  diffSentences,\n\n  diffCss,\n  diffJson,\n\n  diffArrays,\n\n  structuredPatch,\n  createTwoFilesPatch,\n  createPatch,\n  applyPatch,\n  applyPatches,\n  parsePatch,\n  merge,\n  convertChangesToDMP,\n  convertChangesToXML,\n  canonicalize\n};\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/base.js":{"lineLengths":[25,13,0,46,13,3,26,0,23,18,0,18,27,0,25,45,29,7,27,85,36,0,40,25,19,5,0,27,20,0,26,21,32,37,14,20,14,21,7,63,0,0,42,42,59,59,34,34,23,40,21,17,20,76,0,74,0,67,48,20,36,31,10,91,0,0,31,95,22,33,14,31,9,0,49,52,74,0,22,72,49,9,0,60,71,0,36,50,45,19,81,80,57,0,0,73,43,67,16,80,0,28,67,9,0,143,0,69,106,16,77,44,9,7,0,19,89,86,19,0,0,19,24,32,60,0,36,43,30,11,0,34,19,11,14,11,12,43,35,0,18,21,9,7,5,4,0,27,0,25,69,49,0,67,71,31,43,30,21,24,8,12,23,17,21,24,9,5,4,0,27,0,25,87,34,34,33,39,24,0,117,15,15,20,5,0,22,32,26,9,5,0,29,18,4,0,27,0,25,40,34,50,12,101,5,4,0,27,0,25,44,17,0,44,21,27,7,5,0,15,4,0,27,0,25,40,17,4,0,27,0,25,38,27,4,0,27,0,25,30,26,3,2,0,79,23,39,17,17,0,55,45,0,29,48,70,47,47,67,11,43,14,87,7,0,47,0,29,34,7,12,85,113,89,63,0,63,47,64,39,7,5,78,83,44,0,0,51,0,158,62,21,3,0,20,1,0,26,10,24,40,4,1,22136,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/base.js"],"names":["Diff","prototype","diff","oldString","newString","options","callback","self","done","value","setTimeout","undefined","castInput","removeEmpty","tokenize","newLen","length","oldLen","editLength","maxEditLength","bestPath","newPos","components","oldPos","extractCommon","join","count","execEditLength","diagonalPath","basePath","addPath","removePath","canAdd","canRemove","clonePath","pushComponent","buildValues","useLongestToken","exec","ret","added","removed","last","push","commonCount","equals","left","right","comparator","ignoreCase","toLowerCase","array","i","split","chars","componentPos","componentLen","component","slice","map","oldValue","tmp","lastComponent","pop","path"],"mappings":";;;;;;;;;AAAe,SAASA,IAAT,GAAgB,CAAE;;AAEjCA,IAAI,CAACC,SAAL,GAAiB;AAAA;;AAAA;AACfC,EAAAA,IADe,gBACVC,SADU,EACCC,SADD,EAC0B;AAAA;AAAA;AAAA;AAAdC,IAAAA,OAAc,uEAAJ,EAAI;AACvC,QAAIC,QAAQ,GAAGD,OAAO,CAACC,QAAvB;;AACA,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACD,SAAKA,OAAL,GAAeA,OAAf;AAEA,QAAIE,IAAI,GAAG,IAAX;;AAEA,aAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,UAAIH,QAAJ,EAAc;AACZI,QAAAA,UAAU,CAAC,YAAW;AAAEJ,UAAAA,QAAQ,CAACK,SAAD,EAAYF,KAAZ,CAAR;AAA6B,SAA3C,EAA6C,CAA7C,CAAV;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACL,eAAOA,KAAP;AACD;AACF,KAjBsC,CAmBvC;;;AACAN,IAAAA,SAAS,GAAG,KAAKS,SAAL,CAAeT,SAAf,CAAZ;AACAC,IAAAA,SAAS,GAAG,KAAKQ,SAAL,CAAeR,SAAf,CAAZ;AAEAD,IAAAA,SAAS,GAAG,KAAKU,WAAL,CAAiB,KAAKC,QAAL,CAAcX,SAAd,CAAjB,CAAZ;AACAC,IAAAA,SAAS,GAAG,KAAKS,WAAL,CAAiB,KAAKC,QAAL,CAAcV,SAAd,CAAjB,CAAZ;AAEA,QAAIW,MAAM,GAAGX,SAAS,CAACY,MAAvB;AAAA,QAA+BC,MAAM,GAAGd,SAAS,CAACa,MAAlD;AACA,QAAIE,UAAU,GAAG,CAAjB;AACA,QAAIC,aAAa,GAAGJ,MAAM,GAAGE,MAA7B;AACA,QAAIG,QAAQ,GAAG,CAAC;AAAEC,MAAAA,MAAM,EAAE,CAAC,CAAX;AAAcC,MAAAA,UAAU,EAAE;AAA1B,KAAD,CAAf,CA7BuC,CA+BvC;;AACA,QAAIC,MAAM,GAAG,KAAKC,aAAL,CAAmBJ,QAAQ,CAAC,CAAD,CAA3B,EAAgChB,SAAhC,EAA2CD,SAA3C,EAAsD,CAAtD,CAAb;;AACA,QAAIiB,QAAQ,CAAC,CAAD,CAAR,CAAYC,MAAZ,GAAqB,CAArB,IAA0BN,MAA1B,IAAoCQ,MAAM,GAAG,CAAT,IAAcN,MAAtD,EAA8D;AAC5D;AACA,aAAOT,IAAI,CAAC,CAAC;AAACC,QAAAA,KAAK,EAAE,KAAKgB,IAAL,CAAUrB,SAAV,CAAR;AAA8BsB,QAAAA,KAAK,EAAEtB,SAAS,CAACY;AAA/C,OAAD,CAAD,CAAX;AACD,KApCsC,CAsCvC;;;AACA,aAASW,cAAT,GAA0B;AACxB,WAAK,IAAIC,YAAY,GAAG,CAAC,CAAD,GAAKV,UAA7B,EAAyCU,YAAY,IAAIV,UAAzD,EAAqEU,YAAY,IAAI,CAArF,EAAwF;AACtF,YAAIC,QAAQ;AAAA;AAAA;AAAZ;AAAA;;AACA,YAAIC,OAAO,GAAGV,QAAQ,CAACQ,YAAY,GAAG,CAAhB,CAAtB;AAAA,YACIG,UAAU,GAAGX,QAAQ,CAACQ,YAAY,GAAG,CAAhB,CADzB;AAAA,YAEIL,OAAM,GAAG,CAACQ,UAAU,GAAGA,UAAU,CAACV,MAAd,GAAuB,CAAlC,IAAuCO,YAFpD;;AAGA,YAAIE,OAAJ,EAAa;AACX;AACAV,UAAAA,QAAQ,CAACQ,YAAY,GAAG,CAAhB,CAAR,GAA6BjB,SAA7B;AACD;;AAED,YAAIqB,MAAM,GAAGF,OAAO,IAAIA,OAAO,CAACT,MAAR,GAAiB,CAAjB,GAAqBN,MAA7C;AAAA,YACIkB,SAAS,GAAGF,UAAU,IAAI,KAAKR,OAAnB,IAA6BA,OAAM,GAAGN,MADtD;;AAEA,YAAI,CAACe,MAAD,IAAW,CAACC,SAAhB,EAA2B;AACzB;AACAb,UAAAA,QAAQ,CAACQ,YAAD,CAAR,GAAyBjB,SAAzB;AACA;AACD,SAhBqF,CAkBtF;AACA;AACA;;;AACA,YAAI,CAACqB,MAAD,IAAYC,SAAS,IAAIH,OAAO,CAACT,MAAR,GAAiBU,UAAU,CAACV,MAAzD,EAAkE;AAChEQ,UAAAA,QAAQ,GAAGK,SAAS,CAACH,UAAD,CAApB;AACAxB,UAAAA,IAAI,CAAC4B,aAAL,CAAmBN,QAAQ,CAACP,UAA5B,EAAwCX,SAAxC,EAAmD,IAAnD;AACD,SAHD,MAGO;AACLkB,UAAAA,QAAQ,GAAGC,OAAX,CADK,CACe;;AACpBD,UAAAA,QAAQ,CAACR,MAAT;AACAd,UAAAA,IAAI,CAAC4B,aAAL,CAAmBN,QAAQ,CAACP,UAA5B,EAAwC,IAAxC,EAA8CX,SAA9C;AACD;;AAEDY,QAAAA,OAAM,GAAGhB,IAAI,CAACiB,aAAL,CAAmBK,QAAnB,EAA6BzB,SAA7B,EAAwCD,SAAxC,EAAmDyB,YAAnD,CAAT,CA9BsF,CAgCtF;;AACA,YAAIC,QAAQ,CAACR,MAAT,GAAkB,CAAlB,IAAuBN,MAAvB,IAAiCQ,OAAM,GAAG,CAAT,IAAcN,MAAnD,EAA2D;AACzD,iBAAOT,IAAI,CAAC4B,WAAW,CAAC7B,IAAD,EAAOsB,QAAQ,CAACP,UAAhB,EAA4BlB,SAA5B,EAAuCD,SAAvC,EAAkDI,IAAI,CAAC8B,eAAvD,CAAZ,CAAX;AACD,SAFD,MAEO;AACL;AACAjB,UAAAA,QAAQ,CAACQ,YAAD,CAAR,GAAyBC,QAAzB;AACD;AACF;;AAEDX,MAAAA,UAAU;AACX,KAlFsC,CAoFvC;AACA;AACA;;;AACA,QAAIZ,QAAJ,EAAc;AACX,gBAASgC,IAAT,GAAgB;AACf5B,QAAAA,UAAU,CAAC,YAAW;AACpB;;AACA;AACA,cAAIQ,UAAU,GAAGC,aAAjB,EAAgC;AAC9B,mBAAOb,QAAQ,EAAf;AACD;;AAED,cAAI,CAACqB,cAAc,EAAnB,EAAuB;AACrBW,YAAAA,IAAI;AACL;AACF,SAVS,EAUP,CAVO,CAAV;AAWD,OAZA,GAAD;AAaD,KAdD,MAcO;AACL,aAAOpB,UAAU,IAAIC,aAArB,EAAoC;AAClC,YAAIoB,GAAG,GAAGZ,cAAc,EAAxB;;AACA,YAAIY,GAAJ,EAAS;AACP,iBAAOA,GAAP;AACD;AACF;AACF;AACF,GA9Gc;;AAAA;;AAAA;AAgHfJ,EAAAA,aAhHe,yBAgHDb,UAhHC,EAgHWkB,KAhHX,EAgHkBC,OAhHlB,EAgH2B;AACxC,QAAIC,IAAI,GAAGpB,UAAU,CAACA,UAAU,CAACN,MAAX,GAAoB,CAArB,CAArB;;AACA,QAAI0B,IAAI,IAAIA,IAAI,CAACF,KAAL,KAAeA,KAAvB,IAAgCE,IAAI,CAACD,OAAL,KAAiBA,OAArD,EAA8D;AAC5D;AACA;AACAnB,MAAAA,UAAU,CAACA,UAAU,CAACN,MAAX,GAAoB,CAArB,CAAV,GAAoC;AAACU,QAAAA,KAAK,EAAEgB,IAAI,CAAChB,KAAL,GAAa,CAArB;AAAwBc,QAAAA,KAAK,EAAEA,KAA/B;AAAsCC,QAAAA,OAAO,EAAEA;AAA/C,OAApC;AACD,KAJD,MAIO;AACLnB,MAAAA,UAAU,CAACqB,IAAX,CAAgB;AAACjB,QAAAA,KAAK,EAAE,CAAR;AAAWc,QAAAA,KAAK,EAAEA,KAAlB;AAAyBC,QAAAA,OAAO,EAAEA;AAAlC,OAAhB;AACD;AACF,GAzHc;;AAAA;;AAAA;AA0HfjB,EAAAA,aA1He,yBA0HDK,QA1HC,EA0HSzB,SA1HT,EA0HoBD,SA1HpB,EA0H+ByB,YA1H/B,EA0H6C;AAC1D,QAAIb,MAAM,GAAGX,SAAS,CAACY,MAAvB;AAAA,QACIC,MAAM,GAAGd,SAAS,CAACa,MADvB;AAAA,QAEIK,MAAM,GAAGQ,QAAQ,CAACR,MAFtB;AAAA,QAGIE,MAAM,GAAGF,MAAM,GAAGO,YAHtB;AAAA,QAKIgB,WAAW,GAAG,CALlB;;AAMA,WAAOvB,MAAM,GAAG,CAAT,GAAaN,MAAb,IAAuBQ,MAAM,GAAG,CAAT,GAAaN,MAApC,IAA8C,KAAK4B,MAAL,CAAYzC,SAAS,CAACiB,MAAM,GAAG,CAAV,CAArB,EAAmClB,SAAS,CAACoB,MAAM,GAAG,CAAV,CAA5C,CAArD,EAAgH;AAC9GF,MAAAA,MAAM;AACNE,MAAAA,MAAM;AACNqB,MAAAA,WAAW;AACZ;;AAED,QAAIA,WAAJ,EAAiB;AACff,MAAAA,QAAQ,CAACP,UAAT,CAAoBqB,IAApB,CAAyB;AAACjB,QAAAA,KAAK,EAAEkB;AAAR,OAAzB;AACD;;AAEDf,IAAAA,QAAQ,CAACR,MAAT,GAAkBA,MAAlB;AACA,WAAOE,MAAP;AACD,GA7Ic;;AAAA;;AAAA;AA+IfsB,EAAAA,MA/Ie,kBA+IRC,IA/IQ,EA+IFC,KA/IE,EA+IK;AAClB,QAAI,KAAK1C,OAAL,CAAa2C,UAAjB,EAA6B;AAC3B,aAAO,KAAK3C,OAAL,CAAa2C,UAAb,CAAwBF,IAAxB,EAA8BC,KAA9B,CAAP;AACD,KAFD,MAEO;AACL,aAAOD,IAAI,KAAKC,KAAT,IACD,KAAK1C,OAAL,CAAa4C,UAAb,IAA2BH,IAAI,CAACI,WAAL,OAAuBH,KAAK,CAACG,WAAN,EADxD;AAED;AACF,GAtJc;;AAAA;;AAAA;AAuJfrC,EAAAA,WAvJe,uBAuJHsC,KAvJG,EAuJI;AACjB,QAAIZ,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACnC,MAA1B,EAAkCoC,CAAC,EAAnC,EAAuC;AACrC,UAAID,KAAK,CAACC,CAAD,CAAT,EAAc;AACZb,QAAAA,GAAG,CAACI,IAAJ,CAASQ,KAAK,CAACC,CAAD,CAAd;AACD;AACF;;AACD,WAAOb,GAAP;AACD,GA/Jc;;AAAA;;AAAA;AAgKf3B,EAAAA,SAhKe,qBAgKLH,KAhKK,EAgKE;AACf,WAAOA,KAAP;AACD,GAlKc;;AAAA;;AAAA;AAmKfK,EAAAA,QAnKe,oBAmKNL,KAnKM,EAmKC;AACd,WAAOA,KAAK,CAAC4C,KAAN,CAAY,EAAZ,CAAP;AACD,GArKc;;AAAA;;AAAA;AAsKf5B,EAAAA,IAtKe,gBAsKV6B,KAtKU,EAsKH;AACV,WAAOA,KAAK,CAAC7B,IAAN,CAAW,EAAX,CAAP;AACD;AAxKc,CAAjB;;AA2KA,SAASW,WAAT,CAAqBlC,IAArB,EAA2BoB,UAA3B,EAAuClB,SAAvC,EAAkDD,SAAlD,EAA6DkC,eAA7D,EAA8E;AAC5E,MAAIkB,YAAY,GAAG,CAAnB;AAAA,MACIC,YAAY,GAAGlC,UAAU,CAACN,MAD9B;AAAA,MAEIK,MAAM,GAAG,CAFb;AAAA,MAGIE,MAAM,GAAG,CAHb;;AAKA,SAAOgC,YAAY,GAAGC,YAAtB,EAAoCD,YAAY,EAAhD,EAAoD;AAClD,QAAIE,SAAS,GAAGnC,UAAU,CAACiC,YAAD,CAA1B;;AACA,QAAI,CAACE,SAAS,CAAChB,OAAf,EAAwB;AACtB,UAAI,CAACgB,SAAS,CAACjB,KAAX,IAAoBH,eAAxB,EAAyC;AACvC,YAAI5B,KAAK,GAAGL,SAAS,CAACsD,KAAV,CAAgBrC,MAAhB,EAAwBA,MAAM,GAAGoC,SAAS,CAAC/B,KAA3C,CAAZ;AACAjB,QAAAA,KAAK,GAAGA,KAAK,CAACkD,GAAN,CAAU,UAASlD,KAAT,EAAgB2C,CAAhB,EAAmB;AACnC,cAAIQ,QAAQ,GAAGzD,SAAS,CAACoB,MAAM,GAAG6B,CAAV,CAAxB;AACA,iBAAOQ,QAAQ,CAAC5C,MAAT,GAAkBP,KAAK,CAACO,MAAxB,GAAiC4C,QAAjC,GAA4CnD,KAAnD;AACD,SAHO,CAAR;AAKAgD,QAAAA,SAAS,CAAChD,KAAV,GAAkBP,IAAI,CAACuB,IAAL,CAAUhB,KAAV,CAAlB;AACD,OARD,MAQO;AACLgD,QAAAA,SAAS,CAAChD,KAAV,GAAkBP,IAAI,CAACuB,IAAL,CAAUrB,SAAS,CAACsD,KAAV,CAAgBrC,MAAhB,EAAwBA,MAAM,GAAGoC,SAAS,CAAC/B,KAA3C,CAAV,CAAlB;AACD;;AACDL,MAAAA,MAAM,IAAIoC,SAAS,CAAC/B,KAApB,CAZsB,CActB;;AACA,UAAI,CAAC+B,SAAS,CAACjB,KAAf,EAAsB;AACpBjB,QAAAA,MAAM,IAAIkC,SAAS,CAAC/B,KAApB;AACD;AACF,KAlBD,MAkBO;AACL+B,MAAAA,SAAS,CAAChD,KAAV,GAAkBP,IAAI,CAACuB,IAAL,CAAUtB,SAAS,CAACuD,KAAV,CAAgBnC,MAAhB,EAAwBA,MAAM,GAAGkC,SAAS,CAAC/B,KAA3C,CAAV,CAAlB;AACAH,MAAAA,MAAM,IAAIkC,SAAS,CAAC/B,KAApB,CAFK,CAIL;AACA;AACA;;AACA,UAAI6B,YAAY,IAAIjC,UAAU,CAACiC,YAAY,GAAG,CAAhB,CAAV,CAA6Bf,KAAjD,EAAwD;AACtD,YAAIqB,GAAG,GAAGvC,UAAU,CAACiC,YAAY,GAAG,CAAhB,CAApB;AACAjC,QAAAA,UAAU,CAACiC,YAAY,GAAG,CAAhB,CAAV,GAA+BjC,UAAU,CAACiC,YAAD,CAAzC;AACAjC,QAAAA,UAAU,CAACiC,YAAD,CAAV,GAA2BM,GAA3B;AACD;AACF;AACF,GAvC2E,CAyC5E;AACA;AACA;;;AACA,MAAIC,aAAa,GAAGxC,UAAU,CAACkC,YAAY,GAAG,CAAhB,CAA9B;;AACA,MAAIA,YAAY,GAAG,CAAf,IACG,OAAOM,aAAa,CAACrD,KAArB,KAA+B,QADlC,KAEIqD,aAAa,CAACtB,KAAd,IAAuBsB,aAAa,CAACrB,OAFzC,KAGGvC,IAAI,CAAC2C,MAAL,CAAY,EAAZ,EAAgBiB,aAAa,CAACrD,KAA9B,CAHP,EAG6C;AAC3Ca,IAAAA,UAAU,CAACkC,YAAY,GAAG,CAAhB,CAAV,CAA6B/C,KAA7B,IAAsCqD,aAAa,CAACrD,KAApD;AACAa,IAAAA,UAAU,CAACyC,GAAX;AACD;;AAED,SAAOzC,UAAP;AACD;;AAED,SAASY,SAAT,CAAmB8B,IAAnB,EAAyB;AACvB,SAAO;AAAE3C,IAAAA,MAAM,EAAE2C,IAAI,CAAC3C,MAAf;AAAuBC,IAAAA,UAAU,EAAE0C,IAAI,CAAC1C,UAAL,CAAgBoC,KAAhB,CAAsB,CAAtB;AAAnC,GAAP;AACD","sourcesContent":["export default function Diff() {}\n\nDiff.prototype = {\n  diff(oldString, newString, options = {}) {\n    let callback = options.callback;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    this.options = options;\n\n    let self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function() { callback(undefined, value); }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    }\n\n    // Allow subclasses to massage the input prior to running\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n\n    let newLen = newString.length, oldLen = oldString.length;\n    let editLength = 1;\n    let maxEditLength = newLen + oldLen;\n    let bestPath = [{ newPos: -1, components: [] }];\n\n    // Seed editLength = 0, i.e. the content starts with the same values\n    let oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{value: this.join(newString), count: newString.length}]);\n    }\n\n    // Main worker method. checks all permutations of a given edit length for acceptance.\n    function execEditLength() {\n      for (let diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        let basePath;\n        let addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        let canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        }\n\n        // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n        if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath; // No need to clone, we've pulled it from the list\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n        // If we have hit the end of both strings, then we are done\n        if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    }\n\n    // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced.\n    if (callback) {\n      (function exec() {\n        setTimeout(function() {\n          // This should not happen, but we want to be safe.\n          /* istanbul ignore next */\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      }());\n    } else {\n      while (editLength <= maxEditLength) {\n        let ret = execEditLength();\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n\n  pushComponent(components, added, removed) {\n    let last = components[components.length - 1];\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };\n    } else {\n      components.push({count: 1, added: added, removed: removed });\n    }\n  },\n  extractCommon(basePath, newString, oldString, diagonalPath) {\n    let newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n\n        commonCount = 0;\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({count: commonCount});\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n\n  equals(left, right) {\n    if (this.options.comparator) {\n      return this.options.comparator(left, right);\n    } else {\n      return left === right\n        || (this.options.ignoreCase && left.toLowerCase() === right.toLowerCase());\n    }\n  },\n  removeEmpty(array) {\n    let ret = [];\n    for (let i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  },\n  castInput(value) {\n    return value;\n  },\n  tokenize(value) {\n    return value.split('');\n  },\n  join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  let componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    let component = components[componentPos];\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        let value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function(value, i) {\n          let oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n      newPos += component.count;\n\n      // Common case\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count;\n\n      // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n      if (componentPos && components[componentPos - 1].added) {\n        let tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  }\n\n  // Special case handle for when one terminal is ignored (i.e. whitespace).\n  // For this case we merge the terminal into the prior string and drop the change.\n  // This is only available for string mode.\n  let lastComponent = components[componentLen - 1];\n  if (componentLen > 1\n      && typeof lastComponent.value === 'string'\n      && (lastComponent.added || lastComponent.removed)\n      && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return { newPos: path.newPos, components: path.components.slice(0) };\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/character.js":{"lineLengths":[25,13,0,46,13,3,30,31,0,23,3,25,49,23,1,0,123,0,23,23,25,5,23,1,25,9,23,4,0,25,38,0,23,45,53,1,880,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/character.js"],"names":["characterDiff","Diff","diffChars","oldStr","newStr","options","diff"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAEO,IAAMA,aAAa,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAtB;;;;;;AACA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4C;AAAE,SAAOL,aAAa,CAACM,IAAd,CAAmBH,MAAnB,EAA2BC,MAA3B,EAAmCC,OAAnC,CAAP;AAAqD","sourcesContent":["import Diff from './base';\n\nexport const characterDiff = new Diff();\nexport function diffChars(oldStr, newStr, options) { return characterDiff.diff(oldStr, newStr, options); }\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/word.js":{"lineLengths":[25,13,0,46,13,3,30,48,26,0,23,3,25,49,23,1,0,3,25,35,23,1,0,123,0,23,65,2,25,32,35,29,30,30,28,38,29,29,33,34,30,35,43,39,88,24,18,25,5,23,1,25,9,23,4,0,25,28,0,23,42,32,30,32,3,0,114,2,0,38,97,184,0,47,103,120,33,30,10,5,3,0,16,2,0,45,11,27,5,25,0,27,9,25,3,27,18,25,13,26,5,48,1,0,54,48,1,5824,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/word.js"],"names":["extendedWordChars","reWhitespace","wordDiff","Diff","equals","left","right","options","ignoreCase","toLowerCase","ignoreWhitespace","test","tokenize","value","tokens","split","i","length","splice","diffWords","oldStr","newStr","generateOptions","diff","diffWordsWithSpace"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,iBAAiB,GAAG,+DAA1B;AAEA,IAAMC,YAAY,GAAG,IAArB;AAEO,IAAMC,QAAQ,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAjB;;;;;;AACPD,QAAQ,CAACE,MAAT,GAAkB,UAASC,IAAT,EAAeC,KAAf,EAAsB;AACtC,MAAI,KAAKC,OAAL,CAAaC,UAAjB,EAA6B;AAC3BH,IAAAA,IAAI,GAAGA,IAAI,CAACI,WAAL,EAAP;AACAH,IAAAA,KAAK,GAAGA,KAAK,CAACG,WAAN,EAAR;AACD;;AACD,SAAOJ,IAAI,KAAKC,KAAT,IAAmB,KAAKC,OAAL,CAAaG,gBAAb,IAAiC,CAACT,YAAY,CAACU,IAAb,CAAkBN,IAAlB,CAAlC,IAA6D,CAACJ,YAAY,CAACU,IAAb,CAAkBL,KAAlB,CAAxF;AACD,CAND;;AAOAJ,QAAQ,CAACU,QAAT,GAAoB,UAASC,KAAT,EAAgB;AAClC;AACA,MAAIC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAY,iCAAZ,CAAb,CAFkC,CAIlC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C;AACA,QAAI,CAACF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAP,IAAkBF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAxB,IACKhB,iBAAiB,CAACW,IAAlB,CAAuBG,MAAM,CAACE,CAAD,CAA7B,CADL,IAEKhB,iBAAiB,CAACW,IAAlB,CAAuBG,MAAM,CAACE,CAAC,GAAG,CAAL,CAA7B,CAFT,EAEgD;AAC9CF,MAAAA,MAAM,CAACE,CAAD,CAAN,IAAaF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAnB;AACAF,MAAAA,MAAM,CAACI,MAAP,CAAcF,CAAC,GAAG,CAAlB,EAAqB,CAArB;AACAA,MAAAA,CAAC;AACF;AACF;;AAED,SAAOF,MAAP;AACD,CAjBD;;AAmBO,SAASK,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCd,OAAnC,EAA4C;AACjDA,EAAAA,OAAO;AAAG;AAAA;AAAA;;AAAAe;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAA;AAAA,GAAgBf,OAAhB,EAAyB;AAACG,IAAAA,gBAAgB,EAAE;AAAnB,GAAzB,CAAV;AACA,SAAOR,QAAQ,CAACqB,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8Bd,OAA9B,CAAP;AACD;;AAEM,SAASiB,kBAAT,CAA4BJ,MAA5B,EAAoCC,MAApC,EAA4Cd,OAA5C,EAAqD;AAC1D,SAAOL,QAAQ,CAACqB,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8Bd,OAA9B,CAAP;AACD","sourcesContent":["import Diff from './base';\nimport {generateOptions} from '../util/params';\n\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nconst extendedWordChars = /^[a-zA-Z\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}]+$/u;\n\nconst reWhitespace = /\\S/;\n\nexport const wordDiff = new Diff();\nwordDiff.equals = function(left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n  return left === right || (this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n};\nwordDiff.tokenize = function(value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  let tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/);\n\n  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n  for (let i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2]\n          && extendedWordChars.test(tokens[i])\n          && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nexport function diffWords(oldStr, newStr, options) {\n  options = generateOptions(options, {ignoreWhitespace: true});\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nexport function diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/util/params.js":{"lineLengths":[25,13,0,46,13,3,42,0,23,45,38,32,23,31,32,41,39,7,5,3,0,18,1,1248,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/util/params.js"],"names":["generateOptions","options","defaults","callback","name","hasOwnProperty"],"mappings":";;;;;;;;;AAAO,SAASA,eAAT,CAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C;AACjD,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,CAACC,QAAT,GAAoBF,OAApB;AACD,GAFD,MAEO,IAAIA,OAAJ,EAAa;AAClB,SAAK,IAAIG,IAAT,IAAiBH,OAAjB,EAA0B;AACxB;AACA,UAAIA,OAAO,CAACI,cAAR,CAAuBD,IAAvB,CAAJ,EAAkC;AAChCF,QAAAA,QAAQ,CAACE,IAAD,CAAR,GAAiBH,OAAO,CAACG,IAAD,CAAxB;AACD;AACF;AACF;;AACD,SAAOF,QAAP;AACD","sourcesContent":["export function generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (let name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n  return defaults;\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/line.js":{"lineLengths":[25,13,0,46,13,3,30,44,26,0,23,3,25,49,23,1,0,3,25,35,23,1,0,123,0,23,18,25,5,23,1,25,9,23,4,0,25,28,0,23,38,20,129,0,55,27,63,0,0,53,35,0,48,44,12,42,27,7,0,26,5,3,0,18,2,0,46,49,1,0,53,15,27,5,25,0,27,9,25,3,27,18,25,14,26,5,48,1,3728,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/line.js"],"names":["lineDiff","Diff","tokenize","value","retLines","linesAndNewlines","split","length","pop","i","line","options","newlineIsToken","ignoreWhitespace","trim","push","diffLines","oldStr","newStr","callback","diff","diffTrimmedLines","generateOptions"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;AAEO,IAAMA,QAAQ,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAjB;;;;;;AACPD,QAAQ,CAACE,QAAT,GAAoB,UAASC,KAAT,EAAgB;AAClC,MAAIC,QAAQ,GAAG,EAAf;AAAA,MACIC,gBAAgB,GAAGF,KAAK,CAACG,KAAN,CAAY,WAAZ,CADvB,CADkC,CAIlC;;AACA,MAAI,CAACD,gBAAgB,CAACA,gBAAgB,CAACE,MAAjB,GAA0B,CAA3B,CAArB,EAAoD;AAClDF,IAAAA,gBAAgB,CAACG,GAAjB;AACD,GAPiC,CASlC;;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACE,MAArC,EAA6CE,CAAC,EAA9C,EAAkD;AAChD,QAAIC,IAAI,GAAGL,gBAAgB,CAACI,CAAD,CAA3B;;AAEA,QAAIA,CAAC,GAAG,CAAJ,IAAS,CAAC,KAAKE,OAAL,CAAaC,cAA3B,EAA2C;AACzCR,MAAAA,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAAR,IAAiCG,IAAjC;AACD,KAFD,MAEO;AACL,UAAI,KAAKC,OAAL,CAAaE,gBAAjB,EAAmC;AACjCH,QAAAA,IAAI,GAAGA,IAAI,CAACI,IAAL,EAAP;AACD;;AACDV,MAAAA,QAAQ,CAACW,IAAT,CAAcL,IAAd;AACD;AACF;;AAED,SAAON,QAAP;AACD,CAxBD;;AA0BO,SAASY,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;AAAE,SAAOnB,QAAQ,CAACoB,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8BC,QAA9B,CAAP;AAAiD;;AAChG,SAASE,gBAAT,CAA0BJ,MAA1B,EAAkCC,MAAlC,EAA0CC,QAA1C,EAAoD;AACzD,MAAIR,OAAO;AAAG;AAAA;AAAA;;AAAAW;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAA;AAAA,GAAgBH,QAAhB,EAA0B;AAACN,IAAAA,gBAAgB,EAAE;AAAnB,GAA1B,CAAd;AACA,SAAOb,QAAQ,CAACoB,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8BP,OAA9B,CAAP;AACD","sourcesContent":["import Diff from './base';\nimport {generateOptions} from '../util/params';\n\nexport const lineDiff = new Diff();\nlineDiff.tokenize = function(value) {\n  let retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n  // Ignore the final empty token that occurs if the string ends with a new line\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  }\n\n  // Merge the content and line separators into single tokens\n  for (let i = 0; i < linesAndNewlines.length; i++) {\n    let line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nexport function diffLines(oldStr, newStr, callback) { return lineDiff.diff(oldStr, newStr, callback); }\nexport function diffTrimmedLines(oldStr, newStr, callback) {\n  let options = generateOptions(callback, {ignoreWhitespace: true});\n  return lineDiff.diff(oldStr, newStr, options);\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/sentence.js":{"lineLengths":[25,13,0,46,13,3,38,30,0,23,3,25,49,23,1,0,123,0,23,22,25,5,23,1,25,9,23,4,0,25,36,0,23,42,46,2,0,50,53,1,1196,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/sentence.js"],"names":["sentenceDiff","Diff","tokenize","value","split","diffSentences","oldStr","newStr","callback","diff"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAGO,IAAMA,YAAY,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAArB;;;;;;AACPD,YAAY,CAACE,QAAb,GAAwB,UAASC,KAAT,EAAgB;AACtC,SAAOA,KAAK,CAACC,KAAN,CAAY,uBAAZ,CAAP;AACD,CAFD;;AAIO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiD;AAAE,SAAOR,YAAY,CAACS,IAAb,CAAkBH,MAAlB,EAA0BC,MAA1B,EAAkCC,QAAlC,CAAP;AAAqD","sourcesContent":["import Diff from './base';\n\n\nexport const sentenceDiff = new Diff();\nsentenceDiff.tokenize = function(value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nexport function diffSentences(oldStr, newStr, callback) { return sentenceDiff.diff(oldStr, newStr, callback); }\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/css.js":{"lineLengths":[25,13,0,46,13,3,26,25,0,23,3,25,49,23,1,0,123,0,23,17,25,5,23,1,25,9,23,4,0,25,26,0,23,37,38,2,0,44,48,1,1128,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/css.js"],"names":["cssDiff","Diff","tokenize","value","split","diffCss","oldStr","newStr","callback","diff"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAEO,IAAMA,OAAO,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAhB;;;;;;AACPD,OAAO,CAACE,QAAR,GAAmB,UAASC,KAAT,EAAgB;AACjC,SAAOA,KAAK,CAACC,KAAN,CAAY,eAAZ,CAAP;AACD,CAFD;;AAIO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AAAE,SAAOR,OAAO,CAACS,IAAR,CAAaH,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B,CAAP;AAAgD","sourcesContent":["import Diff from './base';\n\nexport const cssDiff = new Diff();\ncssDiff.tokenize = function(value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nexport function diffCss(oldStr, newStr, callback) { return cssDiff.diff(oldStr, newStr, callback); }\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/json.js":{"lineLengths":[25,13,0,46,13,3,28,36,26,0,23,3,25,49,23,1,0,3,25,25,23,1,0,123,0,378,0,23,56,18,25,5,23,1,25,9,23,97,105,0,25,28,0,23,32,19,25,5,23,1,25,8,23,10,0,39,27,21,25,15,64,62,76,27,3,12,29,57,6,28,137,2,0,42,10,29,9,27,5,29,13,27,106,4,2,0,44,48,98,95,0,0,68,22,44,0,17,29,3,0,8,0,41,27,33,5,3,0,23,0,63,20,45,44,0,41,89,5,0,16,27,28,3,0,26,23,3,0,6,27,10,25,38,20,26,44,0,24,13,0,23,32,37,30,7,5,0,22,0,48,27,96,5,0,16,27,10,27,3,0,26,1,8576,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/json.js"],"names":["objectPrototypeToString","Object","prototype","toString","jsonDiff","Diff","useLongestToken","tokenize","lineDiff","castInput","value","options","undefinedReplacement","stringifyReplacer","k","v","JSON","stringify","canonicalize","equals","left","right","call","replace","diffJson","oldObj","newObj","diff","obj","stack","replacementStack","replacer","key","i","length","canonicalizedObj","push","Array","pop","toJSON","sortedKeys","hasOwnProperty","sort"],"mappings":"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","sourcesContent":["import Diff from './base';\nimport {lineDiff} from './line';\n\nconst objectPrototypeToString = Object.prototype.toString;\n\n\nexport const jsonDiff = new Diff();\n// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\njsonDiff.useLongestToken = true;\n\njsonDiff.tokenize = lineDiff.tokenize;\njsonDiff.castInput = function(value) {\n  const {undefinedReplacement, stringifyReplacer = (k, v) => typeof v === 'undefined' ? undefinedReplacement : v} = this.options;\n\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n};\njsonDiff.equals = function(left, right) {\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n};\n\nexport function diffJson(oldObj, newObj, options) { return jsonDiff.diff(oldObj, newObj, options); }\n\n// This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\nexport function canonicalize(obj, stack, replacementStack, replacer, key) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  if (replacer) {\n    obj = replacer(key, obj);\n  }\n\n  let i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  let canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n    }\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n    let sortedKeys = [],\n        key;\n    for (key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(key)) {\n        sortedKeys.push(key);\n      }\n    }\n    sortedKeys.sort();\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      key = sortedKeys[i];\n      canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack, replacer, key);\n    }\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n  return canonicalizedObj;\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/diff/array.js":{"lineLengths":[25,13,0,46,13,3,32,27,0,23,3,25,49,23,1,0,123,0,23,19,25,5,23,1,25,9,23,4,0,25,30,0,23,39,23,2,0,59,15,2,0,47,50,1,1376,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/diff/array.js"],"names":["arrayDiff","Diff","tokenize","value","slice","join","removeEmpty","diffArrays","oldArr","newArr","callback","diff"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAEO,IAAMA,SAAS,GAAG;AAAIC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,CAAJ,EAAlB;;;;;;AACPD,SAAS,CAACE,QAAV,GAAqB,UAASC,KAAT,EAAgB;AACnC,SAAOA,KAAK,CAACC,KAAN,EAAP;AACD,CAFD;;AAGAJ,SAAS,CAACK,IAAV,GAAiBL,SAAS,CAACM,WAAV,GAAwB,UAASH,KAAT,EAAgB;AACvD,SAAOA,KAAP;AACD,CAFD;;AAIO,SAASI,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,QAApC,EAA8C;AAAE,SAAOV,SAAS,CAACW,IAAV,CAAeH,MAAf,EAAuBC,MAAvB,EAA+BC,QAA/B,CAAP;AAAkD","sourcesContent":["import Diff from './base';\n\nexport const arrayDiff = new Diff();\narrayDiff.tokenize = function(value) {\n  return value.slice();\n};\narrayDiff.join = arrayDiff.removeEmpty = function(value) {\n  return value;\n};\n\nexport function diffArrays(oldArr, newArr, callback) { return arrayDiff.diff(oldArr, newArr, callback); }\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/apply.js":{"lineLengths":[25,13,0,46,13,3,32,36,0,23,3,25,27,23,1,0,3,25,80,23,1,0,123,0,23,38,27,5,25,83,0,36,13,29,7,27,0,29,10,27,5,29,15,27,14,3,0,31,29,68,5,0,25,34,0,0,50,62,28,95,27,3,12,29,27,6,4,21,43,18,17,18,15,5,61,5,0,0,34,49,31,54,60,0,51,31,72,23,0,40,25,11,9,0,16,7,5,0,16,71,0,0,42,24,47,24,43,18,29,7,27,0,29,21,27,5,29,13,27,32,0,65,48,44,14,7,5,0,36,19,80,39,0,0,58,24,0,0,21,0,45,26,64,0,50,0,50,32,54,60,46,0,30,17,37,32,37,34,37,41,48,17,38,82,0,40,29,47,26,9,7,5,37,0,0,20,38,18,23,5,24,19,26,3,0,49,43,3,0,24,63,0,0,41,36,13,29,7,27,0,29,10,27,5,29,15,27,14,3,0,23,0,27,40,0,17,32,5,0,50,16,37,7,0,60,61,18,39,9,0,23,9,7,3,0,17,1,14196,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/patch/apply.js"],"names":["applyPatch","source","uniDiff","options","parsePatch","Array","isArray","length","Error","lines","split","delimiters","match","hunks","compareLine","lineNumber","line","operation","patchContent","errorCount","fuzzFactor","minLine","offset","removeEOFNL","addEOFNL","hunkFits","hunk","toPos","j","content","substr","i","maxLine","oldLines","localOffset","oldStart","iterator","distanceIterator","undefined","diffOffset","newLines","delimiter","linedelimiters","splice","previousOperation","pop","push","_k","join","applyPatches","currentIndex","processIndex","index","complete","loadFile","err","data","updatedContent","patched"],"mappings":"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","sourcesContent":["import {parsePatch} from './parse';\nimport distanceIterator from '../util/distance-iterator';\n\nexport function applyPatch(source, uniDiff, options = {}) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  }\n\n  // Apply the diff to the input\n  let lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      hunks = uniDiff.hunks,\n\n      compareLine = options.compareLine || ((lineNumber, line, operation, patchContent) => line === patchContent),\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n\n      removeEOFNL,\n      addEOFNL;\n\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n  function hunkFits(hunk, toPos) {\n    for (let j = 0; j < hunk.lines.length; j++) {\n      let line = hunk.lines[j],\n          operation = (line.length > 0 ? line[0] : ' '),\n          content = (line.length > 0 ? line.substr(1) : line);\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n        toPos++;\n      }\n    }\n\n    return true;\n  }\n\n  // Search best fit offsets for each hunk based on the previous ones\n  for (let i = 0; i < hunks.length; i++) {\n    let hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n\n    let iterator = distanceIterator(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    }\n\n    // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  }\n\n  // Apply patch hunks\n  let diffOffset = 0;\n  for (let i = 0; i < hunks.length; i++) {\n    let hunk = hunks[i],\n        toPos = hunk.oldStart + hunk.offset + diffOffset - 1;\n    diffOffset += hunk.newLines - hunk.oldLines;\n\n    for (let j = 0; j < hunk.lines.length; j++) {\n      let line = hunk.lines[j],\n          operation = (line.length > 0 ? line[0] : ' '),\n          content = (line.length > 0 ? line.substr(1) : line),\n          delimiter = hunk.linedelimiters[j];\n\n      if (operation === ' ') {\n        toPos++;\n      } else if (operation === '-') {\n        lines.splice(toPos, 1);\n        delimiters.splice(toPos, 1);\n      /* istanbul ignore else */\n      } else if (operation === '+') {\n        lines.splice(toPos, 0, content);\n        delimiters.splice(toPos, 0, delimiter);\n        toPos++;\n      } else if (operation === '\\\\') {\n        let previousOperation = hunk.lines[j - 1] ? hunk.lines[j - 1][0] : null;\n        if (previousOperation === '+') {\n          removeEOFNL = true;\n        } else if (previousOperation === '-') {\n          addEOFNL = true;\n        }\n      }\n    }\n  }\n\n  // Handle EOFNL insertion/removal\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n      delimiters.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n    delimiters.push('\\n');\n  }\n  for (let _k = 0; _k < lines.length - 1; _k++) {\n    lines[_k] = lines[_k] + delimiters[_k];\n  }\n  return lines.join('');\n}\n\n// Wrapper that supports multiple file patches via callbacks.\nexport function applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  let currentIndex = 0;\n  function processIndex() {\n    let index = uniDiff[currentIndex++];\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function(err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      let updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent, function(err) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        processIndex();\n      });\n    });\n  }\n  processIndex();\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/parse.js":{"lineLengths":[25,13,0,46,13,3,32,0,23,30,27,5,25,83,53,63,16,12,0,25,19,44,0,32,76,0,47,14,21,0,0,73,0,19,32,7,0,10,80,79,0,0,27,42,0,21,0,32,29,0,57,14,37,38,43,58,81,14,12,7,5,66,18,0,0,35,62,0,21,62,46,52,0,36,59,7,0,47,59,10,5,20,53,0,0,24,29,39,90,16,32,76,32,76,16,24,60,59,64,0,30,25,5,0,30,25,5,0,21,24,0,37,84,88,149,14,7,0,94,0,94,36,56,0,32,21,39,24,39,21,24,9,14,14,7,42,0,0,43,24,5,0,46,24,41,0,0,25,39,101,7,0,42,103,7,5,0,16,3,0,30,17,3,0,14,1,13176,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/patch/parse.js"],"names":["parsePatch","uniDiff","options","diffstr","split","delimiters","match","list","i","parseIndex","index","push","length","line","test","header","exec","parseFileHeader","hunks","parseHunk","strict","Error","JSON","stringify","fileHeader","keyPrefix","data","fileName","replace","substr","trim","chunkHeaderIndex","chunkHeaderLine","chunkHeader","hunk","oldStart","oldLines","newStart","newLines","lines","linedelimiters","addCount","removeCount","indexOf","operation"],"mappings":"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","sourcesContent":["export function parsePatch(uniDiff, options = {}) {\n  let diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    let index = {};\n    list.push(index);\n\n    // Parse diff metadata\n    while (i < diffstr.length) {\n      let line = diffstr[i];\n\n      // File header found, end parsing diff metadata\n      if ((/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/).test(line)) {\n        break;\n      }\n\n      // Diff index\n      let header = (/^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/).exec(line);\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    }\n\n    // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n    parseFileHeader(index);\n    parseFileHeader(index);\n\n    // Parse hunks\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      let line = diffstr[i];\n\n      if ((/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/).test(line)) {\n        break;\n      } else if ((/^@@/).test(line)) {\n        index.hunks.push(parseHunk());\n      } else if (line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(line));\n      } else {\n        i++;\n      }\n    }\n  }\n\n  // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n  function parseFileHeader(index) {\n    const fileHeader = (/^(---|\\+\\+\\+)\\s+(.*)$/).exec(diffstr[i]);\n    if (fileHeader) {\n      let keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      const data = fileHeader[2].split('\\t', 2);\n      let fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n      if ((/^\".*\"$/).test(fileName)) {\n        fileName = fileName.substr(1, fileName.length - 2);\n      }\n      index[keyPrefix + 'FileName'] = fileName;\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\n\n      i++;\n    }\n  }\n\n  // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n  function parseHunk() {\n    let chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n\n    let hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],\n      newStart: +chunkHeader[3],\n      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],\n      lines: [],\n      linedelimiters: []\n    };\n\n    // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n    if (hunk.oldLines === 0) {\n      hunk.oldStart += 1;\n    }\n    if (hunk.newLines === 0) {\n      hunk.newStart += 1;\n    }\n\n    let addCount = 0,\n        removeCount = 0;\n    for (; i < diffstr.length; i++) {\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n      // But they could be the header for the next file. Therefore prune such cases out.\n      if (diffstr[i].indexOf('--- ') === 0\n            && (i + 2 < diffstr.length)\n            && diffstr[i + 1].indexOf('+++ ') === 0\n            && diffstr[i + 2].indexOf('@@') === 0) {\n          break;\n      }\n      let operation = (diffstr[i].length == 0 && i != (diffstr.length - 1)) ? ' ' : diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Handle the empty block count case\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    }\n\n    // Perform optional sanity checking\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/util/distance-iterator.js":{"lineLengths":[25,13,0,46,13,3,30,0,23,63,65,47,8,25,8,23,27,25,32,31,22,30,43,30,22,14,28,79,71,0,0,43,27,7,0,30,5,0,29,30,27,82,31,0,0,43,30,7,0,31,24,80,51,0,4,1,3156,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/util/distance-iterator.js"],"names":["start","minLine","maxLine","wantForward","backwardExhausted","forwardExhausted","localOffset","iterator"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACe;AAAA;AAAA;AAAA;AAAA,CAASA,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;AAC/C,MAAIC,WAAW,GAAG,IAAlB;AAAA,MACIC,iBAAiB,GAAG,KADxB;AAAA,MAEIC,gBAAgB,GAAG,KAFvB;AAAA,MAGIC,WAAW,GAAG,CAHlB;AAKA,SAAO,SAASC,QAAT,GAAoB;AACzB,QAAIJ,WAAW,IAAI,CAACE,gBAApB,EAAsC;AACpC,UAAID,iBAAJ,EAAuB;AACrBE,QAAAA,WAAW;AACZ,OAFD,MAEO;AACLH,QAAAA,WAAW,GAAG,KAAd;AACD,OALmC,CAOpC;AACA;;;AACA,UAAIH,KAAK,GAAGM,WAAR,IAAuBJ,OAA3B,EAAoC;AAClC,eAAOI,WAAP;AACD;;AAEDD,MAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,QAAI,CAACD,iBAAL,EAAwB;AACtB,UAAI,CAACC,gBAAL,EAAuB;AACrBF,QAAAA,WAAW,GAAG,IAAd;AACD,OAHqB,CAKtB;AACA;;;AACA,UAAIF,OAAO,IAAID,KAAK,GAAGM,WAAvB,EAAoC;AAClC,eAAO,CAACA,WAAW,EAAnB;AACD;;AAEDF,MAAAA,iBAAiB,GAAG,IAApB;AACA,aAAOG,QAAQ,EAAf;AACD,KA9BwB,CAgCzB;AACA;;AACD,GAlCD;AAmCD","sourcesContent":["// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nexport default function(start, minLine, maxLine) {\n  let wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      }\n\n      // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      }\n\n      // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    }\n\n    // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n  };\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/merge.js":{"lineLengths":[25,13,0,46,13,3,38,22,0,23,3,25,29,23,1,0,3,25,27,23,1,0,3,25,33,23,1,0,179,0,190,0,416,0,130,0,91,0,183,0,23,30,27,28,25,34,47,47,0,31,29,10,25,3,0,31,29,10,25,3,1,0,36,31,35,98,83,34,0,35,43,3,0,47,33,87,63,63,57,57,42,51,41,41,37,37,12,38,79,79,73,73,5,3,0,17,20,22,21,23,0,78,48,24,6,54,24,6,0,49,65,57,18,66,56,65,61,20,68,12,38,24,73,20,101,20,17,8,115,20,18,33,5,3,0,13,1,0,33,34,55,14,33,11,31,0,33,14,31,9,33,19,31,18,8,5,0,16,74,5,0,12,31,9,29,0,31,13,29,7,31,22,29,41,6,3,0,15,1,0,33,70,1,0,43,24,16,10,26,12,17,20,6,3,1,0,34,90,1,0,34,10,28,28,37,28,21,4,1,0,75,91,74,14,23,21,12,4,15,24,22,12,34,0,35,118,0,78,45,48,0,117,26,38,67,31,22,0,29,22,0,31,0,29,0,31,20,29,29,31,17,29,7,31,25,29,28,67,31,23,0,29,24,0,31,0,29,0,31,21,29,29,31,18,29,7,31,25,29,29,67,31,33,67,32,39,46,25,35,19,20,12,25,64,5,46,0,0,29,30,22,1,0,42,38,42,0,58,72,8,29,7,27,0,29,10,27,5,29,20,27,112,31,23,0,29,0,31,0,29,0,31,21,29,29,31,18,29,7,31,25,29,18,0,13,15,29,7,27,0,29,10,27,5,29,20,27,114,31,23,0,29,0,31,0,29,0,31,21,29,29,31,18,29,7,31,25,29,21,0,13,5,13,27,5,25,0,27,8,25,3,27,13,25,30,29,21,0,27,0,29,0,27,0,29,19,27,27,29,16,27,5,29,23,27,16,0,11,3,0,42,1,0,43,38,54,0,28,29,21,0,27,0,29,0,27,0,29,19,27,27,29,16,27,5,29,23,27,26,10,85,3,1,0,38,23,19,19,15,17,5,1,0,45,78,44,26,20,3,1,0,39,46,44,26,3,1,0,31,15,46,0,44,145,0,47,22,5,0,32,21,20,12,12,5,3,0,13,1,0,46,19,18,21,29,25,0,80,42,85,0,27,12,5,0,57,23,86,50,0,28,24,0,33,29,44,7,5,0,47,27,20,12,24,5,3,0,70,22,3,0,19,19,3,0,44,44,3,0,10,19,20,4,1,0,30,49,37,11,1,0,58,35,82,0,63,19,5,3,0,23,14,1,0,37,19,19,33,35,51,56,0,35,55,39,16,31,9,7,0,35,55,39,16,31,9,7,12,75,19,7,0,75,19,7,5,5,10,23,22,4,1,34588,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/patch/merge.js"],"names":["calcLineCount","hunk","calcOldNewLineCount","lines","oldLines","newLines","undefined","merge","mine","theirs","base","loadPatch","ret","index","newFileName","fileNameChanged","oldFileName","oldHeader","newHeader","selectField","hunks","mineIndex","theirsIndex","mineOffset","theirsOffset","length","mineCurrent","oldStart","Infinity","theirsCurrent","hunkBefore","push","cloneHunk","mergedHunk","Math","min","newStart","mergeLines","param","test","parsePatch","Error","structuredPatch","patch","conflict","check","offset","mineLines","theirOffset","theirLines","their","insertLeading","theirCurrent","mutualChange","collectChange","removal","insertTrailing","myChanges","theirChanges","allRemoves","arrayStartsWith","skipRemoveSuperset","arrayEqual","swap","collectContext","merged","insert","line","state","operation","matchChanges","changes","matchIndex","contextChanges","conflicted","change","match","substr","reduce","prev","removeChanges","delta","i","changeContent","forEach","myCount","theirCount"],"mappings":"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","sourcesContent":["import {structuredPatch} from './create';\nimport {parsePatch} from './parse';\n\nimport {arrayEqual, arrayStartsWith} from '../util/array';\n\nexport function calcLineCount(hunk) {\n  const {oldLines, newLines} = calcOldNewLineCount(hunk.lines);\n\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\n\nexport function merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n\n  let ret = {};\n\n  // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n\n  ret.hunks = [];\n\n  let mineIndex = 0,\n      theirsIndex = 0,\n      mineOffset = 0,\n      theirsOffset = 0;\n\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    let mineCurrent = mine.hunks[mineIndex] || {oldStart: Infinity},\n        theirsCurrent = theirs.hunks[theirsIndex] || {oldStart: Infinity};\n\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      let mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n\n      ret.hunks.push(mergedHunk);\n    }\n  }\n\n  return ret;\n}\n\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if ((/^@@/m).test(param) || ((/^Index:/m).test(param))) {\n      return parsePatch(param)[0];\n    }\n\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n    return structuredPatch(undefined, undefined, base, param);\n  }\n\n  return param;\n}\n\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\n\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {mine, theirs};\n  }\n}\n\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart\n    && (test.oldStart + test.oldLines) < check.oldStart;\n}\n\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart, oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset, newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\n\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  let mine = {offset: mineOffset, lines: mineLines, index: 0},\n      their = {offset: theirOffset, lines: theirLines, index: 0};\n\n  // Handle any leading content\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine);\n\n  // Now in the overlap content. Scan through and select the best changes from each.\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    let mineCurrent = mine.lines[mine.index],\n        theirCurrent = their.lines[their.index];\n\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+')\n        && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      // Mine inserted\n      hunk.lines.push(... collectChange(mine));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      // Theirs inserted\n      hunk.lines.push(... collectChange(their));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  }\n\n  // Now push anything that may be remaining\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n\n  calcLineCount(hunk);\n}\n\nfunction mutualChange(hunk, mine, their) {\n  let myChanges = collectChange(mine),\n      theirChanges = collectChange(their);\n\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (arrayStartsWith(myChanges, theirChanges)\n        && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      hunk.lines.push(... myChanges);\n      return;\n    } else if (arrayStartsWith(theirChanges, myChanges)\n        && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      hunk.lines.push(... theirChanges);\n      return;\n    }\n  } else if (arrayEqual(myChanges, theirChanges)) {\n    hunk.lines.push(... myChanges);\n    return;\n  }\n\n  conflict(hunk, myChanges, theirChanges);\n}\n\nfunction removal(hunk, mine, their, swap) {\n  let myChanges = collectChange(mine),\n      theirChanges = collectContext(their, myChanges);\n  if (theirChanges.merged) {\n    hunk.lines.push(... theirChanges.merged);\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\n\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\n\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    let line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    let line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\n\nfunction collectChange(state) {\n  let ret = [],\n      operation = state.lines[state.index][0];\n  while (state.index < state.lines.length) {\n    let line = state.lines[state.index];\n\n    // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n\n  return ret;\n}\nfunction collectContext(state, matchChanges) {\n  let changes = [],\n      merged = [],\n      matchIndex = 0,\n      contextChanges = false,\n      conflicted = false;\n  while (matchIndex < matchChanges.length\n        && state.index < state.lines.length) {\n    let change = state.lines[state.index],\n        match = matchChanges[matchIndex];\n\n    // Once we've hit our add, then we are done\n    if (match[0] === '+') {\n      break;\n    }\n\n    contextChanges = contextChanges || change[0] !== ' ';\n\n    merged.push(match);\n    matchIndex++;\n\n    // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n    if (change[0] === '+') {\n      conflicted = true;\n\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n\n  if ((matchChanges[matchIndex] || '')[0] === '+'\n      && contextChanges) {\n    conflicted = true;\n  }\n\n  if (conflicted) {\n    return changes;\n  }\n\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n\n  return {\n    merged,\n    changes\n  };\n}\n\nfunction allRemoves(changes) {\n  return changes.reduce(function(prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (let i = 0; i < delta; i++) {\n    let changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n\n  state.index += delta;\n  return true;\n}\n\nfunction calcOldNewLineCount(lines) {\n  let oldLines = 0;\n  let newLines = 0;\n\n  lines.forEach(function(line) {\n    if (typeof line !== 'string') {\n      let myCount = calcOldNewLineCount(line.mine);\n      let theirCount = calcOldNewLineCount(line.theirs);\n\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n\n  return {oldLines, newLines};\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/patch/create.js":{"lineLengths":[25,13,0,46,13,3,42,34,50,34,0,23,3,25,31,23,1,0,179,0,190,0,416,0,130,0,91,0,183,0,23,99,17,17,3,0,47,24,3,0,12,27,5,25,0,27,7,25,3,27,12,25,28,13,14,13,53,0,32,39,25,7,3,0,17,24,24,20,18,18,0,27,29,25,6,26,78,26,0,43,31,20,0,29,53,27,31,32,32,0,19,97,43,43,9,29,0,0,31,0,29,0,31,18,29,27,31,15,29,7,31,25,29,34,51,46,0,0,26,32,14,32,7,12,52,26,76,73,35,25,0,33,24,0,35,0,33,0,35,23,33,31,35,20,33,11,35,29,33,32,16,35,25,0,33,37,68,0,35,0,33,0,35,23,33,31,35,20,33,11,35,29,33,54,0,22,36,60,36,60,27,12,0,72,38,51,51,86,0,72,99,80,80,13,0,70,60,13,11,0,27,28,28,24,9,7,0,30,30,5,4,0,41,29,10,27,7,3,0,10,29,29,25,25,16,4,1,0,28,15,0,45,43,3,0,82,109,109,0,47,83,59,64,0,30,25,5,0,30,25,5,0,112,36,3,0,31,1,0,103,111,1,0,79,96,1,15220,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/patch/create.js"],"names":["structuredPatch","oldFileName","newFileName","oldStr","newStr","oldHeader","newHeader","options","context","diff","diffLines","push","value","lines","contextLines","map","entry","hunks","oldRangeStart","newRangeStart","curRange","oldLine","newLine","i","current","replace","split","added","removed","prev","slice","length","contextSize","Math","min","hunk","oldStart","oldLines","newStart","newLines","oldEOFNewline","test","newEOFNewline","noNlBeforeAdds","splice","formatPatch","ret","apply","join","createTwoFilesPatch","createPatch","fileName"],"mappings":"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","sourcesContent":["import {diffLines} from '../diff/line';\n\nexport function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof options.context === 'undefined') {\n    options.context = 4;\n  }\n\n  const diff = diffLines(oldStr, newStr, options);\n  diff.push({value: '', lines: []}); // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function(entry) { return ' ' + entry; });\n  }\n\n  let hunks = [];\n  let oldRangeStart = 0, newRangeStart = 0, curRange = [],\n      oldLine = 1, newLine = 1;\n  for (let i = 0; i < diff.length; i++) {\n    const current = diff[i],\n          lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        const prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      }\n\n      // Output our changes\n      curRange.push(... lines.map(function(entry) {\n        return (current.added ? '+' : '-') + entry;\n      }));\n\n      // Track the updated file position\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          // Overlapping\n          curRange.push(... contextLines(lines));\n        } else {\n          // end the range and output\n          let contextSize = Math.min(lines.length, options.context);\n          curRange.push(... contextLines(lines.slice(0, contextSize)));\n\n          let hunk = {\n            oldStart: oldRangeStart,\n            oldLines: (oldLine - oldRangeStart + contextSize),\n            newStart: newRangeStart,\n            newLines: (newLine - newRangeStart + contextSize),\n            lines: curRange\n          };\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            let oldEOFNewline = ((/\\n$/).test(oldStr));\n            let newEOFNewline = ((/\\n$/).test(newStr));\n            let noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              // however, if the old file is empty, do not output the no-nl line\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            }\n            if ((!oldEOFNewline && !noNlBeforeAdds) || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n          hunks.push(hunk);\n\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  }\n\n  return {\n    oldFileName: oldFileName, newFileName: newFileName,\n    oldHeader: oldHeader, newHeader: newHeader,\n    hunks: hunks\n  };\n}\n\nexport function formatPatch(diff) {\n  const ret = [];\n  if (diff.oldFileName == diff.newFileName) {\n    ret.push('Index: ' + diff.oldFileName);\n  }\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (let i = 0; i < diff.hunks.length; i++) {\n    const hunk = diff.hunks[i];\n    // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n    if (hunk.oldLines === 0) {\n      hunk.oldStart -= 1;\n    }\n    if (hunk.newLines === 0) {\n      hunk.newStart -= 1;\n    }\n    ret.push(\n      '@@ -' + hunk.oldStart + ',' + hunk.oldLines\n      + ' +' + hunk.newStart + ',' + hunk.newLines\n      + ' @@'\n    );\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\n\nexport function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\n}\n\nexport function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/util/array.js":{"lineLengths":[25,13,0,46,13,3,32,42,0,23,27,30,17,3,0,31,1,0,40,36,17,3,0,42,32,19,5,3,0,14,1,1476,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/util/array.js"],"names":["arrayEqual","a","b","length","arrayStartsWith","array","start","i"],"mappings":";;;;;;;;;;AAAO,SAASA,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AAC/B,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,SAAOC,eAAe,CAACH,CAAD,EAAIC,CAAJ,CAAtB;AACD;;AAEM,SAASE,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AAC5C,MAAIA,KAAK,CAACH,MAAN,GAAeE,KAAK,CAACF,MAAzB,EAAiC;AAC/B,WAAO,KAAP;AACD;;AAED,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACH,MAA1B,EAAkCI,CAAC,EAAnC,EAAuC;AACrC,QAAID,KAAK,CAACC,CAAD,CAAL,KAAaF,KAAK,CAACE,CAAD,CAAtB,EAA2B;AACzB,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["export function arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return arrayStartsWith(a, b);\n}\n\nexport function arrayStartsWith(array, start) {\n  if (start.length > array.length) {\n    return false;\n  }\n\n  for (let i = 0; i < start.length; i++) {\n    if (start[i] !== array[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/convert/dmp.js":{"lineLengths":[25,13,0,46,13,3,50,0,23,65,39,15,13,16,0,44,24,0,23,20,32,21,12,20,5,0,40,3,0,13,1,1644,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/convert/dmp.js"],"names":["convertChangesToDMP","changes","ret","change","operation","i","length","added","removed","push","value"],"mappings":";;;;;;;;;AAAA;AACO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,MAAIC,GAAG,GAAG,EAAV;AAAA,MACIC,MADJ;AAAA,MAEIC,SAFJ;;AAGA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCF,IAAAA,MAAM,GAAGF,OAAO,CAACI,CAAD,CAAhB;;AACA,QAAIF,MAAM,CAACI,KAAX,EAAkB;AAChBH,MAAAA,SAAS,GAAG,CAAZ;AACD,KAFD,MAEO,IAAID,MAAM,CAACK,OAAX,EAAoB;AACzBJ,MAAAA,SAAS,GAAG,CAAC,CAAb;AACD,KAFM,MAEA;AACLA,MAAAA,SAAS,GAAG,CAAZ;AACD;;AAEDF,IAAAA,GAAG,CAACO,IAAJ,CAAS,CAACL,SAAD,EAAYD,MAAM,CAACO,KAAnB,CAAT;AACD;;AACD,SAAOR,GAAP;AACD","sourcesContent":["// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nexport function convertChangesToDMP(changes) {\n  let ret = [],\n      change,\n      operation;\n  for (let i = 0; i < changes.length; i++) {\n    change = changes[i];\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n  return ret;\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/lib/convert/xml.js":{"lineLengths":[25,13,0,46,13,3,50,0,23,39,15,0,44,28,0,23,24,32,24,5,0,39,0,23,25,32,25,5,3,0,22,1,0,24,12,31,30,30,32,11,1,2564,0],"data":{"version":3,"sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/diff/src/convert/xml.js"],"names":["convertChangesToXML","changes","ret","i","length","change","added","push","removed","escapeHTML","value","join","s","n","replace"],"mappings":";;;;;;;;;AAAO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIE,MAAM,GAAGJ,OAAO,CAACE,CAAD,CAApB;;AACA,QAAIE,MAAM,CAACC,KAAX,EAAkB;AAChBJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,OAAT;AACD,KAFD,MAEO,IAAIF,MAAM,CAACG,OAAX,EAAoB;AACzBN,MAAAA,GAAG,CAACK,IAAJ,CAAS,OAAT;AACD;;AAEDL,IAAAA,GAAG,CAACK,IAAJ,CAASE,UAAU,CAACJ,MAAM,CAACK,KAAR,CAAnB;;AAEA,QAAIL,MAAM,CAACC,KAAX,EAAkB;AAChBJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,QAAT;AACD,KAFD,MAEO,IAAIF,MAAM,CAACG,OAAX,EAAoB;AACzBN,MAAAA,GAAG,CAACK,IAAJ,CAAS,QAAT;AACD;AACF;;AACD,SAAOL,GAAG,CAACS,IAAJ,CAAS,EAAT,CAAP;AACD;;AAED,SAASF,UAAT,CAAoBG,CAApB,EAAuB;AACrB,MAAIC,CAAC,GAAGD,CAAR;AACAC,EAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,OAAhB,CAAJ;AACAD,EAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,MAAhB,CAAJ;AACAD,EAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,MAAhB,CAAJ;AACAD,EAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,QAAhB,CAAJ;AAEA,SAAOD,CAAP;AACD","sourcesContent":["export function convertChangesToXML(changes) {\n  let ret = [];\n  for (let i = 0; i < changes.length; i++) {\n    let change = changes[i];\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  let n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n\n  return n;\n}\n"],"sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/get-caller-file/index.js":{"lineLengths":[13,69,69,2,58,51,46,44,208,5,55,68,34,51,54,35,56,54,75,5,2,33],"data":{"version":3,"file":"index.js","sourceRoot":"","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/get-caller-file/index.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,qEAAqE;AACrE,EAAE;AACF,0DAA0D;AAE1D,iBAAS,SAAS,aAAa,CAAC,QAAY;IAAZ,yBAAA,EAAA,YAAY;IAC1C,IAAI,QAAQ,IAAI,KAAK,CAAC,eAAe,EAAE;QACrC,MAAM,IAAI,SAAS,CAAC,kGAAkG,GAAG,QAAQ,GAAG,oCAAoC,GAAG,KAAK,CAAC,eAAe,GAAG,GAAG,CAAC,CAAC;KACzM;IAED,IAAM,oBAAoB,GAAG,KAAK,CAAC,iBAAiB,CAAC;IACrD,KAAK,CAAC,iBAAiB,GAAG,UAAC,CAAC,EAAE,KAAK,IAAM,OAAA,KAAK,EAAL,CAAK,CAAC;IAC/C,IAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;IAChC,KAAK,CAAC,iBAAiB,GAAG,oBAAoB,CAAC;IAG/C,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC/C,2BAA2B;QAC3B,gDAAgD;QAChD,8CAA8C;QAC9C,OAAO,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,KAAK,CAAC,QAAQ,CAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;KAC7E;AACH,CAAC,CAAC"},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/lib/index.js":{"lineLengths":[13,0,62,0,58,32,18,39,13,0,43,24,45,30,3,0,16,1,0,16,33,23,25,24,21,22,23,3,0,1,22,27,24,22,27,33,23,19,3,0,1,65,9,9,11,9,15,73,1,0,39,43,66,3,0,52,9,59,4,0,14,84,3,0,3,0,233,20,19,222,20,63,0,27,89,47,5,95,47,4,4,0,26,46,48,45,55,50,37,37,27,46,27,48,54,30,21,29,30,4,45,37,2,0,28,7,8,111,0,29,27,8,47,85,119,91,101,92,112,80,76,79,95,80,96,72,67,65,37,8,55,192,109,142,75,75,68,130,70,75,23,14,93,59,64,60,59,29,14,14,169,101,30,8,119,75,79,110,28,8,76,112,52,29,14,122,99,23,20,110,68,69,111,52,51,76,40,20,9,46,61,75,34,16,55,25,18,49,18,12,69,25,12,77,38,96,32,14,49,81,37,18,59,65,101,71,26,13,53,104,72,62,51,90,44,21,17,136,27,17,156,72,118,87,97,41,7,71,40,21,105,29,13,49,59,55,58,59,133,114,87,94,94,39,74,63,27,18,150,32,18,54,180,184,186,72,72,144,78,170,69,74,178,182,184,71,130,68,87,25,11,44,95,102,92,91,56,30,16,55,79,23,13,14,113,124,72,87,109,84,31,11,25,93,88,102,143,50,60,57,52,24,18,69,85,79,84,4,0,31,61,27,17,59,34,15,52,107,83,81,41,4,0,149,37,176,147,84,34,9,190,128,31,8,80,8,40,126,103,106,89,100,153,4,0,34,0,40,7,13,11,68,0,31,8,11,6,67,9,9,29,40,28,163,69,11,8,0,16,23,25,8,16,15,84,10,0,20,50,17,13,9,0,8,12,29,24,8,52,41,24,7,7,4,1,0,67,24,101,18,1,49,32,97,3,0,63,36,0,61,80,40,16,23,18,45,3,0,32,1,187,0,7,16,11,0,69,20,20,3,0,33,42,40,14,1,0,54,11,49,0,30,54,5,0,16,3,0,22,12,9,6,21,0,9,41,18,0,48,18,14,11,6,16,3,0,29,15,0,9,29,23,20,5,0,49,46,16,3,0,30,25,50,47,16,3,0,29,47,3,0,29,42,3,0,30,42,3,0,22,41,3,0,30,42,3,0,30,45,72,92,62,48,89,61,77,3,0,31,38,28,3,0,26,54,40,12,35,5,3,0,40,31,3,0,26,30,0,231,3,0,33,40,82,54,27,3,0,94,106,0,32,58,35,5,0,32,3,0,22,42,5,61,20,7,5,60,3,0,47,46,16,19,21,36,16,3,0,23,5,61,41,7,5,45,3,0,26,5,61,44,7,5,21,3,0,29,49,30,22,16,3,0,62,61,58,3,0,104,36,30,118,41,25,26,0,40,28,5,0,30,39,3,0,31,59,5,61,28,7,5,45,24,3,0,38,66,5,61,28,7,5,45,34,24,3,0,72,92,0,15,29,53,29,5,0,16,3,0,81,101,0,15,25,29,5,0,16,3,0,30,76,3,0,33,54,54,5,0,47,3,0,37,54,13,12,13,15,0,36,82,7,0,38,12,38,5,3,0,42,53,45,20,9,29,43,20,9,12,59,5,3,0,40,47,0,40,37,38,0,47,29,0,99,7,0,28,25,5,0,16,3,0,31,43,13,5,0,38,3,0,21,28,0,24,34,29,14,0,36,101,45,54,33,9,0,14,5,0,16,3,0,60,80,0,36,95,43,7,0,23,49,32,57,7,84,28,5,0,16,3,0,34,42,29,5,0,48,3,0,25,43,3,0,26,76,3,0,24,69,3,0,36,68,3,0,61,41,27,3,0,3,0,18,37,24,32,23,41,3,0,1,15,29,33,34,48,2,1,45,1,0,24,24,20,22,20,21,25,33,24,26,29,29,35,25,27,25,26,24,23,32,40,40,52,32,36,32,34,56,5,32,5,3,0,1,29,0,44,25,43,30,15,1,0,35,28,15,9,5,1,0,26,22,23,23,28,28,25,0,42,80,0,21,25,83,106,106,91,56,26,1,0,48,84,0,21,41,25,85,108,108,93,58,26,1,0,12,30,15,14,5,35,15,14,5,34,15,14,5,29,33,28,15,14,5,32,15,14,5,33,15,14,5,27,31,28,15,14,5,27,27,14,5,26,14,5,27,14,5,34,14,5,24,30,14,5,33,28,14,5,36,32,14,5,31,14,5,35,15,14,5,37,14,5,41,15,14,5,23,26,14,5,45,24,15,12,5,29,15,12,5,34,15,12,5,32,15,12,5,35,15,12,5,32,11,12,14,5,26,15,11,14,5,27,15,11,14,5,34,14,5,31,14,5,33,42,34,35,33,34,34,44,34,34,42,40,41,41,31,15,13,11,14,5,28,14,14,5,26,13,5,30,31,15,14,26,5,28,15,12,5,44,15,12,5,33,32,14,5,33,39,39,38,14,5,32,14,5,37,40,14,5,27,36,14,5,35,34,15,11,14,5,29,29,33,31,30,15,14,5,32,14,5,34,14,5,34,14,5,38,14,5,35,36,14,5,32,14,5,32,14,5,34,14,5,36,15,11,14,5,32,15,11,14,5,36,15,11,14,5,28,11,14,5,30,10,5,34,10,5,32,14,5,40,14,5,38,14,5,38,14,5,36,14,5,34,14,5,34,14,5,36,14,5,32,14,5,36,14,5,34,14,5,40,14,5,38,14,5,42,14,5,40,14,5,42,14,5,40,14,5,48,14,5,46,14,5,38,14,5,32,14,5,40,14,5,38,14,5,42,14,5,38,14,5,44,14,5,40,14,5,44,14,5,42,14,5,36,14,5,40,14,5,46,14,5,46,14,5,36,14,5,40,14,5,29,14,5,33,14,5,27,14,5,33,14,5,35,14,5,33,14,5,37,14,5,26,34,35,20,5,43,20,5,38,34,20,4,2,35,37,1,51,21,1,44,37,1,44,37,1,44,33,1,41,33,1,35,36,1,52,38,1,29,36,1,32,36,1,33,36,1,32,22,1,31,30,1,39,38,1,43,38,1,32,28,1,41,28,1,39,35,1,41,22,1,33,36,1,34,27,1,1,44,18,4,0,105,30,4,0,45,57,20,12,35,5,4,0,46,45,4,1,0,4306,2652,85,106,62,1987,978,0,35,20,0,60,18,33,22,33,3,0,15,1,0,34,36,30,36,31,0,23,83,3,0,57,1,33,36,29,30,30,36,31,0,23,78,3,0,103,1,0,23,329,109,35,2,48,61,69,41,57,1,47,76,1,45,46,1,51,84,1,26,28,1,0,48,67,1,491,34,39,1,0,32,34,35,32,39,32,39,32,39,36,67,39,38,38,42,43,39,40,42,48,49,50,92,66,58,68,68,48,96,62,46,63,67,64,56,40,40,40,90,90,90,64,64,30,0,18,17,35,45,3,0,27,43,44,12,55,0,40,21,7,0,57,0,53,91,23,9,7,0,18,5,3,0,33,26,0,101,3,0,1,0,46,44,37,10,47,3,1,0,45,43,36,10,46,3,1,0,43,41,34,10,44,3,1,0,57,25,26,0,41,32,3,0,68,47,10,57,3,1,0,41,23,60,38,3,0,24,11,18,19,51,41,35,42,0,43,39,10,5,0,11,22,13,0,25,40,39,0,35,40,40,34,14,39,40,9,0,14,7,5,3,0,30,11,14,18,0,76,43,61,7,0,44,61,7,12,13,29,27,20,0,59,28,34,31,34,66,18,0,32,40,65,18,0,37,36,41,30,29,36,62,18,0,33,30,33,64,18,0,40,35,66,18,0,18,13,47,13,9,14,41,7,5,3,0,31,11,18,19,0,56,44,5,0,33,3,0,43,11,18,19,11,12,21,29,47,0,41,35,5,3,0,45,11,18,19,51,41,35,0,25,40,39,43,0,33,37,40,38,38,14,7,5,3,0,1,0,43,53,26,17,12,12,14,14,18,0,12,19,3,1,55,78,150,29,17,16,16,16,12,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,0,12,19,3,1,0,13,17,25,26,28,27,25,21,31,24,40,40,24,36,32,34,33,51,25,34,25,6,27,44,21,31,23,27,17,20,22,19,17,30,32,26,33,35,29,34,26,3,0,8,15,15,14,15,6,102,29,34,74,3,0,17,75,3,0,21,30,35,0,60,26,26,0,46,26,7,0,23,5,0,17,3,0,1,0,25,26,0,39,34,2,76,43,57,33,2,42,36,34,34,82,2,13,22,27,29,29,25,64,3,0,1,40,31,12,30,21,29,29,23,31,29,3,0,20,49,28,30,3,0,10,31,0,30,44,5,0,47,49,53,21,3,0,13,27,18,18,12,19,5,3,0,15,36,3,0,31,12,21,18,23,25,21,35,27,31,41,29,33,36,6,3,0,15,27,48,28,21,29,28,21,16,3,0,20,52,3,0,28,35,76,3,0,23,56,3,0,23,40,0,64,47,0,40,62,7,5,0,14,3,0,21,31,0,17,88,10,10,38,5,3,0,16,61,3,0,15,21,38,74,0,40,28,13,5,0,63,3,0,22,17,63,33,52,0,21,52,36,9,5,0,29,37,0,72,27,50,5,0,33,21,27,46,12,19,65,6,53,19,3,0,30,33,17,63,64,0,39,64,51,7,5,0,33,31,59,21,26,12,12,10,65,6,53,19,3,0,15,38,24,0,48,55,0,19,16,17,15,27,16,0,16,65,29,11,0,16,18,18,27,31,48,16,0,16,62,20,15,56,0,44,43,73,17,0,22,15,0,20,15,56,0,44,43,73,17,0,22,15,0,20,25,11,0,16,0,16,33,29,51,39,0,156,54,0,42,41,71,15,20,25,13,51,39,0,138,54,0,42,41,71,15,20,25,13,18,23,11,0,7,5,0,30,33,33,26,12,17,26,27,28,8,54,5,3,0,26,36,49,37,27,27,0,28,35,5,3,0,22,27,25,3,0,26,63,13,5,0,39,46,0,35,57,36,9,5,0,74,42,0,76,147,38,11,7,0,26,0,25,28,14,28,7,41,23,50,29,23,46,12,27,5,3,0,19,59,0,35,28,13,5,0,74,26,27,12,23,27,5,3,0,21,59,0,22,27,12,27,5,3,0,27,62,55,32,33,24,0,62,49,5,0,62,32,16,3,0,31,37,18,57,0,37,14,55,16,5,0,44,14,35,5,0,31,3,0,28,59,0,24,61,29,14,49,7,0,13,5,0,23,24,29,15,7,0,61,77,78,40,13,9,0,28,28,15,7,0,60,77,77,40,13,9,0,28,28,15,7,5,0,22,27,13,5,0,45,3,0,21,59,0,44,27,67,23,22,10,27,65,0,31,32,7,12,27,5,3,0,22,59,0,60,23,22,10,27,12,27,5,3,0,28,59,0,24,27,13,5,0,22,27,12,27,5,3,0,18,11,9,19,48,0,22,50,29,15,7,0,27,13,5,0,22,27,13,5,0,25,3,0,18,11,9,19,48,0,22,65,0,53,36,15,7,0,30,13,5,0,22,27,13,5,0,25,3,0,27,59,0,22,82,13,5,0,37,26,27,13,5,0,44,3,0,24,59,60,0,22,25,29,14,29,7,62,26,27,12,23,27,5,3,0,26,19,14,29,15,0,14,25,29,15,0,14,25,29,15,0,14,25,29,15,0,14,25,29,15,0,14,100,79,81,42,15,11,0,30,30,16,27,30,9,0,15,0,14,25,28,15,0,15,100,79,82,42,15,11,0,30,30,16,27,30,9,0,15,0,15,25,28,15,0,14,97,31,16,27,31,9,0,15,0,14,34,15,0,14,33,15,0,14,9,65,0,44,37,19,11,0,44,36,19,11,0,43,36,19,11,9,0,14,14,14,14,14,14,14,14,14,31,15,0,14,14,30,15,0,14,31,15,0,14,14,41,15,0,15,14,38,15,0,14,31,15,0,14,14,38,15,0,14,28,15,0,14,28,15,0,14,14,37,15,0,15,29,15,0,14,32,15,0,14,36,15,0,14,24,15,0,14,38,30,17,9,0,5,0,55,35,44,7,3,0,24,72,27,32,3,0,16,41,39,25,9,9,19,0,20,31,53,57,11,7,0,44,0,26,53,57,11,7,0,20,24,14,24,25,42,26,43,16,9,0,28,7,5,0,49,10,18,0,84,0,31,42,43,0,38,25,60,0,35,58,27,15,11,32,35,58,27,15,11,9,0,34,51,25,13,9,53,49,23,11,14,14,7,0,12,19,5,0,25,27,23,17,7,3,0,59,33,129,227,24,18,0,67,57,14,0,56,63,63,0,33,63,40,13,129,57,40,13,9,0,25,17,7,0,23,29,30,29,34,24,14,23,7,0,25,53,18,43,41,17,13,30,18,25,16,16,9,7,0,23,34,5,0,95,18,5,0,17,3,0,26,46,25,24,36,0,22,39,56,13,9,5,0,55,0,23,23,22,30,47,20,9,5,0,65,49,36,9,5,0,19,88,33,13,5,0,31,3,0,29,33,46,24,25,26,28,24,0,54,40,36,9,5,0,94,0,25,62,62,20,9,0,31,51,0,32,56,71,13,9,7,0,56,5,0,53,0,34,23,23,21,51,5,0,52,53,0,39,25,7,0,38,53,22,11,7,0,21,25,51,5,0,23,38,49,22,11,7,0,23,22,5,0,23,61,0,42,43,22,11,7,0,23,23,5,0,65,49,36,9,5,0,78,0,19,33,13,5,0,20,33,13,5,0,61,31,3,0,33,53,13,0,21,23,110,23,0,45,29,47,40,13,16,22,9,7,12,56,5,0,16,3,0,21,17,38,0,14,42,53,33,11,7,0,55,30,0,22,60,43,36,46,25,29,46,33,53,33,11,14,25,7,5,0,58,31,3,0,30,25,31,5,0,21,29,3,0,23,17,36,32,21,0,14,42,55,68,11,7,0,55,0,22,25,60,59,15,7,0,75,28,60,59,15,7,0,22,60,51,0,31,33,16,25,9,0,36,33,60,25,0,21,18,63,31,13,0,18,24,18,0,18,43,18,9,0,29,46,36,14,25,7,5,3,0,40,6,6,27,0,67,32,10,9,12,61,5,3,0,31,39,55,21,0,17,15,20,0,15,20,0,15,9,66,66,9,0,15,9,58,67,9,0,15,20,0,14,20,0,15,24,0,15,20,0,14,59,27,9,0,14,46,29,0,16,16,18,0,14,14,25,22,16,67,76,13,9,0,14,35,87,98,34,44,0,28,45,42,11,0,48,61,0,63,29,26,20,71,27,17,13,11,0,44,9,0,39,5,3,0,46,45,53,0,21,27,50,21,11,14,43,7,5,0,13,3,0,24,35,18,33,36,0,34,52,5,0,42,53,0,33,47,29,38,61,50,96,0,62,51,40,13,42,19,9,0,25,45,0,27,38,59,26,15,11,0,44,9,0,36,14,14,7,5,0,63,3,0,23,43,38,0,29,51,12,34,5,3,0,25,11,10,19,0,57,53,32,42,9,5,3,0,40,11,8,24,78,0,59,32,10,13,7,49,57,17,3,0,49,11,8,24,79,0,59,26,37,0,50,30,0,36,41,14,17,11,7,0,39,5,0,53,3,0,28,0,25,46,51,49,7,3,0,33,37,18,5,0,44,50,33,7,3,0,32,58,52,32,34,9,5,3,0,1,0,13,22,25,29,31,23,3,0,1,20,33,25,25,27,38,25,29,3,0,20,62,3,0,20,60,3,0,26,67,3,0,17,60,3,0,41,47,71,3,0,23,52,13,13,29,0,39,20,7,0,46,21,7,5,3,0,28,63,3,0,29,64,3,0,22,28,3,0,16,50,3,0,10,26,3,0,37,123,3,0,39,36,0,80,68,0,46,34,14,32,7,0,45,45,7,46,61,35,70,28,45,43,7,5,0,62,41,5,3,0,35,62,41,5,3,0,60,61,50,16,28,9,5,3,0,49,55,0,43,89,5,0,44,103,5,0,194,3,0,24,11,10,11,45,0,113,52,5,3,0,18,55,3,0,26,52,13,13,29,0,30,21,7,5,3,0,27,52,13,13,29,0,72,21,7,5,3,0,1,0,31,24,19,38,3,0,1,0,45,22,32,3,0,39,38,0,51,68,43,39,13,5,0,36,3,0,49,61,0,51,105,5,0,17,3,0,24,60,33,5,3,0,1,0,18,17,34,35,43,3,0,1,25,23,25,20,43,25,3,0,13,45,3,0,11,38,3,0,10,43,35,0,80,20,55,55,9,14,65,18,30,11,7,5,3,0,46,11,19,20,27,23,43,0,52,60,0,21,63,66,63,66,67,51,30,45,7,5,0,20,58,16,28,9,5,0,27,39,3,0,29,19,0,36,52,5,0,21,54,12,63,16,28,9,5,3,0,1,0,22,42,47,32,0,23,35,23,21,3,0,36,111,3,0,37,47,3,0,1,0,53,21,16,39,3,0,45,6,6,27,63,3,0,32,41,3,0,27,45,3,0,1,0,30,23,25,41,25,3,0,16,27,3,0,10,21,3,0,49,12,6,20,24,6,11,11,13,29,25,0,54,51,59,14,15,7,0,25,5,0,44,3,0,43,12,6,11,11,13,42,20,24,6,0,50,39,56,50,12,13,5,3,0,35,6,6,11,11,13,29,25,0,52,64,69,12,11,7,0,25,5,3,0,23,11,11,13,49,63,57,39,15,9,31,27,0,54,47,27,7,7,3,0,1,41,52,1,30,68,1,31,73,1,31,31,1,0,21,27,27,28,24,34,17,21,3,0,16,28,3,0,10,22,3,0,18,47,3,0,18,51,3,0,18,51,3,0,19,52,3,0,15,48,3,0,1,46,71,1,0,36,49,22,48,0,21,25,12,41,19,13,9,5,3,0,23,64,3,0,41,44,0,56,52,73,5,0,17,3,0,31,39,49,3,0,24,35,18,18,5,0,17,3,0,41,37,33,40,33,11,7,0,41,5,3,0,24,76,3,0,27,94,3,0,27,57,54,3,0,22,53,3,0,30,66,41,34,7,3,0,21,49,3,0,47,25,16,6,0,9,40,32,26,9,0,62,37,30,57,16,15,58,24,25,19,10,7,0,14,13,20,22,23,23,8,21,35,28,0,41,16,21,16,23,25,19,10,7,0,34,16,33,22,24,24,19,10,7,0,18,5,3,0,56,43,11,25,21,20,27,28,109,0,20,23,5,0,37,54,30,9,5,0,33,41,26,9,5,0,32,49,25,9,5,0,40,45,5,3,0,27,55,3,0,23,39,3,0,26,24,3,0,34,127,3,0,25,94,3,0,26,42,3,0,24,40,3,0,69,40,27,60,41,38,29,32,48,50,40,54,42,50,52,60,18,36,56,34,28,36,38,48,6,3,0,24,27,0,24,32,5,0,36,37,3,0,50,11,19,28,0,33,63,5,3,0,1,24,17,35,31,30,38,3,0,1,0,12,33,19,21,17,39,71,79,3,0,1,0,37,1,39,31,35,0,60,26,0,95,33,7,5,0,19,4,1,0,33,31,1,0,32,9,9,10,8,8,10,10,8,11,46,21,23,19,19,23,23,21,0,31,44,3,0,16,1,35,9,9,10,8,8,10,9,11,0,31,34,3,0,46,21,23,19,19,23,0,31,26,10,25,3,0,28,16,1,36,15,65,3,0,25,36,3,0,25,56,3,0,26,67,3,0,36,0,21,28,26,58,62,16,3,0,45,23,30,51,3,0,61,28,26,58,3,0,50,78,3,0,1,0,178,47,113,202,26,16,59,84,105,84,39,15,12,148,31,15,12,133,36,12,195,31,20,12,145,46,12,131,47,13,15,16,141,46,13,14,102,47,13,14,146,29,13,15,14,169,38,13,14,107,49,12,130,75,211,103,104,70,132,136,93,82,106,40,5,75,63,92,135,75,88,78,144,95,111,30,16,53,92,97,94,86,108,170,36,26,14,104,110,58,4,0,38,248,1,0,34,68,1,0,37,57,1,0,27,30,28,22,31,2,0,32,19,19,0,41,59,3,0,24,1,0,51,52,24,19,32,3,0,21,28,3,0,22,77,3,0,22,51,3,0,26,53,42,31,7,5,0,40,3,0,23,40,60,0,55,33,43,35,14,50,7,5,0,37,3,0,33,40,29,27,38,34,16,3,0,24,34,42,16,31,0,56,65,21,9,5,0,23,42,22,56,12,56,5,3,0,42,40,29,20,20,25,0,25,36,44,12,34,36,0,27,46,7,5,0,29,3,0,31,16,43,49,3,0,34,16,48,38,43,0,25,73,12,37,5,0,20,51,33,29,30,20,88,87,73,30,21,82,52,3,0,40,25,46,32,49,32,49,41,27,56,14,27,54,42,13,9,0,49,7,40,50,40,51,40,50,32,72,12,30,5,3,0,34,16,60,70,21,52,3,0,32,34,0,26,37,12,39,5,0,50,36,19,0,28,38,0,27,20,0,57,70,42,13,9,0,35,14,83,57,7,0,26,5,0,22,19,48,20,32,33,40,34,61,27,13,9,0,20,63,30,64,27,13,9,0,28,61,27,13,9,0,26,31,7,7,35,50,3,0,57,20,0,23,45,67,14,48,25,7,0,26,63,12,114,39,67,34,39,46,11,7,0,89,67,29,65,129,38,0,53,42,31,33,9,0,42,20,7,5,0,28,3,0,39,16,31,57,21,57,3,0,35,16,34,35,16,3,0,36,16,41,36,16,3,0,35,16,37,53,3,0,48,65,100,0,25,69,12,33,5,0,22,25,21,0,23,10,60,41,5,0,33,18,0,10,59,29,5,0,33,18,0,10,63,29,5,0,42,27,24,25,26,25,7,3,0,31,34,54,0,25,71,12,33,5,0,53,3,0,28,37,57,3,0,28,23,59,31,9,5,3,0,50,41,97,19,24,7,3,0,55,79,41,3,0,28,62,74,0,25,69,12,33,5,0,51,21,46,3,0,38,31,61,74,0,25,69,12,33,5,0,26,0,25,57,5,0,25,0,19,56,5,0,21,47,3,0,50,45,34,46,60,27,29,38,0,25,19,42,12,27,56,26,11,7,5,0,50,3,0,39,40,34,21,29,0,44,18,12,24,5,0,32,0,8,73,38,0,34,31,7,0,28,24,7,30,0,20,34,61,3,0,41,34,40,21,29,20,64,42,0,29,45,0,28,24,7,5,0,58,20,34,63,3,0,50,34,40,21,29,20,0,29,68,0,28,24,7,5,0,20,34,63,3,0,28,34,31,22,0,23,10,60,29,5,0,42,25,24,25,24,25,7,60,3,0,32,98,3,0,56,27,0,39,50,49,12,21,38,5,0,19,49,29,54,3,0,51,27,48,19,19,0,43,25,28,99,12,26,0,25,29,7,0,51,5,0,59,3,0,38,21,21,31,21,0,25,69,5,0,20,0,25,56,28,0,28,24,7,5,0,48,63,0,28,24,7,5,0,23,57,5,0,20,54,59,3,0,51,39,27,62,59,3,0,23,16,15,16,15,16,6,40,29,39,34,30,28,33,17,14,24,0,38,21,19,19,12,21,19,20,5,0,28,0,35,27,31,33,36,0,49,43,0,61,22,46,30,9,7,0,50,43,0,61,22,26,9,7,0,48,0,24,36,41,9,0,26,25,48,11,0,93,16,93,9,52,36,41,9,0,23,46,9,0,92,14,26,0,62,45,0,59,36,24,11,9,0,169,0,37,25,55,16,51,9,7,0,37,0,64,66,29,11,7,5,0,26,0,22,34,5,0,67,34,15,3,0,105,23,96,0,27,27,57,42,13,35,53,42,13,9,0,23,50,24,13,9,0,20,7,0,25,53,40,11,7,0,34,39,7,0,21,47,22,11,7,0,43,63,12,51,29,41,23,27,0,45,27,0,36,41,9,0,23,46,9,0,101,0,47,49,9,0,81,63,31,13,9,14,47,28,0,27,26,9,0,53,33,7,0,31,57,5,3,0,41,55,80,0,30,121,31,9,5,0,32,91,20,9,5,0,57,49,20,9,5,3,0,29,77,24,5,3,0,60,44,47,62,0,26,57,33,58,63,5,0,16,3,0,48,54,31,76,0,25,71,5,0,58,3,0,25,34,20,48,57,3,0,24,34,20,19,0,60,44,31,22,5,0,19,56,3,0,37,20,25,30,34,32,42,0,43,29,53,18,11,7,0,42,0,25,24,0,21,60,20,13,9,7,0,55,12,44,5,0,21,29,41,54,3,0,44,62,21,26,31,54,3,0,44,20,21,0,25,52,24,0,28,24,7,5,0,48,58,0,28,24,7,5,0,23,52,5,0,12,13,11,11,6,3,0,59,22,17,58,0,18,21,62,0,19,60,0,19,60,0,20,61,0,20,61,0,20,61,0,14,41,65,5,3,0,26,38,41,34,12,13,30,64,0,30,13,41,29,28,28,28,28,11,0,13,41,29,27,28,28,29,11,0,13,46,41,62,20,0,14,71,24,49,33,29,30,24,24,47,63,0,14,20,0,49,69,48,57,18,33,11,9,0,28,48,38,64,0,117,28,24,18,25,11,9,0,19,98,16,51,9,0,33,29,30,24,24,47,35,63,0,15,82,0,14,14,36,20,69,0,14,39,22,0,32,99,11,0,32,99,11,0,69,35,13,9,0,32,0,15,82,0,15,82,0,14,20,59,0,14,20,66,0,14,20,59,0,14,20,61,0,14,42,0,14,46,56,22,53,56,39,49,11,0,98,9,0,5,0,28,3,0,26,38,41,43,42,0,77,56,36,72,21,0,39,32,20,60,14,31,46,23,0,40,35,68,16,60,9,7,5,0,16,3,0,25,34,0,23,55,61,12,41,5,3,0,40,45,0,57,66,69,23,23,45,33,61,5,0,17,3,0,31,34,17,59,24,0,26,65,5,0,96,3,0,24,34,17,50,24,0,26,56,5,0,89,3,0,19,40,29,43,34,16,3,0,42,62,40,43,42,65,12,34,5,3,0,29,34,58,51,3,0,62,105,0,25,60,35,5,0,17,3,0,29,57,72,27,3,0,23,24,0,25,34,0,37,31,14,32,7,0,18,44,5,0,20,3,0,66,30,110,5,0,58,3,0,60,25,40,94,101,5,0,59,3,0,37,54,41,0,55,38,20,45,7,67,36,18,49,5,0,57,0,72,29,5,0,16,3,0,40,37,36,121,45,9,54,40,47,42,47,44,55,9,7,5,0,54,3,0,34,11,10,19,0,94,37,5,0,48,3,0,30,11,10,19,0,94,36,5,0,44,3,0,34,60,36,18,49,5,0,48,3,0,67,37,0,44,46,0,77,61,20,7,5,0,20,37,51,54,9,17,12,45,68,0,39,47,0,31,27,41,0,50,43,9,0,10,21,16,50,68,7,0,39,58,28,11,7,0,41,27,39,41,10,21,16,50,7,5,0,51,45,20,21,33,116,58,3,0,35,64,54,35,47,12,17,12,6,3,0,50,25,22,0,32,31,0,52,54,43,16,28,9,0,30,57,36,35,7,5,0,26,63,26,5,0,97,3,0,31,20,0,122,51,41,22,3,0,49,15,0,74,66,23,49,12,23,5,0,18,3,0,44,58,0,23,27,34,5,0,25,64,37,67,65,5,0,16,3,0,33,250,13,5,0,40,3,0,21,41,0,89,51,5,0,16,3,0,32,33,31,47,18,0,26,59,35,20,14,56,7,40,31,47,18,62,40,31,47,18,54,67,32,47,18,60,12,48,5,3,0,23,55,0,65,31,18,18,18,5,0,17,3,0,44,11,14,19,72,0,53,32,5,0,24,3,0,47,54,0,25,69,5,3,0,46,11,14,19,0,33,65,15,7,0,28,5,0,53,0,25,126,52,22,11,32,61,26,11,7,5,3,0,20,59,3,0,18,35,33,0,55,44,37,32,9,5,0,36,3,0,26,59,0,39,33,67,53,50,24,36,7,0,34,88,26,33,12,42,5,3,0,33,45,59,12,49,5,3,0,37,100,54,5,0,37,3,0,55,47,31,0,73,53,7,5,0,62,3,0,51,47,22,0,31,0,174,50,33,11,7,5,0,20,3,0,69,89,0,61,43,5,0,16,3,0,30,77,3,0,28,25,59,5,0,42,3,0,35,25,59,5,0,49,3,0,19,51,3,0,21,53,3,0,34,67,3,0,94,26,49,5,0,27,0,25,71,5,0,101,0,41,35,0,61,61,20,11,7,92,41,0,61,61,20,11,7,5,3,0,67,26,49,5,0,27,0,25,71,5,0,74,3,0,25,32,0,44,76,5,0,33,18,47,0,10,38,59,0,29,75,16,37,9,0,67,29,5,3,0,35,42,61,0,28,30,0,61,58,19,11,43,58,19,11,7,5,3,0,41,45,3,0,113,24,47,5,0,25,23,0,40,64,45,5,0,120,0,25,59,5,3,0,39,23,40,50,19,11,7,0,36,58,19,11,7,0,28,5,0,25,60,41,58,17,9,5,0,52,49,17,9,5,0,33,17,3,0,47,67,0,115,52,31,9,5,0,16,3,0,34,35,50,5,0,49,3,0,52,120,70,3,0,42,30,20,0,25,22,40,20,5,0,15,34,13,12,13,0,43,39,7,0,68,20,31,7,5,0,56,3,0,90,42,33,0,43,39,35,48,37,7,5,0,26,0,69,50,0,87,38,49,52,14,40,36,49,7,12,86,56,49,14,31,58,26,40,13,9,0,40,36,7,0,35,49,14,25,62,7,5,0,63,0,54,66,21,9,5,0,54,84,5,0,69,84,5,0,68,3,0,22,30,14,42,0,14,40,5,3,0,45,27,0,61,69,5,0,52,3,0,26,33,0,25,62,37,5,3,0,49,25,66,43,55,60,5,0,63,3,0,27,59,3,0,57,13,0,21,12,0,71,33,100,38,13,15,21,57,0,79,22,7,5,0,63,23,0,42,25,44,34,0,66,93,85,66,24,11,116,73,61,45,62,31,16,33,0,108,45,33,84,32,15,11,0,28,9,0,37,7,0,48,35,24,7,0,28,37,31,7,0,65,42,70,26,9,5,0,71,3,0,20,25,42,68,45,42,96,62,57,47,24,9,37,54,107,5,0,34,3,0,28,60,3,0,44,74,27,12,53,5,3,0,55,93,13,5,0,50,54,53,28,11,7,5,0,43,3,0,50,121,3,0,54,111,18,56,25,68,53,87,39,121,60,106,59,0,23,37,26,7,0,24,38,27,7,0,40,5,0,68,3,0,69,55,48,0,20,35,20,7,0,18,56,25,70,22,68,27,51,71,56,25,42,81,24,70,70,83,9,0,24,56,27,7,5,0,83,3,0,24,31,21,0,52,92,5,0,31,3,0,57,54,35,39,60,3,0,31,59,0,66,40,26,23,13,5,0,38,3,0,28,59,0,39,26,13,5,0,35,3,0,32,56,0,36,54,36,9,5,0,20,3,0,22,67,38,56,33,11,7,0,38,47,39,13,5,0,36,64,0,23,54,38,11,7,0,35,13,5,0,36,3,0,21,11,9,19,38,0,86,34,5,0,71,75,0,35,43,5,0,117,44,5,0,35,39,5,0,17,3,0,30,57,0,21,52,36,9,5,3,0,49,13,14,6,60,14,17,14,7,3,0,59,262,13,21,3,0,48,13,14,6,59,14,15,16,7,3,0,60,12,6,70,15,14,7,3,0,24,41,0,60,0,30,15,9,69,0,28,20,29,37,28,14,11,0,18,28,25,12,9,0,15,9,68,0,28,20,29,37,28,14,11,0,18,28,25,12,9,0,14,14,9,67,0,28,20,30,37,28,14,11,0,18,28,25,12,9,0,14,16,26,23,10,5,3,0,23,36,42,61,19,9,6,12,9,10,6,3,0,65,11,18,16,0,32,13,5,0,40,63,5,3,0,19,13,16,6,32,21,25,24,24,26,6,34,0,28,25,33,14,7,0,42,13,11,12,35,33,0,30,17,7,0,38,54,17,21,72,18,11,7,0,38,56,17,21,18,11,7,0,32,23,17,21,18,8,25,0,26,23,11,81,41,90,18,11,0,22,11,80,41,88,18,11,0,22,11,80,41,88,18,11,0,23,11,80,11,0,20,11,35,29,81,22,0,28,80,22,0,22,98,13,11,7,0,27,24,7,5,0,12,14,23,6,3,0,63,12,6,42,30,47,32,69,48,73,18,11,7,0,30,12,46,73,18,11,7,0,32,5,3,0,29,12,6,46,0,46,75,32,16,9,5,0,11,11,19,16,0,96,54,32,17,30,9,5,0,17,3,0,26,29,33,57,14,7,19,11,14,23,30,15,18,7,47,0,27,21,33,46,23,56,0,20,33,45,23,55,0,20,33,100,18,11,23,55,0,20,48,23,55,0,14,9,31,30,27,59,12,0,36,57,55,55,63,0,67,27,45,104,22,15,27,59,72,60,79,25,42,17,13,0,50,27,60,72,60,78,25,42,17,13,0,49,27,59,18,65,26,22,15,27,11,9,5,3,0,34,38,17,56,52,3,0,25,39,0,45,56,50,5,0,17,3,0,39,71,3,0,3,0,18,18,17,11,17,10,10,17,18,17,18,19,16,19,17,16,17,17,18,16,16,16,17,16,19,17,17,18,18,17,19,18,17,17,18,19,19,19,19,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,18,19,19,19,18,17,19,18,18,19,19,18,19,17,18,18,19,19,19,18,17,19,19,18,17,16,19,19,19,18,19,17,19,19,19,19,18,17,19,18,17,18,18,19,19,17,17,17,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,18,16,20,16,16,16,18,18,17,18,18,20,17,16,18,17,18,19,15,15,15,20,15,16,19,18,16,20,16,16,16,18,21,18,16,17,17,19,17,16,16,16,18,18,18,18,18,18,18,18,19,19,17,19,19,18,18,19,19,18,18,17,18,19,17,18,20,17,17,17,17,17,18,17,17,17,17,17,19,17,18,18,18,17,18,15,17,16,18,19,18,17,18,16,16,15,16,16,16,19,16,17,18,15,18,15,15,16,16,17,17,17,18,19,17,17,18,18,19,19,17,17,16,19,18,19,17,2,0,45,86,32,18,75,81,142,23,15,14,104,91,58,133,4,0,29,103,1,0,38,40,23,3,0,44,58,3,0,46,91,3,0,62,1,0,51,18,17,36,0,14,42,60,33,11,7,0,55,0,19,16,17,52,61,31,43,13,0,46,11,0,62,44,0,16,62,38,38,16,0,16,17,0,16,30,64,45,40,18,29,11,0,7,5,3,0,33,53,12,21,0,68,23,42,12,36,5,0,25,42,15,3,0,24,17,38,0,14,42,53,33,11,7,0,55,30,0,22,60,36,36,33,60,42,36,14,25,7,5,0,58,38,3,0,19,38,0,53,23,21,0,56,19,25,7,0,70,0,77,25,47,7,12,20,23,0,115,25,7,0,17,64,38,25,0,21,24,9,7,5,0,30,15,3,0,17,11,33,0,8,51,48,0,74,3,0,24,34,0,26,35,49,50,12,24,5,0,16,50,3,0,28,38,41,43,35,54,26,42,54,3,0,25,38,41,45,0,44,18,5,0,26,59,28,51,61,5,0,16,3,0,28,13,0,30,13,32,37,20,68,0,60,50,20,13,9,0,20,0,15,15,36,0,14,57,33,11,5,3,0,29,92,78,3,0,29,16,45,34,41,19,51,3,0,54,24,55,12,48,35,5,0,37,41,19,59,3,0,23,34,0,24,35,18,22,53,36,43,21,57,5,0,46,69,49,3,0,48,54,0,24,57,5,0,43,54,3,0,41,26,0,49,48,5,0,33,36,21,54,3,0,48,54,0,24,57,5,0,43,21,54,3,0,41,54,24,77,30,0,38,26,34,19,40,43,24,0,31,81,29,13,0,70,18,0,19,48,18,0,17,13,44,43,26,0,35,62,22,84,15,0,20,13,0,18,36,9,7,0,97,57,28,11,77,56,29,66,11,78,100,58,31,68,13,9,7,5,0,37,44,44,12,43,43,5,0,29,0,25,64,31,9,5,0,115,3,0,21,38,41,16,54,3,0,26,11,13,19,45,3,0,38,26,60,33,36,80,29,36,12,54,5,3,0,15,41,53,3,0,26,38,0,35,33,5,0,63,36,34,7,0,24,25,37,7,0,69,40,7,5,0,107,23,35,5,0,40,3,0,27,11,14,10,19,0,42,42,44,30,33,30,46,0,76,22,85,14,38,45,7,12,71,5,3,0,3,0,37,24,19,27,27,32,29,40,3,0,1,0,51,22,38,3,0,39,38,0,50,43,41,13,5,0,36,0,39,45,70,45,7,0,28,5,0,64,75,64,3,0,49,32,45,67,52,36,7,0,18,5,0,68,36,49,14,21,7,5,0,64,18,5,0,51,3,0,24,45,11,10,11,0,88,33,5,3,0,1,0,89,0,21,18,46,3,0,11,1,0,20,11,35,3,1,0,43,72,1,0,51,39,14,95,38,16,96,102,81,22,8,39,80,82,183,97,23,8,52,90,99,38,12,48,25,12,46,31,9,44,63,65,103,76,29,13,86,88,38,12,83,86,91,84,96,35,12,66,38,12,69,47,12,107,29,20,93,88,89,98,101,130,89,137,105,88,38,12,83,117,142,128,98,87,94,47,21,124,84,148,128,145,145,106,104,72,82,90,107,41,8,105,4,0,37,18,15,28,0,19,32,0,18,31,0,17,30,0,18,31,0,18,31,0,18,31,0,18,31,0,21,34,0,19,32,0,12,23,3,1,0,39,85,1,0,44,49,1,0,58,21,34,3,0,20,46,3,0,30,164,3,0,34,16,43,3,0,68,72,23,5,0,38,0,52,76,25,7,0,74,24,7,5,0,21,3,0,20,13,21,24,34,56,6,60,51,52,18,43,11,7,6,0,57,87,52,18,33,11,7,6,0,14,13,16,21,156,27,0,41,37,63,25,20,13,16,65,63,65,44,9,53,33,50,25,20,13,9,0,34,54,14,61,50,25,20,13,16,65,65,67,67,66,65,9,0,34,7,0,82,35,23,18,11,7,5,3,0,28,19,25,25,29,0,35,29,0,31,29,0,39,30,5,0,35,3,0,35,22,0,44,34,5,0,18,3,0,65,99,3,0,86,22,30,0,14,42,14,7,0,28,37,0,28,25,7,0,27,0,25,51,17,7,0,42,14,7,0,26,24,7,0,23,5,0,30,51,5,0,18,3,0,90,26,20,23,14,24,7,5,0,86,0,18,21,12,22,5,0,18,3,0,23,34,20,20,0,27,58,31,9,5,0,41,20,0,23,48,5,0,25,56,5,0,49,3,0,48,58,0,26,48,25,60,56,5,0,18,3,0,26,34,45,0,58,56,5,0,52,3,0,33,16,43,29,60,25,52,3,0,25,34,16,47,3,0,22,34,20,0,25,47,12,47,5,0,58,56,5,0,48,3,0,31,27,21,38,109,60,7,3,0,30,27,21,27,41,69,7,3,0,79,34,25,48,50,47,52,3,0,44,25,56,5,3,0,41,34,0,44,18,12,24,5,0,33,15,6,161,0,35,48,16,9,5,0,43,70,5,0,63,3,0,35,50,16,54,0,39,43,35,21,9,5,0,25,3,0,43,51,35,43,63,20,65,0,30,88,41,88,5,3,0,36,57,147,64,22,28,11,7,0,21,7,3,0,32,52,22,5,3,0,38,35,38,39,3,0,37,16,0,45,18,28,5,0,17,3,0,34,96,23,5,0,19,38,53,30,19,27,49,41,38,53,3,0,52,43,25,0,43,21,57,18,11,7,0,29,0,42,62,38,11,7,0,39,40,37,45,0,34,43,45,40,13,0,55,68,42,15,11,9,41,45,45,40,13,16,54,0,49,68,42,15,11,0,80,72,42,15,11,0,54,68,42,15,11,9,0,36,63,37,13,9,14,31,7,0,58,12,31,45,51,47,40,62,5,3,0,23,34,0,43,77,5,0,25,34,18,0,45,84,14,52,66,7,5,0,27,21,37,106,7,52,0,14,17,5,0,33,0,150,32,35,5,0,72,3,0,24,34,51,50,3,0,30,19,87,19,19,3,0,27,16,0,23,36,5,0,33,18,5,0,25,19,5,0,16,0,33,19,5,0,16,26,3,0,32,34,48,53,52,3,0,23,34,19,0,25,39,18,33,41,27,5,0,19,59,71,19,0,25,39,18,22,30,27,5,0,48,21,19,49,3,0,22,34,125,36,31,46,27,0,11,12,22,0,146,57,25,11,7,0,134,0,34,49,32,7,0,54,100,0,42,63,25,11,7,7,48,3,0,29,11,22,14,19,30,34,34,33,0,18,53,38,0,107,42,14,54,18,11,33,7,0,51,64,26,58,45,65,5,0,15,60,37,53,5,0,16,3,0,30,34,20,45,20,56,3,0,52,34,0,39,33,32,18,5,0,35,39,3,0,28,34,0,27,32,17,17,17,16,16,38,0,16,34,7,9,0,50,3,0,32,34,45,50,3,0,31,53,45,3,0,40,51,0,66,56,12,25,5,3,0,25,30,15,15,15,14,14,45,0,14,39,40,45,0,65,36,11,0,48,56,9,0,14,0,14,57,0,14,39,0,14,40,0,13,126,0,13,39,0,14,47,0,14,14,49,0,14,9,17,16,25,0,70,131,0,76,44,26,53,13,0,47,11,9,5,0,28,3,0,30,42,0,58,26,48,32,23,52,14,48,31,44,23,60,7,5,0,16,3,0,25,34,38,16,29,61,0,34,50,5,0,51,3,0,42,39,25,25,15,0,14,49,18,11,5,3,0,22,34,31,43,57,91,75,48,3,0,35,23,92,0,76,26,7,5,3,0,33,93,185,3,0,72,34,50,21,0,8,41,33,0,52,22,5,0,23,39,3,0,37,118,3,0,30,115,3,0,29,25,18,5,0,100,3,0,26,63,18,18,5,0,24,13,14,21,47,0,11,38,52,25,21,7,5,0,24,18,13,14,21,47,0,11,43,52,26,21,7,5,0,17,3,0,42,16,0,43,18,5,0,38,81,20,7,0,27,20,0,29,22,9,7,5,0,17,3,0,53,32,33,31,36,85,0,38,74,0,54,49,30,37,71,16,67,43,9,0,45,54,7,0,121,0,35,23,54,9,0,52,31,35,68,54,7,0,53,49,33,29,66,52,7,3,0,45,86,3,0,30,69,3,0,20,39,3,0,32,38,0,66,18,16,5,3,0,33,34,19,5,0,47,16,0,65,19,5,0,22,53,39,31,9,5,0,16,3,0,64,25,36,44,7,50,3,0,17,30,50,0,104,18,5,0,44,26,104,20,84,20,85,54,3,0,36,66,3,0,31,41,69,5,0,25,72,55,78,5,0,43,3,0,26,73,50,31,9,5,0,34,0,56,0,63,20,45,52,3,0,32,49,84,36,49,0,27,58,7,0,68,7,0,32,52,29,13,9,5,0,25,3,0,54,50,31,48,0,45,39,55,12,21,49,31,9,5,0,95,0,23,59,5,0,34,72,57,59,3,0,37,37,48,47,97,22,0,67,38,20,59,7,0,32,7,21,59,3,0,21,42,41,0,9,18,15,38,5,3,0,16,40,29,0,9,18,15,36,5,3,0,43,94,56,0,9,18,15,90,5,3,0,40,94,57,0,9,18,15,90,5,3,0,29,71,3,0,32,60,3,0,25,53,3,0,25,32,11,32,7,3,0,23,34,82,0,23,56,5,0,49,3,0,49,44,48,31,37,82,19,95,19,54,3,0,24,34,34,19,73,22,50,3,0,61,37,0,18,55,5,0,23,37,60,24,12,40,34,44,28,24,5,0,56,3,0,49,33,25,39,33,37,12,24,5,0,24,40,34,44,28,24,12,23,5,0,56,3,0,50,38,37,48,20,58,0,93,53,27,9,5,0,43,21,62,3,0,33,69,3,0,28,118,3,0,36,34,31,20,0,27,30,5,0,43,20,62,3,0,18,37,20,23,15,3,0,25,58,57,52,23,3,0,17,37,23,0,51,20,12,25,23,5,3,0,27,34,13,5,0,36,13,0,32,21,19,5,0,42,29,28,62,7,0,29,28,50,7,0,30,50,23,11,7,0,30,66,7,0,49,69,30,78,9,0,24,50,22,23,11,7,0,30,63,23,11,34,7,0,41,69,7,7,3,0,33,77,3,0,42,24,21,9,59,0,28,39,31,11,0,16,9,0,20,28,44,38,27,28,24,47,28,32,61,9,0,14,0,14,63,5,3,0,41,20,22,105,55,9,0,14,0,20,47,32,70,58,66,11,9,0,14,0,23,85,64,9,0,14,0,18,85,56,9,0,14,5,3,0,31,15,53,18,18,5,0,36,3,0,59,26,23,5,0,72,45,47,56,57,38,71,22,18,7,66,0,15,23,5,0,54,3,0,38,34,23,5,0,39,3,0,26,34,64,22,97,8,0,35,47,16,9,5,0,20,65,3,0,26,54,3,0,30,50,44,3,0,55,38,41,22,25,25,0,39,26,29,17,84,9,45,35,35,0,80,58,22,11,7,5,0,42,44,73,0,48,54,0,30,35,7,0,58,43,43,0,74,63,16,11,7,0,25,56,5,0,28,35,5,0,15,3,0,27,123,3,0,60,25,70,5,0,168,0,68,42,13,5,0,78,61,16,9,0,25,71,15,7,5,0,59,3,0,37,32,53,12,54,5,3,0,37,27,75,55,33,11,7,7,3,0,42,46,20,3,0,27,47,0,42,53,5,0,16,3,0,60,58,44,18,69,42,71,5,0,31,0,60,20,26,20,7,0,56,18,5,0,43,31,52,58,92,0,29,32,11,9,0,70,52,0,48,58,34,9,0,47,93,48,24,9,0,39,60,29,72,58,46,0,42,43,11,0,76,9,0,83,34,9,0,58,31,44,66,9,0,33,50,7,0,32,5,0,74,3,0,24,22,0,31,11,12,13,0,130,50,38,5,3,0,58,106,64,29,0,58,0,19,37,14,57,7,0,46,26,73,5,0,72,3,0,63,39,72,5,3,0,28,0,21,30,0,80,35,0,98,33,20,33,7,0,68,57,7,5,0,47,0,141,67,22,9,5,0,22,3,0,21,25,18,0,70,33,20,14,34,7,0,61,30,26,49,23,59,40,24,33,39,23,67,12,66,20,33,14,34,7,0,37,5,3,0,21,66,3,0,34,33,35,18,26,39,17,5,0,26,72,32,5,0,48,3,0,66,11,22,19,105,46,0,16,9,10,36,26,0,52,68,18,11,250,98,18,11,7,5,0,23,3,0,44,63,36,22,48,19,9,5,0,33,59,5,0,33,72,32,5,0,58,3,0,25,68,3,0,41,39,41,49,7,0,32,7,3,0,29,70,3,0,46,114,27,23,34,41,42,69,7,0,52,43,20,20,0,57,62,40,13,9,0,54,14,85,7,6,0,25,64,12,41,5,3,0,68,54,0,14,31,0,28,56,20,11,7,0,33,61,21,40,11,7,0,27,55,20,11,7,0,28,56,20,11,7,0,13,5,0,57,62,18,9,5,0,26,33,52,20,11,7,5,0,75,3,0,46,34,47,0,50,51,24,9,5,0,49,50,24,9,5,3,0,40,102,62,3,0,34,49,48,3,0,67,64,83,5,0,89,0,23,25,76,7,0,18,5,0,52,23,3,0,44,58,0,23,27,34,5,0,25,64,37,65,67,5,0,16,3,0,32,65,78,5,0,38,41,46,0,88,68,31,9,5,0,60,113,34,0,118,31,5,0,20,63,33,5,0,23,3,0,47,65,13,5,0,99,96,61,3,0,38,41,27,5,0,49,41,3,0,28,44,0,56,60,31,9,5,0,42,13,11,15,59,32,122,9,5,0,42,3,0,35,24,54,16,9,5,0,29,59,17,36,9,5,0,44,49,3,0,94,59,0,42,57,26,9,5,0,11,22,10,15,0,56,44,19,12,9,5,0,63,101,3,0,67,59,63,74,3,0,48,48,69,55,3,0,25,32,0,64,73,5,0,34,65,5,3,0,36,59,61,43,3,0,45,59,61,52,3,0,26,33,0,89,27,5,0,49,0,15,36,37,5,3,0,49,25,53,5,0,63,3,0,29,69,0,14,12,17,0,71,33,72,38,13,15,21,57,0,79,22,7,5,0,67,45,5,0,23,40,42,62,0,52,51,0,119,16,7,0,104,62,7,0,43,0,182,56,0,36,7,0,18,14,0,41,76,24,5,0,15,37,77,48,5,0,46,33,22,5,0,21,35,76,24,5,0,59,38,27,5,0,63,40,83,137,3,0,38,20,0,171,51,16,9,5,3,0,40,51,41,12,56,5,3,0,20,25,45,73,66,26,9,33,0,27,56,38,7,5,0,34,3,0,39,23,94,48,19,11,7,0,28,5,0,49,42,33,17,3,0,33,24,34,61,0,33,20,0,14,51,5,3,0,37,24,37,62,14,0,28,33,29,20,105,20,13,16,62,20,13,9,0,50,14,0,34,66,58,9,0,14,40,5,3,0,52,35,28,33,29,37,50,14,0,14,40,5,3,0,45,24,28,29,33,59,14,0,14,56,5,3,0,57,21,33,39,40,100,100,76,3,0,22,30,14,42,0,14,40,5,3,0,38,43,68,0,27,62,44,20,7,0,32,5,0,52,3,0,30,94,18,19,12,46,5,3,0,19,51,3,0,21,71,3,0,30,50,0,115,54,31,9,5,0,16,3,0,26,28,24,36,7,0,24,36,7,5,0,40,3,0,18,11,10,19,0,22,26,26,29,26,26,5,3,0,15,11,10,19,0,22,26,27,16,5,0,16,3,0,30,47,31,0,75,53,7,5,0,41,3,0,29,57,72,27,3,0,28,25,65,5,0,42,3,0,27,59,3,0,29,69,3,0,41,43,99,61,5,0,55,3,0,45,70,61,33,71,55,3,0,27,48,49,0,15,34,35,5,0,17,3,0,26,60,39,0,9,18,15,56,5,3,0,29,58,49,0,9,45,15,54,5,3,0,36,25,27,48,40,42,29,71,18,11,54,7,12,32,5,3,0,24,46,0,26,85,0,20,15,13,19,62,21,124,11,7,5,0,18,3,0,30,44,25,3,0,33,55,3,0,11,45,41,5,0,25,3,0,19,45,41,5,0,33,3,0,73,39,75,54,5,0,30,87,3,0,90,47,83,59,5,0,35,104,3,0,80,56,57,37,18,33,33,35,0,32,45,0,34,48,0,58,34,29,87,36,16,31,36,9,63,34,85,14,32,27,7,61,30,0,21,46,0,37,80,9,14,48,7,5,0,55,114,15,9,5,0,33,35,59,56,0,54,92,5,0,30,62,5,0,19,61,5,3,0,3,0,44,59,9,13,12,17,0,130,17,3,0,62,1,0,56,52,59,40,62,1,0,62,54,56,4,60,34,26,36,18,27,46,27,23,56,5,3,0,41,76,37,68,3,0,26,74,35,5,0,48,3,0,19,84,3,0,21,86,3,0,27,66,3,0,22,84,3,0,30,70,3,0,22,84,36,12,39,5,3,0,18,31,18,5,0,33,19,5,0,30,39,0,33,18,5,0,17,3,0,29,64,44,3,0,40,80,58,5,0,25,24,62,18,47,55,5,0,21,26,53,3,0,16,85,3,0,21,86,3,0,45,70,16,30,40,60,0,22,63,30,46,23,69,43,14,65,33,11,7,12,55,5,0,31,104,39,3,0,21,60,61,0,52,27,25,76,61,5,0,43,39,37,77,35,3,0,30,25,41,0,52,93,22,9,7,5,0,44,3,0,42,56,18,5,0,64,3,0,21,11,16,13,0,50,88,5,0,28,33,3,0,21,60,61,25,0,52,73,23,56,5,0,56,34,57,36,0,23,69,64,5,0,30,43,21,54,3,0,23,91,3,0,19,60,53,36,9,5,3,0,3,0,59,22,25,54,36,18,0,47,64,61,50,0,29,28,9,7,0,43,5,3,0,19,72,3,0,3,0,45,117,52,59,28,32,58,12,44,0,40,21,7,0,39,58,23,9,7,0,18,5,5,1,49,41,32,32,12,29,5,5,0,40,29,3,0,14,1,66,49,54,35,41,50,89,5,0,100,0,41,296,61,69,5,3,0,71,67,3,0,80,76,3,0,47,78,0,49,76,116,5,0,69,24,8,0,30,47,84,7,0,46,83,7,0,84,0,47,69,151,7,0,52,162,7,59,144,5,3,0,47,5,51,89,7,0,106,0,63,186,7,5,3,0,146,162,3,0,89,124,43,16,3,1,22,9,6,7,13,14,14,2,51,0,24,23,28,17,15,35,36,37,33,32,14,19,16,16,40,23,21,2,27,21,0,50,79,3,0,17,1,0,87,0,47,105,2,0,36,37,34,0,34,0,117,58,0,18,50,104,20,13,63,61,20,13,9,14,59,18,11,7,5,0,24,24,27,26,31,25,14,0,30,36,0,94,27,0,42,36,69,0,126,50,45,15,11,9,0,14,0,28,9,17,16,17,19,0,40,86,11,0,42,16,9,0,27,9,159,9,0,29,35,130,14,0,34,36,52,33,13,9,0,40,29,44,14,0,37,48,14,5,3,0,57,39,116,20,9,47,32,32,45,36,0,20,46,18,11,7,12,37,5,3,0,55,36,0,36,30,25,0,41,33,33,46,38,14,38,7,0,39,22,48,19,13,38,48,32,13,9,7,5,3,0,33,24,24,27,26,31,25,20,0,30,9,50,53,124,13,9,0,28,45,0,27,48,0,29,94,0,34,37,0,37,50,0,30,38,26,0,14,21,5,3,0,51,20,3,0,55,57,0,34,70,49,7,5,3,0,54,34,16,99,50,3,0,22,34,16,44,48,3,0,22,30,13,9,40,22,61,55,9,0,13,45,5,0,34,3,0,70,20,21,0,30,18,22,14,24,7,0,41,24,35,14,34,78,0,55,29,16,9,14,30,0,61,60,35,13,9,0,32,49,9,0,76,7,5,0,16,3,0,34,16,43,34,48,3,0,26,34,11,11,22,14,19,0,22,49,30,58,65,41,12,35,5,0,24,80,16,3,0,55,42,44,73,0,28,35,5,0,15,3,0,39,17,3,0,47,36,0,80,77,68,35,54,21,48,54,3,0,57,19,32,30,30,44,31,33,13,3,0,25,17,24,25,30,63,36,6,26,0,33,48,0,38,34,58,24,11,7,0,13,5,0,43,93,13,12,21,0,25,37,40,26,13,16,33,9,7,0,13,5,0,222,34,0,29,99,35,23,58,35,33,13,29,9,9,13,5,0,129,172,0,53,18,31,27,18,23,35,28,61,11,7,5,3,0,118,142,38,48,13,32,11,14,55,13,30,11,7,5,0,48,46,10,9,5,0,37,54,5,3,0,50,75,3,0,45,24,37,66,14,0,24,30,14,0,29,30,32,0,14,57,18,11,5,3,0,30,26,19,5,0,105,29,7,16,3,0,1,0,43,61,104,13,5,0,25,66,0,31,21,42,17,11,15,7,0,26,34,60,63,11,16,45,19,13,9,7,0,27,5,3,0,48,86,3,0,19,30,21,40,0,27,24,5,0,37,40,36,0,30,32,5,0,16,3,0,52,21,85,5,0,80,3,0,44,38,41,60,0,25,56,32,0,28,74,7,0,46,57,5,0,16,3,0,67,96,3,0,64,93,3,0,64,25,0,165,3,0,57,38,41,0,33,36,37,0,29,69,9,0,20,7,5,0,28,0,30,34,12,51,33,5,0,11,10,19,0,49,53,5,0,63,0,25,65,5,0,45,56,40,31,0,27,38,25,0,113,52,9,0,121,56,9,0,111,62,51,9,14,25,7,0,18,43,28,57,9,18,37,60,5,0,16,3,0,46,38,41,57,56,0,60,18,5,0,80,3,0,67,23,56,23,55,22,47,60,5,0,16,3,0,49,97,3,0,37,38,41,57,68,0,60,18,5,0,58,3,0,58,35,48,0,95,48,19,31,11,7,0,60,5,0,31,0,75,45,0,27,24,48,0,54,24,11,0,64,9,0,66,25,41,47,35,0,23,45,9,0,20,0,62,29,14,66,71,37,15,11,9,0,57,94,39,0,87,62,35,13,9,0,75,7,5,0,16,3,0,34,38,41,0,17,14,71,22,55,46,15,0,23,55,70,60,41,19,15,0,117,15,0,24,62,56,15,9,0,14,55,5,3,0,38,38,41,128,3,0,23,20,0,11,14,19,41,83,0,100,50,21,23,9,5,0,56,42,20,9,5,0,16,3,0,36,25,61,25,9,5,3,0,50,38,41,42,0,43,18,55,59,18,5,0,34,34,0,41,39,25,0,27,46,7,0,38,18,55,60,0,42,34,0,40,43,20,13,56,49,20,13,9,7,0,20,61,56,7,5,0,69,0,18,13,12,21,138,0,51,60,22,11,51,7,5,0,16,3,0,50,17,37,53,9,18,5,0,38,41,61,76,0,75,56,39,26,27,18,28,60,9,5,0,16,3,0,44,38,41,57,57,0,60,18,5,0,58,3,0,54,19,33,55,17,6,0,8,75,36,26,0,16,3,0,60,11,10,19,0,34,70,39,81,5,0,25,0,22,55,26,20,7,0,50,18,5,0,37,93,12,35,0,49,85,14,26,20,7,5,3,0,68,54,23,29,0,19,45,21,33,34,46,22,11,7,0,76,46,12,49,5,0,36,31,63,12,55,5,3,0,55,54,23,16,41,22,102,3,0,78,72,35,45,16,52,23,11,22,25,14,0,26,55,51,5,0,30,31,5,0,19,61,12,135,5,0,57,0,71,24,58,47,34,96,12,28,62,36,7,0,39,5,0,66,16,3,0,52,67,3,0,66,54,20,42,0,36,53,20,9,5,0,61,3,0,30,217,3,0,40,40,40,9,52,50,11,9,7,0,69,44,19,108,11,14,43,45,57,21,15,11,9,7,5,0,89,3,0,107,20,21,80,50,0,30,18,22,14,24,0,32,108,64,44,15,11,0,29,59,11,0,22,16,9,7,0,86,5,0,74,16,3,0,27,56,3,0,49,20,0,49,20,134,0,29,49,5,0,39,59,5,0,16,3,0,21,38,41,80,3,0,38,13,11,10,19,0,19,14,33,0,14,32,20,0,29,52,9,0,30,48,42,13,9,0,47,0,14,32,20,55,0,14,9,55,9,0,14,14,9,28,59,9,0,15,58,0,15,57,0,15,58,0,15,57,0,14,39,0,14,46,0,14,47,0,14,9,78,69,9,0,13,13,9,81,9,0,13,9,74,9,0,13,13,9,82,9,0,13,9,76,9,0,14,50,0,14,31,0,14,32,34,44,0,14,42,0,14,14,41,0,14,9,34,22,29,62,0,51,59,18,54,24,15,11,9,0,15,9,50,36,44,13,41,9,0,14,9,65,9,0,14,9,65,9,0,14,14,9,50,9,0,14,14,14,9,84,0,29,58,18,36,11,9,0,14,9,76,0,69,64,18,18,36,11,9,0,14,38,108,48,11,0,78,53,44,0,82,19,18,27,0,30,57,26,83,49,52,83,22,26,15,37,57,66,13,11,0,75,24,84,11,0,20,16,34,9,0,5,3,0,70,78,0,23,39,41,23,23,80,52,12,30,5,3,0,37,34,41,38,16,78,3,0,65,82,101,0,60,104,22,11,7,0,36,45,12,59,21,40,9,5,3,0,70,27,18,9,54,49,14,9,0,19,32,0,14,61,22,11,5,3,0,38,71,44,26,0,39,52,36,9,5,0,20,50,16,3,0,26,39,0,18,46,5,0,25,16,40,27,0,18,40,36,28,12,36,5,0,34,49,3,0,16,34,16,0,98,42,16,9,81,42,16,9,5,0,63,43,16,9,5,0,42,3,0,22,34,155,34,16,46,48,3,0,33,34,16,0,52,81,18,0,28,42,51,26,7,0,56,5,0,36,3,0,47,21,47,47,0,61,50,26,26,43,9,5,0,49,3,0,33,75,16,0,33,27,52,16,11,7,0,36,5,0,52,3,0,41,43,77,23,16,39,3,0,29,34,54,3,0,29,53,3,0,30,54,3,0,29,53,3,0,30,54,3,0,29,65,33,29,16,3,0,30,34,23,16,51,3,0,22,34,16,48,3,0,50,38,41,12,16,52,72,80,45,50,43,46,24,55,21,23,30,0,29,18,22,14,127,0,29,54,16,9,7,0,27,52,55,45,108,0,44,16,9,14,94,7,5,0,49,20,66,74,57,0,100,58,47,34,60,23,5,0,32,0,27,50,5,0,70,56,58,46,0,30,59,33,49,46,12,24,5,0,57,3,0,51,55,55,56,89,24,5,0,65,44,64,27,3,0,28,38,3,0,20,23,18,5,3,0,44,16,3,0,25,34,16,0,25,76,18,68,0,66,48,22,11,7,0,22,5,0,31,3,0,18,30,0,23,42,34,28,12,26,5,0,50,3,0,24,41,0,40,53,23,9,51,48,36,9,30,48,31,9,5,3,0,34,11,12,15,10,11,19,32,90,0,25,22,58,57,11,7,5,0,34,39,36,18,72,63,6,23,16,45,101,16,3,0,27,34,26,53,27,0,26,62,38,69,5,0,52,3,0,31,34,3,0,68,19,42,5,0,80,50,41,21,34,25,16,0,32,18,22,14,24,0,32,49,16,9,7,0,15,0,22,43,14,65,71,7,0,86,50,18,11,7,0,27,47,7,0,33,5,0,16,74,34,0,20,29,26,32,5,0,39,3,0,37,66,79,3,0,34,129,3,0,48,24,0,25,41,57,33,11,7,0,30,47,7,5,0,34,24,27,17,17,0,25,47,32,5,0,28,35,22,5,0,24,0,30,34,37,5,0,35,47,47,66,0,78,31,0,65,23,52,35,37,7,0,51,26,52,28,0,29,29,50,41,25,13,22,9,0,37,7,5,0,115,16,3,0,45,41,3,0,40,25,3,0,35,16,0,70,61,0,39,89,18,9,5,0,125,49,18,9,5,3,0,72,21,79,41,18,5,0,51,39,27,25,88,5,3,0,81,27,0,23,145,53,5,0,59,77,0,22,91,34,55,0,42,64,72,11,16,58,34,13,9,0,91,14,47,7,0,28,53,5,3,0,113,177,33,16,3,0,48,22,27,48,21,12,13,13,13,21,14,0,45,41,14,23,19,50,18,0,19,49,18,0,19,49,18,0,19,50,18,0,19,13,56,0,48,65,68,17,22,59,35,19,15,0,44,20,13,0,18,36,9,7,0,21,0,25,30,7,5,0,20,3,0,31,19,27,27,3,0,104,37,35,41,132,65,51,54,26,22,16,3,0,69,18,42,5,0,80,50,34,16,83,74,82,3,0,65,51,46,0,49,24,5,0,32,37,72,0,17,47,70,5,0,46,39,26,22,66,60,3,0,62,59,25,3,0,60,50,32,3,0,62,59,53,0,23,42,60,12,42,42,29,73,74,63,0,50,59,111,13,9,0,66,134,0,43,73,9,9,28,36,5,0,32,3,0,27,38,3,0,29,56,59,5,0,16,3,0,81,55,30,30,6,0,38,29,29,26,21,25,9,5,3,0,71,20,21,0,30,18,22,14,24,0,32,29,59,11,0,22,16,9,7,0,73,5,0,16,3,0,72,12,0,25,24,44,39,25,11,7,0,17,32,50,53,111,32,46,0,30,58,33,11,7,0,36,18,57,12,83,5,0,15,3,0,28,34,63,45,3,0,32,21,35,47,3,0,37,13,11,15,10,19,0,43,30,12,30,5,0,67,0,18,27,31,7,12,68,5,0,16,16,3,0,63,27,13,5,0,35,13,5,0,27,36,51,22,11,15,7,34,36,51,22,11,15,7,0,37,64,22,11,15,7,0,60,20,9,38,55,45,22,11,15,7,5,0,43,44,21,21,9,13,5,0,123,0,44,49,21,26,9,5,3,0,20,45,0,75,18,5,0,17,3,0,34,54,97,14,7,0,23,44,16,9,5,0,76,36,48,14,38,7,5,0,32,55,5,0,52,3,0,22,50,11,10,19,156,3,0,16,34,83,14,7,16,27,24,0,40,32,0,32,16,17,15,16,15,15,16,16,33,0,16,45,7,5,0,31,29,52,3,0,52,45,23,10,47,59,26,11,7,5,3,0,64,58,0,44,34,63,12,56,38,66,5,3,0,33,30,30,81,0,24,20,0,14,21,5,3,0,48,25,52,31,9,5,0,56,46,20,9,5,3,0,37,59,31,34,25,6,0,9,24,15,55,5,3,0,48,45,23,10,61,33,36,27,8,0,11,26,17,57,7,12,24,5,3,0,44,60,32,0,9,24,15,56,5,3,0,24,48,45,0,25,45,0,11,26,17,30,7,5,0,22,3,0,27,48,46,0,27,46,0,11,26,17,30,7,5,0,22,3,0,28,46,3,0,45,65,3,0,43,103,3,0,33,38,41,51,80,49,92,74,15,3,0,27,38,34,16,16,53,30,37,0,9,58,15,21,5,0,16,53,3,0,42,0,1,0,19,14,2,21,16,2,28,29,37,31,41,53,0,44,43,28,11,10,14,0,35,7,27,17,16,18,18,15,20,39,74,41,39,23,25,28,32,30,25,40,25,30,21,33,27,14,14,19,9,0,36,17,16,18,18,15,20,41,79,25,0,47,36,41,25,27,32,34,37,15,18,36,40,25,27,32,34,37,15,11,0,81,0,28,41,80,71,34,41,25,40,23,46,29,15,18,41,80,71,34,41,26,40,23,46,29,15,11,0,53,39,33,32,36,38,41,24,17,19,9,7,42,5,3,0,16,1,0,48,32,46,40,0,30,64,5,0,41,3,0,74,36,59,50,0,104,78,50,13,19,11,7,5,0,47,3,0,25,27,33,43,32,45,51,79,58,48,53,72,47,21,3,0,31,26,18,5,0,34,34,16,57,3,0,18,33,19,5,0,38,3,0,25,39,45,0,41,18,5,0,30,36,0,36,49,0,55,79,0,55,23,9,7,0,18,5,0,17,3,0,37,25,33,5,0,57,3,0,44,36,34,13,0,30,21,19,5,0,24,14,60,0,14,61,0,14,49,0,14,43,0,14,44,0,14,51,0,22,34,47,37,15,63,47,37,15,11,9,0,66,0,14,39,43,0,14,43,0,14,47,0,14,47,0,14,46,0,14,44,0,14,14,40,0,40,59,35,13,9,0,50,0,14,46,0,14,45,0,13,33,0,14,46,0,14,9,61,0,69,18,11,9,0,14,9,71,55,37,15,11,0,22,21,0,33,44,0,111,44,13,18,44,0,261,44,13,11,0,45,24,9,0,14,9,39,26,72,39,17,13,0,24,69,11,9,5,0,39,40,0,85,72,12,55,5,3,0,33,70,46,16,9,5,3,0,24,87,0,28,35,59,75,5,3,0,29,26,3,0,32,101,0,28,46,47,5,0,25,25,26,7,0,106,49,33,11,7,49,59,31,9,5,3,0,20,62,34,16,0,39,41,40,43,15,0,27,42,45,20,38,24,62,14,43,0,30,60,29,53,32,59,9,7,0,64,38,12,51,5,0,46,3,0,38,23,46,25,68,44,53,5,0,16,3,0,46,16,0,34,24,12,42,23,5,0,44,83,3,0,38,10,0,52,39,0,63,72,41,7,5,0,41,68,47,17,12,9,5,3,0,32,16,21,54,3,0,27,20,39,20,15,3,0,26,16,38,89,28,20,45,17,53,3,0,27,16,38,23,0,58,43,5,0,34,20,0,25,29,33,7,0,39,5,0,48,55,0,52,36,52,18,38,51,0,89,52,7,0,29,33,7,0,39,5,0,50,55,65,43,0,18,26,37,18,11,7,0,78,39,18,11,7,5,0,36,58,36,65,28,13,14,9,9,50,12,60,5,0,27,31,5,0,37,3,0,62,16,114,3,0,26,16,45,48,69,48,3,0,30,80,40,31,9,5,0,16,0,34,27,12,45,23,5,0,52,3,0,30,16,53,34,19,40,34,12,0,43,45,38,52,43,28,20,0,21,44,16,27,57,44,15,11,0,28,26,9,0,24,14,18,57,16,28,9,7,5,0,22,48,16,28,52,3,0,29,16,0,39,44,36,9,5,0,43,21,51,3,0,27,42,47,54,27,11,27,8,28,36,7,17,3,0,27,16,35,24,0,25,38,18,0,27,24,52,24,14,28,38,7,0,97,24,60,5,0,61,0,43,43,16,9,5,0,49,3,0,66,16,62,21,56,3,0,29,16,45,38,92,28,51,3,0,28,28,37,31,9,5,0,16,47,91,50,3,0,29,16,51,3,0,57,44,37,47,19,30,11,7,5,0,90,0,61,41,0,48,48,26,14,14,7,5,0,28,22,17,38,7,119,28,22,53,3,0,40,27,21,56,3,0,86,34,0,26,38,5,0,19,0,32,36,5,0,74,0,32,24,5,0,51,3,0,26,131,3,0,73,32,44,117,3,0,81,40,39,35,0,30,55,0,46,42,55,37,0,82,42,33,11,0,19,9,0,34,40,7,0,22,5,0,26,57,5,0,21,28,5,0,16,3,0,24,21,26,63,26,65,20,90,22,28,49,3,0,35,35,16,0,18,53,12,36,5,0,190,49,17,59,9,5,0,44,37,17,19,30,9,9,5,0,21,83,20,90,22,28,80,3,0,64,48,21,0,14,36,34,116,0,59,102,60,41,33,13,85,60,41,25,13,9,7,0,69,31,5,0,16,3,0,26,38,29,11,34,8,55,7,3,0,67,51,66,71,37,0,47,60,31,9,5,0,34,0,22,48,5,0,72,46,37,65,0,23,39,5,0,42,51,104,7,26,22,0,45,45,5,0,66,16,3,0,30,91,3,0,45,20,63,71,32,3,0,37,25,186,3,0,45,16,30,40,29,53,31,66,87,3,0,21,61,3,0,19,26,3,0,34,123,3,0,44,28,19,28,19,6,24,39,24,19,51,30,27,38,57,42,15,11,0,19,9,0,29,49,19,9,0,40,0,32,41,65,26,9,0,56,0,97,51,22,13,9,7,7,34,16,0,28,50,31,9,5,0,27,51,3,0,51,43,0,31,28,29,30,23,28,74,18,40,26,28,21,26,57,18,5,0,48,17,3,0,46,44,0,19,65,15,7,0,24,54,15,7,5,0,74,3,0,68,32,33,30,31,32,32,38,29,49,0,23,29,44,41,0,26,75,15,7,0,54,51,30,11,7,0,79,13,5,0,87,38,51,59,52,0,31,29,0,22,76,15,7,0,70,36,0,26,42,0,68,51,19,13,9,0,79,52,19,13,9,0,36,48,7,0,100,40,22,62,14,54,7,82,50,39,0,34,52,7,0,29,40,41,54,0,22,81,14,56,49,32,13,9,0,87,7,124,50,29,40,47,0,22,76,14,56,52,32,13,9,0,82,7,0,49,85,50,50,40,45,73,41,22,62,14,54,7,12,24,5,3,0,33,11,11,11,19,0,83,42,31,9,5,0,23,36,57,33,11,7,0,42,23,17,5,0,42,3,0,44,27,0,69,40,27,32,34,64,26,22,34,64,0,88,47,18,9,5,3,0,38,98,48,20,9,5,0,55,3,0,45,54,30,113,3,0,57,39,27,0,70,50,17,11,7,5,0,55,30,0,20,115,5,3,0,94,127,3,0,67,106,30,233,54,3,0,48,98,3,0,47,0,35,32,21,57,3,0,28,32,21,50,3,0,36,32,21,58,3,0,26,48,53,32,70,32,26,22,3,0,73,45,39,0,24,61,7,12,39,23,14,51,33,11,7,5,3,0,25,71,3,0,21,67,58,66,82,85,49,0,35,40,39,59,5,0,69,0,129,37,5,0,23,0,42,29,49,12,62,5,0,60,57,61,5,0,23,61,41,63,5,0,35,3,0,23,24,3,0,42,42,45,41,54,79,18,5,0,17,3,0,44,32,49,94,18,56,83,18,5,0,17,3,0,41,24,49,54,72,25,30,0,47,29,7,0,18,5,0,17,3,0,37,46,27,25,0,47,29,7,0,59,18,5,0,17,3,0,21,45,39,114,3,0,34,34,43,0,36,18,0,20,20,7,0,82,5,0,25,47,5,0,25,105,50,33,11,7,0,34,47,5,0,59,57,31,9,5,0,47,21,15,3,0,32,37,3,0,30,11,10,19,0,34,66,21,7,0,70,15,24,29,0,79,55,23,9,7,33,19,5,0,39,60,0,94,18,5,0,36,86,58,5,0,17,3,0,33,33,45,29,59,0,23,37,7,24,24,5,0,21,3,0,34,11,10,19,0,22,64,0,41,75,58,35,13,9,0,20,7,5,0,110,3,0,52,21,22,52,0,50,33,0,47,0,217,62,29,15,11,9,61,50,17,20,24,93,60,0,43,19,19,26,0,46,56,30,39,26,17,20,79,49,13,11,9,36,110,41,56,52,69,68,50,11,9,7,5,0,101,0,42,59,16,9,5,3,0,26,37,50,47,43,36,7,46,41,19,38,9,7,48,40,45,43,51,39,5,3,0,43,51,37,51,18,11,14,44,19,20,11,7,5,0,45,3,0,41,21,21,19,0,26,18,22,14,24,31,7,0,53,39,36,48,93,5,0,17,3,0,73,33,51,26,53,32,50,5,0,52,3,0,27,26,63,58,0,22,61,21,55,11,7,0,20,5,0,38,3,0,21,25,0,27,69,52,76,71,32,5,0,43,57,0,21,35,12,59,0,23,37,7,5,0,21,54,3,0,23,44,32,3,0,34,46,3,0,52,45,70,3,0,42,37,20,27,7,44,3,0,24,21,32,0,8,26,14,7,0,36,39,0,35,62,34,22,11,7,0,29,0,28,52,14,46,7,0,22,0,29,62,33,11,7,0,61,47,23,27,0,17,3,0,32,58,44,18,12,56,18,5,0,21,33,0,8,36,44,0,37,61,22,11,7,0,42,62,23,28,11,7,0,36,22,0,29,62,33,11,7,0,61,47,23,27,0,17,3,0,32,65,44,18,12,56,18,5,0,16,44,16,17,3,0,42,46,87,18,5,0,17,3,0,39,25,41,18,32,82,18,5,0,17,3,0,36,21,19,0,26,18,22,14,27,59,35,13,9,0,24,31,7,0,41,47,53,56,162,44,5,3,0,90,33,47,12,13,16,20,0,29,56,24,36,11,7,0,77,0,29,52,7,5,0,68,3,0,22,64,3,0,1,0,38,31,34,26,27,28,52,43,3,0,21,24,3,0,11,30,34,37,21,23,38,36,16,3,0,1,0,30,30,0,33,74,65,3,0,19,1,0,32,15,0,88,41,0,9,36,47,33,0,37,19,7,0,47,13,40,51,28,14,42,7,0,17,27,11,38,49,27,0,24,5,10,45,3,1,42,43,0,34,31,3,0,32,1,0,57,24,0,59,74,3,0,20,1,0,48,0,36,19,0,43,37,42,3,0,33,1,0,28,0,45,90,35,34,0,13,17,0,38,38,5,0,32,3,0,13,1,0,22,42,28,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/location.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error/credentials.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error/module-errors.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error/to-node-description.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error/standard-errors.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error/strict-mode-errors.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parse-error.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/estree.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/tokenizer/context.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/tokenizer/types.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/identifier.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/scopeflags.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/base.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/comments.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/whitespace.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/tokenizer/state.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/tokenizer/index.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/scope.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/flow/scope.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/class-scope.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/expression-scope.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/util/production-parameter.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/util.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/node.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/flow/index.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/jsx/xhtml.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/jsx/index.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/typescript/scope.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/typescript/index.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/placeholders.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugins/v8intrinsic.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/plugin-utils.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/options.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/lval.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/expression.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/statement.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/parser/index.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/parser/src/index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(...arguments);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: ch => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: ch => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: ch => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: ch =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling =\n      radix === 16\n        ? isAllowedNumericSeparatorSibling.hex\n        : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n        ? isAllowedNumericSeparatorSibling.oct\n        : isAllowedNumericSeparatorSibling.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !isAllowedSibling(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .slice(this.state.pos - 1, this.state.pos + 2)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{||}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{||}>,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{||}>,\n    { at: node }: { at: Node },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(...arguments);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n  tokenIsBinaryOperator,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction tsTokenCanStartExpression(token: TokenType) {\n  // tsc considers binary operators as \"can start expression\" tokens:\n  // https://github.com/microsoft/TypeScript/blob/eca1b4/src/compiler/parser.ts#L4260-L4266\n  return tokenCanStartExpression(token) || tokenIsBinaryOperator(token);\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifierOnTypeParameter: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier cannot appear on a type parameter.`,\n  ),\n  InvalidModifierOnTypeParameterPositions: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(modifier: string): boolean %checks {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: N.TsTypeParameter,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: ?(node: N.TsTypeParameter) => void,\n    ): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: ?(node: N.TsTypeParameter) => void) {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node: N.TsExpressionWithTypeArguments = this.startNode();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) throw this.unexpected();\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            throw this.unexpected();\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // $FlowIgnore (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              // $FlowIgnore\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          // TODO: This doesn't exactly match what TS does when it comes to ASI.\n          // For example,\n          //   a<b>\n          //   if (0);\n          // is not valid TS code (https://github.com/microsoft/TypeScript/issues/48654)\n          // However, it should correctly parse anything that is correctly parsed by TS.\n          if (\n            tsTokenCanStartExpression(this.state.type) &&\n            this.state.type !== tt.parenL\n          ) {\n            // Bail out. We have something like a<b>c, which is not an expression with\n            // type arguments but an (a < b) > c comparison.\n            throw this.unexpected();\n          }\n\n          const node: N.TsInstantiationExpression = this.startNodeAt(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      let invalidSingleType: ?N.TsTypeParameter;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        // report error if single type parameter used without trailing comma.\n        if (\n          this.hasPlugin(\"jsx\") &&\n          expr.typeParameters.params.length === 1 &&\n          !expr.typeParameters.extra?.trailingComma\n        ) {\n          const parameter = expr.typeParameters.params[0];\n          if (!parameter.constraint) {\n            // A single type parameter must either have constraints\n            // or a trailing comma, otherwise it's ambiguous with JSX.\n            invalidSingleType = parameter;\n          }\n        }\n\n        return expr;\n      }, state);\n\n      if (process.env.BABEL_8_BREAKING) {\n        if (invalidSingleType) {\n          this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n            at: createPositionWithColumnOffset(invalidSingleType.loc.end, 1),\n            typeParameterName: invalidSingleType.name.name,\n          });\n        }\n      }\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(...arguments);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line no-unused-vars\n    binding: BindingTypes,\n  ) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.NewExpression): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(node: N.NewExpression): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","_","ImportMetaOutsideModule","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","clone","overrides","message","pos","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","raise","at","arguments","finishCallExpression","optional","callee","source","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsBinaryOperator","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","Token","Tokenizer","isLookahead","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","Number","isNaN","errorRecovery","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","tsTokenCanStartExpression","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsInAllowConditionalTypesContext","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","trailingComma","reportReservedArrowTypeParam","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","isUnparenthesizedInAssign","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","isLast","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","nodes","surrogate","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js":{"lineLengths":[29,197,164,173,84,0,21,28,26,28,26,0,23,7,99,52,7,32,7,99,86,7,32,7,100,102,86,7,37,7,100,102,86,7,37,7,69,7,38,7,104,41,7,34,7,104,41,7,34,7,84,7,29,7,101,42,7,33,99,27,7,50,7,22,48,50,52,38,32,29,41,9,5,12,108,119,10,113,118,10,48,59,10,53,58,10,62,79,68,10,41,134,44,20,27,40,35,52,39,31,25,14,10,41,54,116,10,40,27,82,55,41,55,40,75,43,45,41,43,67,94,45,65,21,68,17,13,23,10,38,57,87,42,46,84,62,23,10,27,118,116,52,58,26,60,27,56,13,63,74,55,103,106,23,13,43,81,71,10,9,39,56,29,9,31,5,46,32,54,36,45,22,9,21,5,42,52,36,9,29,5,46,36,25,53,39,22,9,25,34,5,36,46,43,5,42,101,51,24,24,37,101,105,50,33,5,90,89,24,25,37,87,30,25,100,48,55,47,51,78,5,57,71,22,121,9,25,141,5,0,36,0,66,0,4,43,0],"data":{"version":3,"file":"gen-mapping.umd.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/node_modules/@jridgewell/src/sourcemap-segment.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/generator/node_modules/@jridgewell/src/gen-mapping.ts"],"sourcesContent":["type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n","import { SetArray, put } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type { SourceMapInput } from '@jridgewell/trace-mapping';\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\nconst NO_NAME = -1;\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport let addSegment: {\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source?: null,\n    sourceLine?: null,\n    sourceColumn?: null,\n    name?: null,\n    content?: null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name?: null,\n    content?: string | null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name: string,\n    content?: string | null,\n  ): void;\n};\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport let addMapping: {\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source?: null;\n      original?: null;\n      name?: null;\n      content?: null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name?: null;\n      content?: string | null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name: string;\n      content?: string | null;\n    },\n  ): void;\n};\n\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nexport let maybeAddSegment: typeof addSegment;\n\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nexport let maybeAddMapping: typeof addMapping;\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport let setSourceContent: (map: GenMapping, source: string, content: string | null) => void;\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let toDecodedMap: (map: GenMapping) => DecodedSourceMap;\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let toEncodedMap: (map: GenMapping) => EncodedSourceMap;\n\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nexport let fromMap: (input: SourceMapInput) => GenMapping;\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport let allMappings: (map: GenMapping) => Mapping[];\n\n// This split declaration is only so that terser can elminiate the static initialization block.\nlet addSegmentInternal: <S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: S,\n  sourceLine: S extends string ? number : null | undefined,\n  sourceColumn: S extends string ? number : null | undefined,\n  name: S extends string ? string | null | undefined : null | undefined,\n  content: S extends string ? string | null | undefined : null | undefined,\n) => void;\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private _names = new SetArray();\n  private _sources = new SetArray();\n  private _sourcesContent: (string | null)[] = [];\n  private _mappings: SourceMapSegment[][] = [];\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n  }\n\n  static {\n    addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n      return addSegmentInternal(\n        false,\n        map,\n        genLine,\n        genColumn,\n        source,\n        sourceLine,\n        sourceColumn,\n        name,\n        content,\n      );\n    };\n\n    maybeAddSegment = (\n      map,\n      genLine,\n      genColumn,\n      source,\n      sourceLine,\n      sourceColumn,\n      name,\n      content,\n    ) => {\n      return addSegmentInternal(\n        true,\n        map,\n        genLine,\n        genColumn,\n        source,\n        sourceLine,\n        sourceColumn,\n        name,\n        content,\n      );\n    };\n\n    addMapping = (map, mapping) => {\n      return addMappingInternal(false, map, mapping as Parameters<typeof addMappingInternal>[2]);\n    };\n\n    maybeAddMapping = (map, mapping) => {\n      return addMappingInternal(true, map, mapping as Parameters<typeof addMappingInternal>[2]);\n    };\n\n    setSourceContent = (map, source, content) => {\n      const { _sources: sources, _sourcesContent: sourcesContent } = map;\n      sourcesContent[put(sources, source)] = content;\n    };\n\n    toDecodedMap = (map) => {\n      const {\n        file,\n        sourceRoot,\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n      removeEmptyFinalLines(mappings);\n\n      return {\n        version: 3,\n        file: file || undefined,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings,\n      };\n    };\n\n    toEncodedMap = (map) => {\n      const decoded = toDecodedMap(map);\n      return {\n        ...decoded,\n        mappings: encode(decoded.mappings as SourceMapSegment[][]),\n      };\n    };\n\n    allMappings = (map) => {\n      const out: Mapping[] = [];\n      const { _mappings: mappings, _sources: sources, _names: names } = map;\n\n      for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n\n          const generated = { line: i + 1, column: seg[COLUMN] };\n          let source: string | undefined = undefined;\n          let original: Pos | undefined = undefined;\n          let name: string | undefined = undefined;\n\n          if (seg.length !== 1) {\n            source = sources.array[seg[SOURCES_INDEX]];\n            original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n\n            if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n          }\n\n          out.push({ generated, source, original, name } as Mapping);\n        }\n      }\n\n      return out;\n    };\n\n    fromMap = (input) => {\n      const map = new TraceMap(input);\n      const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n\n      putAll(gen._names, map.names);\n      putAll(gen._sources, map.sources as string[]);\n      gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n      gen._mappings = decodedMappings(map) as GenMapping['_mappings'];\n\n      return gen;\n    };\n\n    // Internal helpers\n    addSegmentInternal = (\n      skipable,\n      map,\n      genLine,\n      genColumn,\n      source,\n      sourceLine,\n      sourceColumn,\n      name,\n      content,\n    ) => {\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n      const line = getLine(mappings, genLine);\n      const index = getColumnIndex(line, genColumn);\n\n      if (!source) {\n        if (skipable && skipSourceless(line, index)) return;\n        return insert(line, index, [genColumn]);\n      }\n\n      // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n      // isn't nullish.\n      assert<number>(sourceLine);\n      assert<number>(sourceColumn);\n\n      const sourcesIndex = put(sources, source);\n      const namesIndex = name ? put(names, name) : NO_NAME;\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content ?? null;\n\n      if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n        return;\n      }\n\n      return insert(\n        line,\n        index,\n        name\n          ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n          : [genColumn, sourcesIndex, sourceLine, sourceColumn],\n      );\n    };\n  }\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], genColumn: number): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\nfunction removeEmptyFinalLines(mappings: SourceMapSegment[][]) {\n  const { length } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\n\nfunction putAll(strarr: SetArray, array: string[]) {\n  for (let i = 0; i < array.length; i++) put(strarr, array[i]);\n}\n\nfunction skipSourceless(line: SourceMapSegment[], index: number): boolean {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\n\nfunction skipSource(\n  line: SourceMapSegment[],\n  index: number,\n  sourcesIndex: number,\n  sourceLine: number,\n  sourceColumn: number,\n  namesIndex: number,\n): boolean {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n\n  const prev = line[index - 1];\n\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return (\n    sourcesIndex === prev[SOURCES_INDEX] &&\n    sourceLine === prev[SOURCE_LINE] &&\n    sourceColumn === prev[SOURCE_COLUMN] &&\n    namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME)\n  );\n}\n\nfunction addMappingInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: S;\n    original: S extends string ? Pos : null | undefined;\n    name: S extends string ? string | null | undefined : null | undefined;\n    content: S extends string ? string | null | undefined : null | undefined;\n  },\n) {\n  const { generated, source, original, name, content } = mapping;\n  if (!source) {\n    return addSegmentInternal(\n      skipable,\n      map,\n      generated.line - 1,\n      generated.column,\n      null,\n      null,\n      null,\n      null,\n      null,\n    );\n  }\n  const s: string = source;\n  assert<Pos>(original);\n  return addSegmentInternal(\n    skipable,\n    map,\n    generated.line - 1,\n    generated.column,\n    s,\n    original.line - 1,\n    original.column,\n    name,\n    content,\n  );\n}\n"],"names":["addSegment","addMapping","maybeAddSegment","maybeAddMapping","setSourceContent","toDecodedMap","toEncodedMap","fromMap","allMappings","SetArray","put","encode","TraceMap","decodedMappings"],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/set-array/dist/set-array.umd.js":{"lineLengths":[29,85,79,110,44,0,7,91,7,25,7,79,51,7,25,7,52,7,25,7,100,47,6,101,101,38,7,20,23,48,28,9,5,12,60,40,82,51,36,29,56,56,10,35,56,35,23,37,38,10,9,0,32,0,66,0,4,41,0],"data":{"version":3,"file":"set-array.umd.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/src/set-array.ts"],"sourcesContent":["/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nexport let get: (strarr: SetArray, key: string) => number | undefined;\n\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nexport let put: (strarr: SetArray, key: string) => number;\n\n/**\n * Pops the last added item out of the SetArray.\n */\nexport let pop: (strarr: SetArray) => void;\n\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nexport class SetArray {\n  private declare _indexes: { [key: string]: number | undefined };\n  declare array: readonly string[];\n\n  constructor() {\n    this._indexes = { __proto__: null } as any;\n    this.array = [];\n  }\n\n  static {\n    get = (strarr, key) => strarr._indexes[key];\n\n    put = (strarr, key) => {\n      // The key may or may not be present. If it is present, it's a number.\n      const index = get(strarr, key);\n      if (index !== undefined) return index;\n\n      const { array, _indexes: indexes } = strarr;\n\n      return (indexes[key] = (array as string[]).push(key) - 1);\n    };\n\n    pop = (strarr) => {\n      const { array, _indexes: indexes } = strarr;\n      if (array.length === 0) return;\n\n      const last = (array as string[]).pop()!;\n      indexes[last] = undefined;\n    };\n  }\n}\n"],"names":["get","put","pop"],"mappings":";;;;;;IAAA;;;AAGWA,yBAA2D;IAEtE;;;;AAIWC,yBAA+C;IAE1D;;;AAGWC,yBAAgC;IAE3C;;;;;;;;UAQa,QAAQ;QAInB;YACE,IAAI,CAAC,QAAQ,GAAG,EAAE,SAAS,EAAE,IAAI,EAAS,CAAC;YAC3C,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;SACjB;KAuBF;IArBC;QACEF,WAAG,GAAG,CAAC,MAAM,EAAE,GAAG,KAAK,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAE5CC,WAAG,GAAG,CAAC,MAAM,EAAE,GAAG;;YAEhB,MAAM,KAAK,GAAGD,WAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC/B,IAAI,KAAK,KAAK,SAAS;gBAAE,OAAO,KAAK,CAAC;YAEtC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;YAE5C,QAAQ,OAAO,CAAC,GAAG,CAAC,GAAI,KAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;SAC3D,CAAC;QAEFE,WAAG,GAAG,CAAC,MAAM;YACX,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;YAC5C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAE/B,MAAM,IAAI,GAAI,KAAkB,CAAC,GAAG,EAAG,CAAC;YACxC,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;SAC3B,CAAC;IACJ,CAAC,GAAA;;;;;;;;;;","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js":{"lineLengths":[29,85,79,116,44,0,36,40,85,63,63,44,38,25,25,5,49,49,43,39,15,29,88,42,18,13,15,29,33,58,59,21,31,18,14,31,40,27,22,12,50,28,30,28,25,48,24,70,37,34,35,30,52,77,75,77,56,79,76,21,26,66,21,17,22,32,17,31,13,24,27,31,29,43,23,5,39,49,50,5,53,22,22,24,12,49,35,45,23,31,39,21,27,41,9,26,19,5,46,24,25,48,5,25,34,5,35,27,5,30,40,36,41,46,47,20,21,50,36,24,40,42,28,17,39,13,34,25,25,51,40,86,36,38,42,54,37,17,26,39,78,41,29,81,79,81,41,29,79,13,9,53,5,57,32,34,24,51,12,41,23,24,36,44,26,19,5,0,28,28,0,66,0,4,47,0],"data":{"version":3,"file":"sourcemap-codec.umd.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/src/sourcemap-codec.ts"],"sourcesContent":[null],"names":[],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js":{"lineLengths":[29,161,137,156,72,0,118,0,77,0,35,72,79,134,40,24,59,5,0,7,67,7,34,18,22,44,40,5,0,21,28,26,28,26,33,35,0,41,67,46,28,106,68,19,40,104,59,9,24,5,55,55,39,25,9,31,5,29,47,56,29,13,9,20,5,40,19,32,41,5,35,37,5,0,22,7,81,100,101,22,6,12,28,24,82,6,30,42,42,10,7,56,29,50,55,28,29,27,13,26,30,13,18,31,13,9,22,23,5,50,67,47,22,9,21,5,50,54,47,22,9,21,5,30,16,24,27,26,10,5,7,100,87,7,65,57,20,39,30,40,83,33,13,39,76,55,13,18,33,13,9,28,34,77,5,0,103,32,45,50,50,36,51,36,37,29,55,52,56,60,103,48,107,105,109,66,137,99,13,9,23,5,42,52,36,9,29,5,104,101,104,99,40,31,35,5,0,43,71,36,48,28,27,34,25,100,24,23,30,18,20,27,21,10,51,6,127,35,51,48,30,32,42,58,70,38,80,17,41,58,17,13,142,9,5,130,32,41,48,45,41,53,66,41,33,21,45,12,60,42,50,41,102,103,106,69,33,23,100,99,49,108,54,55,36,51,36,53,108,33,63,27,39,39,29,17,72,52,56,41,70,104,13,9,5,33,46,31,5,34,49,24,26,5,0,82,102,33,35,7,79,7,37,7,95,7,37,7,97,84,7,34,7,96,101,28,7,41,7,104,93,6,103,87,7,42,7,57,7,33,7,95,7,38,7,103,12,7,41,7,104,41,7,32,7,104,41,7,32,20,34,48,40,44,53,46,27,62,89,35,29,31,41,35,49,74,78,40,47,41,42,13,18,42,62,13,9,5,12,44,19,127,10,44,90,10,55,57,88,85,39,28,109,10,72,19,25,47,27,49,57,88,85,39,56,126,32,56,36,56,51,178,10,81,19,25,47,27,49,53,54,35,62,35,44,165,45,58,33,44,123,32,44,92,10,44,57,51,54,40,55,40,48,51,38,44,46,36,43,57,50,48,21,41,45,24,38,40,31,37,39,29,23,17,13,10,53,69,39,28,48,29,56,63,10,56,49,32,55,43,26,10,39,20,27,31,33,43,37,51,55,14,10,39,20,27,31,33,43,37,51,55,14,10,9,51,46,5,37,32,5,71,71,20,100,9,44,20,54,24,31,5,0,28,56,50,32,0,66,0,4,45,0],"data":null,"url":"\")"},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js":{"lineLengths":[29,95,66,110,37,0,48,41,7,34,44,49,27,40,40,7,80,7,101,102,6,25,49,7,66,35,39,5,41,38,5,36,37,5,31,41,5,38,43,92,5,34,44,30,98,5,54,16,19,17,17,17,17,32,10,5,30,41,58,28,23,9,36,67,28,26,23,9,29,39,33,43,64,24,22,32,19,5,38,100,56,33,24,44,40,5,36,105,30,19,28,105,17,31,33,9,14,86,63,9,75,45,5,7,96,66,7,33,37,43,101,40,24,104,100,25,105,101,93,37,49,36,96,25,40,25,13,86,37,61,30,25,104,74,33,31,44,31,30,17,40,112,101,46,17,25,13,108,49,38,23,9,22,43,36,9,67,24,9,24,5,7,63,7,35,28,22,36,97,34,43,40,60,28,94,40,40,40,13,37,9,27,106,31,46,43,22,27,108,104,63,65,78,9,97,37,28,79,77,5,0,19,0,4,43,0],"data":{"version":3,"file":"resolve-uri.umd.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@jridgewell/src/resolve-uri.ts"],"sourcesContent":["// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?/;\n\n/**\n * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start\n * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).\n *\n * 1. Host, optional.\n * 2. Path, which may inclue \"/\", guaranteed.\n */\nconst fileRegex = /^file:(?:\\/\\/((?![a-z]:)[^/]*)?)?(\\/?.*)/i;\n\ntype Url = {\n  scheme: string;\n  user: string;\n  host: string;\n  port: string;\n  path: string;\n  relativePath: boolean;\n};\n\nfunction isAbsoluteUrl(input: string): boolean {\n  return schemeRegex.test(input);\n}\n\nfunction isSchemeRelativeUrl(input: string): boolean {\n  return input.startsWith('//');\n}\n\nfunction isAbsolutePath(input: string): boolean {\n  return input.startsWith('/');\n}\n\nfunction isFileUrl(input: string): boolean {\n  return input.startsWith('file:');\n}\n\nfunction parseAbsoluteUrl(input: string): Url {\n  const match = urlRegex.exec(input)!;\n  return makeUrl(match[1], match[2] || '', match[3], match[4] || '', match[5] || '/');\n}\n\nfunction parseFileUrl(input: string): Url {\n  const match = fileRegex.exec(input)!;\n  const path = match[2];\n  return makeUrl('file:', '', match[1] || '', '', isAbsolutePath(path) ? path : '/' + path);\n}\n\nfunction makeUrl(scheme: string, user: string, host: string, port: string, path: string): Url {\n  return {\n    scheme,\n    user,\n    host,\n    port,\n    path,\n    relativePath: false,\n  };\n}\n\nfunction parseUrl(input: string): Url {\n  if (isSchemeRelativeUrl(input)) {\n    const url = parseAbsoluteUrl('http:' + input);\n    url.scheme = '';\n    return url;\n  }\n\n  if (isAbsolutePath(input)) {\n    const url = parseAbsoluteUrl('http://foo.com' + input);\n    url.scheme = '';\n    url.host = '';\n    return url;\n  }\n\n  if (isFileUrl(input)) return parseFileUrl(input);\n\n  if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);\n\n  const url = parseAbsoluteUrl('http://foo.com/' + input);\n  url.scheme = '';\n  url.host = '';\n  url.relativePath = true;\n  return url;\n}\n\nfunction stripPathFilename(path: string): string {\n  // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n  // paths. It's not a file, so we can't strip it.\n  if (path.endsWith('/..')) return path;\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n\nfunction mergePaths(url: Url, base: Url) {\n  // If we're not a relative path, then we're an absolute path, and it doesn't matter what base is.\n  if (!url.relativePath) return;\n\n  normalizePath(base);\n\n  // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n  // path).\n  if (url.path === '/') {\n    url.path = base.path;\n  } else {\n    // Resolution happens relative to the base path's directory, not the file.\n    url.path = stripPathFilename(base.path) + url.path;\n  }\n\n  // If the base path is absolute, then our path is now absolute too.\n  url.relativePath = base.relativePath;\n}\n\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url: Url) {\n  const { relativePath } = url;\n  const pieces = url.path.split('/');\n\n  // We need to preserve the first piece always, so that we output a leading slash. The item at\n  // pieces[0] is an empty string.\n  let pointer = 1;\n\n  // Positive is the number of real directories we've output, used for popping a parent directory.\n  // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n  let positive = 0;\n\n  // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n  // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n  // real directory, we won't need to append, unless the other conditions happen again.\n  let addTrailingSlash = false;\n\n  for (let i = 1; i < pieces.length; i++) {\n    const piece = pieces[i];\n\n    // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n    if (!piece) {\n      addTrailingSlash = true;\n      continue;\n    }\n\n    // If we encounter a real directory, then we don't need to append anymore.\n    addTrailingSlash = false;\n\n    // A current directory, which we can always drop.\n    if (piece === '.') continue;\n\n    // A parent directory, we need to see if there are any real directories we can pop. Else, we\n    // have an excess of parents, and we'll need to keep the \"..\".\n    if (piece === '..') {\n      if (positive) {\n        addTrailingSlash = true;\n        positive--;\n        pointer--;\n      } else if (relativePath) {\n        // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n        // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n        pieces[pointer++] = piece;\n      }\n      continue;\n    }\n\n    // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n    // any popped or dropped directories.\n    pieces[pointer++] = piece;\n    positive++;\n  }\n\n  let path = '';\n  for (let i = 1; i < pointer; i++) {\n    path += '/' + pieces[i];\n  }\n  if (!path || (addTrailingSlash && !path.endsWith('/..'))) {\n    path += '/';\n  }\n  url.path = path;\n}\n\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nexport default function resolve(input: string, base: string | undefined): string {\n  if (!input && !base) return '';\n\n  const url = parseUrl(input);\n\n  // If we have a base, and the input isn't already an absolute URL, then we need to merge.\n  if (base && !url.scheme) {\n    const baseUrl = parseUrl(base);\n    url.scheme = baseUrl.scheme;\n    // If there's no host, then we were just a path.\n    if (!url.host) {\n      // The host, user, and port are joined, you can't copy one without the others.\n      url.user = baseUrl.user;\n      url.host = baseUrl.host;\n      url.port = baseUrl.port;\n    }\n    mergePaths(url, baseUrl);\n  }\n\n  normalizePath(url);\n\n  // If the input (and base, if there was one) are both relative, then we need to output a relative.\n  if (url.relativePath) {\n    // The first char is always a \"/\".\n    const path = url.path.slice(1);\n    if (!path) return '.';\n\n    // If base started with a leading \".\", or there is no base and input started with a \".\", then we\n    // need to ensure that the relative path starts with a \".\". We don't know if relative starts\n    // with a \"..\", though, so check before prepending.\n    const keepRelative = (base || input).startsWith('.');\n    return !keepRelative || path.startsWith('.') ? path : './' + path;\n  }\n  // If there's no host (and no scheme/user/port), then we need to output an absolute path.\n  if (!url.scheme && !url.host) return url.path;\n  // We're outputting either an absolute URL, or a protocol relative one.\n  return `${url.scheme}//${url.user}${url.host}${url.port}${url.path}`;\n}\n"],"names":[],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-member-expression-to-functions/lib/index.js":{"lineLengths":[13,0,62,0,33,0,31,34,30,10,41,28,54,49,27,28,24,11,11,7,7,3,19,26,1,0,55,0,38,28,9,9,14,19,0,41,11,15,11,24,0,88,47,5,3,0,42,11,17,24,0,55,47,12,18,5,3,0,35,14,38,17,27,14,5,1,0,7,20,26,23,19,17,17,12,24,13,21,27,29,21,20,19,14,25,27,21,18,18,0,26,17,23,30,3,0,12,30,3,0,12,31,0,38,0,11,11,15,19,0,29,51,5,0,17,3,0,26,31,12,11,7,3,0,1,0,36,9,8,11,0,41,64,3,0,40,38,0,68,13,14,22,73,83,107,5,0,53,3,0,19,1,0,33,16,32,11,17,16,13,13,39,0,18,57,12,48,5,0,22,3,0,15,1,0,16,15,0,33,11,11,13,17,11,15,0,46,43,36,13,14,13,49,59,9,0,47,83,9,0,20,9,0,35,91,15,7,0,70,48,0,45,22,51,18,11,68,7,0,66,26,9,0,113,81,7,0,36,0,16,60,52,60,19,65,52,60,19,9,0,84,7,0,95,63,74,83,72,20,9,0,60,0,56,20,9,77,0,29,30,78,16,70,9,32,50,14,45,7,0,32,0,56,46,0,76,36,16,9,0,53,29,7,0,18,47,0,81,29,22,11,15,16,20,61,0,22,70,9,7,0,36,0,30,40,37,7,0,139,0,37,28,0,28,80,16,179,9,0,87,14,25,0,28,77,16,176,9,0,153,7,0,20,45,188,7,0,13,5,0,36,20,9,27,51,15,7,0,13,17,14,17,30,63,18,15,9,80,0,19,69,46,56,15,14,66,20,18,11,129,46,95,15,7,5,0,43,16,9,27,51,15,7,0,13,17,20,26,0,29,56,14,52,0,56,34,110,16,34,109,9,7,0,13,5,0,37,18,9,75,13,5,0,45,18,9,35,97,15,7,0,83,13,5,0,36,16,39,17,85,16,50,19,127,16,81,54,13,5,0,50,48,12,43,5,3,0,2,60,59,38,6,1,0,46,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-member-expression-to-functions/src/util.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/helper-member-expression-to-functions/src/index.ts"],"sourcesContent":["import type { NodePath } from \"@babel/traverse\";\n\n/**\n * Test if a NodePath will be cast to boolean when evaluated.\n *\n * @example\n * // returns true\n * const nodePathAQDotB = NodePath(\"if (a?.#b) {}\").get(\"test\"); // a?.#b\n * willPathCastToBoolean(nodePathAQDotB)\n * @example\n * // returns false\n * willPathCastToBoolean(NodePath(\"a?.#b\"))\n * @todo Respect transparent expression wrappers\n * @see {@link packages/babel-plugin-proposal-optional-chaining/src/util.js}\n * @param {NodePath} path\n * @returns {boolean}\n */\nexport function willPathCastToBoolean(path: NodePath): boolean {\n  const maybeWrapped = path;\n  const { node, parentPath } = maybeWrapped;\n  if (parentPath.isLogicalExpression()) {\n    const { operator, right } = parentPath.node;\n    if (\n      operator === \"&&\" ||\n      operator === \"||\" ||\n      (operator === \"??\" && node === right)\n    ) {\n      return willPathCastToBoolean(parentPath);\n    }\n  }\n  if (parentPath.isSequenceExpression()) {\n    const { expressions } = parentPath.node;\n    if (expressions[expressions.length - 1] === node) {\n      return willPathCastToBoolean(parentPath);\n    } else {\n      // if it is in the middle of a sequence expression, we don't\n      // care the return value so just cast to boolean for smaller\n      // output\n      return true;\n    }\n  }\n  return (\n    parentPath.isConditional({ test: node }) ||\n    parentPath.isUnaryExpression({ operator: \"!\" }) ||\n    parentPath.isLoop({ test: node })\n  );\n}\n","import type { NodePath, Visitor } from \"@babel/traverse\";\nimport {\n  LOGICAL_OPERATORS,\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  booleanLiteral,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  identifier,\n  isMemberExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isUpdateExpression,\n  logicalExpression,\n  memberExpression,\n  nullLiteral,\n  optionalCallExpression,\n  optionalMemberExpression,\n  sequenceExpression,\n  updateExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { willPathCastToBoolean } from \"./util\";\n\nclass AssignmentMemoiser {\n  private _map: WeakMap<t.Expression, { count: number; value: t.LVal }>;\n  constructor() {\n    this._map = new WeakMap();\n  }\n\n  has(key: t.Expression) {\n    return this._map.has(key);\n  }\n\n  get(key: t.Expression) {\n    if (!this.has(key)) return;\n\n    const record = this._map.get(key);\n    const { value } = record;\n\n    record.count--;\n    if (record.count === 0) {\n      // The `count` access is the outermost function call (hopefully), so it\n      // does the assignment.\n      return assignmentExpression(\"=\", value, key);\n    }\n    return value;\n  }\n\n  set(key: t.Expression, value: t.LVal, count: number) {\n    return this._map.set(key, { count, value });\n  }\n}\n\nfunction toNonOptional(\n  path: NodePath<t.Expression>,\n  base: t.Expression,\n): t.Expression {\n  const { node } = path;\n  if (isOptionalMemberExpression(node)) {\n    return memberExpression(base, node.property, node.computed);\n  }\n\n  if (path.isOptionalCallExpression()) {\n    const callee = path.get(\"callee\");\n    if (path.node.optional && callee.isOptionalMemberExpression()) {\n      const { object } = callee.node;\n      const context = path.scope.maybeGenerateMemoised(object) || object;\n      callee\n        .get(\"object\")\n        .replaceWith(assignmentExpression(\"=\", context as t.LVal, object));\n\n      return callExpression(memberExpression(base, identifier(\"call\")), [\n        context,\n        ...path.node.arguments,\n      ]);\n    }\n\n    return callExpression(base, path.node.arguments);\n  }\n\n  return path.node;\n}\n\n// Determines if the current path is in a detached tree. This can happen when\n// we are iterating on a path, and replace an ancestor with a new node. Babel\n// doesn't always stop traversing the old node tree, and that can cause\n// inconsistencies.\nfunction isInDetachedTree(path: NodePath) {\n  while (path) {\n    if (path.isProgram()) break;\n\n    const { parentPath, container, listKey } = path;\n    const parentNode = parentPath.node;\n    if (listKey) {\n      if (container !== parentNode[listKey]) return true;\n    } else {\n      if (container !== parentNode) return true;\n    }\n\n    path = parentPath;\n  }\n\n  return false;\n}\n\ntype Member = NodePath<t.OptionalMemberExpression | t.MemberExpression>;\n\nconst handle = {\n  memoise() {\n    // noop.\n  },\n\n  handle(this: HandlerState, member: Member, noDocumentAll: boolean) {\n    const { node, parent, parentPath, scope } = member;\n\n    if (member.isOptionalMemberExpression()) {\n      // Transforming optional chaining requires we replace ancestors.\n      if (isInDetachedTree(member)) return;\n\n      // We're looking for the end of _this_ optional chain, which is actually\n      // the \"rightmost\" property access of the chain. This is because\n      // everything up to that property access is \"optional\".\n      //\n      // Let's take the case of `FOO?.BAR.baz?.qux`, with `FOO?.BAR` being our\n      // member. The \"end\" to most users would be `qux` property access.\n      // Everything up to it could be skipped if it `FOO` were nullish. But\n      // actually, we can consider the `baz` access to be the end. So we're\n      // looking for the nearest optional chain that is `optional: true`.\n      const endPath = member.find(({ node, parent }) => {\n        if (isOptionalMemberExpression(parent)) {\n          // We need to check `parent.object` since we could be inside the\n          // computed expression of a `bad?.[FOO?.BAR]`. In this case, the\n          // endPath is the `FOO?.BAR` member itself.\n          return parent.optional || parent.object !== node;\n        }\n        if (isOptionalCallExpression(parent)) {\n          // Checking `parent.callee` since we could be in the arguments, eg\n          // `bad?.(FOO?.BAR)`.\n          // Also skip `FOO?.BAR` in `FOO?.BAR?.()` since we need to transform the optional call to ensure proper this\n          return (\n            // In FOO?.#BAR?.(), endPath points the optional call expression so we skip FOO?.#BAR\n            (node !== member.node && parent.optional) || parent.callee !== node\n          );\n        }\n        return true;\n      }) as NodePath<t.OptionalMemberExpression>;\n\n      // Replace `function (a, x = a.b?.#c) {}` to `function (a, x = (() => a.b?.#c)() ){}`\n      // so the temporary variable can be injected in correct scope\n      // This can be further optimized to avoid unecessary IIFE\n      if (scope.path.isPattern()) {\n        endPath.replaceWith(\n          // The injected member will be queued and eventually transformed when visited\n          callExpression(arrowFunctionExpression([], endPath.node), []),\n        );\n        return;\n      }\n\n      const willEndPathCastToBoolean = willPathCastToBoolean(endPath);\n\n      const rootParentPath = endPath.parentPath;\n      if (\n        rootParentPath.isUpdateExpression({ argument: node }) ||\n        rootParentPath.isAssignmentExpression({ left: node })\n      ) {\n        throw member.buildCodeFrameError(`can't handle assignment`);\n      }\n      const isDeleteOperation = rootParentPath.isUnaryExpression({\n        operator: \"delete\",\n      });\n      if (\n        isDeleteOperation &&\n        endPath.isOptionalMemberExpression() &&\n        endPath.get(\"property\").isPrivateName()\n      ) {\n        // @babel/parser will throw error on `delete obj?.#x`.\n        // This error serves as fallback when `delete obj?.#x` is constructed from babel types\n        throw member.buildCodeFrameError(\n          `can't delete a private class element`,\n        );\n      }\n\n      // Now, we're looking for the start of this optional chain, which is\n      // optional to the left of this member.\n      //\n      // Let's take the case of `foo?.bar?.baz.QUX?.BAM`, with `QUX?.BAM` being\n      // our member. The \"start\" to most users would be `foo` object access.\n      // But actually, we can consider the `bar` access to be the start. So\n      // we're looking for the nearest optional chain that is `optional: true`,\n      // which is guaranteed to be somewhere in the object/callee tree.\n      let startingOptional: NodePath<t.Expression> = member;\n      for (;;) {\n        if (startingOptional.isOptionalMemberExpression()) {\n          if (startingOptional.node.optional) break;\n          startingOptional = startingOptional.get(\"object\");\n          continue;\n        } else if (startingOptional.isOptionalCallExpression()) {\n          if (startingOptional.node.optional) break;\n          startingOptional = startingOptional.get(\"callee\");\n          continue;\n        }\n        // prevent infinite loop: unreachable if the AST is well-formed\n        throw new Error(\n          `Internal error: unexpected ${startingOptional.node.type}`,\n        );\n      }\n\n      const startingProp = startingOptional.isOptionalMemberExpression()\n        ? \"object\"\n        : \"callee\";\n      const startingNode = startingOptional.node[startingProp];\n      const baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode);\n      const baseRef = baseNeedsMemoised ?? startingNode;\n\n      // Compute parentIsOptionalCall before `startingOptional` is replaced\n      // as `node` may refer to `startingOptional.node` before replaced.\n      const parentIsOptionalCall = parentPath.isOptionalCallExpression({\n        callee: node,\n      });\n      // here we use a function to wrap `parentIsOptionalCall` to get type\n      // for parent, do not use it anywhere else\n      // See https://github.com/microsoft/TypeScript/issues/10421\n      const isOptionalCall = (\n        parent: t.Node,\n      ): parent is t.OptionalCallExpression => parentIsOptionalCall;\n      // if parentIsCall is true, it implies that node.extra.parenthesized is always true\n      const parentIsCall = parentPath.isCallExpression({ callee: node });\n      startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));\n      if (isOptionalCall(parent)) {\n        if (parent.optional) {\n          parentPath.replaceWith(this.optionalCall(member, parent.arguments));\n        } else {\n          parentPath.replaceWith(this.call(member, parent.arguments));\n        }\n      } else if (parentIsCall) {\n        // `(a?.#b)()` to `(a == null ? void 0 : a.#b.bind(a))()`\n        member.replaceWith(this.boundGet(member));\n      } else {\n        member.replaceWith(this.get(member));\n      }\n\n      let regular: t.Expression = member.node;\n      for (let current: NodePath = member; current !== endPath; ) {\n        const parentPath = current.parentPath as NodePath<t.Expression>;\n        // skip transforming `Foo.#BAR?.call(FOO)`\n        if (\n          parentPath === endPath &&\n          isOptionalCall(parent) &&\n          parent.optional\n        ) {\n          regular = parentPath.node;\n          break;\n        }\n        regular = toNonOptional(parentPath, regular);\n        current = parentPath;\n      }\n\n      let context: t.Identifier;\n      const endParentPath = endPath.parentPath as NodePath<t.Expression>;\n      if (\n        isMemberExpression(regular) &&\n        endParentPath.isOptionalCallExpression({\n          callee: endPath.node,\n          optional: true,\n        })\n      ) {\n        const { object } = regular;\n        context = member.scope.maybeGenerateMemoised(object);\n        if (context) {\n          regular.object = assignmentExpression(\"=\", context, object);\n        }\n      }\n\n      let replacementPath: NodePath = endPath;\n      if (isDeleteOperation) {\n        replacementPath = endParentPath;\n        regular = endParentPath.node;\n      }\n\n      const baseMemoised = baseNeedsMemoised\n        ? assignmentExpression(\"=\", cloneNode(baseRef), cloneNode(startingNode))\n        : cloneNode(baseRef);\n\n      if (willEndPathCastToBoolean) {\n        let nonNullishCheck;\n        if (noDocumentAll) {\n          nonNullishCheck = binaryExpression(\"!=\", baseMemoised, nullLiteral());\n        } else {\n          nonNullishCheck = logicalExpression(\n            \"&&\",\n            binaryExpression(\"!==\", baseMemoised, nullLiteral()),\n            binaryExpression(\n              \"!==\",\n              cloneNode(baseRef),\n              scope.buildUndefinedNode(),\n            ),\n          );\n        }\n        replacementPath.replaceWith(\n          logicalExpression(\"&&\", nonNullishCheck, regular),\n        );\n      } else {\n        let nullishCheck;\n        if (noDocumentAll) {\n          nullishCheck = binaryExpression(\"==\", baseMemoised, nullLiteral());\n        } else {\n          nullishCheck = logicalExpression(\n            \"||\",\n            binaryExpression(\"===\", baseMemoised, nullLiteral()),\n            binaryExpression(\n              \"===\",\n              cloneNode(baseRef),\n              scope.buildUndefinedNode(),\n            ),\n          );\n        }\n\n        replacementPath.replaceWith(\n          conditionalExpression(\n            nullishCheck,\n            isDeleteOperation\n              ? booleanLiteral(true)\n              : scope.buildUndefinedNode(),\n            regular,\n          ),\n        );\n      }\n\n      // context and isDeleteOperation can not be both truthy\n      if (context) {\n        const endParent = endParentPath.node as t.OptionalCallExpression;\n        endParentPath.replaceWith(\n          optionalCallExpression(\n            optionalMemberExpression(\n              endParent.callee,\n              identifier(\"call\"),\n              false,\n              true,\n            ),\n            [cloneNode(context), ...endParent.arguments],\n            false,\n          ),\n        );\n      }\n\n      return;\n    }\n\n    // MEMBER++   ->   _set(MEMBER, (ref = _get(MEMBER), ref2 = ref++, ref)), ref2\n    // ++MEMBER   ->   _set(MEMBER, (ref = _get(MEMBER), ++ref))\n    if (isUpdateExpression(parent, { argument: node })) {\n      if (this.simpleSet) {\n        member.replaceWith(this.simpleSet(member));\n        return;\n      }\n\n      const { operator, prefix } = parent;\n\n      // Give the state handler a chance to memoise the member, since we'll\n      // reference it twice. The second access (the set) should do the memo\n      // assignment.\n      this.memoise(member, 2);\n\n      const ref = scope.generateUidIdentifierBasedOnNode(node);\n      scope.push({ id: ref });\n\n      const seq: t.Expression[] = [\n        // ref = _get(MEMBER)\n        assignmentExpression(\"=\", cloneNode(ref), this.get(member)),\n      ];\n\n      if (prefix) {\n        seq.push(updateExpression(operator, cloneNode(ref), prefix));\n\n        // (ref = _get(MEMBER), ++ref)\n        const value = sequenceExpression(seq);\n        parentPath.replaceWith(this.set(member, value));\n\n        return;\n      } else {\n        const ref2 = scope.generateUidIdentifierBasedOnNode(node);\n        scope.push({ id: ref2 });\n\n        seq.push(\n          assignmentExpression(\n            \"=\",\n            cloneNode(ref2),\n            updateExpression(operator, cloneNode(ref), prefix),\n          ),\n          cloneNode(ref),\n        );\n\n        // (ref = _get(MEMBER), ref2 = ref++, ref)\n        const value = sequenceExpression(seq);\n        parentPath.replaceWith(\n          sequenceExpression([this.set(member, value), cloneNode(ref2)]),\n        );\n\n        return;\n      }\n    }\n\n    // MEMBER = VALUE   ->   _set(MEMBER, VALUE)\n    // MEMBER += VALUE   ->   _set(MEMBER, _get(MEMBER) + VALUE)\n    // MEMBER ??= VALUE   ->   _get(MEMBER) ?? _set(MEMBER, VALUE)\n    if (parentPath.isAssignmentExpression({ left: node })) {\n      if (this.simpleSet) {\n        member.replaceWith(this.simpleSet(member));\n        return;\n      }\n\n      const { operator, right: value } = parentPath.node;\n\n      if (operator === \"=\") {\n        parentPath.replaceWith(this.set(member, value));\n      } else {\n        const operatorTrunc = operator.slice(0, -1);\n        if (LOGICAL_OPERATORS.includes(operatorTrunc)) {\n          // Give the state handler a chance to memoise the member, since we'll\n          // reference it twice. The first access (the get) should do the memo\n          // assignment.\n          this.memoise(member, 1);\n          parentPath.replaceWith(\n            logicalExpression(\n              operatorTrunc as t.LogicalExpression[\"operator\"],\n              this.get(member),\n              this.set(member, value),\n            ),\n          );\n        } else {\n          // Here, the second access (the set) is evaluated first.\n          this.memoise(member, 2);\n          parentPath.replaceWith(\n            this.set(\n              member,\n              binaryExpression(\n                operatorTrunc as t.BinaryExpression[\"operator\"],\n                this.get(member),\n                value,\n              ),\n            ),\n          );\n        }\n      }\n      return;\n    }\n\n    // MEMBER(ARGS) -> _call(MEMBER, ARGS)\n    if (parentPath.isCallExpression({ callee: node })) {\n      parentPath.replaceWith(this.call(member, parentPath.node.arguments));\n      return;\n    }\n\n    // MEMBER?.(ARGS) -> _optionalCall(MEMBER, ARGS)\n    if (parentPath.isOptionalCallExpression({ callee: node })) {\n      // Replace `function (a, x = a.b.#c?.()) {}` to `function (a, x = (() => a.b.#c?.())() ){}`\n      // so the temporary variable can be injected in correct scope\n      // This can be further optimized to avoid unecessary IIFE\n      if (scope.path.isPattern()) {\n        parentPath.replaceWith(\n          // The injected member will be queued and eventually transformed when visited\n          callExpression(arrowFunctionExpression([], parentPath.node), []),\n        );\n        return;\n      }\n      parentPath.replaceWith(\n        this.optionalCall(member, parentPath.node.arguments),\n      );\n      return;\n    }\n\n    // for (MEMBER of ARR)\n    // for (MEMBER in ARR)\n    // { KEY: MEMBER } = OBJ -> { KEY: _destructureSet(MEMBER) } = OBJ\n    // { KEY: MEMBER = _VALUE } = OBJ -> { KEY: _destructureSet(MEMBER) = _VALUE } = OBJ\n    // {...MEMBER} -> {..._destructureSet(MEMBER)}\n    //\n    // [MEMBER] = ARR -> [_destructureSet(MEMBER)] = ARR\n    // [MEMBER = _VALUE] = ARR -> [_destructureSet(MEMBER) = _VALUE] = ARR\n    // [...MEMBER] -> [..._destructureSet(MEMBER)]\n    if (\n      // for (MEMBER of ARR)\n      // for (MEMBER in ARR)\n      parentPath.isForXStatement({ left: node }) ||\n      // { KEY: MEMBER } = OBJ\n      (parentPath.isObjectProperty({ value: node }) &&\n        parentPath.parentPath.isObjectPattern()) ||\n      // { KEY: MEMBER = _VALUE } = OBJ\n      (parentPath.isAssignmentPattern({ left: node }) &&\n        parentPath.parentPath.isObjectProperty({ value: parent }) &&\n        parentPath.parentPath.parentPath.isObjectPattern()) ||\n      // [MEMBER] = ARR\n      parentPath.isArrayPattern() ||\n      // [MEMBER = _VALUE] = ARR\n      (parentPath.isAssignmentPattern({ left: node }) &&\n        parentPath.parentPath.isArrayPattern()) ||\n      // {...MEMBER}\n      // [...MEMBER]\n      parentPath.isRestElement()\n    ) {\n      member.replaceWith(this.destructureSet(member));\n      return;\n    }\n\n    if (parentPath.isTaggedTemplateExpression()) {\n      // MEMBER   ->   _get(MEMBER).bind(this)\n      member.replaceWith(this.boundGet(member));\n    } else {\n      // MEMBER   ->   _get(MEMBER)\n      member.replaceWith(this.get(member));\n    }\n  },\n};\n\nexport interface Handler<State> {\n  memoise?(\n    this: HandlerState<State> & State,\n    member: Member,\n    count: number,\n  ): void;\n  destructureSet(\n    this: HandlerState<State> & State,\n    member: Member,\n  ): t.Expression;\n  boundGet(this: HandlerState<State> & State, member: Member): t.Expression;\n  simpleSet?(this: HandlerState<State> & State, member: Member): t.Expression;\n  get(this: HandlerState<State> & State, member: Member): t.Expression;\n  set(\n    this: HandlerState<State> & State,\n    member: Member,\n    value: t.Expression,\n  ): t.Expression;\n  call(\n    this: HandlerState<State> & State,\n    member: Member,\n    args: t.CallExpression[\"arguments\"],\n  ): t.Expression;\n  optionalCall(\n    this: HandlerState<State> & State,\n    member: Member,\n    args: t.OptionalCallExpression[\"arguments\"],\n  ): t.Expression;\n}\n\nexport interface HandlerState<State = {}> extends Handler<State> {\n  handle(\n    this: HandlerState<State> & State,\n    member: Member,\n    noDocumentAll?: boolean,\n  ): void;\n  memoiser: AssignmentMemoiser;\n}\n\n// We do not provide a default traversal visitor\n// Instead, caller passes one, and must call `state.handle` on the members\n// it wishes to be transformed.\n// Additionally, the caller must pass in a state object with at least\n// get, set, and call methods.\n// Optionally, a memoise method may be defined on the state, which will be\n// called when the member is a self-referential update.\nexport default function memberExpressionToFunctions<CustomState = {}>(\n  path: NodePath,\n  visitor: Visitor<HandlerState<CustomState>>,\n  state: Handler<CustomState> & CustomState,\n) {\n  path.traverse(visitor, {\n    ...handle,\n    ...state,\n    memoiser: new AssignmentMemoiser(),\n  });\n}\n"],"names":["willPathCastToBoolean","path","maybeWrapped","node","parentPath","isLogicalExpression","operator","right","isSequenceExpression","expressions","length","isConditional","test","isUnaryExpression","isLoop","LOGICAL_OPERATORS","arrowFunctionExpression","assignmentExpression","binaryExpression","booleanLiteral","callExpression","cloneNode","conditionalExpression","identifier","isMemberExpression","isOptionalCallExpression","isOptionalMemberExpression","isUpdateExpression","logicalExpression","memberExpression","nullLiteral","optionalCallExpression","optionalMemberExpression","sequenceExpression","updateExpression","AssignmentMemoiser","constructor","_map","WeakMap","has","key","get","record","value","count","set","toNonOptional","base","property","computed","callee","optional","object","context","scope","maybeGenerateMemoised","replaceWith","arguments","isInDetachedTree","isProgram","container","listKey","parentNode","handle","memoise","member","noDocumentAll","parent","endPath","find","isPattern","willEndPathCastToBoolean","rootParentPath","argument","isAssignmentExpression","left","buildCodeFrameError","isDeleteOperation","isPrivateName","startingOptional","Error","type","startingProp","startingNode","baseNeedsMemoised","baseRef","parentIsOptionalCall","isOptionalCall","parentIsCall","isCallExpression","optionalCall","call","boundGet","regular","current","endParentPath","replacementPath","baseMemoised","nonNullishCheck","buildUndefinedNode","nullishCheck","endParent","simpleSet","prefix","ref","generateUidIdentifierBasedOnNode","push","id","seq","ref2","operatorTrunc","slice","includes","isForXStatement","isObjectProperty","isObjectPattern","isAssignmentPattern","isArrayPattern","isRestElement","destructureSet","isTaggedTemplateExpression","memberExpressionToFunctions","visitor","state","traverse","memoiser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBO,SAASA,qBAAT,CAA+BC,IAA/B,EAAwD;AAC7D,QAAMC,YAAY,GAAGD,IAArB;AACA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAuBF,YAA7B;;AACA,MAAIE,UAAU,CAACC,mBAAX,EAAJ,EAAsC;AACpC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAsBH,UAAU,CAACD,IAAvC;;AACA,QACEG,QAAQ,KAAK,IAAb,IACAA,QAAQ,KAAK,IADb,IAECA,QAAQ,KAAK,IAAb,IAAqBH,IAAI,KAAKI,KAHjC,EAIE;AACA,aAAOP,qBAAqB,CAACI,UAAD,CAA5B;AACD;AACF;;AACD,MAAIA,UAAU,CAACI,oBAAX,EAAJ,EAAuC;AACrC,UAAM;AAAEC,MAAAA;AAAF,QAAkBL,UAAU,CAACD,IAAnC;;AACA,QAAIM,WAAW,CAACA,WAAW,CAACC,MAAZ,GAAqB,CAAtB,CAAX,KAAwCP,IAA5C,EAAkD;AAChD,aAAOH,qBAAqB,CAACI,UAAD,CAA5B;AACD,KAFD,MAEO;AAIL,aAAO,IAAP;AACD;AACF;;AACD,SACEA,UAAU,CAACO,aAAX,CAAyB;AAAEC,IAAAA,IAAI,EAAET;AAAR,GAAzB,KACAC,UAAU,CAACS,iBAAX,CAA6B;AAAEP,IAAAA,QAAQ,EAAE;AAAZ,GAA7B,CADA,IAEAF,UAAU,CAACU,MAAX,CAAkB;AAAEF,IAAAA,IAAI,EAAET;AAAR,GAAlB,CAHF;AAKD;;;AC5CCY,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACAC,EAAAA;;;AAKF,MAAMC,kBAAN,CAAyB;AAEvBC,EAAAA,WAAW,GAAG;AAAA,SADNC,IACM;AACZ,SAAKA,IAAL,GAAY,IAAIC,OAAJ,EAAZ;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAoB;AACrB,WAAO,KAAKH,IAAL,CAAUE,GAAV,CAAcC,GAAd,CAAP;AACD;;AAEDC,EAAAA,GAAG,CAACD,GAAD,EAAoB;AACrB,QAAI,CAAC,KAAKD,GAAL,CAASC,GAAT,CAAL,EAAoB;;AAEpB,UAAME,MAAM,GAAG,KAAKL,IAAL,CAAUI,GAAV,CAAcD,GAAd,CAAf;;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAYD,MAAlB;AAEAA,IAAAA,MAAM,CAACE,KAAP;;AACA,QAAIF,MAAM,CAACE,KAAP,KAAiB,CAArB,EAAwB;AAGtB,aAAO3B,oBAAoB,CAAC,GAAD,EAAM0B,KAAN,EAAaH,GAAb,CAA3B;AACD;;AACD,WAAOG,KAAP;AACD;;AAEDE,EAAAA,GAAG,CAACL,GAAD,EAAoBG,KAApB,EAAmCC,KAAnC,EAAkD;AACnD,WAAO,KAAKP,IAAL,CAAUQ,GAAV,CAAcL,GAAd,EAAmB;AAAEI,MAAAA,KAAF;AAASD,MAAAA;AAAT,KAAnB,CAAP;AACD;;AA3BsB;;AA8BzB,SAASG,aAAT,CACE7C,IADF,EAEE8C,IAFF,EAGgB;AACd,QAAM;AAAE5C,IAAAA;AAAF,MAAWF,IAAjB;;AACA,MAAIyB,0BAA0B,CAACvB,IAAD,CAA9B,EAAsC;AACpC,WAAO0B,gBAAgB,CAACkB,IAAD,EAAO5C,IAAI,CAAC6C,QAAZ,EAAsB7C,IAAI,CAAC8C,QAA3B,CAAvB;AACD;;AAED,MAAIhD,IAAI,CAACwB,wBAAL,EAAJ,EAAqC;AACnC,UAAMyB,MAAM,GAAGjD,IAAI,CAACwC,GAAL,CAAS,QAAT,CAAf;;AACA,QAAIxC,IAAI,CAACE,IAAL,CAAUgD,QAAV,IAAsBD,MAAM,CAACxB,0BAAP,EAA1B,EAA+D;AAC7D,YAAM;AAAE0B,QAAAA;AAAF,UAAaF,MAAM,CAAC/C,IAA1B;AACA,YAAMkD,OAAO,GAAGpD,IAAI,CAACqD,KAAL,CAAWC,qBAAX,CAAiCH,MAAjC,KAA4CA,MAA5D;AACAF,MAAAA,MAAM,CACHT,GADH,CACO,QADP,EAEGe,WAFH,CAEevC,oBAAoB,CAAC,GAAD,EAAMoC,OAAN,EAAyBD,MAAzB,CAFnC;AAIA,aAAOhC,cAAc,CAACS,gBAAgB,CAACkB,IAAD,EAAOxB,UAAU,CAAC,MAAD,CAAjB,CAAjB,EAA6C,CAChE8B,OADgE,EAEhE,GAAGpD,IAAI,CAACE,IAAL,CAAUsD,SAFmD,CAA7C,CAArB;AAID;;AAED,WAAOrC,cAAc,CAAC2B,IAAD,EAAO9C,IAAI,CAACE,IAAL,CAAUsD,SAAjB,CAArB;AACD;;AAED,SAAOxD,IAAI,CAACE,IAAZ;AACD;;AAMD,SAASuD,gBAAT,CAA0BzD,IAA1B,EAA0C;AACxC,SAAOA,IAAP,EAAa;AACX,QAAIA,IAAI,CAAC0D,SAAL,EAAJ,EAAsB;AAEtB,UAAM;AAAEvD,MAAAA,UAAF;AAAcwD,MAAAA,SAAd;AAAyBC,MAAAA;AAAzB,QAAqC5D,IAA3C;AACA,UAAM6D,UAAU,GAAG1D,UAAU,CAACD,IAA9B;;AACA,QAAI0D,OAAJ,EAAa;AACX,UAAID,SAAS,KAAKE,UAAU,CAACD,OAAD,CAA5B,EAAuC,OAAO,IAAP;AACxC,KAFD,MAEO;AACL,UAAID,SAAS,KAAKE,UAAlB,EAA8B,OAAO,IAAP;AAC/B;;AAED7D,IAAAA,IAAI,GAAGG,UAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAID,MAAM2D,MAAM,GAAG;AACbC,EAAAA,OAAO,GAAG,EADG;;AAKbD,EAAAA,MAAM,CAAqBE,MAArB,EAAqCC,aAArC,EAA6D;AACjE,UAAM;AAAE/D,MAAAA,IAAF;AAAQgE,MAAAA,MAAR;AAAgB/D,MAAAA,UAAhB;AAA4BkD,MAAAA;AAA5B,QAAsCW,MAA5C;;AAEA,QAAIA,MAAM,CAACvC,0BAAP,EAAJ,EAAyC;AAEvC,UAAIgC,gBAAgB,CAACO,MAAD,CAApB,EAA8B;AAW9B,YAAMG,OAAO,GAAGH,MAAM,CAACI,IAAP,CAAY,CAAC;AAAElE,QAAAA,IAAF;AAAQgE,QAAAA;AAAR,OAAD,KAAsB;AAChD,YAAIzC,0BAA0B,CAACyC,MAAD,CAA9B,EAAwC;AAItC,iBAAOA,MAAM,CAAChB,QAAP,IAAmBgB,MAAM,CAACf,MAAP,KAAkBjD,IAA5C;AACD;;AACD,YAAIsB,wBAAwB,CAAC0C,MAAD,CAA5B,EAAsC;AAIpC,iBAEGhE,IAAI,KAAK8D,MAAM,CAAC9D,IAAhB,IAAwBgE,MAAM,CAAChB,QAAhC,IAA6CgB,MAAM,CAACjB,MAAP,KAAkB/C,IAFjE;AAID;;AACD,eAAO,IAAP;AACD,OAjBe,CAAhB;;AAsBA,UAAImD,KAAK,CAACrD,IAAN,CAAWqE,SAAX,EAAJ,EAA4B;AAC1BF,QAAAA,OAAO,CAACZ,WAAR,CAEEpC,cAAc,CAACJ,uBAAuB,CAAC,EAAD,EAAKoD,OAAO,CAACjE,IAAb,CAAxB,EAA4C,EAA5C,CAFhB;AAIA;AACD;;AAED,YAAMoE,wBAAwB,GAAGvE,qBAAqB,CAACoE,OAAD,CAAtD;AAEA,YAAMI,cAAc,GAAGJ,OAAO,CAAChE,UAA/B;;AACA,UACEoE,cAAc,CAAC7C,kBAAf,CAAkC;AAAE8C,QAAAA,QAAQ,EAAEtE;AAAZ,OAAlC,KACAqE,cAAc,CAACE,sBAAf,CAAsC;AAAEC,QAAAA,IAAI,EAAExE;AAAR,OAAtC,CAFF,EAGE;AACA,cAAM8D,MAAM,CAACW,mBAAP,CAA4B,yBAA5B,CAAN;AACD;;AACD,YAAMC,iBAAiB,GAAGL,cAAc,CAAC3D,iBAAf,CAAiC;AACzDP,QAAAA,QAAQ,EAAE;AAD+C,OAAjC,CAA1B;;AAGA,UACEuE,iBAAiB,IACjBT,OAAO,CAAC1C,0BAAR,EADA,IAEA0C,OAAO,CAAC3B,GAAR,CAAY,UAAZ,EAAwBqC,aAAxB,EAHF,EAIE;AAGA,cAAMb,MAAM,CAACW,mBAAP,CACH,sCADG,CAAN;AAGD;;AAUD,UAAIG,gBAAwC,GAAGd,MAA/C;;AACA,eAAS;AACP,YAAIc,gBAAgB,CAACrD,0BAAjB,EAAJ,EAAmD;AACjD,cAAIqD,gBAAgB,CAAC5E,IAAjB,CAAsBgD,QAA1B,EAAoC;AACpC4B,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACtC,GAAjB,CAAqB,QAArB,CAAnB;AACA;AACD,SAJD,MAIO,IAAIsC,gBAAgB,CAACtD,wBAAjB,EAAJ,EAAiD;AACtD,cAAIsD,gBAAgB,CAAC5E,IAAjB,CAAsBgD,QAA1B,EAAoC;AACpC4B,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACtC,GAAjB,CAAqB,QAArB,CAAnB;AACA;AACD;;AAED,cAAM,IAAIuC,KAAJ,CACH,8BAA6BD,gBAAgB,CAAC5E,IAAjB,CAAsB8E,IAAK,EADrD,CAAN;AAGD;;AAED,YAAMC,YAAY,GAAGH,gBAAgB,CAACrD,0BAAjB,KACjB,QADiB,GAEjB,QAFJ;AAGA,YAAMyD,YAAY,GAAGJ,gBAAgB,CAAC5E,IAAjB,CAAsB+E,YAAtB,CAArB;AACA,YAAME,iBAAiB,GAAG9B,KAAK,CAACC,qBAAN,CAA4B4B,YAA5B,CAA1B;AACA,YAAME,OAAO,GAAGD,iBAAH,WAAGA,iBAAH,GAAwBD,YAArC;AAIA,YAAMG,oBAAoB,GAAGlF,UAAU,CAACqB,wBAAX,CAAoC;AAC/DyB,QAAAA,MAAM,EAAE/C;AADuD,OAApC,CAA7B;;AAMA,YAAMoF,cAAc,GAClBpB,MADqB,IAEkBmB,oBAFzC;;AAIA,YAAME,YAAY,GAAGpF,UAAU,CAACqF,gBAAX,CAA4B;AAAEvC,QAAAA,MAAM,EAAE/C;AAAV,OAA5B,CAArB;AACA4E,MAAAA,gBAAgB,CAACvB,WAAjB,CAA6BV,aAAa,CAACiC,gBAAD,EAAmBM,OAAnB,CAA1C;;AACA,UAAIE,cAAc,CAAA,CAAlB,EAA4B;AAC1B,YAAIpB,MAAM,CAAChB,QAAX,EAAqB;AACnB/C,UAAAA,UAAU,CAACoD,WAAX,CAAuB,KAAKkC,YAAL,CAAkBzB,MAAlB,EAA0BE,MAAM,CAACV,SAAjC,CAAvB;AACD,SAFD,MAEO;AACLrD,UAAAA,UAAU,CAACoD,WAAX,CAAuB,KAAKmC,IAAL,CAAU1B,MAAV,EAAkBE,MAAM,CAACV,SAAzB,CAAvB;AACD;AACF,OAND,MAMO,IAAI+B,YAAJ,EAAkB;AAEvBvB,QAAAA,MAAM,CAACT,WAAP,CAAmB,KAAKoC,QAAL,CAAc3B,MAAd,CAAnB;AACD,OAHM,MAGA;AACLA,QAAAA,MAAM,CAACT,WAAP,CAAmB,KAAKf,GAAL,CAASwB,MAAT,CAAnB;AACD;;AAED,UAAI4B,OAAqB,GAAG5B,MAAM,CAAC9D,IAAnC;;AACA,WAAK,IAAI2F,OAAiB,GAAG7B,MAA7B,EAAqC6B,OAAO,KAAK1B,OAAjD,GAA4D;AAC1D,cAAMhE,UAAU,GAAG0F,OAAO,CAAC1F,UAA3B;;AAEA,YACEA,UAAU,KAAKgE,OAAf,IACAmB,cAAc,CAAA,CADd,IAEApB,MAAM,CAAChB,QAHT,EAIE;AACA0C,UAAAA,OAAO,GAAGzF,UAAU,CAACD,IAArB;AACA;AACD;;AACD0F,QAAAA,OAAO,GAAG/C,aAAa,CAAC1C,UAAD,EAAayF,OAAb,CAAvB;AACAC,QAAAA,OAAO,GAAG1F,UAAV;AACD;;AAED,UAAIiD,OAAJ;AACA,YAAM0C,aAAa,GAAG3B,OAAO,CAAChE,UAA9B;;AACA,UACEoB,kBAAkB,CAACqE,OAAD,CAAlB,IACAE,aAAa,CAACtE,wBAAd,CAAuC;AACrCyB,QAAAA,MAAM,EAAEkB,OAAO,CAACjE,IADqB;AAErCgD,QAAAA,QAAQ,EAAE;AAF2B,OAAvC,CAFF,EAME;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAayC,OAAnB;AACAxC,QAAAA,OAAO,GAAGY,MAAM,CAACX,KAAP,CAAaC,qBAAb,CAAmCH,MAAnC,CAAV;;AACA,YAAIC,OAAJ,EAAa;AACXwC,UAAAA,OAAO,CAACzC,MAAR,GAAiBnC,oBAAoB,CAAC,GAAD,EAAMoC,OAAN,EAAeD,MAAf,CAArC;AACD;AACF;;AAED,UAAI4C,eAAyB,GAAG5B,OAAhC;;AACA,UAAIS,iBAAJ,EAAuB;AACrBmB,QAAAA,eAAe,GAAGD,aAAlB;AACAF,QAAAA,OAAO,GAAGE,aAAa,CAAC5F,IAAxB;AACD;;AAED,YAAM8F,YAAY,GAAGb,iBAAiB,GAClCnE,oBAAoB,CAAC,GAAD,EAAMI,SAAS,CAACgE,OAAD,CAAf,EAA0BhE,SAAS,CAAC8D,YAAD,CAAnC,CADc,GAElC9D,SAAS,CAACgE,OAAD,CAFb;;AAIA,UAAId,wBAAJ,EAA8B;AAC5B,YAAI2B,eAAJ;;AACA,YAAIhC,aAAJ,EAAmB;AACjBgC,UAAAA,eAAe,GAAGhF,gBAAgB,CAAC,IAAD,EAAO+E,YAAP,EAAqBnE,WAAW,EAAhC,CAAlC;AACD,SAFD,MAEO;AACLoE,UAAAA,eAAe,GAAGtE,iBAAiB,CACjC,IADiC,EAEjCV,gBAAgB,CAAC,KAAD,EAAQ+E,YAAR,EAAsBnE,WAAW,EAAjC,CAFiB,EAGjCZ,gBAAgB,CACd,KADc,EAEdG,SAAS,CAACgE,OAAD,CAFK,EAGd/B,KAAK,CAAC6C,kBAAN,EAHc,CAHiB,CAAnC;AASD;;AACDH,QAAAA,eAAe,CAACxC,WAAhB,CACE5B,iBAAiB,CAAC,IAAD,EAAOsE,eAAP,EAAwBL,OAAxB,CADnB;AAGD,OAlBD,MAkBO;AACL,YAAIO,YAAJ;;AACA,YAAIlC,aAAJ,EAAmB;AACjBkC,UAAAA,YAAY,GAAGlF,gBAAgB,CAAC,IAAD,EAAO+E,YAAP,EAAqBnE,WAAW,EAAhC,CAA/B;AACD,SAFD,MAEO;AACLsE,UAAAA,YAAY,GAAGxE,iBAAiB,CAC9B,IAD8B,EAE9BV,gBAAgB,CAAC,KAAD,EAAQ+E,YAAR,EAAsBnE,WAAW,EAAjC,CAFc,EAG9BZ,gBAAgB,CACd,KADc,EAEdG,SAAS,CAACgE,OAAD,CAFK,EAGd/B,KAAK,CAAC6C,kBAAN,EAHc,CAHc,CAAhC;AASD;;AAEDH,QAAAA,eAAe,CAACxC,WAAhB,CACElC,qBAAqB,CACnB8E,YADmB,EAEnBvB,iBAAiB,GACb1D,cAAc,CAAC,IAAD,CADD,GAEbmC,KAAK,CAAC6C,kBAAN,EAJe,EAKnBN,OALmB,CADvB;AASD;;AAGD,UAAIxC,OAAJ,EAAa;AACX,cAAMgD,SAAS,GAAGN,aAAa,CAAC5F,IAAhC;AACA4F,QAAAA,aAAa,CAACvC,WAAd,CACEzB,sBAAsB,CACpBC,wBAAwB,CACtBqE,SAAS,CAACnD,MADY,EAEtB3B,UAAU,CAAC,MAAD,CAFY,EAGtB,KAHsB,EAItB,IAJsB,CADJ,EAOpB,CAACF,SAAS,CAACgC,OAAD,CAAV,EAAqB,GAAGgD,SAAS,CAAC5C,SAAlC,CAPoB,EAQpB,KARoB,CADxB;AAYD;;AAED;AACD;;AAID,QAAI9B,kBAAkB,CAACwC,MAAD,EAAS;AAAEM,MAAAA,QAAQ,EAAEtE;AAAZ,KAAT,CAAtB,EAAoD;AAClD,UAAI,KAAKmG,SAAT,EAAoB;AAClBrC,QAAAA,MAAM,CAACT,WAAP,CAAmB,KAAK8C,SAAL,CAAerC,MAAf,CAAnB;AACA;AACD;;AAED,YAAM;AAAE3D,QAAAA,QAAF;AAAYiG,QAAAA;AAAZ,UAAuBpC,MAA7B;AAKA,WAAKH,OAAL,CAAaC,MAAb,EAAqB,CAArB;AAEA,YAAMuC,GAAG,GAAGlD,KAAK,CAACmD,gCAAN,CAAuCtG,IAAvC,CAAZ;AACAmD,MAAAA,KAAK,CAACoD,IAAN,CAAW;AAAEC,QAAAA,EAAE,EAAEH;AAAN,OAAX;AAEA,YAAMI,GAAmB,GAAG,CAE1B3F,oBAAoB,CAAC,GAAD,EAAMI,SAAS,CAACmF,GAAD,CAAf,EAAsB,KAAK/D,GAAL,CAASwB,MAAT,CAAtB,CAFM,CAA5B;;AAKA,UAAIsC,MAAJ,EAAY;AACVK,QAAAA,GAAG,CAACF,IAAJ,CAASxE,gBAAgB,CAAC5B,QAAD,EAAWe,SAAS,CAACmF,GAAD,CAApB,EAA2BD,MAA3B,CAAzB;AAGA,cAAM5D,KAAK,GAAGV,kBAAkB,CAAC2E,GAAD,CAAhC;AACAxG,QAAAA,UAAU,CAACoD,WAAX,CAAuB,KAAKX,GAAL,CAASoB,MAAT,EAAiBtB,KAAjB,CAAvB;AAEA;AACD,OARD,MAQO;AACL,cAAMkE,IAAI,GAAGvD,KAAK,CAACmD,gCAAN,CAAuCtG,IAAvC,CAAb;AACAmD,QAAAA,KAAK,CAACoD,IAAN,CAAW;AAAEC,UAAAA,EAAE,EAAEE;AAAN,SAAX;AAEAD,QAAAA,GAAG,CAACF,IAAJ,CACEzF,oBAAoB,CAClB,GADkB,EAElBI,SAAS,CAACwF,IAAD,CAFS,EAGlB3E,gBAAgB,CAAC5B,QAAD,EAAWe,SAAS,CAACmF,GAAD,CAApB,EAA2BD,MAA3B,CAHE,CADtB,EAMElF,SAAS,CAACmF,GAAD,CANX;AAUA,cAAM7D,KAAK,GAAGV,kBAAkB,CAAC2E,GAAD,CAAhC;AACAxG,QAAAA,UAAU,CAACoD,WAAX,CACEvB,kBAAkB,CAAC,CAAC,KAAKY,GAAL,CAASoB,MAAT,EAAiBtB,KAAjB,CAAD,EAA0BtB,SAAS,CAACwF,IAAD,CAAnC,CAAD,CADpB;AAIA;AACD;AACF;;AAKD,QAAIzG,UAAU,CAACsE,sBAAX,CAAkC;AAAEC,MAAAA,IAAI,EAAExE;AAAR,KAAlC,CAAJ,EAAuD;AACrD,UAAI,KAAKmG,SAAT,EAAoB;AAClBrC,QAAAA,MAAM,CAACT,WAAP,CAAmB,KAAK8C,SAAL,CAAerC,MAAf,CAAnB;AACA;AACD;;AAED,YAAM;AAAE3D,QAAAA,QAAF;AAAYC,QAAAA,KAAK,EAAEoC;AAAnB,UAA6BvC,UAAU,CAACD,IAA9C;;AAEA,UAAIG,QAAQ,KAAK,GAAjB,EAAsB;AACpBF,QAAAA,UAAU,CAACoD,WAAX,CAAuB,KAAKX,GAAL,CAASoB,MAAT,EAAiBtB,KAAjB,CAAvB;AACD,OAFD,MAEO;AACL,cAAMmE,aAAa,GAAGxG,QAAQ,CAACyG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAtB;;AACA,YAAIhG,iBAAiB,CAACiG,QAAlB,CAA2BF,aAA3B,CAAJ,EAA+C;AAI7C,eAAK9C,OAAL,CAAaC,MAAb,EAAqB,CAArB;AACA7D,UAAAA,UAAU,CAACoD,WAAX,CACE5B,iBAAiB,CACfkF,aADe,EAEf,KAAKrE,GAAL,CAASwB,MAAT,CAFe,EAGf,KAAKpB,GAAL,CAASoB,MAAT,EAAiBtB,KAAjB,CAHe,CADnB;AAOD,SAZD,MAYO;AAEL,eAAKqB,OAAL,CAAaC,MAAb,EAAqB,CAArB;AACA7D,UAAAA,UAAU,CAACoD,WAAX,CACE,KAAKX,GAAL,CACEoB,MADF,EAEE/C,gBAAgB,CACd4F,aADc,EAEd,KAAKrE,GAAL,CAASwB,MAAT,CAFc,EAGdtB,KAHc,CAFlB,CADF;AAUD;AACF;;AACD;AACD;;AAGD,QAAIvC,UAAU,CAACqF,gBAAX,CAA4B;AAAEvC,MAAAA,MAAM,EAAE/C;AAAV,KAA5B,CAAJ,EAAmD;AACjDC,MAAAA,UAAU,CAACoD,WAAX,CAAuB,KAAKmC,IAAL,CAAU1B,MAAV,EAAkB7D,UAAU,CAACD,IAAX,CAAgBsD,SAAlC,CAAvB;AACA;AACD;;AAGD,QAAIrD,UAAU,CAACqB,wBAAX,CAAoC;AAAEyB,MAAAA,MAAM,EAAE/C;AAAV,KAApC,CAAJ,EAA2D;AAIzD,UAAImD,KAAK,CAACrD,IAAN,CAAWqE,SAAX,EAAJ,EAA4B;AAC1BlE,QAAAA,UAAU,CAACoD,WAAX,CAEEpC,cAAc,CAACJ,uBAAuB,CAAC,EAAD,EAAKZ,UAAU,CAACD,IAAhB,CAAxB,EAA+C,EAA/C,CAFhB;AAIA;AACD;;AACDC,MAAAA,UAAU,CAACoD,WAAX,CACE,KAAKkC,YAAL,CAAkBzB,MAAlB,EAA0B7D,UAAU,CAACD,IAAX,CAAgBsD,SAA1C,CADF;AAGA;AACD;;AAWD,QAGErD,UAAU,CAAC6G,eAAX,CAA2B;AAAEtC,MAAAA,IAAI,EAAExE;AAAR,KAA3B,KAECC,UAAU,CAAC8G,gBAAX,CAA4B;AAAEvE,MAAAA,KAAK,EAAExC;AAAT,KAA5B,KACCC,UAAU,CAACA,UAAX,CAAsB+G,eAAtB,EAHF,IAKC/G,UAAU,CAACgH,mBAAX,CAA+B;AAAEzC,MAAAA,IAAI,EAAExE;AAAR,KAA/B,KACCC,UAAU,CAACA,UAAX,CAAsB8G,gBAAtB,CAAuC;AAAEvE,MAAAA,KAAK,EAAEwB;AAAT,KAAvC,CADD,IAEC/D,UAAU,CAACA,UAAX,CAAsBA,UAAtB,CAAiC+G,eAAjC,EAPF,IASA/G,UAAU,CAACiH,cAAX,EATA,IAWCjH,UAAU,CAACgH,mBAAX,CAA+B;AAAEzC,MAAAA,IAAI,EAAExE;AAAR,KAA/B,KACCC,UAAU,CAACA,UAAX,CAAsBiH,cAAtB,EAZF,IAeAjH,UAAU,CAACkH,aAAX,EAlBF,EAmBE;AACArD,MAAAA,MAAM,CAACT,WAAP,CAAmB,KAAK+D,cAAL,CAAoBtD,MAApB,CAAnB;AACA;AACD;;AAED,QAAI7D,UAAU,CAACoH,0BAAX,EAAJ,EAA6C;AAE3CvD,MAAAA,MAAM,CAACT,WAAP,CAAmB,KAAKoC,QAAL,CAAc3B,MAAd,CAAnB;AACD,KAHD,MAGO;AAELA,MAAAA,MAAM,CAACT,WAAP,CAAmB,KAAKf,GAAL,CAASwB,MAAT,CAAnB;AACD;AACF;;AApZY,CAAf;AAqce,SAASwD,2BAAT,CACbxH,IADa,EAEbyH,OAFa,EAGbC,KAHa,EAIb;AACA1H,EAAAA,IAAI,CAAC2H,QAAL,CAAcF,OAAd,oBACK3D,MADL,EAEK4D,KAFL;AAGEE,IAAAA,QAAQ,EAAE,IAAI1F,kBAAJ;AAHZ;AAKD;;;;","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-object-rest-spread/lib/index.js":{"lineLengths":[13,0,62,0,62,80,34,78,76,0,114,0,97,0,18,27,14,13,12,15,13,11,10,14,17,17,2,21,13,16,12,14,15,14,9,14,10,14,14,17,17,2,20,14,13,12,15,15,11,10,14,17,17,2,22,14,13,12,15,14,13,11,14,16,2,20,14,13,12,15,15,11,10,14,17,17,2,26,14,13,12,15,15,11,10,14,17,17,2,24,14,13,12,15,14,12,11,15,16,2,24,13,16,12,14,15,14,9,14,10,14,14,17,17,2,20,14,13,12,15,14,13,11,14,16,2,24,14,13,12,15,14,11,11,14,17,2,24,13,16,12,14,15,14,9,14,10,14,14,17,17,2,24,13,16,12,14,13,14,9,14,10,14,14,17,17,2,24,14,13,12,15,13,12,10,14,17,16,2,29,13,16,12,14,15,14,9,14,10,14,14,17,17,2,19,14,13,12,15,14,13,11,14,16,2,18,14,13,12,15,13,11,10,14,17,17,2,22,13,16,12,14,13,14,9,14,10,14,14,17,17,2,28,13,16,12,14,13,14,9,14,10,14,14,17,17,2,21,14,13,12,15,14,13,11,14,16,2,20,13,16,12,14,15,14,9,14,10,14,14,17,17,2,20,14,13,12,14,14,12,9,11,14,17,16,2,23,14,13,12,15,14,13,11,14,16,2,18,13,16,12,14,13,14,9,14,10,14,14,17,17,2,28,13,16,12,16,13,14,9,14,10,14,14,17,17,2,22,13,16,12,14,14,14,9,14,11,14,17,17,2,27,14,13,12,15,14,11,11,14,17,2,24,13,16,12,14,15,14,10,14,10,14,14,17,17,2,23,13,13,12,14,15,14,9,14,10,14,14,17,17,2,31,14,13,12,15,14,13,11,14,16,2,23,13,16,12,14,13,14,14,10,14,14,17,17,2,13,14,13,12,15,14,13,11,14,16,2,20,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,19,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,13,14,10,14,17,17,2,19,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,21,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,19,14,13,12,15,13,14,16,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,19,14,13,12,15,15,14,10,14,17,17,2,19,14,13,12,15,13,14,10,14,17,17,2,19,14,13,12,15,15,14,10,14,17,17,2,19,14,13,12,15,15,14,10,14,17,17,2,20,14,13,12,15,15,14,10,14,17,17,2,28,14,13,12,15,13,11,10,16,17,17,2,24,14,13,12,15,13,14,10,14,17,17,2,26,14,13,12,15,13,14,16,10,16,17,17,2,27,14,13,12,15,13,14,10,14,17,17,2,23,14,13,12,15,13,14,16,10,16,17,17,2,32,14,13,12,15,13,14,10,14,17,17,2,33,14,13,12,15,13,14,10,14,17,17,2,33,14,13,12,15,13,14,10,14,17,17,2,28,14,13,12,15,13,14,10,14,17,17,2,26,14,13,12,15,13,14,10,14,17,17,2,23,14,13,12,15,14,11,11,14,17,2,23,13,13,12,14,13,14,9,14,10,14,14,17,17,2,30,14,13,12,15,13,14,10,14,16,2,30,14,13,12,15,13,14,10,14,16,2,32,13,13,12,14,15,14,9,14,10,14,14,17,17,2,34,13,13,12,14,13,14,9,14,10,14,14,17,17,2,24,14,13,12,15,16,11,13,14,17,16,2,23,14,13,12,15,13,11,10,14,17,17,2,44,14,13,12,15,13,11,10,14,17,17,2,45,14,13,12,15,16,11,13,14,16,2,39,14,13,12,15,13,11,10,16,17,17,2,33,14,13,12,15,13,11,10,14,17,17,2,30,14,13,12,15,13,14,10,14,16,2,30,14,13,12,15,13,14,10,14,16,2,35,14,13,12,15,13,11,10,14,17,17,2,26,14,13,12,15,14,11,11,14,16,2,19,14,13,12,15,13,14,16,10,16,17,17,2,26,14,13,12,15,13,11,10,14,17,17,2,26,14,13,12,15,13,11,10,14,17,17,2,30,14,13,12,15,13,11,10,14,17,17,2,21,14,13,12,15,13,11,10,16,17,17,2,21,14,13,12,15,13,11,10,14,17,17,2,33,14,13,12,15,13,14,10,10,14,17,17,2,23,14,13,12,15,16,11,13,14,17,16,2,17,14,13,12,15,14,13,11,14,16,2,25,14,13,12,15,16,12,13,14,16,2,23,14,13,12,15,14,11,11,14,17,2,27,14,13,12,15,14,11,11,14,17,2,33,14,13,12,15,14,11,11,14,17,2,33,14,13,12,15,14,11,11,14,17,2,21,14,13,12,15,14,11,11,14,17,2,45,14,13,12,15,14,11,11,14,17,2,34,14,13,12,15,14,11,11,14,17,2,21,14,13,12,15,14,11,11,14,17,2,31,14,13,12,15,14,11,11,14,17,2,26,14,13,12,15,14,11,11,14,17,2,36,14,13,12,15,14,11,11,14,17,2,21,14,13,12,15,14,11,11,14,17,2,34,14,13,12,15,14,11,11,14,17,2,28,14,13,12,15,14,11,11,14,16,2,22,14,13,12,15,13,11,10,14,17,2,22,14,13,12,15,14,11,11,14,17,16,2,24,14,13,12,15,14,11,11,14,16,2,22,14,13,12,15,14,11,11,14,16,2,23,14,13,12,15,14,11,11,14,17,16,2,26,14,13,12,15,14,11,11,14,16,2,13,14,13,12,15,14,13,11,14,16,2,16,14,13,12,15,14,13,11,14,16,2,31,14,13,12,15,14,12,11,14,16,2,23,13,13,12,15,13,14,14,10,14,14,17,17,2,20,13,13,12,15,13,14,14,10,14,14,17,17,2,22,13,13,12,15,13,14,14,10,14,14,17,17,2,21,13,13,12,15,13,14,14,10,14,14,17,17,2,30,14,13,12,15,13,11,10,16,17,17,2,26,14,13,12,15,13,11,10,16,17,17,2,22,13,13,12,15,13,14,14,10,14,14,17,17,2,26,13,13,12,15,13,14,14,10,14,14,17,17,2,25,13,13,12,15,13,14,14,10,14,14,17,17,2,32,14,13,12,15,13,11,10,16,17,17,2,25,14,13,12,15,13,11,10,16,17,17,2,24,13,13,12,15,13,14,14,10,14,14,17,17,2,25,14,13,12,15,13,14,10,14,17,17,2,21,13,13,12,15,13,14,14,10,14,14,17,17,2,26,14,13,12,15,14,11,11,14,17,16,2,24,14,13,12,15,14,11,11,14,17,16,2,20,14,13,12,15,13,11,10,16,17,17,2,23,14,13,12,15,13,11,10,16,17,17,2,22,13,13,12,15,13,14,14,10,14,14,17,17,2,28,14,13,12,15,13,11,10,16,17,17,2,23,13,13,12,15,13,14,14,10,14,14,17,17,2,20,13,13,12,15,13,14,14,10,14,14,17,17,2,20,13,13,12,15,13,14,14,10,14,14,17,17,2,21,13,16,12,16,13,14,9,14,10,14,14,17,17,2,26,14,13,12,15,14,12,11,14,17,16,2,27,14,13,12,15,14,12,11,14,17,16,2,28,14,13,12,15,14,13,11,14,16,2,25,13,13,12,15,15,14,10,14,10,14,14,17,17,2,26,14,13,12,15,14,13,11,14,16,2,27,14,13,12,15,14,13,11,14,16,2,35,14,13,12,15,14,13,11,14,16,2,27,14,13,12,15,14,13,11,14,16,2,28,14,13,12,15,14,13,11,14,16,2,27,14,13,12,15,14,13,11,14,16,2,28,14,13,12,15,14,13,11,14,16,2,29,14,13,12,15,14,13,11,14,16,2,29,14,13,12,15,14,13,11,14,16,2,18,14,13,12,15,13,13,10,14,16,2,18,14,13,12,15,13,13,10,14,16,1,2,0,33,0,7,39,17,18,45,16,14,15,50,29,78,114,37,11,16,13,96,42,0,46,70,14,64,7,5,43,56,35,49,60,10,17,3,1,0,7,22,18,15,1,42,81,55,75,1,54,76,0,23,32,99,31,5,9,39,17,11,0,35,62,3,0,124,124,108,124,0,35,147,3,0,33,33,44,30,25,7,28,3,0,46,33,44,53,32,27,7,7,28,3,0,45,19,24,15,17,13,17,0,125,22,9,8,0,26,7,3,0,28,41,45,20,7,5,0,17,3,0,40,34,20,26,35,0,31,64,59,58,50,34,50,68,14,50,27,7,5,0,12,11,17,24,6,3,0,57,49,0,40,38,0,52,60,96,59,53,7,5,0,45,3,0,43,59,50,65,0,111,15,7,0,33,7,3,0,49,41,41,44,56,18,108,11,11,17,24,41,0,28,187,5,0,22,0,22,176,12,55,0,75,66,64,28,13,30,23,11,49,7,5,0,223,3,0,65,42,71,13,5,0,66,49,0,49,63,7,5,0,67,64,113,0,22,31,14,33,64,7,0,55,5,3,0,10,40,65,14,22,42,48,42,0,49,34,0,38,41,0,76,40,13,11,9,0,29,0,66,38,0,108,28,24,11,10,0,14,0,58,34,0,46,80,50,20,30,77,75,29,13,11,9,0,24,51,36,0,47,46,13,11,16,93,0,128,9,8,0,38,48,17,9,0,33,34,51,51,19,11,0,124,103,102,121,19,11,0,43,37,19,35,42,44,53,47,26,13,13,105,43,19,18,21,132,13,84,127,0,28,56,11,0,48,72,70,112,58,0,63,114,11,11,8,0,36,52,57,114,29,30,0,80,112,9,0,43,78,8,0,25,44,44,8,0,40,42,0,69,27,84,142,145,0,61,97,11,0,68,67,72,109,85,42,9,8,0,27,15,15,15,17,42,31,0,53,17,9,0,54,58,99,29,33,0,68,90,11,0,132,16,50,57,108,29,33,145,9,8,0,26,34,41,51,19,11,0,48,62,86,63,22,11,0,40,58,51,97,90,9,8,0,36,42,19,0,34,42,16,15,53,29,59,52,11,9,0,23,23,0,25,44,57,21,0,21,59,19,11,0,28,27,38,13,0,19,11,0,140,9,0,50,49,19,46,18,29,11,9,0,33,30,7,0,5,4,3,0,27,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/babel-compat-data/corejs2-built-ins.js","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-object-rest-spread/src/shouldStoreRHSInTemporaryVariable.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-object-rest-spread/src/index.ts"],"sourcesContent":["module.exports = require(\"./data/corejs2-built-ins.json\");\n","import { types as t } from \"@babel/core\";\n\nconst {\n  isObjectProperty,\n  isArrayPattern,\n  isObjectPattern,\n  isAssignmentPattern,\n  isRestElement,\n  isIdentifier,\n} = t;\n/**\n * This is a helper function to determine if we should create an intermediate variable\n * such that the RHS of an assignment is not duplicated.\n *\n * See https://github.com/babel/babel/pull/13711#issuecomment-914388382 for discussion\n * on further optimizations.\n */\nexport default function shouldStoreRHSInTemporaryVariable(node: t.LVal) {\n  if (isArrayPattern(node)) {\n    const nonNullElements = node.elements.filter(element => element !== null);\n    if (nonNullElements.length > 1) return true;\n    else return shouldStoreRHSInTemporaryVariable(nonNullElements[0]);\n  } else if (isObjectPattern(node)) {\n    const { properties } = node;\n    if (properties.length > 1) return true;\n    else if (properties.length === 0) return false;\n    else {\n      const firstProperty = properties[0];\n      if (isObjectProperty(firstProperty)) {\n        // the value of the property must be an LVal\n        return shouldStoreRHSInTemporaryVariable(firstProperty.value as t.LVal);\n      } else {\n        return shouldStoreRHSInTemporaryVariable(firstProperty);\n      }\n    }\n  } else if (isAssignmentPattern(node)) {\n    return shouldStoreRHSInTemporaryVariable(node.left);\n  } else if (isRestElement(node)) {\n    if (isIdentifier(node.argument)) return true;\n    return shouldStoreRHSInTemporaryVariable(node.argument);\n  } else {\n    // node is Identifier or MemberExpression\n    return false;\n  }\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxObjectRestSpread from \"@babel/plugin-syntax-object-rest-spread\";\nimport { types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\nimport type { NodePath, Scope } from \"@babel/traverse\";\nimport { convertFunctionParams } from \"@babel/plugin-transform-parameters\";\nimport { isRequired } from \"@babel/helper-compilation-targets\";\nimport compatData from \"@babel/compat-data/corejs2-built-ins\";\nimport shouldStoreRHSInTemporaryVariable from \"./shouldStoreRHSInTemporaryVariable\";\n\nconst { isAssignmentPattern, isObjectProperty } = t;\n// @babel/types <=7.3.3 counts FOO as referenced in var { x: FOO }.\n// We need to detect this bug to know if \"unused\" means 0 or 1 references.\nif (!process.env.BABEL_8_BREAKING) {\n  const node = t.identifier(\"a\");\n  const property = t.objectProperty(t.identifier(\"key\"), node);\n  const pattern = t.objectPattern([property]);\n\n  // eslint-disable-next-line no-var\n  var ZERO_REFS = t.isReferenced(node, property, pattern) ? 1 : 0;\n}\n\nexport interface Options {\n  useBuiltIns?: boolean;\n  loose?: boolean;\n}\n\nexport default declare((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const targets = api.targets();\n  const supportsObjectAssign = !isRequired(\"es6.object.assign\", targets, {\n    compatData,\n  });\n\n  const { useBuiltIns = supportsObjectAssign, loose = false } = opts;\n\n  if (typeof loose !== \"boolean\") {\n    throw new Error(\".loose must be a boolean, or undefined\");\n  }\n\n  const ignoreFunctionLength = api.assumption(\"ignoreFunctionLength\") ?? loose;\n  const objectRestNoSymbols = api.assumption(\"objectRestNoSymbols\") ?? loose;\n  const pureGetters = api.assumption(\"pureGetters\") ?? loose;\n  const setSpreadProperties = api.assumption(\"setSpreadProperties\") ?? loose;\n\n  function getExtendsHelper(\n    file: PluginPass,\n  ): t.MemberExpression | t.Identifier {\n    return useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : file.addHelper(\"extends\");\n  }\n\n  function hasRestElement(path) {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      foundRestElement = true;\n      restElement.stop();\n    });\n    return foundRestElement;\n  }\n\n  function hasObjectPatternRestElement(path: NodePath): boolean {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      if (restElement.parentPath.isObjectPattern()) {\n        foundRestElement = true;\n        restElement.stop();\n      }\n    });\n    return foundRestElement;\n  }\n\n  function visitRestElements(\n    path: NodePath,\n    visitor: (path: NodePath<t.RestElement>) => any,\n  ) {\n    path.traverse({\n      Expression(path) {\n        const { parent, key } = path;\n        if (\n          (isAssignmentPattern(parent) && key === \"right\") ||\n          (isObjectProperty(parent) && parent.computed && key === \"key\")\n        ) {\n          path.skip();\n        }\n      },\n      RestElement: visitor,\n    });\n  }\n\n  function hasSpread(node: t.ObjectExpression): boolean {\n    for (const prop of node.properties) {\n      if (t.isSpreadElement(prop)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // returns an array of all keys of an object, and a status flag indicating if all extracted keys\n  // were converted to stringLiterals or not\n  // e.g. extracts {keys: [\"a\", \"b\", \"3\", ++x], allLiteral: false }\n  // from ast of {a: \"foo\", b, 3: \"bar\", [++x]: \"baz\"}\n  function extractNormalizedKeys(node: t.ObjectPattern) {\n    // RestElement has been removed in createObjectRest\n    const props = node.properties as t.ObjectProperty[];\n    const keys: t.Expression[] = [];\n    let allLiteral = true;\n    let hasTemplateLiteral = false;\n\n    for (const prop of props) {\n      if (t.isIdentifier(prop.key) && !prop.computed) {\n        // since a key {a: 3} is equivalent to {\"a\": 3}, use the latter\n        keys.push(t.stringLiteral(prop.key.name));\n      } else if (t.isTemplateLiteral(prop.key)) {\n        keys.push(t.cloneNode(prop.key));\n        hasTemplateLiteral = true;\n      } else if (t.isLiteral(prop.key)) {\n        keys.push(\n          t.stringLiteral(\n            String(\n              //@ts-ignore prop.key can not be a NullLiteral\n              prop.key.value,\n            ),\n          ),\n        );\n      } else {\n        // @ts-expect-error private name has been handled by destructuring-private\n        keys.push(t.cloneNode(prop.key));\n        allLiteral = false;\n      }\n    }\n\n    return { keys, allLiteral, hasTemplateLiteral };\n  }\n\n  // replaces impure computed keys with new identifiers\n  // and returns variable declarators of these new identifiers\n  function replaceImpureComputedKeys(\n    properties: NodePath<t.ObjectProperty>[],\n    scope: Scope,\n  ) {\n    const impureComputedPropertyDeclarators: t.VariableDeclarator[] = [];\n    for (const propPath of properties) {\n      // PrivateName is handled in destructuring-private plugin\n      const key = propPath.get(\"key\") as NodePath<t.Expression>;\n      if (propPath.node.computed && !key.isPure()) {\n        const name = scope.generateUidBasedOnNode(key.node);\n        const declarator = t.variableDeclarator(t.identifier(name), key.node);\n        impureComputedPropertyDeclarators.push(declarator);\n        key.replaceWith(t.identifier(name));\n      }\n    }\n    return impureComputedPropertyDeclarators;\n  }\n\n  function removeUnusedExcludedKeys(path: NodePath<t.ObjectPattern>): void {\n    const bindings = path.getOuterBindingIdentifierPaths();\n\n    Object.keys(bindings).forEach(bindingName => {\n      const bindingParentPath = bindings[bindingName].parentPath;\n      if (\n        path.scope.getBinding(bindingName).references >\n          (process.env.BABEL_8_BREAKING ? 0 : ZERO_REFS) ||\n        !bindingParentPath.isObjectProperty()\n      ) {\n        return;\n      }\n      bindingParentPath.remove();\n    });\n  }\n\n  //expects path to an object pattern\n  function createObjectRest(\n    path: NodePath<t.ObjectPattern>,\n    file: PluginPass,\n    objRef: t.Identifier | t.MemberExpression,\n  ): [t.VariableDeclarator[], t.LVal, t.CallExpression] {\n    const props = path.get(\"properties\");\n    const last = props[props.length - 1];\n    t.assertRestElement(last.node);\n    const restElement = t.cloneNode(last.node);\n    last.remove();\n\n    const impureComputedPropertyDeclarators = replaceImpureComputedKeys(\n      path.get(\"properties\") as NodePath<t.ObjectProperty>[],\n      path.scope,\n    );\n    const { keys, allLiteral, hasTemplateLiteral } = extractNormalizedKeys(\n      path.node,\n    );\n\n    if (keys.length === 0) {\n      return [\n        impureComputedPropertyDeclarators,\n        restElement.argument,\n        t.callExpression(getExtendsHelper(file), [\n          t.objectExpression([]),\n          t.cloneNode(objRef),\n        ]),\n      ];\n    }\n\n    let keyExpression;\n    if (!allLiteral) {\n      // map to toPropertyKey to handle the possible non-string values\n      keyExpression = t.callExpression(\n        t.memberExpression(t.arrayExpression(keys), t.identifier(\"map\")),\n        [file.addHelper(\"toPropertyKey\")],\n      );\n    } else {\n      keyExpression = t.arrayExpression(keys);\n\n      if (!hasTemplateLiteral && !t.isProgram(path.scope.block)) {\n        // Hoist definition of excluded keys, so that it's not created each time.\n        const program = path.findParent(path => path.isProgram());\n        const id = path.scope.generateUidIdentifier(\"excluded\");\n\n        program.scope.push({\n          id,\n          init: keyExpression,\n          kind: \"const\",\n        });\n\n        keyExpression = t.cloneNode(id);\n      }\n    }\n\n    return [\n      impureComputedPropertyDeclarators,\n      restElement.argument,\n      t.callExpression(\n        file.addHelper(\n          `objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`,\n        ),\n        [t.cloneNode(objRef), keyExpression],\n      ),\n    ];\n  }\n\n  function replaceRestElement(\n    parentPath: NodePath<t.Function | t.CatchClause>,\n    paramPath: NodePath,\n    container?: t.VariableDeclaration[],\n  ): void {\n    if (paramPath.isAssignmentPattern()) {\n      replaceRestElement(parentPath, paramPath.get(\"left\"), container);\n      return;\n    }\n\n    if (paramPath.isArrayPattern() && hasRestElement(paramPath)) {\n      const elements = paramPath.get(\"elements\");\n\n      for (let i = 0; i < elements.length; i++) {\n        replaceRestElement(parentPath, elements[i], container);\n      }\n    }\n\n    if (paramPath.isObjectPattern() && hasRestElement(paramPath)) {\n      const uid = parentPath.scope.generateUidIdentifier(\"ref\");\n\n      const declar = t.variableDeclaration(\"let\", [\n        t.variableDeclarator(paramPath.node, uid),\n      ]);\n\n      if (container) {\n        container.push(declar);\n      } else {\n        parentPath.ensureBlock();\n        parentPath.get(\"body\").unshiftContainer(\"body\", declar);\n      }\n      paramPath.replaceWith(t.cloneNode(uid));\n    }\n  }\n\n  return {\n    name: \"proposal-object-rest-spread\",\n    inherits: syntaxObjectRestSpread.default,\n\n    visitor: {\n      // function a({ b, ...c }) {}\n      Function(path) {\n        const params = path.get(\"params\");\n        const paramsWithRestElement = new Set();\n        const idsInRestParams = new Set();\n        for (let i = 0; i < params.length; ++i) {\n          const param = params[i];\n          if (hasRestElement(param)) {\n            paramsWithRestElement.add(i);\n            for (const name of Object.keys(param.getBindingIdentifiers())) {\n              idsInRestParams.add(name);\n            }\n          }\n        }\n\n        // if true, a parameter exists that has an id in its initializer\n        // that is also an id bound in a rest parameter\n        // example: f({...R}, a = R)\n        let idInRest = false;\n\n        const IdentifierHandler = function (path, functionScope) {\n          const name = path.node.name;\n          if (\n            path.scope.getBinding(name) === functionScope.getBinding(name) &&\n            idsInRestParams.has(name)\n          ) {\n            idInRest = true;\n            path.stop();\n          }\n        };\n\n        let i;\n        for (i = 0; i < params.length && !idInRest; ++i) {\n          const param = params[i];\n          if (!paramsWithRestElement.has(i)) {\n            if (param.isReferencedIdentifier() || param.isBindingIdentifier()) {\n              IdentifierHandler(path, path.scope);\n            } else {\n              param.traverse(\n                {\n                  \"Scope|TypeAnnotation|TSTypeAnnotation\": path => path.skip(),\n                  \"ReferencedIdentifier|BindingIdentifier\": IdentifierHandler,\n                },\n                path.scope,\n              );\n            }\n          }\n        }\n\n        if (!idInRest) {\n          for (let i = 0; i < params.length; ++i) {\n            const param = params[i];\n            if (paramsWithRestElement.has(i)) {\n              replaceRestElement(path, param);\n            }\n          }\n        } else {\n          const shouldTransformParam = idx =>\n            idx >= i - 1 || paramsWithRestElement.has(idx);\n          convertFunctionParams(\n            path,\n            ignoreFunctionLength,\n            shouldTransformParam,\n            replaceRestElement,\n          );\n        }\n      },\n\n      // adapted from transform-destructuring/src/index.js#pushObjectRest\n      // const { a, ...b } = c;\n      VariableDeclarator(path, file) {\n        if (!path.get(\"id\").isObjectPattern()) {\n          return;\n        }\n\n        let insertionPath = path;\n        const originalPath = path;\n\n        visitRestElements(path.get(\"id\"), path => {\n          if (!path.parentPath.isObjectPattern()) {\n            // Return early if the parent is not an ObjectPattern, but\n            // (for example) an ArrayPattern or Function, because that\n            // means this RestElement is an not an object property.\n            return;\n          }\n\n          if (\n            // skip single-property case, e.g.\n            // const { ...x } = foo();\n            // since the RHS will not be duplicated\n            shouldStoreRHSInTemporaryVariable(originalPath.node.id) &&\n            !t.isIdentifier(originalPath.node.init)\n          ) {\n            // const { a, ...b } = foo();\n            // to avoid calling foo() twice, as a first step convert it to:\n            // const _foo = foo(),\n            //       { a, ...b } = _foo;\n            const initRef = path.scope.generateUidIdentifierBasedOnNode(\n              originalPath.node.init,\n              \"ref\",\n            );\n            // insert _foo = foo()\n            originalPath.insertBefore(\n              t.variableDeclarator(initRef, originalPath.node.init),\n            );\n            // replace foo() with _foo\n            originalPath.replaceWith(\n              t.variableDeclarator(originalPath.node.id, t.cloneNode(initRef)),\n            );\n\n            return;\n          }\n\n          let ref = originalPath.node.init;\n          const refPropertyPath: NodePath<t.ObjectProperty>[] = [];\n          let kind;\n\n          path.findParent((path: NodePath): boolean => {\n            if (path.isObjectProperty()) {\n              refPropertyPath.unshift(path);\n            } else if (path.isVariableDeclarator()) {\n              kind = (path.parentPath as NodePath<t.VariableDeclaration>).node\n                .kind;\n              return true;\n            }\n          });\n\n          const impureObjRefComputedDeclarators = replaceImpureComputedKeys(\n            refPropertyPath,\n            path.scope,\n          );\n          refPropertyPath.forEach(prop => {\n            const { node } = prop;\n            ref = t.memberExpression(\n              ref,\n              t.cloneNode(node.key),\n              node.computed || t.isLiteral(node.key),\n            );\n          });\n\n          //@ts-expect-error: findParent can not apply assertions on result shape\n          const objectPatternPath: NodePath<t.ObjectPattern> = path.findParent(\n            path => path.isObjectPattern(),\n          );\n\n          const [impureComputedPropertyDeclarators, argument, callExpression] =\n            createObjectRest(\n              objectPatternPath,\n              file,\n              ref as t.MemberExpression,\n            );\n\n          if (pureGetters) {\n            removeUnusedExcludedKeys(objectPatternPath);\n          }\n\n          t.assertIdentifier(argument);\n\n          insertionPath.insertBefore(impureComputedPropertyDeclarators);\n\n          insertionPath.insertBefore(impureObjRefComputedDeclarators);\n\n          insertionPath = insertionPath.insertAfter(\n            t.variableDeclarator(argument, callExpression),\n          )[0] as NodePath<t.VariableDeclarator>;\n\n          path.scope.registerBinding(kind, insertionPath);\n\n          if (objectPatternPath.node.properties.length === 0) {\n            objectPatternPath\n              .findParent(\n                path => path.isObjectProperty() || path.isVariableDeclarator(),\n              )\n              .remove();\n          }\n        });\n      },\n\n      // taken from transform-destructuring/src/index.js#visitor\n      // export var { a, ...b } = c;\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n\n        const hasRest = declaration\n          .get(\"declarations\")\n          .some(path => hasObjectPatternRestElement(path.get(\"id\")));\n        if (!hasRest) return;\n\n        const specifiers = [];\n\n        for (const name of Object.keys(path.getOuterBindingIdentifiers(true))) {\n          specifiers.push(\n            t.exportSpecifier(t.identifier(name), t.identifier(name)),\n          );\n        }\n\n        // Split the declaration and export list into two declarations so that the variable\n        // declaration can be split up later without needing to worry about not being a\n        // top-level statement.\n        path.replaceWith(declaration.node);\n        path.insertAfter(t.exportNamedDeclaration(null, specifiers));\n      },\n\n      // try {} catch ({a, ...b}) {}\n      CatchClause(path) {\n        const paramPath = path.get(\"param\");\n        replaceRestElement(path, paramPath);\n      },\n\n      // ({a, ...b} = c);\n      AssignmentExpression(path, file) {\n        const leftPath = path.get(\"left\");\n        if (leftPath.isObjectPattern() && hasRestElement(leftPath)) {\n          const nodes = [];\n\n          const refName = path.scope.generateUidBasedOnNode(\n            path.node.right,\n            \"ref\",\n          );\n\n          nodes.push(\n            t.variableDeclaration(\"var\", [\n              t.variableDeclarator(t.identifier(refName), path.node.right),\n            ]),\n          );\n\n          const [impureComputedPropertyDeclarators, argument, callExpression] =\n            createObjectRest(leftPath, file, t.identifier(refName));\n\n          if (impureComputedPropertyDeclarators.length > 0) {\n            nodes.push(\n              t.variableDeclaration(\"var\", impureComputedPropertyDeclarators),\n            );\n          }\n\n          const nodeWithoutSpread = t.cloneNode(path.node);\n          nodeWithoutSpread.right = t.identifier(refName);\n          nodes.push(t.expressionStatement(nodeWithoutSpread));\n          nodes.push(\n            t.toStatement(\n              t.assignmentExpression(\"=\", argument, callExpression),\n            ),\n          );\n          nodes.push(t.expressionStatement(t.identifier(refName)));\n\n          path.replaceWithMultiple(nodes);\n        }\n      },\n\n      // taken from transform-destructuring/src/index.js#visitor\n      ForXStatement(path) {\n        const { node, scope } = path;\n        const leftPath = path.get(\"left\");\n        const left = node.left;\n\n        if (!hasObjectPatternRestElement(leftPath)) {\n          return;\n        }\n\n        if (!t.isVariableDeclaration(left)) {\n          // for ({a, ...b} of []) {}\n          const temp = scope.generateUidIdentifier(\"ref\");\n\n          node.left = t.variableDeclaration(\"var\", [\n            t.variableDeclarator(temp),\n          ]);\n\n          path.ensureBlock();\n          const body = node.body as t.BlockStatement;\n\n          if (body.body.length === 0 && path.isCompletionRecord()) {\n            body.body.unshift(\n              t.expressionStatement(scope.buildUndefinedNode()),\n            );\n          }\n\n          body.body.unshift(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", left, t.cloneNode(temp)),\n            ),\n          );\n        } else {\n          // for (var {a, ...b} of []) {}\n          const pattern = left.declarations[0].id;\n\n          const key = scope.generateUidIdentifier(\"ref\");\n          node.left = t.variableDeclaration(left.kind, [\n            t.variableDeclarator(key, null),\n          ]);\n\n          path.ensureBlock();\n          const body = node.body as t.BlockStatement;\n\n          body.body.unshift(\n            t.variableDeclaration(node.left.kind, [\n              t.variableDeclarator(pattern, t.cloneNode(key)),\n            ]),\n          );\n        }\n      },\n\n      // [{a, ...b}] = c;\n      ArrayPattern(path) {\n        const objectPatterns = [];\n\n        visitRestElements(path, path => {\n          if (!path.parentPath.isObjectPattern()) {\n            // Return early if the parent is not an ObjectPattern, but\n            // (for example) an ArrayPattern or Function, because that\n            // means this RestElement is an not an object property.\n            return;\n          }\n\n          const objectPattern = path.parentPath;\n\n          const uid = path.scope.generateUidIdentifier(\"ref\");\n          objectPatterns.push(t.variableDeclarator(objectPattern.node, uid));\n\n          objectPattern.replaceWith(t.cloneNode(uid));\n          path.skip();\n        });\n\n        if (objectPatterns.length > 0) {\n          const statementPath = path.getStatementParent();\n          const statementNode = statementPath.node;\n          const kind =\n            statementNode.type === \"VariableDeclaration\"\n              ? statementNode.kind\n              : \"var\";\n          statementPath.insertAfter(\n            t.variableDeclaration(kind, objectPatterns),\n          );\n        }\n      },\n\n      // var a = { ...b, ...c }\n      ObjectExpression(path, file) {\n        if (!hasSpread(path.node)) return;\n\n        let helper;\n        if (setSpreadProperties) {\n          helper = getExtendsHelper(file);\n        } else {\n          try {\n            helper = file.addHelper(\"objectSpread2\");\n          } catch {\n            // TODO: This is needed to workaround https://github.com/babel/babel/issues/10187\n            // and https://github.com/babel/babel/issues/10179 for older @babel/core versions\n            // where #10187 isn't fixed.\n            this.file.declarations[\"objectSpread2\"] = null;\n\n            // objectSpread2 has been introduced in v7.5.0\n            // We have to maintain backward compatibility.\n            helper = file.addHelper(\"objectSpread\");\n          }\n        }\n\n        let exp = null;\n        let props = [];\n\n        function make() {\n          const hadProps = props.length > 0;\n          const obj = t.objectExpression(props);\n          props = [];\n\n          if (!exp) {\n            exp = t.callExpression(helper, [obj]);\n            return;\n          }\n\n          // When we can assume that getters are pure and don't depend on\n          // the order of evaluation, we can avoid making multiple calls.\n          if (pureGetters) {\n            if (hadProps) {\n              exp.arguments.push(obj);\n            }\n            return;\n          }\n\n          exp = t.callExpression(t.cloneNode(helper), [\n            exp,\n            // If we have static props, we need to insert an empty object\n            // because the odd arguments are copied with [[Get]], not\n            // [[GetOwnProperty]]\n            ...(hadProps ? [t.objectExpression([]), obj] : []),\n          ]);\n        }\n\n        for (const prop of path.node.properties) {\n          if (t.isSpreadElement(prop)) {\n            make();\n            exp.arguments.push(prop.argument);\n          } else {\n            props.push(prop);\n          }\n        }\n\n        if (props.length) make();\n\n        path.replaceWith(exp);\n      },\n    },\n  };\n});\n"],"names":["corejs2BuiltIns","require$$0","isObjectProperty","isArrayPattern","isObjectPattern","isAssignmentPattern","isRestElement","isIdentifier","t","shouldStoreRHSInTemporaryVariable","node","nonNullElements","elements","filter","element","length","properties","firstProperty","value","left","argument","identifier","property","objectProperty","pattern","objectPattern","ZERO_REFS","isReferenced","declare","api","opts","assertVersion","targets","supportsObjectAssign","isRequired","compatData","useBuiltIns","loose","Error","ignoreFunctionLength","assumption","objectRestNoSymbols","pureGetters","setSpreadProperties","getExtendsHelper","file","memberExpression","addHelper","hasRestElement","path","foundRestElement","visitRestElements","restElement","stop","hasObjectPatternRestElement","parentPath","visitor","traverse","Expression","parent","key","computed","skip","RestElement","hasSpread","prop","isSpreadElement","extractNormalizedKeys","props","keys","allLiteral","hasTemplateLiteral","push","stringLiteral","name","isTemplateLiteral","cloneNode","isLiteral","String","replaceImpureComputedKeys","scope","impureComputedPropertyDeclarators","propPath","get","isPure","generateUidBasedOnNode","declarator","variableDeclarator","replaceWith","removeUnusedExcludedKeys","bindings","getOuterBindingIdentifierPaths","Object","forEach","bindingName","bindingParentPath","getBinding","references","remove","createObjectRest","objRef","last","assertRestElement","callExpression","objectExpression","keyExpression","arrayExpression","isProgram","block","program","findParent","id","generateUidIdentifier","init","kind","replaceRestElement","paramPath","container","i","uid","declar","variableDeclaration","ensureBlock","unshiftContainer","inherits","syntaxObjectRestSpread","default","Function","params","paramsWithRestElement","Set","idsInRestParams","param","add","getBindingIdentifiers","idInRest","IdentifierHandler","functionScope","has","isReferencedIdentifier","isBindingIdentifier","shouldTransformParam","idx","convertFunctionParams","VariableDeclarator","insertionPath","originalPath","initRef","generateUidIdentifierBasedOnNode","insertBefore","ref","refPropertyPath","unshift","isVariableDeclarator","impureObjRefComputedDeclarators","objectPatternPath","assertIdentifier","insertAfter","registerBinding","ExportNamedDeclaration","declaration","isVariableDeclaration","hasRest","some","specifiers","getOuterBindingIdentifiers","exportSpecifier","exportNamedDeclaration","CatchClause","AssignmentExpression","leftPath","nodes","refName","right","nodeWithoutSpread","expressionStatement","toStatement","assignmentExpression","replaceWithMultiple","ForXStatement","temp","body","isCompletionRecord","buildUndefinedNode","declarations","ArrayPattern","objectPatterns","statementPath","getStatementParent","statementNode","type","ObjectExpression","helper","exp","make","hadProps","obj","arguments"],"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js":{"lineLengths":[13,0,62,0,62,79,34,108,0,114,0,97,0,38,60,9,9,14,19,0,41,11,15,11,24,0,88,47,5,3,0,42,11,17,24,0,55,47,12,18,5,3,0,35,14,38,17,27,14,5,1,47,26,24,95,21,5,22,1,0,7,5,29,0,47,99,195,1,0,29,26,9,9,11,0,96,11,10,21,85,118,0,24,45,5,0,29,3,1,0,26,14,15,4,9,9,11,60,9,14,19,75,32,52,29,42,23,26,0,61,64,11,3,0,96,11,10,21,0,24,27,5,0,52,50,117,57,48,117,5,3,0,29,0,36,22,7,33,29,3,0,51,30,53,52,44,106,12,14,0,50,18,9,26,92,74,35,12,47,0,16,96,31,14,37,7,5,0,57,59,37,14,15,16,18,58,0,22,79,48,48,16,27,9,0,62,94,7,5,0,43,0,34,19,0,113,18,0,62,54,0,22,85,9,7,0,193,5,0,39,96,96,100,122,12,93,96,70,108,126,5,3,1,0,57,40,0,23,9,17,14,110,108,10,39,65,14,63,25,24,21,11,7,0,5,4,3,0,27,30,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-optional-chaining/src/util.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-optional-chaining/src/transform.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-proposal-optional-chaining/src/index.ts"],"sourcesContent":["import type { NodePath } from \"@babel/traverse\";\nimport { isTransparentExprWrapper } from \"@babel/helper-skip-transparent-expression-wrappers\";\n/**\n * Test if a NodePath will be cast to boolean when evaluated.\n * It respects transparent expression wrappers defined in\n * \"@babel/helper-skip-transparent-expression-wrappers\"\n *\n * @example\n * // returns true\n * const nodePathADotB = NodePath(\"if (a.b) {}\").get(\"test\"); // a.b\n * willPathCastToBoolean(nodePathADotB)\n * @example\n * // returns false\n * willPathCastToBoolean(NodePath(\"a.b\"))\n * @param {NodePath} path\n * @returns {boolean}\n */\nexport function willPathCastToBoolean(path: NodePath): boolean {\n  const maybeWrapped = findOutermostTransparentParent(path);\n  const { node, parentPath } = maybeWrapped;\n  if (parentPath.isLogicalExpression()) {\n    const { operator, right } = parentPath.node;\n    if (\n      operator === \"&&\" ||\n      operator === \"||\" ||\n      (operator === \"??\" && node === right)\n    ) {\n      return willPathCastToBoolean(parentPath);\n    }\n  }\n  if (parentPath.isSequenceExpression()) {\n    const { expressions } = parentPath.node;\n    if (expressions[expressions.length - 1] === node) {\n      return willPathCastToBoolean(parentPath);\n    } else {\n      // if it is in the middle of a sequence expression, we don't\n      // care the return value so just cast to boolean for smaller\n      // output\n      return true;\n    }\n  }\n  return (\n    parentPath.isConditional({ test: node }) ||\n    parentPath.isUnaryExpression({ operator: \"!\" }) ||\n    parentPath.isLoop({ test: node })\n  );\n}\n\n/**\n * Return the outermost transparent expression wrapper of a given path,\n * otherwise returns path itself.\n * @example\n * const nodePathADotB = NodePath(\"(a.b as any)\").get(\"expression\"); // a.b\n * // returns NodePath(\"(a.b as any)\")\n * findOutermostTransparentParent(nodePathADotB);\n * @param {NodePath} path\n * @returns {NodePath}\n */\nexport function findOutermostTransparentParent(path: NodePath): NodePath {\n  let maybeWrapped = path;\n  path.findParent(p => {\n    if (!isTransparentExprWrapper(p.node)) return true;\n    maybeWrapped = p;\n  });\n  return maybeWrapped;\n}\n","import { types as t, template } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\nimport {\n  skipTransparentExprWrapperNodes,\n  skipTransparentExprWrappers,\n} from \"@babel/helper-skip-transparent-expression-wrappers\";\nimport { willPathCastToBoolean, findOutermostTransparentParent } from \"./util\";\n\nconst { ast } = template.expression;\n\nfunction isSimpleMemberExpression(expression) {\n  expression = skipTransparentExprWrapperNodes(expression);\n  return (\n    t.isIdentifier(expression) ||\n    t.isSuper(expression) ||\n    (t.isMemberExpression(expression) &&\n      !expression.computed &&\n      isSimpleMemberExpression(expression.object))\n  );\n}\n\n/**\n * Test if a given optional chain `path` needs to be memoized\n * @param {NodePath} path\n * @returns {boolean}\n */\nfunction needsMemoize(path) {\n  let optionalPath = path;\n  const { scope } = path;\n  while (\n    optionalPath.isOptionalMemberExpression() ||\n    optionalPath.isOptionalCallExpression()\n  ) {\n    const { node } = optionalPath;\n    const childKey = optionalPath.isOptionalMemberExpression()\n      ? \"object\"\n      : \"callee\";\n    const childPath = skipTransparentExprWrappers(optionalPath.get(childKey));\n    if (node.optional) {\n      return !scope.isStatic(childPath.node);\n    }\n\n    optionalPath = childPath;\n  }\n}\n\nexport function transform(\n  path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n  {\n    pureGetters,\n    noDocumentAll,\n  }: { pureGetters: boolean; noDocumentAll: boolean },\n) {\n  const { scope } = path;\n  // maybeWrapped points to the outermost transparent expression wrapper\n  // or the path itself\n  const maybeWrapped = findOutermostTransparentParent(path);\n  const { parentPath } = maybeWrapped;\n  const willReplacementCastToBoolean = willPathCastToBoolean(maybeWrapped);\n  let isDeleteOperation = false;\n  const parentIsCall =\n    parentPath.isCallExpression({ callee: maybeWrapped.node }) &&\n    // note that the first condition must implies that `path.optional` is `true`,\n    // otherwise the parentPath should be an OptionalCallExpression\n    path.isOptionalMemberExpression();\n\n  const optionals = [];\n\n  let optionalPath = path;\n  // Replace `function (a, x = a.b?.c) {}` to `function (a, x = (() => a.b?.c)() ){}`\n  // so the temporary variable can be injected in correct scope\n  if (scope.path.isPattern() && needsMemoize(optionalPath)) {\n    path.replaceWith(template.ast`(() => ${path.node})()` as t.Statement);\n    // The injected optional chain will be queued and eventually transformed when visited\n    return;\n  }\n  while (\n    optionalPath.isOptionalMemberExpression() ||\n    optionalPath.isOptionalCallExpression()\n  ) {\n    const { node } = optionalPath;\n    if (node.optional) {\n      optionals.push(node);\n    }\n\n    if (optionalPath.isOptionalMemberExpression()) {\n      // @ts-expect-error todo(flow->ts) avoid changing more type\n      optionalPath.node.type = \"MemberExpression\";\n      // @ts-expect-error todo(flow->ts)\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      // @ts-expect-error todo(flow->ts) avoid changing more type\n      optionalPath.node.type = \"CallExpression\";\n      // @ts-expect-error todo(flow->ts)\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    }\n  }\n\n  let replacementPath: NodePath<any> = path;\n  if (parentPath.isUnaryExpression({ operator: \"delete\" })) {\n    replacementPath = parentPath;\n    isDeleteOperation = true;\n  }\n  for (let i = optionals.length - 1; i >= 0; i--) {\n    const node = optionals[i];\n\n    const isCall = t.isCallExpression(node);\n    const replaceKey = isCall ? \"callee\" : \"object\";\n\n    const chainWithTypes = node[replaceKey];\n    const chain = skipTransparentExprWrapperNodes(chainWithTypes);\n\n    let ref;\n    let check;\n    if (isCall && t.isIdentifier(chain, { name: \"eval\" })) {\n      check = ref = chain;\n      // `eval?.()` is an indirect eval call transformed to `(0,eval)()`\n      node[replaceKey] = t.sequenceExpression([t.numericLiteral(0), ref]);\n    } else if (pureGetters && isCall && isSimpleMemberExpression(chain)) {\n      // If we assume getters are pure (avoiding a Function#call) and we are at the call,\n      // we can avoid a needless memoize. We only do this if the callee is a simple member\n      // expression, to avoid multiple calls to nested call expressions.\n      check = ref = chainWithTypes;\n    } else {\n      ref = scope.maybeGenerateMemoised(chain);\n      if (ref) {\n        check = t.assignmentExpression(\n          \"=\",\n          t.cloneNode(ref),\n          // Here `chainWithTypes` MUST NOT be cloned because it could be\n          // updated when generating the memoised context of a call\n          // expression\n          chainWithTypes,\n        );\n\n        node[replaceKey] = ref;\n      } else {\n        check = ref = chainWithTypes;\n      }\n    }\n\n    // Ensure call expressions have the proper `this`\n    // `foo.bar()` has context `foo`.\n    if (isCall && t.isMemberExpression(chain)) {\n      if (pureGetters && isSimpleMemberExpression(chain)) {\n        // To avoid a Function#call, we can instead re-grab the property from the context object.\n        // `a.?b.?()` translates roughly to `_a.b != null && _a.b()`\n        node.callee = chainWithTypes;\n      } else {\n        // Otherwise, we need to memoize the context object, and change the call into a Function#call.\n        // `a.?b.?()` translates roughly to `(_b = _a.b) != null && _b.call(_a)`\n        const { object } = chain;\n        let context: t.Expression = scope.maybeGenerateMemoised(object);\n        if (context) {\n          chain.object = t.assignmentExpression(\"=\", context, object);\n        } else if (t.isSuper(object)) {\n          context = t.thisExpression();\n        } else {\n          context = object;\n        }\n\n        node.arguments.unshift(t.cloneNode(context));\n        // @ts-expect-error node.callee can not be an V8IntrinsicIdentifier: V8 intrinsic is disallowed in optional chain\n        node.callee = t.memberExpression(node.callee, t.identifier(\"call\"));\n      }\n    }\n    let replacement = replacementPath.node;\n    // Ensure (a?.b)() has proper `this`\n    // The `parentIsCall` is constant within loop, we should check i === 0\n    // to ensure that it is only applied to the first optional chain element\n    // i.e. `?.b` in `(a?.b.c)()`\n    if (i === 0 && parentIsCall) {\n      // `(a?.b)()` to `(a == null ? undefined : a.b.bind(a))()`\n      const object = skipTransparentExprWrapperNodes(replacement.object);\n      let baseRef;\n      if (!pureGetters || !isSimpleMemberExpression(object)) {\n        // memoize the context object when getters are not always pure\n        // or the object is not a simple member expression\n        // `(a?.b.c)()` to `(a == null ? undefined : (_a$b = a.b).c.bind(_a$b))()`\n        baseRef = scope.maybeGenerateMemoised(object);\n        if (baseRef) {\n          replacement.object = t.assignmentExpression(\"=\", baseRef, object);\n        }\n      }\n      replacement = t.callExpression(\n        t.memberExpression(replacement, t.identifier(\"bind\")),\n        [t.cloneNode(baseRef ?? object)],\n      );\n    }\n\n    if (willReplacementCastToBoolean) {\n      // `if (a?.b) {}` transformed to `if (a != null && a.b) {}`\n      // we don't need to return `void 0` because the returned value will\n      // eveutally cast to boolean.\n      const nonNullishCheck = noDocumentAll\n        ? ast`${t.cloneNode(check)} != null`\n        : ast`\n            ${t.cloneNode(check)} !== null && ${t.cloneNode(ref)} !== void 0`;\n      replacementPath.replaceWith(\n        t.logicalExpression(\"&&\", nonNullishCheck, replacement),\n      );\n      replacementPath = skipTransparentExprWrappers(\n        // @ts-expect-error todo(flow->ts)\n        replacementPath.get(\"right\"),\n      );\n    } else {\n      const nullishCheck = noDocumentAll\n        ? ast`${t.cloneNode(check)} == null`\n        : ast`\n            ${t.cloneNode(check)} === null || ${t.cloneNode(ref)} === void 0`;\n\n      const returnValue = isDeleteOperation ? ast`true` : ast`void 0`;\n      replacementPath.replaceWith(\n        t.conditionalExpression(nullishCheck, returnValue, replacement),\n      );\n      replacementPath = skipTransparentExprWrappers(\n        // @ts-expect-error todo(flow->ts)\n        replacementPath.get(\"alternate\"),\n      );\n    }\n  }\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxOptionalChaining from \"@babel/plugin-syntax-optional-chaining\";\nimport { transform } from \"./transform\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport interface Options {\n  loose?: boolean;\n}\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { loose = false } = options;\n  const noDocumentAll = (api.assumption(\"noDocumentAll\") ?? loose) as boolean;\n  const pureGetters = (api.assumption(\"pureGetters\") ?? loose) as boolean;\n\n  return {\n    name: \"proposal-optional-chaining\",\n    inherits: syntaxOptionalChaining.default,\n\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(\n        path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n      ) {\n        transform(path, { noDocumentAll, pureGetters });\n      },\n    },\n  };\n});\n\nexport { transform };\n"],"names":["willPathCastToBoolean","path","maybeWrapped","findOutermostTransparentParent","node","parentPath","isLogicalExpression","operator","right","isSequenceExpression","expressions","length","isConditional","test","isUnaryExpression","isLoop","findParent","p","isTransparentExprWrapper","ast","template","expression","isSimpleMemberExpression","skipTransparentExprWrapperNodes","t","isIdentifier","isSuper","isMemberExpression","computed","object","needsMemoize","optionalPath","scope","isOptionalMemberExpression","isOptionalCallExpression","childKey","childPath","skipTransparentExprWrappers","get","optional","isStatic","transform","pureGetters","noDocumentAll","willReplacementCastToBoolean","isDeleteOperation","parentIsCall","isCallExpression","callee","optionals","isPattern","replaceWith","push","type","replacementPath","i","isCall","replaceKey","chainWithTypes","chain","ref","check","name","sequenceExpression","numericLiteral","maybeGenerateMemoised","assignmentExpression","cloneNode","context","thisExpression","arguments","unshift","memberExpression","identifier","replacement","baseRef","callExpression","nonNullishCheck","logicalExpression","nullishCheck","returnValue","conditionalExpression","declare","api","options","assertVersion","loose","assumption","inherits","syntaxOptionalChaining","default","visitor"],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-destructuring/lib/index.js":{"lineLengths":[13,0,62,0,62,34,0,65,30,9,10,8,20,69,109,0,39,73,10,45,3,1,0,32,71,1,0,33,73,1,0,26,0,56,26,11,3,0,138,23,25,3,2,0,32,21,29,27,30,24,24,23,34,38,38,30,28,38,34,33,34,28,26,48,56,56,40,36,3,0,22,152,3,0,37,27,52,13,0,13,148,12,19,0,51,51,14,46,7,0,102,5,0,39,16,3,0,38,144,41,18,3,0,19,45,0,41,39,47,38,52,43,12,62,5,3,0,24,99,18,12,71,5,3,0,25,9,9,16,28,29,13,5,0,73,69,197,0,37,20,15,0,57,66,73,14,27,131,7,0,28,33,12,75,5,3,0,64,183,78,3,0,37,61,31,103,0,40,33,12,69,5,3,0,38,56,158,13,5,0,72,71,67,20,5,0,33,24,0,59,43,0,45,16,9,0,29,0,55,72,68,0,31,66,52,15,11,0,88,21,13,9,7,5,0,57,41,0,43,54,14,46,7,5,3,0,39,57,62,0,82,19,5,0,42,30,60,5,0,38,57,58,60,5,0,63,19,19,14,6,0,9,58,17,40,5,0,24,3,0,42,55,39,0,43,84,14,41,7,5,3,0,39,28,129,13,5,0,34,0,56,62,5,0,68,50,0,43,25,12,71,42,72,5,0,55,39,26,18,0,43,41,146,42,14,92,33,7,5,3,0,22,84,63,0,17,88,19,7,5,0,28,22,3,0,1,109,18,24,33,0,49,33,25,0,57,52,51,43,32,43,61,54,43,25,5,3,0,12,0,26,157,118,10,57,0,22,152,75,52,64,25,11,28,21,9,47,5,0,160,3,0,15,1,126,9,9,9,11,29,27,19,0,54,40,34,30,56,35,19,19,22,22,26,18,26,15,7,0,40,45,0,48,61,7,12,105,5,3,0,18,22,0,29,66,51,12,27,0,22,27,7,0,26,66,5,3,0,30,34,10,39,3,0,16,1,127,9,9,10,14,11,19,54,28,17,17,24,20,24,16,13,5,10,0,111,68,104,0,51,46,5,3,0,51,0,12,49,54,72,12,76,5,3,0,34,16,1,0,46,43,42,18,5,3,0,15,1,0,57,83,0,23,9,23,14,154,185,166,10,36,14,36,52,57,69,30,0,76,112,9,0,43,78,27,8,0,27,15,15,15,17,31,0,41,58,99,29,47,27,0,72,86,11,0,128,48,24,17,9,0,60,48,51,55,106,25,60,26,23,23,30,26,30,22,49,11,41,46,22,8,0,19,13,13,10,35,51,55,25,25,60,22,23,23,30,26,30,22,49,11,41,54,22,8,0,41,58,145,8,0,40,15,15,16,17,55,47,57,144,7,0,5,4,3,0,60,27,60,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-destructuring/src/util.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-transform-destructuring/src/index.ts"],"sourcesContent":["import { types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { Scope, NodePath } from \"@babel/traverse\";\nimport type { TraversalAncestors } from \"@babel/types\";\n\nexport function unshiftForXStatementBody(\n  statementPath: NodePath<t.ForXStatement>,\n  newStatements: t.Statement[],\n) {\n  statementPath.ensureBlock();\n  const { scope, node } = statementPath;\n  const bodyScopeBindings = statementPath.get(\"body\").scope.bindings;\n  const hasShadowedBlockScopedBindings = Object.keys(bodyScopeBindings).some(\n    name => scope.hasBinding(name),\n  );\n\n  if (hasShadowedBlockScopedBindings) {\n    // handle shadowed variables referenced in computed keys:\n    // var a = 0;for (const { #x: x, [a++]: y } of z) { const a = 1; }\n    node.body = t.blockStatement([...newStatements, node.body]);\n  } else {\n    // @ts-ignore statementPath.ensureBlock() has been called, node.body is always a BlockStatement\n    node.body.body.unshift(...newStatements);\n  }\n}\n\n/**\n * Test if an ArrayPattern's elements contain any RestElements.\n */\n\nfunction hasArrayRest(pattern: t.ArrayPattern) {\n  return pattern.elements.some(elem => t.isRestElement(elem));\n}\n\n/**\n * Test if an ObjectPattern's properties contain any RestElements.\n */\n\nfunction hasObjectRest(pattern: t.ObjectPattern) {\n  return pattern.properties.some(prop => t.isRestElement(prop));\n}\n\ninterface UnpackableArrayExpression extends t.ArrayExpression {\n  elements: (null | t.Expression)[];\n}\n\nconst STOP_TRAVERSAL = {};\n\ninterface ArrayUnpackVisitorState {\n  deopt: boolean;\n  bindings: Record<string, t.Identifier>;\n}\n\n// NOTE: This visitor is meant to be used via t.traverse\nconst arrayUnpackVisitor = (\n  node: t.Node,\n  ancestors: TraversalAncestors,\n  state: ArrayUnpackVisitorState,\n) => {\n  if (!ancestors.length) {\n    // Top-level node: this is the array literal.\n    return;\n  }\n\n  if (\n    t.isIdentifier(node) &&\n    t.isReferenced(node, ancestors[ancestors.length - 1].node) &&\n    state.bindings[node.name]\n  ) {\n    state.deopt = true;\n    throw STOP_TRAVERSAL;\n  }\n};\n\ntype DestructuringTransformerNode =\n  | t.VariableDeclaration\n  | t.ExpressionStatement\n  | t.ReturnStatement;\n\ninterface DestructuringTransformerOption {\n  blockHoist?: number;\n  operator?: t.AssignmentExpression[\"operator\"];\n  nodes?: DestructuringTransformerNode[];\n  kind?: t.VariableDeclaration[\"kind\"];\n  scope: Scope;\n  arrayLikeIsIterable: boolean;\n  iterableIsArray: boolean;\n  objectRestNoSymbols: boolean;\n  useBuiltIns: boolean;\n  addHelper: File[\"addHelper\"];\n}\nexport class DestructuringTransformer {\n  private blockHoist: number;\n  private operator: t.AssignmentExpression[\"operator\"];\n  arrayRefSet: Set<string>;\n  private nodes: DestructuringTransformerNode[];\n  private scope: Scope;\n  private kind: t.VariableDeclaration[\"kind\"];\n  private iterableIsArray: boolean;\n  private arrayLikeIsIterable: boolean;\n  private objectRestNoSymbols: boolean;\n  private useBuiltIns: boolean;\n  private addHelper: File[\"addHelper\"];\n  constructor(opts: DestructuringTransformerOption) {\n    this.blockHoist = opts.blockHoist;\n    this.operator = opts.operator;\n    this.arrayRefSet = new Set();\n    this.nodes = opts.nodes || [];\n    this.scope = opts.scope;\n    this.kind = opts.kind;\n    this.iterableIsArray = opts.iterableIsArray;\n    this.arrayLikeIsIterable = opts.arrayLikeIsIterable;\n    this.objectRestNoSymbols = opts.objectRestNoSymbols;\n    this.useBuiltIns = opts.useBuiltIns;\n    this.addHelper = opts.addHelper;\n  }\n\n  getExtendsHelper() {\n    return this.useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : this.addHelper(\"extends\");\n  }\n\n  buildVariableAssignment(\n    id: t.AssignmentExpression[\"left\"],\n    init: t.Expression,\n  ) {\n    let op = this.operator;\n    if (t.isMemberExpression(id)) op = \"=\";\n\n    let node: t.ExpressionStatement | t.VariableDeclaration;\n\n    if (op) {\n      node = t.expressionStatement(\n        t.assignmentExpression(\n          op,\n          id,\n          t.cloneNode(init) || this.scope.buildUndefinedNode(),\n        ),\n      );\n    } else {\n      let nodeInit: t.Expression;\n\n      if (this.kind === \"const\" && init === null) {\n        nodeInit = this.scope.buildUndefinedNode();\n      } else {\n        nodeInit = t.cloneNode(init);\n      }\n\n      node = t.variableDeclaration(this.kind, [\n        t.variableDeclarator(id, nodeInit),\n      ]);\n    }\n\n    //@ts-expect-error(todo): document block hoist property\n    node._blockHoist = this.blockHoist;\n\n    return node;\n  }\n\n  buildVariableDeclaration(id: t.Identifier, init: t.Expression) {\n    const declar = t.variableDeclaration(\"var\", [\n      t.variableDeclarator(t.cloneNode(id), t.cloneNode(init)),\n    ]);\n    // @ts-expect-error todo(flow->ts): avoid mutations\n    declar._blockHoist = this.blockHoist;\n    return declar;\n  }\n\n  push(id: t.LVal, _init: t.Expression | null) {\n    const init = t.cloneNode(_init);\n    if (t.isObjectPattern(id)) {\n      this.pushObjectPattern(id, init);\n    } else if (t.isArrayPattern(id)) {\n      this.pushArrayPattern(id, init);\n    } else if (t.isAssignmentPattern(id)) {\n      this.pushAssignmentPattern(id, init);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(id, init));\n    }\n  }\n\n  toArray(node: t.Expression, count?: boolean | number) {\n    if (\n      this.iterableIsArray ||\n      (t.isIdentifier(node) && this.arrayRefSet.has(node.name))\n    ) {\n      return node;\n    } else {\n      return this.scope.toArray(node, count, this.arrayLikeIsIterable);\n    }\n  }\n\n  pushAssignmentPattern(\n    { left, right }: t.AssignmentPattern,\n    valueRef: t.Expression | null,\n  ) {\n    // handle array init hole\n    // const [x = 42] = [,];\n    // -> const x = 42;\n    if (valueRef === null) {\n      this.push(left, right);\n      return;\n    }\n\n    // we need to assign the current value of the assignment to avoid evaluating\n    // it more than once\n    const tempId = this.scope.generateUidIdentifierBasedOnNode(valueRef);\n\n    this.nodes.push(this.buildVariableDeclaration(tempId, valueRef));\n\n    const tempConditional = t.conditionalExpression(\n      t.binaryExpression(\n        \"===\",\n        t.cloneNode(tempId),\n        this.scope.buildUndefinedNode(),\n      ),\n      right,\n      t.cloneNode(tempId),\n    );\n\n    if (t.isPattern(left)) {\n      let patternId;\n      let node;\n\n      if (this.kind === \"const\" || this.kind === \"let\") {\n        patternId = this.scope.generateUidIdentifier(tempId.name);\n        node = this.buildVariableDeclaration(patternId, tempConditional);\n      } else {\n        patternId = tempId;\n\n        node = t.expressionStatement(\n          t.assignmentExpression(\"=\", t.cloneNode(tempId), tempConditional),\n        );\n      }\n\n      this.nodes.push(node);\n      this.push(left, patternId);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(left, tempConditional));\n    }\n  }\n\n  pushObjectRest(\n    pattern: t.ObjectPattern,\n    objRef: t.Expression,\n    spreadProp: t.RestElement,\n    spreadPropIndex: number,\n  ) {\n    const value = buildObjectExcludingKeys(\n      pattern.properties.slice(0, spreadPropIndex) as t.ObjectProperty[],\n      objRef,\n      this.scope,\n      name => this.addHelper(name),\n      this.objectRestNoSymbols,\n      this.useBuiltIns,\n    );\n    this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));\n  }\n\n  pushObjectProperty(prop: t.ObjectProperty, propRef: t.Expression) {\n    if (t.isLiteral(prop.key)) prop.computed = true;\n\n    const pattern = prop.value as t.LVal;\n    const objRef = t.memberExpression(\n      t.cloneNode(propRef),\n      prop.key,\n      prop.computed,\n    );\n\n    if (t.isPattern(pattern)) {\n      this.push(pattern, objRef);\n    } else {\n      this.nodes.push(this.buildVariableAssignment(pattern, objRef));\n    }\n  }\n\n  pushObjectPattern(pattern: t.ObjectPattern, objRef: t.Expression | null) {\n    // https://github.com/babel/babel/issues/681\n\n    if (!pattern.properties.length || objRef === null) {\n      this.nodes.push(\n        t.expressionStatement(\n          t.callExpression(\n            this.addHelper(\"objectDestructuringEmpty\"),\n            objRef !== null ? [objRef] : [],\n          ),\n        ),\n      );\n      return;\n    }\n\n    // if we have more than one properties in this pattern and the objectRef is a\n    // member expression then we need to assign it to a temporary variable so it's\n    // only evaluated once\n\n    if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {\n      const temp = this.scope.generateUidIdentifierBasedOnNode(objRef);\n      this.nodes.push(this.buildVariableDeclaration(temp, objRef));\n      objRef = temp;\n    }\n\n    // Replace impure computed key expressions if we have a rest parameter\n    if (hasObjectRest(pattern)) {\n      let copiedPattern;\n      for (let i = 0; i < pattern.properties.length; i++) {\n        const prop = pattern.properties[i];\n        if (t.isRestElement(prop)) {\n          break;\n        }\n        const key = prop.key;\n        if (prop.computed && !this.scope.isPure(key)) {\n          const name = this.scope.generateUidIdentifierBasedOnNode(key);\n          this.nodes.push(\n            //@ts-expect-error PrivateName has been handled by destructuring-private\n            this.buildVariableDeclaration(name, key),\n          );\n          if (!copiedPattern) {\n            copiedPattern = pattern = {\n              ...pattern,\n              properties: pattern.properties.slice(),\n            };\n          }\n          copiedPattern.properties[i] = {\n            ...copiedPattern.properties[i],\n            key: name,\n          };\n        }\n      }\n    }\n    //\n\n    for (let i = 0; i < pattern.properties.length; i++) {\n      const prop = pattern.properties[i];\n      if (t.isRestElement(prop)) {\n        this.pushObjectRest(pattern, objRef, prop, i);\n      } else {\n        this.pushObjectProperty(prop, objRef);\n      }\n    }\n  }\n\n  canUnpackArrayPattern(\n    pattern: t.ArrayPattern,\n    arr: t.Expression,\n  ): arr is UnpackableArrayExpression {\n    // not an array so there's no way we can deal with this\n    if (!t.isArrayExpression(arr)) return false;\n\n    // pattern has less elements than the array and doesn't have a rest so some\n    // elements wont be evaluated\n    if (pattern.elements.length > arr.elements.length) return;\n    if (\n      pattern.elements.length < arr.elements.length &&\n      !hasArrayRest(pattern)\n    ) {\n      return false;\n    }\n\n    for (const elem of pattern.elements) {\n      // deopt on holes\n      if (!elem) return false;\n\n      // deopt on member expressions as they may be included in the RHS\n      if (t.isMemberExpression(elem)) return false;\n    }\n\n    for (const elem of arr.elements) {\n      // deopt on spread elements\n      if (t.isSpreadElement(elem)) return false;\n\n      // deopt call expressions as they might change values of LHS variables\n      if (t.isCallExpression(elem)) return false;\n\n      // deopt on member expressions as they may be getter/setters and have side-effects\n      if (t.isMemberExpression(elem)) return false;\n    }\n\n    // deopt on reference to left side identifiers\n    const bindings = t.getBindingIdentifiers(pattern);\n    const state: ArrayUnpackVisitorState = { deopt: false, bindings };\n\n    try {\n      t.traverse(arr, arrayUnpackVisitor, state);\n    } catch (e) {\n      if (e !== STOP_TRAVERSAL) throw e;\n    }\n\n    return !state.deopt;\n  }\n\n  pushUnpackedArrayPattern(\n    pattern: t.ArrayPattern,\n    arr: UnpackableArrayExpression,\n  ) {\n    for (let i = 0; i < pattern.elements.length; i++) {\n      const elem = pattern.elements[i];\n      if (t.isRestElement(elem)) {\n        this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));\n      } else {\n        this.push(elem, arr.elements[i]);\n      }\n    }\n  }\n\n  pushArrayPattern(pattern: t.ArrayPattern, arrayRef: t.Expression | null) {\n    if (arrayRef === null) {\n      this.nodes.push(\n        t.expressionStatement(\n          t.callExpression(this.addHelper(\"objectDestructuringEmpty\"), []),\n        ),\n      );\n      return;\n    }\n    if (!pattern.elements) return;\n\n    // optimise basic array destructuring of an array expression\n    //\n    // we can't do this to a pattern of unequal size to it's right hand\n    // array expression as then there will be values that wont be evaluated\n    //\n    // eg: let [a, b] = [1, 2];\n\n    if (this.canUnpackArrayPattern(pattern, arrayRef)) {\n      return this.pushUnpackedArrayPattern(pattern, arrayRef);\n    }\n\n    // if we have a rest then we need all the elements so don't tell\n    // `scope.toArray` to only get a certain amount\n\n    const count = !hasArrayRest(pattern) && pattern.elements.length;\n\n    // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will\n    // return a locally bound identifier if it's been inferred to be an array,\n    // otherwise it'll be a call to a helper that will ensure it's one\n\n    const toArray = this.toArray(arrayRef, count);\n\n    if (t.isIdentifier(toArray)) {\n      // we've been given an identifier so it must have been inferred to be an\n      // array\n      arrayRef = toArray;\n    } else {\n      arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);\n      this.arrayRefSet.add(arrayRef.name);\n      this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));\n    }\n\n    //\n\n    for (let i = 0; i < pattern.elements.length; i++) {\n      const elem = pattern.elements[i];\n\n      // hole\n      if (!elem) continue;\n\n      let elemRef;\n\n      if (t.isRestElement(elem)) {\n        elemRef = this.toArray(arrayRef);\n        elemRef = t.callExpression(\n          t.memberExpression(elemRef, t.identifier(\"slice\")),\n          [t.numericLiteral(i)],\n        );\n\n        // set the element to the rest element argument since we've dealt with it\n        // being a rest already\n        this.push(elem.argument, elemRef);\n      } else {\n        elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);\n        this.push(elem, elemRef);\n      }\n    }\n  }\n\n  init(pattern: t.LVal, ref: t.Expression) {\n    // trying to destructure a value that we can't evaluate more than once so we\n    // need to save it to a variable\n\n    if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {\n      const memo = this.scope.maybeGenerateMemoised(ref, true);\n      if (memo) {\n        this.nodes.push(this.buildVariableDeclaration(memo, t.cloneNode(ref)));\n        ref = memo;\n      }\n    }\n\n    //\n\n    this.push(pattern, ref);\n\n    return this.nodes;\n  }\n}\n\ninterface ExcludingKey {\n  key: t.Expression | t.PrivateName;\n  computed: boolean;\n}\n\nexport function buildObjectExcludingKeys<T extends ExcludingKey>(\n  excludedKeys: T[],\n  objRef: t.Expression,\n  scope: Scope,\n  addHelper: File[\"addHelper\"],\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n): t.CallExpression {\n  // get all the keys that appear in this object before the current spread\n\n  const keys = [];\n  let allLiteral = true;\n  let hasTemplateLiteral = false;\n  for (let i = 0; i < excludedKeys.length; i++) {\n    const prop = excludedKeys[i];\n    const key = prop.key;\n    if (t.isIdentifier(key) && !prop.computed) {\n      keys.push(t.stringLiteral(key.name));\n    } else if (t.isTemplateLiteral(key)) {\n      keys.push(t.cloneNode(key));\n      hasTemplateLiteral = true;\n    } else if (t.isLiteral(key)) {\n      // @ts-expect-error todo(flow->ts) NullLiteral\n      keys.push(t.stringLiteral(String(key.value)));\n    } else if (t.isPrivateName(key)) {\n      // private key is not enumerable\n    } else {\n      keys.push(t.cloneNode(key));\n      allLiteral = false;\n    }\n  }\n\n  let value;\n  if (keys.length === 0) {\n    const extendsHelper = useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : addHelper(\"extends\");\n    value = t.callExpression(extendsHelper, [\n      t.objectExpression([]),\n      t.cloneNode(objRef),\n    ]);\n  } else {\n    let keyExpression: t.Expression = t.arrayExpression(keys);\n\n    if (!allLiteral) {\n      keyExpression = t.callExpression(\n        t.memberExpression(keyExpression, t.identifier(\"map\")),\n        [addHelper(\"toPropertyKey\")],\n      );\n    } else if (!hasTemplateLiteral && !t.isProgram(scope.block)) {\n      // Hoist definition of excluded keys, so that it's not created each time.\n      const programScope = scope.getProgramParent();\n      const id = programScope.generateUidIdentifier(\"excluded\");\n\n      programScope.push({\n        id,\n        init: keyExpression,\n        kind: \"const\",\n      });\n\n      keyExpression = t.cloneNode(id);\n    }\n\n    value = t.callExpression(\n      addHelper(`objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`),\n      [t.cloneNode(objRef), keyExpression],\n    );\n  }\n  return value;\n}\n\nexport function convertVariableDeclaration(\n  path: NodePath<t.VariableDeclaration>,\n  addHelper: File[\"addHelper\"],\n  arrayLikeIsIterable: boolean,\n  iterableIsArray: boolean,\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n) {\n  const { node, scope } = path;\n\n  const nodeKind = node.kind;\n  const nodeLoc = node.loc;\n  const nodes = [];\n\n  for (let i = 0; i < node.declarations.length; i++) {\n    const declar = node.declarations[i];\n\n    const patternId = declar.init;\n    const pattern = declar.id;\n\n    const destructuring = new DestructuringTransformer({\n      // @ts-expect-error(todo): avoid internal properties access\n      blockHoist: node._blockHoist,\n      nodes: nodes,\n      scope: scope,\n      kind: node.kind,\n      iterableIsArray,\n      arrayLikeIsIterable,\n      useBuiltIns,\n      objectRestNoSymbols,\n      addHelper,\n    });\n\n    if (t.isPattern(pattern)) {\n      destructuring.init(pattern, patternId);\n\n      if (+i !== node.declarations.length - 1) {\n        // we aren't the last declarator so let's just make the\n        // last transformed node inherit from us\n        t.inherits(nodes[nodes.length - 1], declar);\n      }\n    } else {\n      nodes.push(\n        t.inherits(\n          destructuring.buildVariableAssignment(pattern, patternId),\n          declar,\n        ),\n      );\n    }\n  }\n\n  let tail: t.VariableDeclaration | null = null;\n  const nodesOut = [];\n  for (const node of nodes) {\n    if (tail !== null && t.isVariableDeclaration(node)) {\n      // Create a single compound declarations\n      tail.declarations.push(...node.declarations);\n    } else {\n      // Make sure the original node kind is used for each compound declaration\n      node.kind = nodeKind;\n      // Propagate the original declaration node's location\n      if (!node.loc) {\n        node.loc = nodeLoc;\n      }\n      nodesOut.push(node);\n      tail = t.isVariableDeclaration(node) ? node : null;\n    }\n  }\n\n  if (nodesOut.length === 1) {\n    path.replaceWith(nodesOut[0]);\n  } else {\n    path.replaceWithMultiple(nodesOut);\n  }\n  scope.crawl();\n}\n\nexport function convertAssignmentExpression(\n  path: NodePath<t.AssignmentExpression>,\n  addHelper: File[\"addHelper\"],\n  arrayLikeIsIterable: boolean,\n  iterableIsArray: boolean,\n  objectRestNoSymbols: boolean,\n  useBuiltIns: boolean,\n) {\n  const { node, scope, parentPath } = path;\n\n  const nodes = [];\n\n  const destructuring = new DestructuringTransformer({\n    operator: node.operator,\n    scope: scope,\n    nodes: nodes,\n    arrayLikeIsIterable,\n    iterableIsArray,\n    objectRestNoSymbols,\n    useBuiltIns,\n    addHelper,\n  });\n\n  let ref: t.Identifier | void;\n  if (\n    (!parentPath.isExpressionStatement() &&\n      !parentPath.isSequenceExpression()) ||\n    path.isCompletionRecord()\n  ) {\n    ref = scope.generateUidIdentifierBasedOnNode(node.right, \"ref\");\n\n    nodes.push(\n      t.variableDeclaration(\"var\", [t.variableDeclarator(ref, node.right)]),\n    );\n\n    if (t.isArrayExpression(node.right)) {\n      destructuring.arrayRefSet.add(ref.name);\n    }\n  }\n\n  destructuring.init(node.left, ref || node.right);\n\n  if (ref) {\n    if (parentPath.isArrowFunctionExpression()) {\n      path.replaceWith(t.blockStatement([]));\n      nodes.push(t.returnStatement(t.cloneNode(ref)));\n    } else {\n      nodes.push(t.expressionStatement(t.cloneNode(ref)));\n    }\n  }\n\n  path.replaceWithMultiple(nodes);\n  scope.crawl();\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport {\n  DestructuringTransformer,\n  convertVariableDeclaration,\n  convertAssignmentExpression,\n  unshiftForXStatementBody,\n} from \"./util\";\nexport { buildObjectExcludingKeys, unshiftForXStatementBody } from \"./util\";\n\n/**\n * Test if a VariableDeclaration's declarations contains any Patterns.\n */\n\nfunction variableDeclarationHasPattern(node: t.VariableDeclaration) {\n  for (const declar of node.declarations) {\n    if (t.isPattern(declar.id)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport interface Options {\n  allowArrayLike?: boolean;\n  loose?: boolean;\n  useBuiltIns?: boolean;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const { useBuiltIns = false } = options;\n\n  const iterableIsArray = (api.assumption(\"iterableIsArray\") ??\n    options.loose ??\n    false) as boolean;\n  const arrayLikeIsIterable = (options.allowArrayLike ??\n    api.assumption(\"arrayLikeIsIterable\") ??\n    false) as boolean;\n  const objectRestNoSymbols = (api.assumption(\"objectRestNoSymbols\") ??\n    options.loose ??\n    false) as boolean;\n\n  return {\n    name: \"transform-destructuring\",\n\n    visitor: {\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n        if (!variableDeclarationHasPattern(declaration.node)) return;\n\n        const specifiers = [];\n\n        for (const name of Object.keys(path.getOuterBindingIdentifiers())) {\n          specifiers.push(\n            t.exportSpecifier(t.identifier(name), t.identifier(name)),\n          );\n        }\n\n        // Split the declaration and export list into two declarations so that the variable\n        // declaration can be split up later without needing to worry about not being a\n        // top-level statement.\n        path.replaceWith(declaration.node);\n        path.insertAfter(t.exportNamedDeclaration(null, specifiers));\n        path.scope.crawl();\n      },\n\n      ForXStatement(path) {\n        const { node, scope } = path;\n        const left = node.left;\n\n        if (t.isPattern(left)) {\n          // for ({ length: k } in { abc: 3 });\n\n          const temp = scope.generateUidIdentifier(\"ref\");\n\n          node.left = t.variableDeclaration(\"var\", [\n            t.variableDeclarator(temp),\n          ]);\n\n          path.ensureBlock();\n          const statementBody = (node.body as t.BlockStatement).body;\n          const nodes = [];\n          // todo: the completion of a for statement can only be observed from\n          // a do block (or eval that we don't support),\n          // but the new do-expression proposal plans to ban iteration ends in the\n          // do block, maybe we can get rid of this\n          if (statementBody.length === 0 && path.isCompletionRecord()) {\n            nodes.unshift(t.expressionStatement(scope.buildUndefinedNode()));\n          }\n\n          nodes.unshift(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", left, t.cloneNode(temp)),\n            ),\n          );\n\n          unshiftForXStatementBody(path, nodes);\n          scope.crawl();\n          return;\n        }\n\n        if (!t.isVariableDeclaration(left)) return;\n\n        const pattern = left.declarations[0].id;\n        if (!t.isPattern(pattern)) return;\n\n        const key = scope.generateUidIdentifier(\"ref\");\n        node.left = t.variableDeclaration(left.kind, [\n          t.variableDeclarator(key, null),\n        ]);\n\n        const nodes = [];\n\n        const destructuring = new DestructuringTransformer({\n          kind: left.kind,\n          scope: scope,\n          nodes: nodes,\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n          addHelper: name => this.addHelper(name),\n        });\n\n        destructuring.init(pattern, key);\n\n        unshiftForXStatementBody(path, nodes);\n        scope.crawl();\n      },\n\n      CatchClause({ node, scope }) {\n        const pattern = node.param;\n        if (!t.isPattern(pattern)) return;\n\n        const ref = scope.generateUidIdentifier(\"ref\");\n        node.param = ref;\n\n        const nodes = [];\n\n        const destructuring = new DestructuringTransformer({\n          kind: \"let\",\n          scope: scope,\n          nodes: nodes,\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n          addHelper: name => this.addHelper(name),\n        });\n        destructuring.init(pattern, ref);\n\n        node.body.body = nodes.concat(node.body.body);\n        scope.crawl();\n      },\n\n      AssignmentExpression(path, state) {\n        if (!t.isPattern(path.node.left)) return;\n        convertAssignmentExpression(\n          path,\n          name => state.addHelper(name),\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n        );\n      },\n\n      VariableDeclaration(path, state) {\n        const { node, parent } = path;\n        if (t.isForXStatement(parent)) return;\n        if (!parent || !path.container) return; // i don't know why this is necessary - TODO\n        if (!variableDeclarationHasPattern(node)) return;\n        convertVariableDeclaration(\n          path,\n          name => state.addHelper(name),\n          arrayLikeIsIterable,\n          iterableIsArray,\n          objectRestNoSymbols,\n          useBuiltIns,\n        );\n      },\n    },\n  };\n});\n"],"names":["unshiftForXStatementBody","statementPath","newStatements","ensureBlock","scope","node","bodyScopeBindings","get","bindings","hasShadowedBlockScopedBindings","Object","keys","some","name","hasBinding","body","t","blockStatement","unshift","hasArrayRest","pattern","elements","elem","isRestElement","hasObjectRest","properties","prop","STOP_TRAVERSAL","arrayUnpackVisitor","ancestors","state","length","isIdentifier","isReferenced","deopt","DestructuringTransformer","constructor","opts","blockHoist","operator","arrayRefSet","nodes","kind","iterableIsArray","arrayLikeIsIterable","objectRestNoSymbols","useBuiltIns","addHelper","Set","getExtendsHelper","memberExpression","identifier","buildVariableAssignment","id","init","op","isMemberExpression","expressionStatement","assignmentExpression","cloneNode","buildUndefinedNode","nodeInit","variableDeclaration","variableDeclarator","_blockHoist","buildVariableDeclaration","declar","push","_init","isObjectPattern","pushObjectPattern","isArrayPattern","pushArrayPattern","isAssignmentPattern","pushAssignmentPattern","toArray","count","has","left","right","valueRef","tempId","generateUidIdentifierBasedOnNode","tempConditional","conditionalExpression","binaryExpression","isPattern","patternId","generateUidIdentifier","pushObjectRest","objRef","spreadProp","spreadPropIndex","value","buildObjectExcludingKeys","slice","argument","pushObjectProperty","propRef","isLiteral","key","computed","callExpression","isStatic","temp","copiedPattern","i","isPure","canUnpackArrayPattern","arr","isArrayExpression","isSpreadElement","isCallExpression","getBindingIdentifiers","traverse","e","pushUnpackedArrayPattern","arrayExpression","arrayRef","add","elemRef","numericLiteral","ref","memo","maybeGenerateMemoised","excludedKeys","allLiteral","hasTemplateLiteral","stringLiteral","isTemplateLiteral","String","isPrivateName","extendsHelper","objectExpression","keyExpression","isProgram","block","programScope","getProgramParent","convertVariableDeclaration","path","nodeKind","nodeLoc","loc","declarations","destructuring","inherits","tail","nodesOut","isVariableDeclaration","replaceWith","replaceWithMultiple","crawl","convertAssignmentExpression","parentPath","isExpressionStatement","isSequenceExpression","isCompletionRecord","isArrowFunctionExpression","returnStatement","variableDeclarationHasPattern","declare","api","options","assertVersion","assumption","loose","allowArrayLike","visitor","ExportNamedDeclaration","declaration","specifiers","getOuterBindingIdentifiers","exportSpecifier","insertAfter","exportNamedDeclaration","ForXStatement","statementBody","CatchClause","param","concat","AssignmentExpression","VariableDeclaration","parent","isForXStatement","container"],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/lib/index.js":{"lineLengths":[13,0,62,0,62,0,32,9,8,11,29,32,31,58,0,39,17,3,0,42,17,3,0,67,17,3,0,14,1,0,46,31,10,83,14,32,43,0,19,17,17,19,55,43,9,7,0,5,4,3,0,27,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/src/util.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/src/index.ts"],"sourcesContent":["import type { FunctionExpression } from \"@babel/types\";\nimport type { NodePath } from \"@babel/traverse\";\n\n/**\n * Check whether a function expression can be affected by\n * https://bugs.webkit.org/show_bug.cgi?id=220517\n * @param path The function expression NodePath\n * @returns the name of function id if it should be transformed, otherwise returns false\n */\nexport function shouldTransform(\n  path: NodePath<FunctionExpression>,\n): string | false {\n  const { node } = path;\n  const functionId = node.id;\n  if (!functionId) return false;\n\n  const name = functionId.name;\n  // On collision, `getOwnBinding` returns the param binding\n  // with the id binding be registered as constant violation\n  const paramNameBinding = path.scope.getOwnBinding(name);\n  if (paramNameBinding === undefined) {\n    // Case 1: the function id is injected by babel-helper-name-function, which\n    // assigns `NOT_LOCAL_BINDING` to the `functionId` and thus not registering id\n    // in scope tracking\n    // Case 2: the function id is injected by a third party plugin which does not update the\n    // scope info\n    return false;\n  }\n  if (paramNameBinding.kind !== \"param\") {\n    // the function id does not reproduce in params\n    return false;\n  }\n\n  if (paramNameBinding.identifier === paramNameBinding.path.node) {\n    // the param binding is a simple parameter\n    // e.g. (function a(a) {})\n    return false;\n  }\n\n  return name;\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { shouldTransform } from \"./util\";\n\nexport default declare(api => {\n  api.assertVersion(\"^7.16.0\");\n\n  return {\n    name: \"plugin-bugfix-safari-id-destructuring-collision-in-function-expression\",\n\n    visitor: {\n      FunctionExpression(path) {\n        const name = shouldTransform(path);\n        if (name) {\n          // Now we have (function a([a]) {})\n          const { scope } = path;\n          // invariant: path.node.id is always an Identifier here\n          const newParamName = scope.generateUid(name);\n          scope.rename(name, newParamName);\n        }\n      },\n    },\n  };\n});\n"],"names":["shouldTransform","path","node","functionId","id","name","paramNameBinding","scope","getOwnBinding","undefined","kind","identifier","declare","api","assertVersion","visitor","FunctionExpression","newParamName","generateUid","rename"],"mappings":";;;;;;AASO,SAASA,eAAT,CACLC,IADK,EAEW;AAChB,EAAM,MAAA;AAAEC,IAAAA,IAAAA;AAAF,GAAA,GAAWD,IAAjB,CAAA;AACA,EAAA,MAAME,UAAU,GAAGD,IAAI,CAACE,EAAxB,CAAA;AACA,EAAA,IAAI,CAACD,UAAL,EAAiB,OAAO,KAAP,CAAA;AAEjB,EAAA,MAAME,IAAI,GAAGF,UAAU,CAACE,IAAxB,CAAA;AAGA,EAAMC,MAAAA,gBAAgB,GAAGL,IAAI,CAACM,KAAL,CAAWC,aAAX,CAAyBH,IAAzB,CAAzB,CAAA;;AACA,EAAIC,IAAAA,gBAAgB,KAAKG,SAAzB,EAAoC;AAMlC,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;;AACD,EAAA,IAAIH,gBAAgB,CAACI,IAAjB,KAA0B,OAA9B,EAAuC;AAErC,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;;AAED,EAAIJ,IAAAA,gBAAgB,CAACK,UAAjB,KAAgCL,gBAAgB,CAACL,IAAjB,CAAsBC,IAA1D,EAAgE;AAG9D,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;;AAED,EAAA,OAAOG,IAAP,CAAA;AACD;;ACrCD,YAAeO,yBAAO,CAACC,GAAG,IAAI;AAC5BA,EAAAA,GAAG,CAACC,aAAJ,CAAkB,SAAlB,CAAA,CAAA;AAEA,EAAO,OAAA;AACLT,IAAAA,IAAI,EAAE,wEADD;AAGLU,IAAAA,OAAO,EAAE;AACPC,MAAAA,kBAAkB,CAACf,IAAD,EAAO;AACvB,QAAA,MAAMI,IAAI,GAAGL,eAAe,CAACC,IAAD,CAA5B,CAAA;;AACA,QAAA,IAAII,IAAJ,EAAU;AAER,UAAM,MAAA;AAAEE,YAAAA,KAAAA;AAAF,WAAA,GAAYN,IAAlB,CAAA;AAEA,UAAA,MAAMgB,YAAY,GAAGV,KAAK,CAACW,WAAN,CAAkBb,IAAlB,CAArB,CAAA;AACAE,UAAAA,KAAK,CAACY,MAAN,CAAad,IAAb,EAAmBY,YAAnB,CAAA,CAAA;AACD,SAAA;AACF,OAAA;;AAVM,KAAA;AAHJ,GAAP,CAAA;AAgBD,CAnBqB,CAAtB;;;;","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/lib/index.js":{"lineLengths":[13,0,62,0,62,89,108,34,0,48,88,70,1,0,32,26,20,0,96,11,10,21,22,0,52,117,57,117,5,3,0,43,27,0,94,26,20,7,0,35,0,57,22,11,20,7,5,3,0,15,1,0,46,40,0,23,110,108,10,61,14,63,36,58,26,23,13,9,7,0,5,4,3,0,27,33,0],"data":{"version":3,"file":"index.js","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/src/util.ts","file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/src/index.ts"],"sourcesContent":["import { skipTransparentExprWrappers } from \"@babel/helper-skip-transparent-expression-wrappers\";\nimport type { NodePath } from \"@babel/traverse\";\nimport { types as t } from \"@babel/core\";\n// https://crbug.com/v8/11558\n\n// check if there is a spread element followed by another argument.\n// (...[], 0) or (...[], ...[])\n\nfunction matchAffectedArguments(argumentNodes) {\n  const spreadIndex = argumentNodes.findIndex(node => t.isSpreadElement(node));\n  return spreadIndex >= 0 && spreadIndex !== argumentNodes.length - 1;\n}\n\n/**\n * Check whether the optional chain is affected by https://crbug.com/v8/11558.\n * This routine MUST not manipulate NodePath\n *\n * @export\n * @param {(NodePath<t.OptionalMemberExpression | t.OptionalCallExpression>)} path\n * @returns {boolean}\n */\nexport function shouldTransform(\n  path: NodePath<t.OptionalMemberExpression | t.OptionalCallExpression>,\n): boolean {\n  let optionalPath: NodePath<t.Expression> = path;\n  const chains = [];\n  while (\n    optionalPath.isOptionalMemberExpression() ||\n    optionalPath.isOptionalCallExpression()\n  ) {\n    const { node } = optionalPath;\n    chains.push(node);\n\n    if (optionalPath.isOptionalMemberExpression()) {\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    }\n  }\n  for (let i = 0; i < chains.length; i++) {\n    const node = chains[i];\n    if (\n      t.isOptionalCallExpression(node) &&\n      matchAffectedArguments(node.arguments)\n    ) {\n      // f?.(...[], 0)\n      if (node.optional) {\n        return true;\n      }\n      // o?.m(...[], 0)\n      // when node.optional is false, chains[i + 1] is always well defined\n      const callee = chains[i + 1];\n      if (t.isOptionalMemberExpression(callee, { optional: true })) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { transform } from \"@babel/plugin-proposal-optional-chaining\";\nimport { shouldTransform } from \"./util\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport default declare(api => {\n  api.assertVersion(7);\n\n  const noDocumentAll = (api.assumption(\"noDocumentAll\") ?? false) as boolean;\n  const pureGetters = (api.assumption(\"pureGetters\") ?? false) as boolean;\n\n  return {\n    name: \"bugfix-v8-spread-parameters-in-optional-chaining\",\n\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(\n        path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n      ) {\n        if (shouldTransform(path)) {\n          transform(path, { noDocumentAll, pureGetters });\n        }\n      },\n    },\n  };\n});\n"],"names":["matchAffectedArguments","argumentNodes","spreadIndex","findIndex","node","t","isSpreadElement","length","shouldTransform","path","optionalPath","chains","isOptionalMemberExpression","isOptionalCallExpression","push","skipTransparentExprWrappers","get","i","arguments","optional","callee","declare","api","assertVersion","noDocumentAll","assumption","pureGetters","name","visitor","transform"],"mappings":"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","sourceRoot":""},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/test/app.test.js":{"lineLengths":[13,0,31,0,31,38,70,45,7,5,3,1076],"data":{"version":3,"names":["assert","require","describe","it","equal","indexOf"],"sourceRoot":"","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/test/app.test.js"],"sourcesContent":["let assert = require(\"assert\");\ndescribe(\"Array\", function () {\n  describe(\"#indexOf()\", function () {\n    it(\"should return -1 when the value is not present\", function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n"],"mappings":";;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACAC,QAAQ,CAAC,OAAD,EAAU,YAAY;EAC5BA,QAAQ,CAAC,YAAD,EAAe,YAAY;IACjCC,EAAE,CAAC,gDAAD,EAAmD,YAAY;MAC/DH,MAAM,CAACI,KAAP,CAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,OAAV,CAAkB,CAAlB,CAAb,EAAmC,CAAC,CAApC;IACD,CAFC,CAAF;EAGD,CAJO,CAAR;AAKD,CANO,CAAR"},"url":null},"file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/test/user.test.js":{"lineLengths":[13,0,52,0,61,0,56,0,95,0,25,0,23,0,37,0,46,37,5,27,5,43,52,21,34,34,40,38,34,29,6,0,93,39,37,61,100,64,13,7,5,5,43,5,0,59,21,25,25,36,38,34,29,6,0,93,39,62,100,13,7,5,3,5688],"data":{"version":3,"names":["dotenv","config","chai","should","use","chaiHttp","server","process","env","APP_BACKEND_DOMAIN","describe","it","done","userId","Math","floor","random","newUser","request","post","send","end","err","response","have","status","be","a","body","property","eq"],"sourceRoot":"","sources":["file:///home/abiseth/studies/ATLP/ATLP_PROJECT/strikers-bn-be/test/user.test.js"],"sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport dotenv from 'dotenv';\n\ndotenv.config();\nchai.should();\nchai.use(chaiHttp);\n\nconst server = process.env.APP_BACKEND_DOMAIN;\n\ndescribe('POST /v1/api/user', () => {\n    /**\n     * Should POST a new user\n     */\n\n    it('It should POST a new user', (done) => {\n        const userId = Math.floor(Math.random()*1000);\n        const newUser = {\n            \"firstname\": `Abi${userId}`,\n            \"lastname\": `Seth${userId}`,\n            \"email\": `abi${userId}@gmail.com`,\n            \"roleId\": \"9340272366132983293\",\n            \"phoneNumber\": \"0781294147\",\n            \"password\": \"pass12345\"\n        }\n\n        chai.request(server)\n            .post(\"/v1/api/user\")\n            .send(newUser)\n            .end((err, response) => {\n                response.should.have.status(201);\n                response.should.be.a('object');\n                response.body.should.have.property('success').eq(true);\n                response.body.should.have.property('message').eq(\"Account created. Please verify via email!\");\n                response.body.should.have.property('data').be.a('object');    \n                done();\n            })\n    })\n\n    /**\n     * Should NOT POST a duplicate user email\n     */\n\n    it('It should NOT POST a duplicate user email', (done) => {\n        const newUser = {\n            \"firstname\": \"Abi\",\n            \"lastname\": \"Seth\",\n            \"email\": \"abi_seth@gmail.com\",\n            \"roleId\": \"9340272366132983293\",\n            \"phoneNumber\": \"0781294147\",\n            \"password\": \"pass12345\"\n        }\n\n        chai.request(server)\n            .post(\"/v1/api/user\")\n            .send(newUser)\n            .end((err, response) => {\n                response.should.have.status(403);\n                response.body.should.have.property('success').eq(false);\n                response.body.should.have.property('message').eq(\"This email address has already been used!\");    \n                done();\n            })\n    })\n\n});"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,eAAA,CAAOC,MAAP;;AACAC,aAAA,CAAKC,MAAL;;AACAD,aAAA,CAAKE,GAAL,CAASC,iBAAT;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA3B;AAEAC,QAAQ,CAAC,mBAAD,EAAsB,MAAM;EAChC;AACJ;AACA;EAEIC,EAAE,CAAC,2BAAD,EAA+BC,IAAD,IAAU;IACtC,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,IAAzB,CAAf;IACA,MAAMC,OAAO,GAAG;MACZ,aAAc,MAAKJ,MAAO,EADd;MAEZ,YAAa,OAAMA,MAAO,EAFd;MAGZ,SAAU,MAAKA,MAAO,YAHV;MAIZ,UAAU,qBAJE;MAKZ,eAAe,YALH;MAMZ,YAAY;IANA,CAAhB;;IASAX,aAAA,CAAKgB,OAAL,CAAaZ,MAAb,EACKa,IADL,CACU,cADV,EAEKC,IAFL,CAEUH,OAFV,EAGKI,GAHL,CAGS,CAACC,GAAD,EAAMC,QAAN,KAAmB;MACpBA,QAAQ,CAACpB,MAAT,CAAgBqB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;MACAF,QAAQ,CAACpB,MAAT,CAAgBuB,EAAhB,CAAmBC,CAAnB,CAAqB,QAArB;MACAJ,QAAQ,CAACK,IAAT,CAAczB,MAAd,CAAqBqB,IAArB,CAA0BK,QAA1B,CAAmC,SAAnC,EAA8CC,EAA9C,CAAiD,IAAjD;MACAP,QAAQ,CAACK,IAAT,CAAczB,MAAd,CAAqBqB,IAArB,CAA0BK,QAA1B,CAAmC,SAAnC,EAA8CC,EAA9C,CAAiD,2CAAjD;MACAP,QAAQ,CAACK,IAAT,CAAczB,MAAd,CAAqBqB,IAArB,CAA0BK,QAA1B,CAAmC,MAAnC,EAA2CH,EAA3C,CAA8CC,CAA9C,CAAgD,QAAhD;MACAf,IAAI;IACP,CAVL;EAWH,CAtBC,CAAF;EAwBA;AACJ;AACA;;EAEID,EAAE,CAAC,2CAAD,EAA+CC,IAAD,IAAU;IACtD,MAAMK,OAAO,GAAG;MACZ,aAAa,KADD;MAEZ,YAAY,MAFA;MAGZ,SAAS,oBAHG;MAIZ,UAAU,qBAJE;MAKZ,eAAe,YALH;MAMZ,YAAY;IANA,CAAhB;;IASAf,aAAA,CAAKgB,OAAL,CAAaZ,MAAb,EACKa,IADL,CACU,cADV,EAEKC,IAFL,CAEUH,OAFV,EAGKI,GAHL,CAGS,CAACC,GAAD,EAAMC,QAAN,KAAmB;MACpBA,QAAQ,CAACpB,MAAT,CAAgBqB,IAAhB,CAAqBC,MAArB,CAA4B,GAA5B;MACAF,QAAQ,CAACK,IAAT,CAAczB,MAAd,CAAqBqB,IAArB,CAA0BK,QAA1B,CAAmC,SAAnC,EAA8CC,EAA9C,CAAiD,KAAjD;MACAP,QAAQ,CAACK,IAAT,CAAczB,MAAd,CAAqBqB,IAArB,CAA0BK,QAA1B,CAAmC,SAAnC,EAA8CC,EAA9C,CAAiD,2CAAjD;MACAlB,IAAI;IACP,CARL;EASH,CAnBC,CAAF;AAqBH,CAtDO,CAAR"},"url":null}}}